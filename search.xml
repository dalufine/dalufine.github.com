<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[彻底搞懂startActivityForResult在FragmentActivity和Fragment中的异同]]></title>
      <url>http://dalufan.com/2017/11/07/android-startActivityForResult-FragmentActivity-Fragment/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Activity、FragmentActivity、Fragment中都有startActivityForResult()方法，也都有用以接收结果的onActivityResult()方法，那他们有什么区别吗？用法上有什么不同吗？</p>
<p>之所以注意到这个问题，是因为最近一次在Fragment中使用了getActivity().startActivityForResult()去调用图片选择器，结果发现在Fragment的onActivityResult无法接收到返回的结果。</p>
<p>仔细研究了一下原因，发现了一些以前没注意到的问题，于是写出来分享给大家。</p>
<a id="more"></a> 
<h3 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h3><p>假设有一个FragmentActivity中嵌套一个Fragment，它们各自使用startActivityForResult发起数据请求。<br>经测，目标所返回结果数据，能否被它们各自的onActivityResult方法所接收的情况如下：</p>
<ul>
<li>Fragment和FragmentActivity都能接收到自己的发起的请求所返回的结果</li>
<li>FragmentActivity发起的请求，Fragment完全接收不到结果</li>
<li>Fragment发起的请求，虽然在FragmentActivity中能获取到结果，但是requestCode完全对应不上<br>为什么会有这种表现呢？往下看。</li>
</ul>
<h3 id="找原因"><a href="#找原因" class="headerlink" title="找原因"></a>找原因</h3><p>仔细看文档的话，发现了一个以前没注意到的点：FragmentActivity相对于它的父类Activity，对startActivityForResult的描述是有些改动的。</p>
<p>FragmentActivity.startActivityForResult的文档是这样的：</p>
<blockquote>
<p>修改了标准行为，以使它能够把结果传递到Fragment。<br>添加了一个限制：requestCode必须&lt;=0xffff</p>
</blockquote>
<p>这里的标准行为，自然指的是正常的Activity.startActivityForResult的功能。而新增加的对requestCode的大小限制看起来很蹊跷，估计是有什么猫腻在里面了。</p>
<p>OK，不卖关子，直接看源码！</p>
<h4 id="Fragment-startActivityForResult"><a href="#Fragment-startActivityForResult" class="headerlink" title="Fragment.startActivityForResult"></a>Fragment.startActivityForResult</h4><p>从Fragment的startActivityForResult开始：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(Intent intent, <span class="keyword">int</span> requestCode, @Nullable Bundle options)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (mHost == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fragment "</span> + <span class="keyword">this</span> + <span class="string">" not attached to Activity"</span>);</div><div class="line">       &#125;</div><div class="line">       mHost.onStartActivityFromFragment(<span class="keyword">this</span> <span class="comment">/*fragment*/</span>, intent, requestCode, options);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>Fragment.startActivityForResult本身的代码很简单，就是调用了一个mHost.onStartActivityFromFragment的方法。<br>—— Fragment被添加到一个FragmentActivity中之后，这里的mHost即是当前FragmentActivity的一个内部类FragmentActivity.HostCallbacks，它持有对FragmentActivity的引用，mHost.onStartActivityFromFragment被简单转发到当前FragmentActivity的startActivityFromFragment()方法。</p>
<blockquote>
<p>Fragment.startActivityForResult<br>↓<br>FragmentActivitymHost.HostCallbacks.onStartActivityFromFragment<br>↓<br>FragmentActivity.startActivityFromFragment</p>
</blockquote>
<h4 id="FragmentActivity-startActivityFromFragment"><a href="#FragmentActivity-startActivityFromFragment" class="headerlink" title="FragmentActivity.startActivityFromFragment"></a>FragmentActivity.startActivityFromFragment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityFromFragment</span><span class="params">(Fragment fragment, Intent intent,</span></span></div><div class="line">        <span class="keyword">int</span> requestCode, @Nullable Bundle options) &#123;</div><div class="line">    mStartedActivityFromFragment = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (requestCode == -<span class="number">1</span>) &#123;</div><div class="line">            ActivityCompat.startActivityForResult(<span class="keyword">this</span>, intent, -<span class="number">1</span>, options);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((requestCode&amp;<span class="number">0xffff0000</span>) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Can only use lower 16 bits for requestCode"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> requestIndex = allocateRequestIndex(fragment);</div><div class="line">        ActivityCompat.startActivityForResult(</div><div class="line">            <span class="keyword">this</span>, intent, ((requestIndex+<span class="number">1</span>)&lt;&lt;<span class="number">16</span>) + (requestCode&amp;<span class="number">0xffff</span>), options);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        mStartedActivityFromFragment = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析一下这段代码：</p>
<ol>
<li>mStartedActivityFromFragment = true首先标记一下请求是来自于Fragment。</li>
<li>if(requestCode == 1)的内容不用管，它是来自于startActivity（没有ForResult）的情况。</li>
<li>然后的代码添加了对requestCode必须小于0xffff的限制 if((requestCode&amp;0xffff0000) ！= 0){/<em>抛异常</em>/}</li>
</ol>
<blockquote>
<p>16进制：两个字符表示一个字节，一个字符也是一个字节，一个字节占8位，用4位0-1代码才能表示一个16进制数，所以一个16进制符号占4位，一个字节可以用两个16进制符号表示</p>
</blockquote>
<p>我们是从Fragment.startActivityForResult追踪到这里的，所以虽然文档没有明确说，但是从这里可以看出：Fragment.startActivityForResult的requestCode也是必须要&lt;=0xffff的。</p>
<p>然后，下面是关键点了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ActivityCompat.startActivityForResult(</div><div class="line">            <span class="keyword">this</span>, intent, ((requestIndex+<span class="number">1</span>)&lt;&lt;<span class="number">16</span>) + (requestCode&amp;<span class="number">0xffff</span>), options);</div></pre></td></tr></table></figure>
<p>其中ActivityCompat是一个帮助类，ActivityCompat.startActivityForResult最终还是调用的Activity.startActivityForResult，这个先不表。<br>这里的关键点就是，通过一个<code>requestCode=&gt;((requestIndex+1)&lt;&lt;16)+(requestCode&amp;0xffff)</code>的映射，Fragment.startActivityForResult最终还是调用了Activity.startActivityForResult。</p>
<p>调用了Activity.startActivityForResult其实是意料之中的事情，只是从requestCode到<code>((requestIndex+1)&lt;&lt;16)+(requestCode&amp;0xffff)</code>是做了什么呢？</p>
<p>通过分析，得知requestIndex是请求的序号，值为从0递增的整数值。<br>又从前面得知，requestCode的本身的值是小于0xffff的，所以<code>((requestIndex+1)&lt;&lt;16)+(requestCode&amp;0xffff)</code>简化一下就是：<code>(requestIndex+1)*65536+requestCode</code>。<br>——所以这个值是必定大于0xffff的。<br>在看一下FragmentActivity.startActivityForResult的代码：</p>
<h4 id="FragmentActivity-startActivityForResult"><a href="#FragmentActivity-startActivityForResult" class="headerlink" title="FragmentActivity.startActivityForResult"></a>FragmentActivity.startActivityForResult</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(Intent intent, <span class="keyword">int</span> requestCode)</span> </span>&#123;</div><div class="line">    <span class="comment">// If this was started from a Fragment we've already checked the upper 16 bits were not in</span></div><div class="line">    <span class="comment">// use, and then repurposed them for the Fragment's index.</span></div><div class="line">    <span class="keyword">if</span> (!mStartedActivityFromFragment) &#123;</div><div class="line">        <span class="keyword">if</span> (requestCode != -<span class="number">1</span> &amp;&amp; (requestCode&amp;<span class="number">0xffff0000</span>) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Can only use lower 16 bits for requestCode"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.startActivityForResult(intent, requestCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，判断了一下如果请求不是来自于Fragment，也就是来自于FragmentActivity自身，就限制requestCode不能大于0xffff。</p>
<p>再加上前文所说的，Fragment.startActivityForResult最终映射的requestCode值必定大于0xffff，所以，现在可以得出了一个初步的结果：<br>SDK把Fragment和FragmentActivity的的ruquestCode都限制在了0xffff以内，然后对于Fragment所发起的请求，都通过一个映射，把最终的requestCode变成了一个大于0xffff的值。</p>
<p>——到现在，已经可以推测到：在获取的结果的时候，也是会通过跟0xffff这个数值来比较，来区分是要把结果交给FragmentActivity还是Fragment来处理。</p>
<p>来验证一下看看：</p>
<h4 id="FragmentActivity-onActivityResult"><a href="#FragmentActivity-onActivityResult" class="headerlink" title="FragmentActivity.onActivityResult"></a>FragmentActivity.onActivityResult</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    mFragments.noteStateNotSaved();</div><div class="line">    <span class="keyword">int</span> requestIndex = requestCode&gt;&gt;<span class="number">16</span>;</div><div class="line">    <span class="keyword">if</span> (requestIndex != <span class="number">0</span>) &#123;</div><div class="line">        requestIndex--;</div><div class="line"></div><div class="line">        String who = mPendingFragmentActivityResults.get(requestIndex);</div><div class="line">        mPendingFragmentActivityResults.remove(requestIndex);</div><div class="line">        <span class="keyword">if</span> (who == <span class="keyword">null</span>) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"Activity result delivered for unknown Fragment."</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        Fragment targetFragment = mFragments.findFragmentByWho(who);</div><div class="line">        <span class="keyword">if</span> (targetFragment == <span class="keyword">null</span>) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"Activity result no fragment exists for who: "</span> + who);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            targetFragment.onActivityResult(requestCode&amp;<span class="number">0xffff</span>, resultCode, data);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK，一目了然，证实了我们上面的推论。<br>在FragmentActivity.onActivityResult中，只有requestCode&gt;0xffff时，这里得到的requestIndex才能满足requestIndex != 0，然后进入下面的逻辑：把requestCode通过反向之前的映射关系，还原成最初Fragment所指定的requestCode，交给Fragment.onActivityResult进行处理。</p>
<h3 id="解释最初的问题"><a href="#解释最初的问题" class="headerlink" title="解释最初的问题"></a>解释最初的问题</h3><p>所以，现在也能明白了为什么会有前面说的这几个表现：</p>
<ol>
<li>Fragment和FragmentActivity都能接收到自己的发起的请求所返回的结果：那当然，就是这么设计的。</li>
<li>FragmentActivity发起的请求，Fragment完全接收不到结果：被FragmentActivity拦截了，没有转发到Fragment</li>
<li>Fragment发起的请求，虽然在FragmentActivity中能获取到结果，但是requestCode完全对应不上：如果是Fragment发起的请求，那么在FragmentActivity.onActivityResult获取到的requestCode，其实是经过映射之后一个的大于0xffff的值，已经不是最初Fragment发请求时的requestCode了。</li>
</ol>
<p>为什么要用映射requestCode的方法来区分请求是否来自Fragment呢？绕这么一个弯子，直接使用一个变量来标记不行么？</p>
<p>直接使用一个变量来标记还真不行：因为我们自己最终写业务代码MyFragmentActivity肯定是继承自FragmentActivity的，而MyFragmentActivity.onActivityResult的调用会先于FragmentActivity.onActivityResult。<br>所以无论是Fragment还是MyFragmentActivity所发起的startActivityForResult请求，最终在获取结果的时候是一定是会通过MyFragmentActivity.onActivityResult的。<br>如果在这里使用一个变量来标记请求的来源，那实质上就是依赖于开发者自己来判断——这是繁琐而且不可控的。<br>而相比较而言，使用一个简单的映射规则，就能把来自Fragment的请求和来自FragmentActivity自身请求区分开来——十分简单可靠。</p>
<p>因此，使用startActivityForResult的时候，requestCode一定不要大于0xffff(65535)。<br>如果希望在Fragment的onActivityResult接收数据，就要调用Fragment.startActivityForResult，而不是Fragment.getActivity().startActivityForResult。</p>
<hr>
<p>参考链接：<a href="http://www.jianshu.com/p/ca91fa528d5c" target="_blank" rel="external">简书</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android动态更新APP图标和label]]></title>
      <url>http://dalufan.com/2017/02/03/android-dynamicicon-example/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/dalufine/dynamicicon" target="_blank" rel="external">source</a></p>
<p>在AndroidMainifest中，有两个属性：</p>
<p>决定应用程序最先启动的Activity</p>
<blockquote>
<p>android.intent.action.MAIN</p>
</blockquote>
<p>决定应用程序是否显示在程序列表里</p>
<blockquote>
<p>android.intent.category.LAUNCHER</p>
</blockquote>
<p>原理：<code>activity-alias</code> + <code>PackageManager.setComponentEnabledSetting</code></p>
<a id="more"></a>
<p>当修改AndroidMainifest为如下时，可以验证一个问题：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.dalu.dynamicicon"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="comment">&lt;!--default--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="comment">&lt;!--&lt;category android:name="android.intent.category.LAUNCHER" /&gt;--&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--如果没有上面的default，也可以下面的icon6或者icon10的enable设置为true，即为默认引导--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity-alias</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".icon6"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"false"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher6"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"icon6"</span></div><div class="line">            <span class="attr">android:targetActivity</span>=<span class="string">".MainActivity"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--启用icon10--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity-alias</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".icon10"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher10"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"icon10"</span></div><div class="line">            <span class="attr">android:targetActivity</span>=<span class="string">".MainActivity"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果当前已经启动icon6了，用IDE直接覆盖安装上面这个配置的app时，会提示</p>
<blockquote>
<p>Error while executing: am start -n “com.dalu.dynamicicon/com.dalu.dynamicicon.icon6” -a android.intent.action.MAIN -c android.intent.category.LAUNCHER<br>WARNING: linker: /system/lib/libhoudini.so has text relocations. This is wasting memory and prevents security hardening. Please fix.<br>Starting: Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.dalu.dynamicicon/.icon6 }<br>Error type 3<br>Error: Activity class {com.dalu.dynamicicon/com.dalu.dynamicicon.icon6} does not exist.<br>Error while Launching activity</p>
</blockquote>
<p>或者app升级，会导致找不到应用图标</p>
<p>原因是，当前app的引导是icon6，若想正确升级，需要启动icon6，而把icon10的enabled设置为false</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ViewPager+Fragment LazyLoad 最优解]]></title>
      <url>http://dalufan.com/2017/01/28/android-ViewPager-Fragment-LazyLoad/</url>
      <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/c5d29a0c3f4c" target="_blank" rel="external">source</a></p>
<p>ViewPager+Fragment的模式再常见不过了，以国民应用微信为例，假设微信也是ViewPager+Fragment的实现方式，那表现形式上就是一个ViewPager管理了四个Fragment，左右滑动来回切换。但是ViewPager有一个奇葩的特性叫：预加载，比如打开微信，首先看到的是第一个Tab（微信），但事实上第二个Tab（通讯录）已经加载好了。当选择第二个Tab（通讯录），第三个Tab（发现）已经加载好了，以此类推。</p>
<p>但上述ViewPager+Fragment的这种组合并不完美，因为我希望用户选择了哪个Tab再去加载哪个Tab的数据，而不要去做预加载，假如当前页面和预加载页面都有大量的网络请求，可能就会比较慢，有很多请求在排队。关于这个问题，也有很偏激的做法，比如弃用ViewPager，自己手动管理Fragment，或者直接禁掉ViewPager预加载。有一种比较合适的方案是保持ViewPager预加载的特性，但是只初始化View，选择当前Tab的时候再进行网络请求。关于这一方案的实现，也是众说纷纭，千奇百怪。最后，还是选择男神Stay的方案。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePageFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> isViewInitiated;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> isVisibleToUser;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> isDataInitiated;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">        isViewInitiated = <span class="keyword">true</span>;</div><div class="line">        prepareFetchData();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</div><div class="line">        <span class="keyword">this</span>.isVisibleToUser = isVisibleToUser;</div><div class="line">        prepareFetchData();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fetchData</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">prepareFetchData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> prepareFetchData(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">prepareFetchData</span><span class="params">(<span class="keyword">boolean</span> forceUpdate)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isVisibleToUser &amp;&amp; isViewInitiated &amp;&amp; (!isDataInitiated || forceUpdate)) &#123;</div><div class="line">            fetchData();</div><div class="line">            isDataInitiated = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个父类，看代码这里只有一个setUserVisibleHint需要说下，这是一个相当生僻的方法，我们可以用这个方法来判断当前UI是否可见，所以在prepareFetchData方法里我们做如下判断：就是当前UI可见，并且fragment已经初始化完毕，如果网络数据未加载，那么请求数据，或者需要强制刷新页面，那么也去请求数据，So easy。子Fragment只需要继承父类，实现抽象方法，在fetchData（）里做网络请求或者其他耗时操作即可。再在写个子类吧。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageFragment</span> <span class="keyword">extends</span> <span class="title">BasePageFragment</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PageFragment <span class="title">newInstance</span><span class="params">(String title)</span></span>&#123;</div><div class="line">        PageFragment fragment = <span class="keyword">new</span> PageFragment();</div><div class="line">        Bundle args = <span class="keyword">new</span> Bundle();</div><div class="line">        args.putString(<span class="string">"key_fragment_title"</span>, title);</div><div class="line">        fragment.setArguments(args);</div><div class="line">        <span class="keyword">return</span> fragment;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line">    <span class="keyword">private</span> TextView tv;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        title = getArguments().getString(<span class="string">"key_fragment_title"</span>);</div><div class="line">        Trace.d(title + <span class="string">":onCreate"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        Trace.d(title + <span class="string">":onResume"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        Trace.d(title + <span class="string">":onCreateView"</span>);</div><div class="line">        tv = <span class="keyword">new</span> TextView(getActivity());</div><div class="line">        <span class="keyword">return</span> tv;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fetchData</span><span class="params">()</span> </span>&#123;</div><div class="line">        tv.setText(title);</div><div class="line">        <span class="comment">/** * 在这里请求网络。 */</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你也有这样的需求或者烦恼，保证药到病除。</p>
<p>有同学说实践过程中遇到了些问题，比如Fragment只刷新一次，这个问题只要手动调用prepareFetchData（），传true即可强制刷新了。还有同学质疑setUserVisibleHint（）和onActivityCreated（）的执行先后的问题。关于这个请看下图。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fcbyermr4aj30hs09vdhb.jpg" alt=""></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java更好的单例写法]]></title>
      <url>http://dalufan.com/2017/01/08/java-singleton-good-write/</url>
      <content type="html"><![CDATA[<h3 id="0x00-一般写法"><a href="#0x00-一般写法" class="headerlink" title="0x00 一般写法"></a>0x00 一般写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="0x01-线程安全"><a href="#0x01-线程安全" class="headerlink" title="0x01 线程安全"></a>0x01 线程安全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="0x02-更好的写法-volatile"><a href="#0x02-更好的写法-volatile" class="headerlink" title="0x02 更好的写法-volatile"></a>0x02 更好的写法-volatile</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">                    singleton = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="0x03-更好的写法-静态内部类"><a href="#0x03-更好的写法-静态内部类" class="headerlink" title="0x03 更好的写法-静态内部类"></a>0x03 更好的写法-静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonLoader</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonLoader.INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RecycleView的使用及坑]]></title>
      <url>http://dalufan.com/2016/12/02/android-recycleview-useage-issues/</url>
      <content type="html"><![CDATA[<h3 id="控制Item的宽度"><a href="#控制Item的宽度" class="headerlink" title="控制Item的宽度"></a>控制Item的宽度</h3><p>在布局中存在某个item占用一行，而有的一行会有多个item，及类似于listview和gridview的混合，这时可以通过下面的方法来设置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">GridLayoutManager layoutManager = <span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>, <span class="number">3</span>);</div><div class="line">layoutManager.setSpanSizeLookup(<span class="keyword">new</span> GridLayoutManager.SpanSizeLookup() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpanSize</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                <span class="comment">//如果isSection(position)，那么这个条目将占用SpanCount()这么多的列数，也就是3</span></div><div class="line">                <span class="comment">//而如果不是，就占用1列即可</span></div><div class="line">                <span class="keyword">return</span> isSection(position) ? layoutManager.getSpanCount() : <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">recycleview.setLayoutManager(layoutManager);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="滑动停止刷新数据"><a href="#滑动停止刷新数据" class="headerlink" title="滑动停止刷新数据"></a>滑动停止刷新数据</h3><p>判断是否正在滑动的方法是getScrollState(),如果它等于RecyclerView.SCROLL_STATE_IDLE说明不在滑动,判断有没有在计算layout的方法是isComputingLayout(),取否就可以得到不在计算的时候,通过这两个条件来决定是否刷新数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!recyclerView.isComputingLayout() &amp;&amp; RecyclerView.SCROLL_STATE_IDLE == recyclerView.getScrollState()) &#123;</div><div class="line">            mAdapter.notifyDataSetChanged();</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="getPosition-getLayoutPosition-getAdapterPosition"><a href="#getPosition-getLayoutPosition-getAdapterPosition" class="headerlink" title="getPosition getLayoutPosition getAdapterPosition"></a>getPosition getLayoutPosition getAdapterPosition</h3><ul>
<li>getPosition(); 查阅资料后发现[已弃用]</li>
<li>getLayoutPosition(); [条目在最新布局计算中的位置]</li>
<li>getAdapterPosition(); [条目在是适配器中的位置]</li>
</ul>
<p><code>getLayoutPosition</code>、<code>getAdapterPosition</code>这两种类型的位置是等同的，除非在分发adapter.notify*事件和更新布局时。</p>
<p>adapter和layout的位置会有时间差(&lt;16ms), 如果你改变了Adapter的数据然后刷新视图, layout需要过一段时间才会更新视图, 在这段时间里面, 这两个方法返回的position会不一样.</p>
<p>在notifyDataSetChanged之后并不能马上获取Adapter中的position, 要等布局结束之后才能获取到.</p>
<p>而对于Layout的position, 在notifyItemInserted之后, Layout不能马上获取到新的position, 因为布局还没更新(需要&lt;16ms的时间刷新视图), 所以只能获取到旧的, 但是Adapter中的position就可以马上获取到最新的position.</p>
<p>返回布局位置的方法使用最近一次布局运算后的位置，如getLayoutPosition()和findViewHolderForLayoutPosition(int)。这些位置包含了最近一次布局运算后的变化。你可以根据这些位置来与用户正在屏幕上看到的保持一致。比如，你有一个条目列表，当用户请求第5个条目时，你可以使用这些方法来匹配用户看到的。</p>
<p>另外一系列方法与AdapterPosition关联，比如getAdapterPosition()和findViewHolderForAdapterPosition(int)。当你想获得条目在更新后的适配器中的位置使用这些方法，即使这些位置变化还没反映到布局中。比如，你想访问适配器中条目的位置时，就应该使用getAdapterPosition()。注意，如果notifyDataSetChanged()已经被调用而且还没计算新布局，这些方法或许不能够计算适配器位置。所以，你要小心处理这些方法返回NO_POSITION和null的情况。</p>
<p>总之，当使用RecycleView.LayoutManager时使用getLayoutPosition布局位置。使用RecycleView.Adapter时，使用getAdapterPosition适配器位置。</p>
<h3 id="pointToPosition"><a href="#pointToPosition" class="headerlink" title="pointToPosition"></a>pointToPosition</h3><p>在AbsListView（listview、gridview）中，有个根据屏幕位置获取pos的方法：<code>pointToPosition</code>，但在recycleview中没有这个方法，可以通过下面方法来达到相同的效果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">View targetView = recyclerView.findChildViewUnder(x, y);</div><div class="line">recyclerView.getChildAdapterPosition(targetView);</div></pre></td></tr></table></figure>
<h3 id="OnContextMenuListener"><a href="#OnContextMenuListener" class="headerlink" title="OnContextMenuListener"></a>OnContextMenuListener</h3><p><a href="http://stackoverflow.com/questions/26466877/how-to-create-context-menu-for-recyclerview" target="_blank" rel="external">http://stackoverflow.com/questions/26466877/how-to-create-context-menu-for-recyclerview</a></p>
<p>ContextMenuRecyclerView.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextMenuRecyclerView</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContextMenuRecyclerView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContextMenuRecyclerView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContextMenuRecyclerView</span><span class="params">(Context arg0, AttributeSet arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(arg0, arg1, arg2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerViewContextMenuInfo mContextMenuInfo;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> ContextMenu.<span class="function">ContextMenuInfo <span class="title">getContextMenuInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mContextMenuInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">showContextMenuForChild</span><span class="params">(View originalView)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> longPressPosition = getChildAdapterPosition(originalView);</div><div class="line">        <span class="keyword">if</span> (longPressPosition &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> longPressId = getAdapter().getItemId(longPressPosition);</div><div class="line">            mContextMenuInfo = <span class="keyword">new</span> RecyclerViewContextMenuInfo(longPressPosition, longPressId);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.showContextMenuForChild(originalView);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewContextMenuInfo</span> <span class="keyword">implements</span> <span class="title">ContextMenu</span>.<span class="title">ContextMenuInfo</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RecyclerViewContextMenuInfo</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.position = position;</div><div class="line">            <span class="keyword">this</span>.id = id;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">int</span> position;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">long</span> id;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In your Fragment (or Activity):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(View view, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</div><div class="line">    mRecyclerView = view.findViewById(R.id.recyclerview);</div><div class="line">    registerForContextMenu(mRecyclerView);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateContextMenu</span><span class="params">(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreateContextMenu(menu, v, menuInfo);</div><div class="line">    <span class="comment">// inflate menu</span></div><div class="line">    MenuInflater inflater = getActivity().getMenuInflater();</div><div class="line">    inflater.inflate(R.menu.my_context_menu, menu);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onContextItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onContextItemSelected(item);</div><div class="line">    RecyclerViewContextMenuInfo info = (RecyclerViewContextMenuInfo) item.getMenuInfo();</div><div class="line">    <span class="comment">// handle menu item here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ViewHolder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">View</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onLongClick</span><span class="params">()</span> </span>&#123;</div><div class="line">        itemView.showContextMenu();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="getChildAt-is-null"><a href="#getChildAt-is-null" class="headerlink" title="getChildAt is null"></a>getChildAt is null</h3><p>使用下面两个方法代替<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1</span></div><div class="line">findViewHolderForAdapterPosition</div><div class="line"><span class="comment">//2</span></div><div class="line">View viewItem = recycleView.getLayoutManager().findViewByPosition(position);</div><div class="line">View icon = viewItem.findViewById(R.id.view);</div></pre></td></tr></table></figure></p>
<h3 id="notifyitemchanged方法会回到顶部"><a href="#notifyitemchanged方法会回到顶部" class="headerlink" title="notifyitemchanged方法会回到顶部"></a>notifyitemchanged方法会回到顶部</h3><p>当点击某个item的时候，RecyclerView回到顶部.<br>解决办法。使用<code>setHasFixedSize(true)</code>方法。</p>
<p>下面是RecyclerView单选点击实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">categories.get(lastPosition).setSelected(<span class="keyword">false</span>);</div><div class="line">categoryAdapter.notifyItemChanged(lastPosition);</div><div class="line">categories.get(position).setSelected(<span class="keyword">true</span>);</div><div class="line">categoryAdapter.notifyItemChanged(position);</div><div class="line">lastPosition=position;</div></pre></td></tr></table></figure></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[防止App在后台运行，点击应用桌面图标重新启动]]></title>
      <url>http://dalufan.com/2016/11/03/android-click-icon-restart/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/hbw020/article/details/51781039" target="_blank" rel="external">source</a></p>
<p>在项目中，遇到一个问题百思不得其解，那就是：我在app使用过程中，点击了home键，然后去看看微信之类的其他应用，这个时候再点击app桌面的图标，这个时候app是重新启动的，而不是从上次停止的界面开始的。</p>
<p>对于上面的情况，我觉得既然我的app已经在后台还运行着，为什么就不能继续重上一个界面继续运行，非得从新运行呢。然后我就去查资料解决了这个问题。首先讲讲这个现象的本质。</p>
<p>原因：当点击app桌面图标时，app默认是任务你要新建一个应用，而不会去判断你后台有没有再运行的相同应用。</p>
<a id="more"></a>
<p>经过实践我发现：当你点击应用桌面图标，应用会重新创建你的app的启动页，然而，你快速的点击返回按钮，你会发现你会回到上一次退出时的界面。经过查阅资料发现，系统会记录你启动acitivity的启动顺序的栈。并且把当前的启动页放到了最上方，如下图所示：</p>
<p>注意：资料上面说以前启动的activity都是不在了，只是系统记录了他们启动的顺序，然而你按返回键，系统就会自动的重新创建新的activity，加入当app依次启动了1到11的activity，然而，在11这个activity的时候，你点击了home键、或点击了其他软件如微信qq等，这个时候你的app进入后台，1到11的这些activity其实被系统回收了，但是系统记录了这个activity启动顺序的栈，然后当你回到这个应用时，实际上系统是重新创建了Activity11，然后点击返回键，右重新创建了Activity10,就是这样倒序 创建activity的原理。</p>
<p><img src="http://ww1.sinaimg.cn/large/006tNc79gw1fadn0mvlwkj30il0hqt9g.jpg" alt="原理"></p>
<p>然而，当你把App放入后台时，这个时候点击了app桌面的启动图标，这个时候系统会默认你开启一个新的应用，但是因为一个软件只能在手机上面运行一个，所以，系统发现你之前的app还在后台，这个时候系统会把新创建的activity放到了之前activity栈的顶部，如上图所示的Activity1</p>
<p>知道了原因之后，我们就好做处理了。</p>
<p>第一步：查看Activity1的启动模式，如果Activity1的启动模式为singleTask，那么必须把他删除掉，或者改为“standard”。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:launchMode="standard"</div></pre></td></tr></table></figure>
<p>第二步：在你的app的AndroidManifest.xml文件的application标签下面设置持久化为 true；防止你的app挂后台被回收。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:persistent="true"</div></pre></td></tr></table></figure>
<p>第三步：在BaseActivity的onCreate方法中设置如下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line"></div><div class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState); </div><div class="line"></div><div class="line">    <span class="keyword">if</span>((getIntent().getFlags() &amp; Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != <span class="number">0</span>)&#123;</div><div class="line">        finish(); </div><div class="line">        <span class="keyword">return</span>; </div><div class="line">    &#125; </div><div class="line">    setContentView(R.layout.activity_layout);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用于判断这个Activity的启动标志，看它所在的应用是不是从后台跑到前台的。如果是，则直接把它finish()掉，然后系统会去Activity启动历史栈查询上一个activity，然后再新建它，所以还原到了我们按home键出去的那个界面。</p>
<p>第四步：检查Activity的onDestory方法中是否有非空检查，防止直接finish会crash。</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android的一些开发细节]]></title>
      <url>http://dalufan.com/2016/11/02/android-some-little-knowledge/</url>
      <content type="html"><![CDATA[<h3 id="textview-完全填充"><a href="#textview-完全填充" class="headerlink" title="textview 完全填充"></a>textview 完全填充</h3><p>在设置界面布局的时候，如果在UI中包含了TextView空间的话，会发现即使完全按照标注的尺寸来做，最终的显示效果和设计图还是有差异。</p>
<p>打开开发者模式中的布局边界，再观察APP的界面可以发现，在TextView中字体与TextView的边界是有一定的距离的，在720px的图中大概有2px的边界留白。就是这些默认的留白导致UI出现偏差。</p>
<p>在TextView提供的属性设置里面，有这样一条属性 android:includeFontPadding ,用来设置文本框是否包含顶部和底部留白（左右两侧默认没有留白），将其设置为false，TextView就会取消2px的留白。这样就避免了TextView导致UI出现差异！</p>
<a id="more"></a>
<h3 id="values不同命名的区别"><a href="#values不同命名的区别" class="headerlink" title="values不同命名的区别"></a>values不同命名的区别</h3><ul>
<li>values:是默认文件夹,它是最后一个匹配的,覆盖其他api水平 不被其他的values-xx文件夹覆盖。You should always(as with all resources folders) have this folder in your app </li>
<li>values-v11:如果存在values-v14 针对API在11和13之间(包括11和13)，否则API11以上都要使用该文件夹。另外API在11一下则无法使用该文件夹。 </li>
<li>values-v14:针对API &gt;= 14(它不会被选中的版本低于14)</li>
<li>values-v19:针对API &gt;= 19 (android 4.4) </li>
<li>values-v21:针对API &gt;= 21 (android 5.0) </li>
<li>values-v23:针对API &gt;= 23 (android 6.0)</li>
</ul>
<h3 id="getSupportFragmentManager-和getChildFragmentManager"><a href="#getSupportFragmentManager-和getChildFragmentManager" class="headerlink" title="getSupportFragmentManager()和getChildFragmentManager()"></a>getSupportFragmentManager()和getChildFragmentManager()</h3><p>getSupportFragmentManager（或者getFragmentManager）的说明：</p>
<blockquote>
<p>Return the FragmentManager for interacting with fragments associated with this fragment’s activity.</p>
</blockquote>
<p>getChildFragmentManager：</p>
<blockquote>
<p>Return a private FragmentManager for placing and managing Fragments inside of this Fragment.</p>
<p>Basically, the difference is that Fragment’s now have their own internal FragmentManager that can handle Fragments. The child FragmentManager is the one that handles Fragments contained within only the Fragment that it was added to. The other FragmentManager is contained within the entire Activity.</p>
</blockquote>
<h3 id="cursor-close"><a href="#cursor-close" class="headerlink" title="cursor.close()"></a>cursor.close()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOUtil</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IOUtil</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeQuietly</span><span class="params">(Closeable closeable)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (closeable != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                closeable.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeQuietly</span><span class="params">(Cursor cursor)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                cursor.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="String-cannot-be-converted-to-JSONObject"><a href="#String-cannot-be-converted-to-JSONObject" class="headerlink" title="String cannot be converted to JSONObject"></a>String cannot be converted to JSONObject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// in case: Value of type java.lang.String cannot be converted to JSONObject</span></div><div class="line"><span class="comment">// Remove the BOM header</span></div><div class="line"><span class="keyword">if</span> (jsonStr != <span class="keyword">null</span>) &#123;</div><div class="line">    jsonStr = jsonStr.trim();</div><div class="line">    <span class="keyword">if</span> (jsonStr.startsWith(<span class="string">"ufeff"</span>)) &#123;</div><div class="line">        jsonStr = jsonStr.substring(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图解SQL的Join]]></title>
      <url>http://dalufan.com/2016/10/30/mysql-join-usage/</url>
      <content type="html"><![CDATA[<p><a href="http://coolshell.cn/articles/3463.html" target="_blank" rel="external">原文地址</a></p>
<h3 id="0x00-假设"><a href="#0x00-假设" class="headerlink" title="0x00 假设"></a>0x00 假设</h3><p>对于SQL的Join，在学习起来可能是比较乱的。我们知道，SQL的Join语法有很多inner的，有outer的，有left的，有时候，对于Select出来的结果集是什么样子有点不是很清楚。Coding Horror上有一篇文章（实在不清楚为什么Coding Horror也被墙）通过 文氏图 Venn diagrams 解释了SQL的Join。我觉得清楚易懂，转过来。</p>
<p>假设我们有两张表。</p>
<ul>
<li>Table A 是左边的表。</li>
<li>Table B 是右边的表。</li>
</ul>
<p>其各有四条记录，其中有两条记录是相同的，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">id name       id  name</div><div class="line"><span class="comment">-- ----       --  ----</span></div><div class="line">1  Pirate     1   Rutabaga</div><div class="line">2  Monkey     2   Pirate</div><div class="line">3  Ninja      3   Darth Vader</div><div class="line">4  Spaghetti  4   Ninja</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h3><p>Inner join产生的结果集中，是A和B的交集。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TableA</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> TableB</div><div class="line"><span class="keyword">ON</span> TableA.name = TableB.name</div><div class="line"></div><div class="line"><span class="keyword">id</span>  <span class="keyword">name</span>       <span class="keyword">id</span>   <span class="keyword">name</span></div><div class="line"><span class="comment">--  ----       --   ----</span></div><div class="line"><span class="number">1</span>   Pirate     <span class="number">2</span>    Pirate</div><div class="line"><span class="number">3</span>   Ninja      <span class="number">4</span>    Ninja</div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1fa1rd5m5sgj208c05hq2y.jpg" alt="INNER JOIN"></p>
<h3 id="FULL-OUTER-JOIN"><a href="#FULL-OUTER-JOIN" class="headerlink" title="FULL OUTER JOIN"></a>FULL OUTER JOIN</h3><p>Full outer join 产生A和B的并集。但是需要注意的是，对于没有匹配的记录，则会以null做为值。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TableA</div><div class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> TableB</div><div class="line"><span class="keyword">ON</span> TableA.name = TableB.name</div><div class="line"></div><div class="line"><span class="keyword">id</span>    <span class="keyword">name</span>       <span class="keyword">id</span>    <span class="keyword">name</span></div><div class="line"><span class="comment">--    ----       --    ----</span></div><div class="line"><span class="number">1</span>     Pirate     <span class="number">2</span>     Pirate</div><div class="line"><span class="number">2</span>     Monkey     <span class="literal">null</span>  <span class="literal">null</span></div><div class="line"><span class="number">3</span>     Ninja      <span class="number">4</span>     Ninja</div><div class="line"><span class="number">4</span>     Spaghetti  <span class="literal">null</span>  <span class="literal">null</span></div><div class="line"><span class="literal">null</span>  <span class="literal">null</span>       <span class="number">1</span>     Rutabaga</div><div class="line"><span class="literal">null</span>  <span class="literal">null</span>       <span class="number">3</span>     Darth Vader</div></pre></td></tr></table></figure>
<p><img src="http://ww4.sinaimg.cn/large/65e4f1e6gw1fa1re8p6v7j208c05h74c.jpg" alt="FULL OUTER JOIN"></p>
<h3 id="LEFT-OUTER-JOIN"><a href="#LEFT-OUTER-JOIN" class="headerlink" title="LEFT OUTER JOIN"></a>LEFT OUTER JOIN</h3><p>Left outer join 产生表A的完全集，而B表中匹配的则有值，没有匹配的则以null值取代。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TableA</div><div class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> TableB</div><div class="line"><span class="keyword">ON</span> TableA.name = TableB.name</div><div class="line"></div><div class="line"><span class="keyword">id</span>  <span class="keyword">name</span>       <span class="keyword">id</span>    <span class="keyword">name</span></div><div class="line"><span class="comment">--  ----       --    ----</span></div><div class="line"><span class="number">1</span>   Pirate     <span class="number">2</span>     Pirate</div><div class="line"><span class="number">2</span>   Monkey     <span class="literal">null</span>  <span class="literal">null</span></div><div class="line"><span class="number">3</span>   Ninja      <span class="number">4</span>     Ninja</div><div class="line"><span class="number">4</span>   Spaghetti  <span class="literal">null</span>  <span class="literal">null</span></div></pre></td></tr></table></figure>
<p><img src="http://ww2.sinaimg.cn/large/65e4f1e6gw1fa1rf5gq9pj208c05hdfv.jpg" alt="LEFT OUTER JOIN "></p>
<p>产生在A表中有而在B表中没有的集合<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TableA</div><div class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> TableB</div><div class="line"><span class="keyword">ON</span> TableA.name = TableB.name</div><div class="line"><span class="keyword">WHERE</span> TableB.id <span class="keyword">IS</span> <span class="literal">null</span> </div><div class="line"></div><div class="line"><span class="keyword">id</span>  <span class="keyword">name</span>       <span class="keyword">id</span>     <span class="keyword">name</span></div><div class="line"><span class="comment">--  ----       --     ----</span></div><div class="line"><span class="number">2</span>   Monkey     <span class="literal">null</span>   <span class="literal">null</span></div><div class="line"><span class="number">4</span>   Spaghetti  <span class="literal">null</span>   <span class="literal">null</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1fa1rfye0uwj208c05h74b.jpg" alt="产生在A表中有而在B表中没有的集合"></p>
<p>产生A表和B表都没有出现的数据集。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TableA</div><div class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> TableB</div><div class="line"><span class="keyword">ON</span> TableA.name = TableB.name</div><div class="line"><span class="keyword">WHERE</span> TableA.id <span class="keyword">IS</span> <span class="literal">null</span></div><div class="line"><span class="keyword">OR</span> TableB.id <span class="keyword">IS</span> <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="keyword">id</span>    <span class="keyword">name</span>       <span class="keyword">id</span>    <span class="keyword">name</span></div><div class="line"><span class="comment">--    ----       --    ----</span></div><div class="line"><span class="number">2</span>     Monkey     <span class="literal">null</span>  <span class="literal">null</span></div><div class="line"><span class="number">4</span>     Spaghetti  <span class="literal">null</span>  <span class="literal">null</span></div><div class="line"><span class="literal">null</span>  <span class="literal">null</span>       <span class="number">1</span>     Rutabaga</div><div class="line"><span class="literal">null</span>  <span class="literal">null</span>       <span class="number">3</span>     Darth Vader</div></pre></td></tr></table></figure>
<p><img src="http://ww2.sinaimg.cn/large/65e4f1e6gw1fa1rgv4el7j208c05hjrg.jpg" alt="产生A表和B表都没有出现的数据集"></p>
<h3 id="CROSS-JOIN"><a href="#CROSS-JOIN" class="headerlink" title="CROSS JOIN"></a>CROSS JOIN</h3><p>我们还有一个是“交差集” cross join, 这种Join没有办法用文式图表示，因为其就是把表A和表B的数据进行一个N*M的组合，即笛卡尔积。表达式如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TableA</div><div class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> TableB</div></pre></td></tr></table></figure>
<p>这个笛卡尔乘积会产生 4 x 4 = 16 条记录，一般来说，我们很少用到这个语法。但是我们得小心，如果不是使用嵌套的select语句，一般系统都会产生笛卡尔乘积然再做过滤。这是对于性能来说是非常危险的，尤其是表很大的时候。</p>
<p><img src="http://ww3.sinaimg.cn/large/65e4f1e6gw1fa1ridiekyj20go0d4myp.jpg" alt="更新:2014年3月30日"></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift:通过字符串创建类对象  ]]></title>
      <url>http://dalufan.com/2016/10/26/swift-string-create-class/</url>
      <content type="html"><![CDATA[<h3 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h3><p>当根据一个类名来创建类的时候：OC中直接调用此方法即可</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIViewController</span> * vc = <span class="type">NSClassFromString</span>(@<span class="string">"DiscoverViewController"</span>)</div></pre></td></tr></table></figure>
<p>而在Switf引入了命名空间这个概念，我们对一个类的调用实质上调用的是当前<code>[命名空间.该类对应的类名]</code><br>比如当前工程的命名空间为Project；其中有一个类名为MainBarController,当我们通过调用这个类进行实例化操作的时候：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="type">MainVC</span> = <span class="type">MainBarController</span>()</div></pre></td></tr></table></figure>
<p>真正的完整的调用应该是<code>[Project.MainBarController]</code>而不是<code>[MainBarController]</code><br> 所以在我们通过类名字符串”MainBarController”来调用NSClassFromString(“MainBarController”)方法企图拿到该类时是行不通的，此处的方法字符串参数必须是全称：命名空间.该类类名：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">NSClassFromString</span>(<span class="string">"Project.MainBarController"</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="0x01-步骤"><a href="#0x01-步骤" class="headerlink" title="0x01 步骤"></a>0x01 步骤</h3><p>①拿到命名空间的名称：</p>
<p>命名空间的名称位于info.plist文件中的Executable file键值对应的Value<br>通过右键info.plist文件—&gt;Open As—&gt;Source Code打开.plist的源码<br>找到Executable file键值对应的真正键值CFBundleExecutable，再通过真正的键值拿到命名空间的名称</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span>   <span class="keyword">let</span> <span class="type">NameSpace</span> = <span class="type">NSBundle</span>.mainBundle().infoDictionary![<span class="string">"CFBundleExecutable"</span>] <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span>  <span class="comment">//无法获取到命名空间  后续代码不用执行    </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>②根据完整字符串类名获取对应的完整类名.此时再调用NSClassFromString方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span>  <span class="keyword">let</span> <span class="type">TrueVC</span> = <span class="type">NSClassFromString</span>(<span class="type">NameSpace</span> + <span class="string">"."</span> +<span class="string">"DiscoverViewController"</span>) <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span>  <span class="comment">//无法获取到该类 后续代码不用执行</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>拿到返回的控制器类型后，因为Swift中关于该方法的定义为：  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="function"><span class="keyword">func</span> <span class="title">NSClassFromString</span><span class="params">(aClassName: String)</span></span> -&gt; <span class="type">AnyClass</span>?]</div></pre></td></tr></table></figure>
<p>返回值类型为AnyClass? 所以还需要确定该类型</p>
<p>③ 确定控制器类型</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> <span class="type">Type</span> = <span class="type">TrueVC</span> <span class="keyword">as</span>? <span class="type">UIViewController</span>.<span class="type">Type</span> <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span>  <span class="comment">//无法获取到该控制器类型 后续代码不用执行</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>④最后才能对该类型的类进行实例化和后续操作，根据类型创建相关对象</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> vc = <span class="type">Type</span>.<span class="keyword">init</span>()</div><div class="line">vc.view.backgroundColor = <span class="type">UIColor</span>.redColor()</div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fragment监听返回键事件]]></title>
      <url>http://dalufan.com/2016/10/25/android-fragment-backpress/</url>
      <content type="html"><![CDATA[<h3 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h3><p>项目要求用户注册成功后进入修改个人资料的页面，且不允许返回到上一个页面，资料修改完成后结束当前页面，进入APP主页。</p>
<p>由于是使用多个Fragment完成注册流程，就需要Fragment监听用户点击手机上的返回按钮，查了一些资料，加上自己使用过程中发现的问题，特此记录，帮助更多有此需求的朋友。</p>
<a id="more"></a>
<h3 id="一般方案："><a href="#一般方案：" class="headerlink" title="一般方案："></a>一般方案：</h3><p>以下代码是stackoverflow.com中找到的一个解决方案，但是在使用时，由于Fragment页面里可能有其他能获取焦点的View（例如EditText），会导致监听失效，点击返回键会返回到上个页面。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onResume();</div><div class="line">    getFocus();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//主界面获取焦点</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getFocus</span><span class="params">()</span> </span>&#123;</div><div class="line">    getView().setFocusableInTouchMode(<span class="keyword">true</span>);</div><div class="line">    getView().requestFocus();</div><div class="line">    getView().setOnKeyListener(<span class="keyword">new</span> View.OnKeyListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKey</span><span class="params">(View v, <span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (event.getAction() == KeyEvent.ACTION_UP &amp;&amp; keyCode == KeyEvent.KEYCODE_BACK) &#123;</div><div class="line">                <span class="comment">// 监听到返回按钮点击事件</span></div><div class="line">                ......</div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="更完善的解决方案："><a href="#更完善的解决方案：" class="headerlink" title="更完善的解决方案："></a>更完善的解决方案：</h3><p>除了上面的代码，我们需要对可以获取焦点的View的setOnKeyListener进行处理，这里以一个EditText为例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> EditText nickname;</div><div class="line"> </div><div class="line">nickname.setOnKeyListener(<span class="keyword">new</span> View.OnKeyListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKey</span><span class="params">(View v, <span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK</div><div class="line">                    &amp;&amp; event.getAction() == KeyEvent.ACTION_UP) &#123;</div><div class="line">                <span class="comment">//关闭软键盘</span></div><div class="line">                InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);</div><div class="line">                imm.hideSoftInputFromWindow(nickname.getWindowToken(), <span class="number">0</span>);</div><div class="line">                <span class="comment">//使得根View重新获取焦点，以监听返回键</span></div><div class="line">                getFocus();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[autolayout和autoresizing的使用注意事项]]></title>
      <url>http://dalufan.com/2016/10/08/ios-constraint-autolayout-autoresizing/</url>
      <content type="html"><![CDATA[<blockquote>
<p>约束的本质是确定控件的位置和尺寸</p>
</blockquote>
<h3 id="autoresizing"><a href="#autoresizing" class="headerlink" title="autoresizing"></a>autoresizing</h3><p>只能确定其在父控件中的约束，不能直接设置和同层级等控件的约束关系。IOS 6之后就很少使用了。</p>
<h3 id="autolayout"><a href="#autolayout" class="headerlink" title="autolayout"></a>autolayout</h3><p>在storyboard/xib中，控件默认的参照控件是距离其调整方向最近的控件。</p>
<p>1.在使用代码来对UIView进行autolayout约束时，为了防止系统自动帮你把之前的autoresizing自动转换为约束，以至于产生未知的错误，需要对该UIView设置以下属性：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">view.translatesAutoresizingMaskIntoConstraints=<span class="literal">NO</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>2.添加约束的规则</p>
<ul>
<li>创建约束后，需要把约束添加到作用的view上</li>
<li>对于两个同层级的view之间的约束关系，需要添加到他们的父view上</li>
<li>对于两个不同层级view之间的约束关系，需要添加到他们最近的共同父view之上</li>
<li>对于有层次关系（eg:父子）的两个view之间的约束关系，需要添加到层次较高的父view上</li>
</ul>
<p>3.对象名称转字典</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIView</span> *redView = [[<span class="built_in">UIView</span> alloc]init];</div><div class="line"><span class="built_in">UIView</span> *blueView = [[<span class="built_in">UIView</span> alloc]init];</div><div class="line"><span class="built_in">NSDictionary</span> *views = <span class="built_in">NSDictionaryOfVariableBindings</span>(redView,blueView);</div><div class="line"><span class="comment">//相当于：</span></div><div class="line"><span class="built_in">NSDictionary</span> *views = @&#123;<span class="string">"redView"</span>:redView,<span class="string">"blueView"</span>:blueView&#125;;</div></pre></td></tr></table></figure>
<p>4.补充</p>
<ul>
<li>一个NSLayoutConstraint对象就是一个约束</li>
<li>万能公式<code>obj1.property1 =（obj2.property2 * multiplier）+ constant value</code></li>
<li>在storyboard页面，按住Alt点击.m文件可以让两个文件并列展示，类似于com+alt+enter</li>
</ul>
<p>5.强制刷新</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>,<span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">NSLayoutConstraint</span> *redViewWidth;</div><div class="line">…</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>) test&#123;</div><div class="line">    <span class="keyword">self</span>.redViewWidth.constant = <span class="number">50</span>;</div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">2.0</span> animations:^&#123;</div><div class="line">        <span class="comment">//需要加上下面的这句话，改变约束才有动画，而且改变约束的语句写在动画里面是没用的。</span></div><div class="line">        <span class="comment">//因为，约束最终还是会转换为frame的</span></div><div class="line">        <span class="comment">//IOS 9 以后，只能用self.view，而不是self.redView 来调用下面方法</span></div><div class="line">        [<span class="keyword">self</span>.view layoutIfNeeded];</div><div class="line">    &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>6.约束优先级</p>
<p>在安卓中，如果ABC三个控件依次排列，如果B设置为GONE，则C会移动到A旁边，而在IOS中需要分别设置C与B以及C与A直接的约束关系，且C与A约束的优先级是小于与B的，这样才能完成效果。</p>
<p>7.修改约束</p>
<ul>
<li>Masonry 有<code>mas_updateConstraints</code>和<code>mas_remakeConstraints</code>来更新</li>
<li>源生的需要把约束拖动到.m文件中，因为约束也是对象，可以直接修改</li>
</ul>
<h3 id="第三方控件"><a href="#第三方控件" class="headerlink" title="第三方控件"></a>第三方控件</h3><p><a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xcode中快速删除拷贝一行，like eclipse]]></title>
      <url>http://dalufan.com/2016/09/09/xcode-eclipse-key-xcodeKit/</url>
      <content type="html"><![CDATA[<h3 id="XcodeKit的安装"><a href="#XcodeKit的安装" class="headerlink" title="XcodeKit的安装"></a>XcodeKit的安装</h3><p><a href="https://github.com/ptfly/XcodeKit" target="_blank" rel="external">XcodeKit地址</a></p>
<blockquote>
<p>Duplicate / Remove current line or selection in Xcode<br>To install pre-compiled plugin:<br>Download XcodeKit.xcplugin.zip (old version)<br>Unzip and put it into your ~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/<br>Restart Xcode and you should see to new menu items in Edit menu:<br>Delete Selection / Line and Duplicate Selection / Line<br>You can add shortcuts to these commands from System Preferences -&gt; Keyboard -&gt; Shortcuts -&gt; App Shortcuts…</p>
</blockquote>
<a id="more"></a>
<p>中文</p>
<p>解压<code>XcodeKit.xcplugin.zip</code>，把<code>XcodeKit.xcplugin</code>放到<code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code>这个目录下。重启Xcode。</p>
<p><img src="http://ww4.sinaimg.cn/large/801b780agw1f7nc81xtxaj21150wcq7m.jpg" alt="系统偏好设置-&gt;键盘-&gt;快捷键-&gt;应用程序快捷键"></p>
<p>当上面的方式不好使用时，比如路径不存在，可以采用下面的方式：</p>
<ul>
<li><p>在/Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist 此路径中找到 IDETextKeyBindingSet.plist 文件。<br>或者在 Finder 中输入 ⌘ + G,然后复制这个路径粘贴并回车。</p>
</li>
<li><p>打开 IDETextKeyBindingSet.plist ，用 Sublime Text 或者 Vim 都可以。添加一个新的字典成员</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>Custom<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Delete Current Line In One Hit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>moveToEndOfLine:, deleteToBeginningOfLine:, deleteToEndOfParagraph:<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </div><div class="line"> <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>保存并重启 Xcode</li>
<li>打开Xcode Preferences or ⌘+,</li>
<li>点击 Key Bindings</li>
<li>在搜索框中输入 Delete，找到 Delete Current Line in One Hit</li>
<li>双击 Key,设置为⌘+D(你可以设置为你喜欢的快捷键) 此时可能会有键位冲突，点击右边红色感叹号，按提示修改即可。</li>
</ul>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[imageNamed和imageWithContentsOfFile的使用和区别]]></title>
      <url>http://dalufan.com/2016/09/09/ios-imageNamed-imageWithContentsOfFile-diff/</url>
      <content type="html"><![CDATA[<h3 id="UIImageView的使用"><a href="#UIImageView的使用" class="headerlink" title="UIImageView的使用"></a>UIImageView的使用</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1</span></div><div class="line"><span class="built_in">UIImage</span> *imge = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"test.jpg"</span>];</div><div class="line"></div><div class="line"><span class="comment">//2</span></div><div class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"test.jpg"</span> ofType:<span class="literal">nil</span>];</div><div class="line"><span class="built_in">UIImage</span> *imge = [<span class="built_in">UIImage</span> imageWithContentsOfFile:path];</div><div class="line"></div><div class="line"><span class="built_in">UIImageView</span> *imageview = [[<span class="built_in">UIImageView</span> alloc] init];</div><div class="line">imageview.image = imge;</div><div class="line"></div><div class="line"><span class="comment">//毛玻璃</span></div><div class="line"><span class="built_in">UIToolbar</span> *ul = [[<span class="built_in">UIToolbar</span> alloc] init];</div><div class="line"><span class="comment">//这里没有用imageview.frame是为了防止其他地方对imageview frame的修改会影响ul。</span></div><div class="line">ul.frame = imageview.bounds;</div><div class="line">ul.barStyle = <span class="built_in">UIBarStyleBlack</span>;</div><div class="line">ul.alpha=<span class="number">0.8</span>;</div><div class="line">[imageview addSubview:ul];</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="两种方法的区别"><a href="#两种方法的区别" class="headerlink" title="两种方法的区别"></a>两种方法的区别</h3><p><code>imageNamed</code>:创建的对象会缓存到系统内存中，不会立即释放到内存。好处是再次加载使用这种方式会减少读取操作，加快程序运行。缺点：加载过多图片会占用大量内存空间。</p>
<p>过程如下：</p>
<ol>
<li>创建图片对象，首先在缓存中查找是否有该对象，有则直接取出对象，</li>
<li>没有则从bundle中查找图片资源，有则创建对象并返回。</li>
<li>bundle中也没有图片资源，则返回nil。</li>
</ol>
<p><code>imageWithContentsOfFile</code>:imageWithContentsOfFile创建的对象不会缓存到系统内存中。好处是不产生缓存。缺点：对于经常使用的小图片，会频繁读取。</p>
<p>imageNamed只需传文件名，imageWithContentsOfFile需要传入文件全路径，而文件全路径可以通过NSBundle得到。</p>
<h3 id="图片资源的三个位置"><a href="#图片资源的三个位置" class="headerlink" title="图片资源的三个位置"></a>图片资源的三个位置</h3><h4 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h4><p>如果在项目中的Assets.xcassets（<img src="http://ww4.sinaimg.cn/large/801b780agw1f7n4q159agj203l00mjr7.jpg" alt="蓝色文件夹">）</p>
<ul>
<li>不可以用NSBundle获得资源路径，然后imageWithContentsOfFile加载</li>
<li>可以用imageNamed加载</li>
</ul>
<h4 id="folder-references"><a href="#folder-references" class="headerlink" title="folder references"></a>folder references</h4><p>如果在项目中真实文件夹（<img src="http://ww2.sinaimg.cn/large/801b780agw1f7n4j5w590j202e00uq2r.jpg" alt="蓝色文件夹">，除Assets.xcassets）：</p>
<p>创建方式如图：</p>
<p><img src="http://ww4.sinaimg.cn/large/801b780agw1f7n4jqf31oj214k0nwtb8.jpg" alt="folder references"></p>
<ul>
<li>可以NSBundle获得资源路径，然后imageWithContentsOfFile加载。注意要带文件夹路径，例如[[NSBundle mainBundle]pathForResource:@”test.jpg” ofType:nil inDirectory:@”image”]</li>
<li>不可以用imageNamed加载</li>
</ul>
<h4 id="groups"><a href="#groups" class="headerlink" title="groups"></a>groups</h4><p>如果在项目中虚拟文件夹（<img src="http://ww2.sinaimg.cn/large/801b780agw1f7n4le59p5j202h00qweb.jpg" alt="黄色文件夹">）：</p>
<p>创建方式如图：</p>
<p><img src="http://ww1.sinaimg.cn/large/801b780agw1f7n4kxd2e8j214k0nwq5g.jpg" alt="groups"></p>
<ul>
<li>可以用NSBundle获得资源路径，然后imageWithContentsOfFile加载</li>
<li>可以用imageNamed加载</li>
</ul>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 自定义可旋转的ImageView]]></title>
      <url>http://dalufan.com/2016/09/07/android-rotate-imageview/</url>
      <content type="html"><![CDATA[<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>抽屉的滑动过程中和动画中都可以获取到插值，这里可以用Handler发送消息给 RotateImageView，然后调用<code>setInterpolation</code>方法。</p>
<a id="more"></a>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Rect;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.animation.AnimationUtils;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotateImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"RotateImageView"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ANIMATION_SPEED = <span class="number">500</span>; <span class="comment">// 180 deg/sec</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCurrentDegree = <span class="number">0</span>; <span class="comment">// [0, 359]</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mStartDegree = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTargetDegree = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mClockwise = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mAnimationStartTime = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mAnimationEndTime = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RotateImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterpolation</span><span class="params">(<span class="keyword">float</span> count)</span> </span>&#123;</div><div class="line">        setDegree((<span class="keyword">int</span>) (count * <span class="number">180</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDegree</span><span class="params">(<span class="keyword">int</span> degree)</span> </span>&#123;</div><div class="line">        <span class="comment">// make sure in the range of [0, 359]</span></div><div class="line">        degree = degree &gt;= <span class="number">0</span> ? degree % <span class="number">360</span> : degree % <span class="number">360</span> + <span class="number">360</span>;</div><div class="line">        <span class="keyword">if</span> (degree == mTargetDegree)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        mTargetDegree = degree;</div><div class="line">        mStartDegree = mCurrentDegree;</div><div class="line">        mAnimationStartTime = AnimationUtils.currentAnimationTimeMillis();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> diff = mTargetDegree - mCurrentDegree;</div><div class="line">        diff = diff &gt;= <span class="number">0</span> ? diff : <span class="number">360</span> + diff; <span class="comment">// make it in range [0, 359]</span></div><div class="line"></div><div class="line">        <span class="comment">// Make it in range [-179, 180]. That's the shorted distance between the</span></div><div class="line">        <span class="comment">// two angles</span></div><div class="line">        diff = diff &gt; <span class="number">180</span> ? diff - <span class="number">360</span> : diff;</div><div class="line"></div><div class="line">        mClockwise = diff &gt;= <span class="number">0</span>;</div><div class="line">        mAnimationEndTime = mAnimationStartTime + Math.abs(diff) * <span class="number">1000</span> / ANIMATION_SPEED;</div><div class="line"></div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line">        Drawable drawable = getDrawable();</div><div class="line">        <span class="keyword">if</span> (drawable == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        Rect bounds = drawable.getBounds();</div><div class="line">        <span class="keyword">int</span> w = bounds.right - bounds.left;</div><div class="line">        <span class="keyword">int</span> h = bounds.bottom - bounds.top;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (w == <span class="number">0</span> || h == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>; <span class="comment">// nothing to draw</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mCurrentDegree != mTargetDegree) &#123;</div><div class="line">            <span class="keyword">long</span> time = AnimationUtils.currentAnimationTimeMillis();</div><div class="line">            <span class="keyword">if</span> (time &lt; mAnimationEndTime) &#123;</div><div class="line">                <span class="keyword">int</span> deltaTime = (<span class="keyword">int</span>) (time - mAnimationStartTime);</div><div class="line">                <span class="keyword">int</span> degree = mStartDegree + ANIMATION_SPEED * (mClockwise ? deltaTime : -deltaTime) / <span class="number">1000</span>;</div><div class="line">                degree = degree &gt;= <span class="number">0</span> ? degree % <span class="number">360</span> : degree % <span class="number">360</span> + <span class="number">360</span>;</div><div class="line">                mCurrentDegree = degree;</div><div class="line">                invalidate();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mCurrentDegree = mTargetDegree;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> left = getPaddingLeft();</div><div class="line">        <span class="keyword">int</span> top = getPaddingTop();</div><div class="line">        <span class="keyword">int</span> right = getPaddingRight();</div><div class="line">        <span class="keyword">int</span> bottom = getPaddingBottom();</div><div class="line">        <span class="keyword">int</span> width = getWidth() - left - right;</div><div class="line">        <span class="keyword">int</span> height = getHeight() - top - bottom;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> saveCount = canvas.getSaveCount();</div><div class="line">        canvas.translate(left + width / <span class="number">2</span>, top + height / <span class="number">2</span>);</div><div class="line">        canvas.rotate(-mCurrentDegree);</div><div class="line">        canvas.translate(-w / <span class="number">2</span>, -h / <span class="number">2</span>);</div><div class="line">        drawable.draw(canvas);</div><div class="line">        canvas.restoreToCount(saveCount);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql中UNIQUE、判断、组合查找的使用]]></title>
      <url>http://dalufan.com/2016/08/19/mysql-case-when-and-left-join-demo/</url>
      <content type="html"><![CDATA[<h3 id="UNIQUE约束和主键的比较"><a href="#UNIQUE约束和主键的比较" class="headerlink" title="UNIQUE约束和主键的比较"></a>UNIQUE约束和主键的比较</h3><p>可以使用 UNIQUE 约束确保在非主键列中不输入重复的值。尽管 UNIQUE 约束和 PRIMARY KEY 约束都强制唯一性，但想要强制一列或多列组合（不是主键）的唯一性时应使用 UNIQUE 约束而不是 PRIMARY KEY 约束。</p>
<p>可以对一个表定义多个 UNIQUE 约束，但只能定义一个 PRIMARY KEY 约束。</p>
<p>而且，<code>UNIQUE 约束允许 NULL 值</code>，这一点与 PRIMARY KEY 约束不同。不过，当与参与 UNIQUE 约束的任何值一起使用时，每列只允许一个空值。</p>
<p>FOREIGN KEY 约束可以引用 UNIQUE 约束</p>
<p><strong>什么时候用UNIQUE约束，而不是主键</strong></p>
<p>创建唯一约束可确保在未参与主键的特定列中不输入重复值。尽管唯一约束和主键都强制唯一性，但如果情况如下，则应向表附加唯一约束而不是主键约束：</p>
<ol>
<li>希望在某一列或某一组列中强制唯一性。您可以向表附加多个唯一约束，但只能向表附加一个主键约束。</li>
<li>希望在允许空值的列中强制唯一性。您可以向允许空值的列附加唯一约束，但只能向不允许空值的列附加主键约束。当向允许空值的列附加唯一约束时，请确保在所约束的列中最多只有一行包含空值。</li>
</ol>
<a id="more"></a>
<h3 id="case-when-一般使用"><a href="#case-when-一般使用" class="headerlink" title="case when 一般使用"></a>case when 一般使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">type</span>,<span class="keyword">content</span>,uid2,<span class="keyword">time</span>,readflag, </div><div class="line">       <span class="keyword">CASE</span> </div><div class="line">         <span class="keyword">WHEN</span> uid2 &gt; <span class="number">0</span> <span class="keyword">THEN</span> readflag </div><div class="line">         <span class="keyword">WHEN</span> uid2 = <span class="number">0</span> <span class="keyword">THEN</span> </div><div class="line">           <span class="keyword">CASE</span> </div><div class="line">             <span class="keyword">WHEN</span> (<span class="keyword">SELECT</span> <span class="keyword">Count</span>(*) </div><div class="line">                   <span class="keyword">FROM</span>   <span class="string">`tbl_sytemmsgread`</span> </div><div class="line">                   <span class="keyword">WHERE</span>  tbl_sytemmsgread.<span class="string">`uid`</span> = <span class="number">5193</span> </div><div class="line">                          <span class="keyword">AND</span> tbl_sytemmsgread.<span class="string">`msgid`</span> = </div><div class="line">                              DATABASE.tbl_sytemmsg.id) &gt; <span class="number">0</span> </div><div class="line">           <span class="keyword">THEN</span> </div><div class="line">             <span class="number">1</span> </div><div class="line">             <span class="keyword">ELSE</span> <span class="number">0</span> </div><div class="line">           <span class="keyword">end</span> </div><div class="line">       <span class="keyword">end</span> sortid </div><div class="line"><span class="keyword">FROM</span>   DATABASE.tbl_sytemmsg </div><div class="line"><span class="keyword">WHERE</span>  <span class="keyword">time</span> &gt; <span class="number">-62170013152</span> </div><div class="line">       <span class="keyword">AND</span> <span class="keyword">id</span> <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="keyword">SELECT</span> msgid </div><div class="line">                     <span class="keyword">FROM</span>   DATABASE.tbl_sytemmsgread </div><div class="line">                     <span class="keyword">WHERE</span>  uid = <span class="number">5193</span> </div><div class="line">                            <span class="keyword">AND</span> flag = <span class="number">1</span>) </div><div class="line">       <span class="keyword">AND</span> uid2 <span class="keyword">IN</span>( <span class="number">0</span>, <span class="number">5193</span> ) </div><div class="line"><span class="keyword">ORDER</span>  <span class="keyword">BY</span> sortid <span class="keyword">ASC</span>, </div><div class="line">          <span class="keyword">id</span> <span class="keyword">DESC</span> </div><div class="line"><span class="keyword">LIMIT</span>  <span class="number">0</span>, <span class="number">10</span></div></pre></td></tr></table></figure>
<p>其他例子</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="keyword">when</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> student <span class="keyword">where</span> student.name = <span class="string">"nice"</span>) &gt;<span class="number">0</span></div><div class="line"><span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> <span class="keyword">as</span> hasthisname,</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="keyword">when</span> drill_ext.asset_type = <span class="number">0</span> <span class="keyword">then</span> asset._id <span class="keyword">else</span> <span class="number">-1</span> <span class="keyword">end</span></div><div class="line"><span class="keyword">as</span> asset_id</div><div class="line"></div><div class="line"><span class="keyword">from</span> student,drill_ext,asset... <span class="keyword">where</span> ...</div><div class="line"></div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> ...</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> ...</div><div class="line"></div><div class="line">####</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> AcProject.ac_id, </div><div class="line">       AcProject.ac_title, </div><div class="line">       AcProject.ac_multi_flag, </div><div class="line">       <span class="keyword">CASE</span> </div><div class="line">         <span class="keyword">WHEN</span> AcProject.ac_multi_flag = <span class="number">1</span> <span class="keyword">THEN</span> </div><div class="line">           <span class="keyword">CASE</span> </div><div class="line">             <span class="keyword">WHEN</span> (<span class="keyword">SELECT</span> ProjectTime.<span class="string">`ac_time`</span> </div><div class="line">                   <span class="keyword">FROM</span>   <span class="string">`tbl_acprojecttime`</span> ProjectTime </div><div class="line">                   <span class="keyword">WHERE</span>  ProjectTime.<span class="string">`ac_project_id`</span> = AcProject.<span class="string">`ac_id`</span> </div><div class="line">                          <span class="keyword">AND</span> ac_time &gt; <span class="keyword">Unix_timestamp</span>() </div><div class="line">                   <span class="keyword">ORDER</span>  <span class="keyword">BY</span> ac_time <span class="keyword">ASC</span> </div><div class="line">                   <span class="keyword">LIMIT</span>  <span class="number">1</span>) != <span class="string">''</span> <span class="keyword">THEN</span> (<span class="keyword">SELECT</span> ProjectTime.<span class="string">`ac_time`</span> </div><div class="line">                                         <span class="keyword">FROM</span>   <span class="string">`tbl_acprojecttime`</span> ProjectTime </div><div class="line">                                         <span class="keyword">WHERE</span>  ProjectTime.<span class="string">`ac_project_id`</span> = </div><div class="line">                                                AcProject.<span class="string">`ac_id`</span> </div><div class="line">                                                <span class="keyword">AND</span> ac_time &gt; <span class="keyword">Unix_timestamp</span>() </div><div class="line">                                         <span class="keyword">ORDER</span>  <span class="keyword">BY</span> ac_time <span class="keyword">ASC</span> </div><div class="line">                                         <span class="keyword">LIMIT</span>  <span class="number">1</span>) </div><div class="line">             <span class="keyword">ELSE</span> AcProject.ac_time </div><div class="line">           <span class="keyword">end</span> </div><div class="line">         <span class="keyword">ELSE</span> AcProject.ac_time </div><div class="line">       <span class="keyword">end</span>                                        showtime, </div><div class="line">       (<span class="keyword">SELECT</span> <span class="keyword">Count</span>(*) </div><div class="line">        <span class="keyword">FROM</span>   DATABASE.<span class="string">`tbl_acsingupproject`</span> AcSingUpProject </div><div class="line">        <span class="keyword">WHERE</span>  AcSingUpProject.ac_project_id = AcProject.<span class="string">`ac_id`</span> </div><div class="line">               <span class="keyword">AND</span> AcSingUpProject.<span class="string">`ac_flag`</span> = <span class="number">0</span>) <span class="keyword">AS</span> <span class="keyword">COUNT</span>, </div><div class="line">       (<span class="keyword">SELECT</span> <span class="string">`ac_pic_url`</span> </div><div class="line">        <span class="keyword">FROM</span>   DATABASE.tbl_acprojectpic tbl_AcProjectPic </div><div class="line">        <span class="keyword">WHERE</span>  AcProject.<span class="string">`ac_id`</span> = tbl_acprojectpic.<span class="string">`ac_prject_id`</span> </div><div class="line">        <span class="keyword">ORDER</span>  <span class="keyword">BY</span> tbl_acprojectpic.ac_id </div><div class="line">        <span class="keyword">LIMIT</span>  <span class="number">1</span>)                                 ac_pic_url </div><div class="line"><span class="keyword">FROM</span>   DATABASE.tbl_acproject AcProject </div><div class="line"><span class="keyword">WHERE</span>  AcProject.ac_flag <span class="keyword">IN</span> ( <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span> ) </div><div class="line">       <span class="keyword">AND</span> AcProject.ac_type = <span class="string">'0'</span> </div><div class="line"><span class="keyword">ORDER</span>  <span class="keyword">BY</span> <span class="keyword">time</span> <span class="keyword">DESC</span> </div><div class="line"><span class="keyword">LIMIT</span>  <span class="number">0</span>, <span class="number">5</span></div></pre></td></tr></table></figure>
<h3 id="case-when-返回多个字段"><a href="#case-when-返回多个字段" class="headerlink" title="case when 返回多个字段"></a>case when 返回多个字段</h3><p>使用case when语句从数据库中提取数据有时候会遇到需要返回多个字段的情况，但case when是不支持返回两个或以上的多个字段的，此时可以考虑使用字符串连接符“||”来解决问题。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> l.userid,</div><div class="line">       <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> r.userid <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> r.shopname || r.shop_addr <span class="keyword">END</span>)) <span class="keyword">AS</span> shop_count,</div><div class="line">       <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> r.userid <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> r.paynum <span class="keyword">END</span>) <span class="keyword">AS</span> paynum_total</div><div class="line"><span class="keyword">FROM</span></div><div class="line">(</div><div class="line">    <span class="keyword">SELECT</span> userid</div><div class="line">    <span class="keyword">FROM</span>  t_user_info</div><div class="line">    <span class="keyword">LIMIT</span> <span class="number">10</span></div><div class="line">)l <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_paylist r <span class="keyword">ON</span> l.userid = r.userid</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> l.userid</div></pre></td></tr></table></figure>
<h3 id="left-join"><a href="#left-join" class="headerlink" title="left join"></a>left join</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span></div><div class="line"></div><div class="line">td</div><div class="line">  <span class="keyword">left</span> <span class="keyword">join</span> (</div><div class="line"><span class="keyword">select</span> case_id <span class="keyword">as</span> sup_case_id , <span class="keyword">count</span>(*) supervise_number <span class="keyword">from</span> </div><div class="line"> td_kcdc_case_sup_info </div><div class="line"> <span class="keyword">group</span> <span class="keyword">by</span>  case_id</div><div class="line">  ) sup</div><div class="line"> <span class="keyword">on</span>  </div><div class="line">   sup.sup_case_id = td.case_id</div><div class="line"> <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span>   <span class="comment">/*不能去掉， 否则认为and 后的条件为 联合查询时的条件， 不能起过滤作用，由于left join因此td表中记录将全部查出来*/</span></div><div class="line"></div><div class="line"> <span class="keyword">and</span> td.con = <span class="string">'xxxx'</span></div></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li><p>对于left join，不管on后面跟什么条件，左表的数据全部查出来，因此要想过滤需把条件放到where后面</p>
</li>
<li><p>对于inner join，满足on后面的条件表的数据才能查出，可以起到过滤作用。也可以把条件放到where后面</p>
</li>
</ol>
<p>一个完整版本</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">SELECT</span> *, </div><div class="line">       <span class="keyword">Max</span>(a.did) drillcoverid </div><div class="line"><span class="keyword">FROM</span>   (<span class="keyword">SELECT</span> <span class="string">''</span>  share_area_name, </div><div class="line">               drill.order_no, </div><div class="line">               drill._id, </div><div class="line">               <span class="keyword">CASE</span> </div><div class="line">                 <span class="keyword">WHEN</span> drill_ext.asset_type = <span class="number">0</span> <span class="keyword">THEN</span> drill_ext.asset_id </div><div class="line">                 <span class="keyword">ELSE</span> <span class="literal">NULL</span> </div><div class="line">               <span class="keyword">END</span> <span class="keyword">AS</span> did </div><div class="line">        <span class="keyword">FROM</span>   custom_lesson_plan <span class="keyword">AS</span> lesson </div><div class="line">               <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> custom_lesson_plan_ext <span class="keyword">AS</span> lesson_ext </div><div class="line">                      <span class="keyword">ON</span> lesson_ext.custom_lesson_plan_id = lesson._id </div><div class="line">                         <span class="keyword">AND</span> lesson_ext.asset_type = <span class="number">2</span> </div><div class="line">               <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> custom_drill_plan <span class="keyword">AS</span> drill </div><div class="line">                      <span class="keyword">ON</span> drill.custom_lesson_plan_id = lesson._id </div><div class="line">               <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> custom_drill_plan_ext <span class="keyword">AS</span> drill_ext </div><div class="line">                      <span class="keyword">ON</span> drill._id = drill_ext.custom_drill_plan_id </div><div class="line">        <span class="keyword">WHERE</span>  lesson._id = <span class="string">'acbaa153-67bf-11e6-8245-000c2964341e'</span> </div><div class="line">               <span class="keyword">AND</span> drill.status != <span class="string">'deleted'</span> </div><div class="line">               <span class="keyword">AND</span> drill.status != <span class="string">'deleteding'</span> </div><div class="line">               <span class="keyword">AND</span> drill_ext.status != <span class="string">'deleted'</span> </div><div class="line">               <span class="keyword">AND</span> drill_ext.status != <span class="string">'deleteding'</span> </div><div class="line">               <span class="keyword">AND</span> lesson.status != <span class="string">'deleted'</span> </div><div class="line">               <span class="keyword">AND</span> lesson.status != <span class="string">'deleteding'</span> </div><div class="line">               <span class="keyword">AND</span> lesson_ext.status != <span class="string">'deleted'</span> </div><div class="line">               <span class="keyword">AND</span> lesson_ext.status != <span class="string">'deleteding'</span> </div><div class="line">        <span class="keyword">ORDER</span>  <span class="keyword">BY</span> drill.order_no) a </div><div class="line"><span class="keyword">GROUP</span>  <span class="keyword">BY</span> a.drillid;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://juxuan.fu.blog.163.com/blog/static/112129259201462725840936/" target="_blank" rel="external">多个字段</a>,<a href="http://blog.csdn.net/muxiaoshan/article/details/7617533" target="_blank" rel="external">left join</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[fragment状态保存最佳实践]]></title>
      <url>http://dalufan.com/2016/07/27/android-fragment-state-saving-best-practices/</url>
      <content type="html"><![CDATA[<p>现阶段使用fragment的概率很高，它的状态保存一直都是没有认真解决的问题，虽然fragment有类似于activity的onSaveInstanceState，但是别想仅仅靠onSaveInstanceState就能保持数据。</p>
<p><code>onSaveInstanceState()</code>只有在系统即将要自动清理销毁Activity或Fragment前才会调用，比如 :</p>
<ol>
<li>由于重力感应 手机从竖屏变为横屏</li>
<li>手机点击Home键和长按Home键</li>
<li>点击电源键锁屏时</li>
<li>从当前Activity跳到另一个Activity</li>
<li>应用内存不足即将自动销毁时等情况</li>
</ol>
<p>综合上面的情况,可以看出, <code>onSaveInstanceState()</code>这个方法适合临时保存一些非永久性的数据。如果要持久化保存数据，就要将操作放在onStop()，onDestroy()这些方法中去。onSaveInstanceState()适合的是当前Activity或者Fragment一旦被系统自己销毁，应用还能在这之前保存一些必要的数据， 并且用户的操作很快又回到当前这个页面，这个时候数据并没有丢失，还能最大程度的恢复之前状态，这就是这个方法最大的意义。</p>
<blockquote>
<p>在Activity中，onCreate和onRestoreInstanceState都可以恢复数据，但区别是onRestoreInstanceState一旦被调用，其参数Bundle一定是有值的，而onCreate不一定。</p>
</blockquote>
<a id="more"></a>
<p><img src="http://ww2.sinaimg.cn/large/72f96cbagw1f68mp8ess3j208t0nj764.jpg" alt="fragment_lifecycle.png"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line">  </div><div class="line"><span class="keyword">import</span> com.qcmuzhi.qcfy.R;</div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">    Bundle savedStateBundle;</div><div class="line">    String BundleKey = <span class="string">"TAG"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestFragment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">        <span class="comment">// Restore State Here</span></div><div class="line">        <span class="keyword">if</span> (!restoreStateFromArguments()) &#123;</div><div class="line">            <span class="comment">// First Time, Initialize something here</span></div><div class="line">            onFirstTimeLaunched();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFirstTimeLaunched</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">        <span class="comment">// Save State Here</span></div><div class="line">        saveStateToArguments();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroyView();</div><div class="line">        <span class="comment">// Save State Here</span></div><div class="line">        <span class="comment">//当Fragment从回退栈中返回的时候，onDestroyView 和 onCreateView被调用，但是onSaveInstanceState可能没有被调用，这就导致了一切UI数据都回到了xml布局中定义的初始状态。当然，那些内部实现了状态保存的view，比如有android:freezeText属性的EditText和TextView，仍然可以保持其状态，因为Fragment可以为他们保持数据，但是开发者没法获得这些事件，我们只能手动的在onDestroyView中保存这些数据。</span></div><div class="line">        saveStateToArguments();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveStateToArguments</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//旋转屏幕，回退栈中Fragment的view将会销毁，同时在返回之前不会重建。这就导致了当你再一次旋转屏幕，没有可以保存数据的view。getSaveStateBundle()将会引用到一个不存在的view而导致空指针异常NullPointerException，因此需要先检查view是否存在。</span></div><div class="line">        <span class="keyword">if</span> (getView() != <span class="keyword">null</span>)</div><div class="line">            savedStateBundle = getSaveStateBundle();</div><div class="line">        <span class="keyword">if</span> (savedStateBundle != <span class="keyword">null</span>) &#123;</div><div class="line">            Bundle b = getArguments();</div><div class="line">            b.putBundle(BundleKey, savedStateBundle);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">restoreStateFromArguments</span><span class="params">()</span> </span>&#123;</div><div class="line">        Bundle b = getArguments();</div><div class="line">        <span class="keyword">if</span>(b!=<span class="keyword">null</span>)</div><div class="line">            savedStateBundle = b.getBundle(BundleKey);</div><div class="line">        <span class="keyword">if</span> (savedStateBundle != <span class="keyword">null</span>) &#123;</div><div class="line">            restoreState();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Restore Instance State Here</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">restoreState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (savedStateBundle != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// For Example</span></div><div class="line">            <span class="comment">//tv1.setText(savedStateBundle.getString(text));</span></div><div class="line">            onRestoreState(savedStateBundle);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestoreState</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Save Instance State Here</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Bundle <span class="title">getSaveStateBundle</span><span class="params">()</span> </span>&#123;</div><div class="line">        Bundle state = <span class="keyword">new</span> Bundle();</div><div class="line">        <span class="comment">// For Example</span></div><div class="line">        <span class="comment">//state.putString(text, tv1.getText().toString());</span></div><div class="line">        onSaveState(state);</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="https://developer.android.com/guide/components/fragments.html" target="_blank" rel="external">fragment官方</a>,<a href="http://www.luchenglong.com/2016/07/06/20160706/" target="_blank" rel="external">luchenglong</a>,<a href="http://li2.me/2015/11/handling-android-runtime-changes.html" target="_blank" rel="external">旋转屏幕</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ValueAnimator在自定义View中的使用]]></title>
      <url>http://dalufan.com/2016/07/21/android-valueanimator-in-diy-view/</url>
      <content type="html"><![CDATA[<p>属性动画的强大之处在于可以对任意对象的任意属性增加动画效果，并且可以自定义值的类型和变化过程（<code>TypeEvaluator</code>）和过渡速度（<code>Interpolator</code>）。结尾有借助属性动画实现的数字滚动效果源码。</p>
<h3 id="ValueAnimator"><a href="#ValueAnimator" class="headerlink" title="ValueAnimator"></a>ValueAnimator</h3><p><code>ValueAnimator</code>是属性动画的核心类，最常用的<code>ObjectAnimator</code>就是它的子类。<code>ValueAnimator</code>本身不作用于任何对象，也就是说直接使用它没有任何动画效果。它可以对一个值做动画，然后我们可以监听其动画过程，在动画过程中修改我们的对象的属性值，这样也就相当于我们的对象做了动画。</p>
<a id="more"></a>
<p>一个列子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ValueAnimator animator = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">1.0f</span>);</div><div class="line">animator.setDuration(<span class="number">3000</span>);</div><div class="line">animator.setInterpolator(<span class="keyword">new</span> LinearInterpolator());</div><div class="line"><span class="comment">//如果我们不设置Interpolator，会调用默认的Interpolator，先加速增加后减速增加。</span></div><div class="line">animator.start();</div><div class="line"><span class="comment">//以上代码先使用ofFloat方法传递0，1参数初始化了一个ValueAnimator对象，接着设置动画播放的时间，设置变化速率为系统提供的线性变化，最后启动动画。</span></div><div class="line"></div><div class="line"><span class="comment">//可以添加监听器获取具体改变的值。</span></div><div class="line">animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> value = (Float)animation.getAnimatedValue();</div><div class="line">        Log.d(TAG, value);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">animator.start();</div></pre></td></tr></table></figure>
<h4 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h4><p>当然，上面的代码只是对数字的变化的操作，并没有涉及到动画效果。接下来我们通过在动画开始前（start方法）设置监听器来让自定义View做出相应的动画。如果想要做出如下图所示的效果，使用ValueAnimator就特别简单。</p>
<p>这是效果图：<br><img src="http://ww4.sinaimg.cn/large/72f96cbagw1f67f2w02m5g206b0b874m.gif" alt="横向移动"></p>
<p>由于效果是一个小球从左边移动一段距离后，重复执行。变化的值只有小球圆心的X轴坐标。所以可以利用<code>ValueAnimator</code>产生从开始位置到结束位置的一系列中间值，设置小球移动的动画。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    canvas.drawCircle(XPoint, heightSpecSize / <span class="number">2</span>, <span class="number">30</span>, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对外提供开始动画的start方法：创建<code>ValueAnimator</code>对象，以及各种属性，添加监听器把每次改变的值赋值给xPoint，并且通知view重绘，最后开始动画。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> ValueAnimator animator = ValueAnimator.ofFloat(<span class="number">60</span>, <span class="number">600</span>);</div><div class="line">    animator.setDuration(<span class="number">2000</span>);</div><div class="line">    animator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">    animator.setRepeatMode(ValueAnimator.RESTART);</div><div class="line">    animator.setInterpolator(<span class="keyword">new</span> LinearInterpolator());</div><div class="line">    animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">            XPoint = (Float)animation.getAnimatedValue();</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    animator.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>invalidate()</code>方法，请求重绘View树，即draw()过程，假如视图发生大小没有变化就不会调用layout()过程，并且只绘制那些“需要重绘”的视图，即谁(View的话，只绘制该View ；ViewGroup，则绘制整个ViewGroup)请求invalidate()方法，就绘制该视图。</p>
<p><code>requestLayout()</code>方法，只是对View树重新布局layout过程包括measure()和layout()过程，不会调用draw()过程，不会重新绘制<br>任何视图包括该调用者本身。</p>
<p><code>requestFocus()</code>方法，函数请求View树的draw()过程，但只绘制“需要重绘”的视图。</p>
<p>以上代码首先创建一个从60变化到600的<code>ValueAnimator</code>对象，接着设置动画时间、重播方式、重播次数和速度变化情况，最后增加监听器，每次获取变化的值再赋值给xPoint，接着很重要的一点，调用<code>invalidate()</code>方法通知View重绘，即值每次改变都需要View重绘。这样就很方便的根据float值的改变，给view增加了动画的效果。</p>
<h3 id="TypeEvaluator"><a href="#TypeEvaluator" class="headerlink" title="TypeEvaluator"></a>TypeEvaluator</h3><p>前面的例子，创建<code>ValueAnimator</code>的时候，都是使用的<code>ValueAnimator</code>.ofFloat(float, float)方法，这个方法传递的参数为可变参数。其实创建<code>ValueAnimator</code>也可以使用<code>ofInt</code>等方法，还有一个很重要的方法：<code>ValueAnimator</code>.ofObject(TypeEvaluator, Object…),此方法和其他方法不同之处在于第一个参数<code>TypeEvaluator</code>,此处需要使用系统已经实现好的或自定义子类，用于设定自定义类型。</p>
<p>在使用<code>ofInt</code>或<code>ofFloat</code>方法时，其实是使用了FloatEvaluator、FloatArrayEvaluator、IntEvaluator、IntArrayEvaluator这些系统已经实现好了的<code>TypeEvaluator</code>。我们使用这些方法创建ValueAnimator时就不必自定义类来继承<code>TypeEvaluator</code>。</p>
<p>假如现在需要这个圆形斜着移动，使用<code>ValueAnimator</code>该怎样实现？当然很很多简单的实现方法，比如Path路径的使用，这里为了演示自定义<code>TypeEvaluator</code>，使用自定义<code>TypeEvaluator</code>的方式来实现。</p>
<p>这是效果图：<br><img src="http://ww2.sinaimg.cn/large/72f96cbagw1f67f5axothg206f0bdwex.gif" alt="斜着移动"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义类PointEvaluator实现TypeEvaluator接口。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PointEvaluator</span> <span class="keyword">implements</span> <span class="title">TypeEvaluator</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, Object startValue, Object endValue)</span> </span>&#123;</div><div class="line">        Point startPoint = (Point) startValue;</div><div class="line">        Point endPoint = (Point) endValue;</div><div class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>) (startPoint.x + fraction * (endPoint.x - startPoint.x));</div><div class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>) (startPoint.y + fraction * (endPoint.y - startPoint.y));</div><div class="line">            </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point(x, y);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里需要实现evaluate方法，根据动画完成的百分比返回对应的值。其中<code>fraction</code>参数和动画时间有关，代表动画执行的完成程度，比如动画总时间为3000毫秒，现在执行了1000毫秒，那么此刻传递进来的fraction参数值为三分之一。</p>
<p>在onDraw方法中依然还是简单的绘制一个圆形，此圆的圆心坐标是成员变量mPoint的x,y值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    canvas.drawCircle(mPoint.x, mPoint.y, <span class="number">30</span>, mPaint);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//最后提供start方法开始动画。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> ValueAnimator animator = ValueAnimator.ofObject(<span class="keyword">new</span> PointEvaluator(), <span class="keyword">new</span> Point(<span class="number">30</span>, <span class="number">30</span>), <span class="keyword">new</span> Point(<span class="number">600</span>, <span class="number">600</span>));</div><div class="line">    animator.setDuration(<span class="number">2000</span>);</div><div class="line">    animator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">    animator.setRepeatMode(ValueAnimator.REVERSE);</div><div class="line">    animator.setInterpolator(<span class="keyword">new</span> LinearInterpolator());</div><div class="line">    animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">            mPoint = (Point)animation.getAnimatedValue();</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    animator.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和上边的代码类似，只是<code>ValueAnimotor</code>操作的值从float改变成了Point(可以自定义类型)，不再做过多的解释了。</p>
<p>这个例子，我们可以知道<code>ValueAnimotor</code>操作的值的类型是任意的，可以由我们来自定义，只要自定义类实现<code>TypeEvaluator</code>，并且实现此接口的唯一一个方法<code>evaluate</code>即可。</p>
<h3 id="TimeInterpolator"><a href="#TimeInterpolator" class="headerlink" title="TimeInterpolator"></a>TimeInterpolator</h3><p><code>TimeInterpolator</code>表示动画的速率，上边代码中我们就设置了动画速率，只不过使用的是API中已经实现好了的LinearInterpolator。</p>
<p>查询API知道TimeInterpolator接口有很多已知的实现类，比如：</p>
<ul>
<li><strong>AccelerateDecelerateInterpolator</strong> 表示先加速后减速，</li>
<li><strong>AccelerateInterpolator</strong> 表示一直加速，</li>
<li><strong>DecelerateInterpolator</strong> 表示一直加速等。</li>
<li><strong>BounceInterpolator</strong> 可以模拟物理规律，实现反弹的效果</li>
</ul>
<p>如果不设置setInterpolator,那么默认使用AccelerateDecelerateInterpolator。</p>
<p>在自定义TimeInterpolator之前，我们先看看API中提供的实现的例子：<code>LinearInterpolator</code>,<code>AccelerateInterpolator</code>。</p>
<p>TimeInterpolator接口，只有一个方法：getInterpolation(float input),此方法接收一个float类型的input值，此值的变化范围为0~1，并且根据动画运行的时间，均匀增加，和TypeEvaluator接口方法中的参数fraction很像，fraction也是根据动画运行的时间，均匀增加。</p>
<blockquote>
<p>注意:<code>getInterpolation</code> 函数的返回值传递给了fraction;<br>最好让<code>getInterpolation</code>方法返回的值在0~1之间，以便在使用fraction参数时意思明确</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//LinearInterpolator源码：</span></div><div class="line"><span class="meta">@HasNativeInterpolator</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearInterpolator</span> <span class="keyword">extends</span> <span class="title">BaseInterpolator</span> </span></div><div class="line">                        <span class="keyword">implements</span> <span class="title">NativeInterpolatorFactory</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinearInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinearInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> input;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/** <span class="doctag">@hide</span> */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">createNativeInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> NativeInterpolatorFactoryHelper.createLinearInterpolator();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//从源码中，可以看到getInterpolation的逻辑简单到不能再简单，直接返回input，因为input本身表示的就是均匀增加的。</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AccelerateInterpolator源码：</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mFactor == <span class="number">1.0f</span>) &#123;</div><div class="line">        <span class="keyword">return</span> input * input;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>)Math.pow(input, mDoubleFactor);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//构造函数接收一个mFactor表示加速的倍数，接收1.0f以上的数，mDoubleFactor = 2 * mFactor。</span></div><div class="line"><span class="comment">//在getInterpolation方法中，判断mFactor如果等于1.0f，直接返回input * input（默认，二次函数增长），否则返回input的mDoubleFactor次方（mDoubleFactor次函数增长）。</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现一个以10给底数的负指数函数减速的例子</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LgDecelerateInterpolator</span> <span class="keyword">implements</span> <span class="title">TimeInterpolator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> background;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LgDecelerateInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">        background = <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="number">1</span> - (<span class="keyword">float</span>) Math.pow(background, -input));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//成员变量background表示底数，在构造方法中初始化为10，因为是减速，所以用到了负指数，得到的值从1变化到0，所以再用1减去这个结果值，就得到了最终的结果。</span></div></pre></td></tr></table></figure>
<h3 id="AnimatorSet"><a href="#AnimatorSet" class="headerlink" title="AnimatorSet"></a>AnimatorSet</h3><p><code>AnimatorSet</code>表示动画的集合，可以把几个动画一起播放，或按次序播放。提供paly、with、after等方法。</p>
<p>接下来，把以上用到的全部结合起来，播放一个动画的效果：圆形从View的左上角移动到右下角，伴随着颜色的变化，移动速度和颜色变化的速率都由上面自定义的LgDecelerateInterpolator实现。</p>
<p>这是效果图：<br><img src="http://ww4.sinaimg.cn/large/72f96cbagw1f67ffo1527g206f0bdt96.gif" alt="斜着指数减速移动伴随颜色指数渐变"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line">    <span class="keyword">private</span> Point mPoint;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColor;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        initPaint();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        initPaint();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPaint</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mPaint.setColor(<span class="number">0xFFF00000</span>);</div><div class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>); <span class="comment">// 抗锯齿</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        canvas.drawCircle(mPoint.x, mPoint.y, <span class="number">60</span>, mPaint);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ValueAnimator animator = ValueAnimator.ofObject(<span class="keyword">new</span> PointEvaluator(),</div><div class="line">                <span class="keyword">new</span> Point(<span class="number">60</span>, <span class="number">60</span>), <span class="keyword">new</span> Point(<span class="number">990</span>, <span class="number">1050</span>));</div><div class="line">        animator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">                mPoint = (Point) animation.getAnimatedValue();</div><div class="line">                invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">final</span> ValueAnimator animator1 = ValueAnimator.ofArgb(<span class="number">0xFFF00000</span>,<span class="number">0xFFFFFF00</span>);</div><div class="line">        animator1.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        animator1.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">                mColor = (<span class="keyword">int</span>) animation.getAnimatedValue();</div><div class="line">                mPaint.setColor(mColor);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        AnimatorSet animationSet = <span class="keyword">new</span> AnimatorSet();</div><div class="line">        animationSet.setDuration(<span class="number">3000</span>);</div><div class="line">        animationSet.setInterpolator(<span class="keyword">new</span> LgDecelerateInterpolator());</div><div class="line">        animationSet.play(animator).with(animator1);</div><div class="line">        animationSet.start();</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PointEvaluator</span> <span class="keyword">implements</span> <span class="title">TypeEvaluator</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, Object startValue, Object endValue)</span> </span>&#123;</div><div class="line">            Point startPoint = (Point) startValue;</div><div class="line">            Point endPoint = (Point) endValue;</div><div class="line">            <span class="keyword">int</span> x = (<span class="keyword">int</span>) (startPoint.x + fraction * (endPoint.x - startPoint.x));</div><div class="line">            <span class="keyword">int</span> y = (<span class="keyword">int</span>) (startPoint.y + fraction * (endPoint.y - startPoint.y));</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Point(x, y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LgDecelerateInterpolator</span> <span class="keyword">implements</span> <span class="title">TimeInterpolator</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">float</span> background;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LgDecelerateInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">            background = <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> (<span class="number">1</span> - (<span class="keyword">float</span>) Math.pow(background, -input));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//start方法中创建了两个ValueAnimator,第一个使用.ofObject方法，通过传递自定义的PointEvaluator,第二个使用API已经实现的ofArgb使颜色值变化的动画属性，都添加监听器以实现对成员变量的修改，重绘View，最后创建AnimatorSet对两个动画进行叠加，在播放移动动画的同时播放颜色渐变的动画。</span></div></pre></td></tr></table></figure>
<p>作者使用属性动画修改了<a href="https://github.com/a-voyager/ScrollNumber/" target="_blank" rel="external">ScrollNumber例子</a>，今天还看到了一个<a href="https://github.com/robinhood/ticker" target="_blank" rel="external">相似的例子</a></p>
<p>修改后的ScrollNumber.java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.wuhaojie.library;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.animation.ValueAnimator;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Paint;</div><div class="line"><span class="keyword">import</span> android.graphics.Point;</div><div class="line"><span class="keyword">import</span> android.graphics.Rect;</div><div class="line"><span class="keyword">import</span> android.graphics.Typeface;</div><div class="line"><span class="keyword">import</span> android.text.TextUtils;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.util.TypedValue;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.animation.AccelerateDecelerateInterpolator;</div><div class="line"><span class="keyword">import</span> android.view.animation.Interpolator;</div><div class="line"><span class="keyword">import</span> android.view.animation.LinearInterpolator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by wuhaojie on 2016/7/15 11:36.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollNumber</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDeltaNum;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCurNum = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mNextNum;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTargetNum;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mOffset;</div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line">    <span class="keyword">private</span> Interpolator mInterpolator = <span class="keyword">new</span> AccelerateDecelerateInterpolator();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextCenterX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextHeight;</div><div class="line">    <span class="keyword">private</span> Rect mTextBounds = <span class="keyword">new</span> Rect();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextSize = sp2px(<span class="number">60</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextColor = <span class="number">0xFF000000</span>;</div><div class="line">    <span class="keyword">private</span> Typeface mTypeface;</div><div class="line">    <span class="keyword">private</span> ValueAnimator animator;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScrollNumber</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScrollNumber</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScrollNumber</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line"></div><div class="line">        mContext = context;</div><div class="line"></div><div class="line">        mPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">        mPaint.setTextAlign(Paint.Align.CENTER);</div><div class="line">        mPaint.setTextSize(mTextSize);</div><div class="line">        mPaint.setColor(mTextColor);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mTypeface != <span class="keyword">null</span>) mPaint.setTypeface(mTypeface);</div><div class="line"></div><div class="line">        measureTextHeight();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetAnimator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(animator!=<span class="keyword">null</span>)</div><div class="line">            animator.cancel();</div><div class="line">        <span class="comment">//float x = (float) (1 - 1.0 * (mTargetNum - mCurNum) / mDeltaNum);</span></div><div class="line">        animator = ValueAnimator.ofFloat(<span class="number">0f</span>, -<span class="number">1f</span>);</div><div class="line">        animator.setDuration(<span class="number">200</span>);</div><div class="line">        <span class="comment">//animator.setRepeatCount(ValueAnimator.INFINITE);</span></div><div class="line">        <span class="comment">//animator.setRepeatMode(ValueAnimator.REVERSE);</span></div><div class="line">        animator.setInterpolator(<span class="keyword">new</span> LinearInterpolator());</div><div class="line">        animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">                mOffset = (Float) animation.getAnimatedValue();</div><div class="line">                invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        animator.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Runnable mScrollRunnable = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">float</span> x = (<span class="keyword">float</span>) (<span class="number">1</span> - <span class="number">1.0</span> * (mTargetNum - mCurNum) / mDeltaNum);</div><div class="line">            mOffset -= <span class="number">0.15f</span> * (<span class="number">1</span> - mInterpolator.getInterpolation(x) + <span class="number">0.1</span>);</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> from, <span class="keyword">final</span> <span class="keyword">int</span> to, <span class="keyword">long</span> delay)</span> </span>&#123;</div><div class="line">        postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                setFromNumber(from);</div><div class="line">                setTargetNumber(to);</div><div class="line">                mDeltaNum = to - from;</div><div class="line">                resetAnimator();</div><div class="line">            &#125;</div><div class="line">        &#125;, delay);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextSize</span><span class="params">(<span class="keyword">int</span> textSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mTextSize = sp2px(textSize);</div><div class="line">        mPaint.setTextSize(mTextSize);</div><div class="line">        measureTextHeight();</div><div class="line">        requestLayout();</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextFont</span><span class="params">(String fileName)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(fileName))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"please check file name end with '.ttf' or '.otf'"</span>);</div><div class="line">        mTypeface = Typeface.createFromAsset(mContext.getAssets(), fileName);</div><div class="line">        <span class="keyword">if</span> (mTypeface == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"please check your font!"</span>);</div><div class="line">        mPaint.setTypeface(mTypeface);</div><div class="line">        requestLayout();</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(<span class="keyword">int</span> mTextColor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mTextColor = mTextColor;</div><div class="line">        mPaint.setColor(mTextColor);</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterpolator</span><span class="params">(Interpolator interpolator)</span> </span>&#123;</div><div class="line">        mInterpolator = interpolator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureTextHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//mPaint.getTextBounds(mCurNum + "", 0, 1, mTextBounds);</span></div><div class="line">        mPaint.getTextBounds(<span class="string">"0"</span>, <span class="number">0</span>, <span class="number">1</span>, mTextBounds);</div><div class="line">        mTextHeight = mTextBounds.height();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> width = measureWidth(widthMeasureSpec);</div><div class="line">        <span class="keyword">int</span> height = measureHeight(heightMeasureSpec);</div><div class="line">        setMeasuredDimension(width, height);</div><div class="line"></div><div class="line">        mTextCenterX = (getMeasuredWidth() - getPaddingLeft() - getPaddingRight()) / <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureHeight</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> mode = MeasureSpec.getMode(measureSpec);</div><div class="line">        <span class="keyword">int</span> val = MeasureSpec.getSize(measureSpec);</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">switch</span> (mode) &#123;</div><div class="line">            <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">                result = val;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">            <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">                mPaint.getTextBounds(<span class="string">"0"</span>, <span class="number">0</span>, <span class="number">1</span>, mTextBounds);</div><div class="line">                result = mTextBounds.height();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        result = mode == MeasureSpec.AT_MOST ? Math.min(result, val) : result;</div><div class="line">        <span class="keyword">return</span> result + getPaddingTop() + getPaddingBottom() + dp2px(<span class="number">40</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureWidth</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> mode = MeasureSpec.getMode(measureSpec);</div><div class="line">        <span class="keyword">int</span> val = MeasureSpec.getSize(measureSpec);</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">switch</span> (mode) &#123;</div><div class="line">            <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">                result = val;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">            <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">                mPaint.getTextBounds(<span class="string">"0"</span>, <span class="number">0</span>, <span class="number">1</span>, mTextBounds);</div><div class="line">                result = mTextBounds.width();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        result = mode == MeasureSpec.AT_MOST ? Math.min(result, val) : result;</div><div class="line">        <span class="keyword">return</span> result + getPaddingLeft() + getPaddingRight() + <span class="number">15</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mCurNum != mTargetNum) &#123;</div><div class="line">            <span class="comment">//postDelayed(mScrollRunnable, 200);</span></div><div class="line">            <span class="keyword">if</span> (mOffset &lt;= -<span class="number">1</span>) &#123;</div><div class="line">                mOffset = <span class="number">0</span>;</div><div class="line">                calNum(mCurNum + <span class="number">1</span>);</div><div class="line">                resetAnimator();</div><div class="line">            &#125;</div><div class="line">            canvas.translate(<span class="number">0</span>, mOffset * getMeasuredHeight());</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//不停止的话，会多画一次，因为target已经通过drawNext移动上来了</span></div><div class="line">            <span class="keyword">if</span>(animator!=<span class="keyword">null</span>)</div><div class="line">                animator.cancel();</div><div class="line">        &#125;</div><div class="line">        drawSelf(canvas);</div><div class="line">        drawNext(canvas);</div><div class="line"><span class="comment">//        canvas.restore();</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//停止动画</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(animator!=<span class="keyword">null</span>)</div><div class="line">            animator.cancel();</div><div class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setFromNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (number &lt; <span class="number">0</span> || number &gt; <span class="number">9</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalidate number , should in [0,9]"</span>);</div><div class="line">        calNum(number);</div><div class="line">        mOffset = <span class="number">0</span>;</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calNum</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">        number = number == -<span class="number">1</span> ? <span class="number">9</span> : number;</div><div class="line">        number = number == <span class="number">10</span> ? <span class="number">0</span> : number;</div><div class="line">        mCurNum = number;</div><div class="line">        mNextNum = number + <span class="number">1</span> == <span class="number">10</span> ? <span class="number">0</span> : number + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawNext</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> y = getMeasuredHeight() / <span class="number">2</span> + getMeasuredHeight();</div><div class="line">        canvas.drawText(mNextNum + <span class="string">""</span>, mTextCenterX, y + mTextHeight / <span class="number">2</span>,</div><div class="line">                mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawSelf</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="comment">//问：canvas.drawText("3", x, y, paint);  x和y是指画得时候数字3中心的坐标吗？还是左上角的坐标？</span></div><div class="line">        <span class="comment">//x默认是‘3’这个字符的左边在屏幕的位置，如果设置了paint.setTextAlign(Paint.Align.CENTER);那就是字符的中心，</span></div><div class="line">        <span class="comment">//y是指定这个字符baseline在屏幕上的位置。</span></div><div class="line">        <span class="comment">//mPaint.setTextAlign(Paint.Align.CENTER);</span></div><div class="line">        <span class="keyword">if</span> (mCurNum != -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> y = getMeasuredHeight() / <span class="number">2</span>;</div><div class="line">            canvas.drawText(mCurNum + <span class="string">""</span>, mTextCenterX, y + mTextHeight / <span class="number">2</span>, mPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetNumber</span><span class="params">(<span class="keyword">int</span> nextNum)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mTargetNum = nextNum;</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(<span class="keyword">float</span> dpVal)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,</div><div class="line">                dpVal, getResources().getDisplayMetrics());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">sp2px</span><span class="params">(<span class="keyword">float</span> dpVal)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,</div><div class="line">                dpVal, getResources().getDisplayMetrics());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://mafei.site/2016/07/17/android-valueanimator/" target="_blank" rel="external">mafei</a>,<a href="http://blog.csdn.net/qinjuning/article/details/7110211/" target="_blank" rel="external">View绘制流程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《mysql 必知必会》读书笔记三（21-30）]]></title>
      <url>http://dalufan.com/2016/07/03/mysql-base-usage-03/</url>
      <content type="html"><![CDATA[<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">-- 删除tmp表</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> tmp;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tmp;</div><div class="line"></div><div class="line"><span class="comment">-- 下面是指不存在tmp表则创建</span></div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tmp(</div><div class="line">   shop_id <span class="built_in">INT</span>(<span class="number">11</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT, </div><div class="line">   shop_name <span class="built_in">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">   shop_address <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span> ,</div><div class="line">   shop_type <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">   <span class="keyword">status</span> TINYINT(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">   PRIMARY <span class="keyword">KEY</span>(shop_id)</div><div class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> ; </div><div class="line"><span class="comment">-- 如果省略`ENGINE=`，则使用默认引擎</span></div></pre></td></tr></table></figure>
<p>每个表中只允许有一个<code>AUTO_INCREMENT</code>列，而且该列必须被索引（如，使他成为主键），该列的值并没有特殊的格式要求，只要是唯一就行。</p>
<p><code>select last_insert_id()</code>可以返回最后一个AUTO_INCREMENT的值。</p>
<a id="more"></a>
<p><em>引擎</em></p>
<ol>
<li>InnoDB是一个可靠的事务处理引擎，它不支持全文本搜索；</li>
<li>MEMORY在功能等同于MyISAM，但由于数据存储在内存，速度很快，特别适用于临时表；</li>
<li>MyISAM是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理。</li>
</ol>
<p>用同一个引擎的表不能引用具有使用不同引擎的表的外键。<br><a href="http://dev.mysql.com/doc/refman/5.7/en/storage-engines.html" target="_blank" rel="external">更详细的引擎列表</a></p>
<h3 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 添加一列</span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> vendors <span class="keyword">ADD</span> vend_phone <span class="built_in">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">'11111111'</span>;</div><div class="line"><span class="comment">-- 删除一列</span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> vendors <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> vend_phone;</div><div class="line"><span class="comment">-- 定义外键</span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> orderitems <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_orderitems_orders </div><div class="line">    FOREIGN <span class="keyword">KEY</span>(order_num) <span class="keyword">REFERENCES</span> orders(order_num);</div><div class="line"></div><div class="line"><span class="comment">-- 更新表名</span></div><div class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> customers2 <span class="keyword">TO</span> customers,tmp2 <span class="keyword">TO</span> tmp;</div></pre></td></tr></table></figure>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图仅仅是用来查看存储在别处的数据的一种设施，其本身不包含数据，因此它返回的数据都是从其他表中检索出来的。</p>
<p><img src="/article_images/mysql_base-usage_06.png" alt="alt"></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> productcustomers <span class="keyword">as</span> <span class="keyword">select</span> cust_name,cust_contact,prod_id </div><div class="line">    <span class="keyword">from</span> customers,orders,orderitems <span class="keyword">where</span> customers.cust_id = orders.cust_id</div><div class="line">    <span class="keyword">and</span> orderitems.order_num = orders.order_num ;</div><div class="line"></div><div class="line"><span class="comment">-- 使用视图</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> cust_name,cust_contact <span class="keyword">from</span> productcustomers <span class="keyword">where</span> prod_id = <span class="string">'fds'</span>;</div><div class="line"><span class="comment">-- 其中prod_id为创建视图中，select语句后面的列名。视图更像是一个'只能'select的虚拟表。</span></div><div class="line"><span class="comment">-- 如果从视图检索数据时使用了一条where子句，则两组（视图中和传递给视图的）子句会自动合并。</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">-- 视图的另一个重要作用是格式化检索出来的数据</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> vendorlocations <span class="keyword">as</span></div><div class="line">    <span class="keyword">select</span> <span class="keyword">Concat</span>(<span class="keyword">RTrim</span>(vend_name),<span class="string">'('</span>,<span class="keyword">RTrim</span>(vend_country),<span class="string">')'</span>) <span class="keyword">as</span> vend_title</div><div class="line">    <span class="keyword">from</span> vendors <span class="keyword">order</span> <span class="keyword">by</span> vend_name ;</div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> vendorlocations;</div></pre></td></tr></table></figure>
<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>存储过程简单的来说可以理解为：为以后的使用而保存的一条或者多条MySql语句的集合，有点类似于批处理。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 创建</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> productpricing()</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    <span class="keyword">SELECT</span> <span class="keyword">avg</span>(prod_price) <span class="keyword">as</span> priceaverage <span class="keyword">from</span> products ;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="comment">-- 调用</span></div><div class="line"><span class="keyword">CALL</span> productpricing();</div><div class="line"></div><div class="line"><span class="comment">-- 删除</span></div><div class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> productpricing;</div></pre></td></tr></table></figure>
<p><img src="/article_images/mysql_base-usage_07.png" alt="alt"><br><img src="/article_images/mysql_base-usage_08.png" alt="alt"></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> productpricing(</div><div class="line">    <span class="keyword">OUT</span> pl <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>),</div><div class="line">    <span class="keyword">OUT</span> ph <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>),</div><div class="line">    <span class="keyword">OUT</span> pa <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</div><div class="line">)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    <span class="keyword">select</span> <span class="keyword">Min</span>(prod_price) <span class="keyword">into</span> pl <span class="keyword">from</span> products;</div><div class="line">    <span class="keyword">select</span> <span class="keyword">Max</span>(prod_price) <span class="keyword">into</span> ph <span class="keyword">from</span> products;</div><div class="line">    <span class="keyword">select</span> <span class="keyword">Avg</span>(prod_price) <span class="keyword">into</span> pa <span class="keyword">from</span> products;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="comment">-- out指出相应的参数来从存储过程中传出的一个值</span></div><div class="line"><span class="comment">-- in传递给存储过程的值</span></div><div class="line"><span class="comment">-- inout传入传出</span></div><div class="line"><span class="comment">-- 不能通过一个参数返回多个行和列</span></div><div class="line"></div><div class="line"><span class="keyword">CALL</span> productpricing(@pricelow,@pricehigh,@priceaverage);</div><div class="line"><span class="comment">-- 参数个数需要与定义时一致</span></div><div class="line"><span class="keyword">select</span> @pricelow,@picehigh,@priceaverage ;</div><div class="line"><span class="comment">-- 也可以单个调用 select @pricelow；</span></div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> ordertotal(</div><div class="line">    <span class="keyword">IN</span> onumber <span class="built_in">INT</span>,</div><div class="line">    <span class="keyword">OUT</span> ototal <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</div><div class="line">)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    <span class="keyword">select</span> <span class="keyword">Sum</span>(item_price*quantity) <span class="keyword">from</span> orderitems </div><div class="line">    <span class="keyword">where</span> order_num = onumber <span class="keyword">into</span> ototal;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="keyword">CALL</span> ordertotal(<span class="number">2000</span>,@tt);</div><div class="line"><span class="keyword">select</span> @tt；</div></pre></td></tr></table></figure>
<p><em>demo</em></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> ordertotal(</div><div class="line">  <span class="keyword">in</span> onumber <span class="built_in">int</span>,</div><div class="line">  <span class="keyword">in</span> taxable <span class="built_in">boolean</span>, <span class="comment">-- ==0没有税，否则含税</span></div><div class="line">  <span class="keyword">out</span> ototal <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</div><div class="line">)<span class="keyword">COMMENT</span> <span class="string">'这里面的内容会在执行 SHOW PROCEDURE STATUS时展示'</span></div><div class="line"><span class="keyword">BEGIN</span> </div><div class="line">  <span class="keyword">declare</span> total <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>);</div><div class="line">  <span class="keyword">declare</span> taxrate <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">6</span>;</div><div class="line">  <span class="keyword">select</span> <span class="keyword">sum</span>(item_price*quantity) <span class="keyword">from</span> orderitems </div><div class="line">  <span class="keyword">where</span> order_num = onumber <span class="keyword">into</span> total;</div><div class="line"></div><div class="line">  if taxable then</div><div class="line">    <span class="keyword">select</span> total + (total/<span class="number">100</span> * taxrate) <span class="keyword">into</span> total;</div><div class="line">  <span class="keyword">end</span> <span class="keyword">if</span></div><div class="line">  <span class="keyword">select</span> total <span class="keyword">into</span> ototal;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="keyword">call</span> ordertotal(<span class="number">2003</span>,<span class="number">0</span>,@tt);</div><div class="line"><span class="keyword">select</span> @tt;</div><div class="line"></div><div class="line"><span class="comment">-- 显示创建存储过程的create语句</span></div><div class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span>  ordertotal;</div></pre></td></tr></table></figure>
<h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> processorders()</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">  <span class="keyword">declare</span> done <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">declare</span> o <span class="built_in">int</span> ;</div><div class="line">  <span class="keyword">declare</span> t <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line">  <span class="keyword">declare</span> ordernumbers <span class="keyword">CURSOR</span></div><div class="line">  <span class="keyword">for</span> </div><div class="line">  <span class="keyword">select</span> order_num <span class="keyword">from</span> orders;</div><div class="line">  <span class="keyword">declare</span> continue <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">'02000'</span> <span class="keyword">set</span> done = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> ordertotals(order_num <span class="built_in">int</span>,total <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>));</div><div class="line">  open ordernumbers;</div><div class="line">  repeat</div><div class="line">    fetch ordernumbers into o;</div><div class="line">    <span class="keyword">call</span> ordertotal(o,<span class="number">1</span>,t);</div><div class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> ordertotals(order_num,total) <span class="keyword">values</span>(o,t);</div><div class="line">  until done <span class="keyword">end</span> <span class="keyword">repeat</span>;</div><div class="line"></div><div class="line">  close ordernumbers;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="comment">-- 其中`sqlstate '02000'`指的是：</span></div><div class="line"></div><div class="line"><span class="comment">-- 发生下述异常之一：</span></div><div class="line"><span class="comment">-- （http://blog.csdn.net/cangyingaoyou/article/details/7402243）</span></div><div class="line"><span class="comment">-- SELECT INTO 语句或 INSERT 语句的子查询的结果为空表。</span></div><div class="line"><span class="comment">-- 在搜索的 UPDATE 或 DELETE 语句内标识的行数为零。</span></div><div class="line"><span class="comment">-- 在 FETCH 语句中引用的游标位置处于结果表最后一行之后。</span></div></pre></td></tr></table></figure>
<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> newproduct <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> products <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">select</span> <span class="string">'ss'</span>;</div><div class="line"><span class="comment">--只有表才支持触发器，视图是不支持的。</span></div><div class="line"></div><div class="line"><span class="comment">-- 删除</span></div><div class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> newproduct;</div></pre></td></tr></table></figure>
<h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><ol>
<li>insert触发器代码内，可以引用一个名为NEW的虚拟表，访问被插入的行；</li>
<li>在before insert触发器中，NEW中的值也可以被更新（即允许修改被插入的值）；</li>
<li>对于auto_increment列，NEW在insert执行之前包含0，在insert执行后包含新的自动生成的值。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> neworder <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> orders <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">select</span> NEW.order_num;</div></pre></td></tr></table></figure>
<h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><ol>
<li>delete触发器内部，你可以引用一个名为OLD的虚拟表，访问被删除的行；</li>
<li>OLD中的值全部是只读的，不能更新。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> deleteorder <span class="keyword">before</span> <span class="keyword">delete</span> <span class="keyword">on</span> orders <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </div><div class="line"><span class="keyword">BEGIN</span> <span class="comment">-- 使用begin end可以容纳多条SQL语句。</span></div><div class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> archive_orders(order_num,order_date,cust_id) </div><div class="line">  <span class="keyword">values</span>(OLD.order_num,OLD.order_date,OLD.cust_id);</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><ol>
<li>在update触发器代码中你可以引用一个名为OLD的虚拟表访问（update语句前）的值，引用一个名为NEW的虚拟表访问新的更新值；</li>
<li>在before update触发器中，NEW中的值可以被更新；</li>
<li>OLD中的值全部为只读。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> updatevendor <span class="keyword">before</span> <span class="keyword">update</span> <span class="keyword">on</span> vendors <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </div><div class="line">  <span class="keyword">set</span> NEW.vend_state = <span class="keyword">Upper</span>(NEW.vend_state);</div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《mysql 必知必会》读书笔记二（13-20）]]></title>
      <url>http://dalufan.com/2016/06/30/mysql-base-usage-02/</url>
      <content type="html"><![CDATA[<h3 id="0x00-分组"><a href="#0x00-分组" class="headerlink" title="0x00 分组"></a>0x00 分组</h3><h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_id,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_prods <span class="keyword">FROM</span> products <span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id;</div><div class="line"><span class="comment">-- 1001 3</span></div><div class="line"><span class="comment">-- 1002 5</span></div></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li><code>GROUP BY</code>子句可以包含任意数目的列；</li>
<li>建立分组时，指定的所有列被当成<code>联合主键</code>；</li>
<li><code>GROUP BY</code>子句中的每个列必须为检索列（在select后面的）或者是有效的表达式（但不能为聚集函数），select中的表达式需要和<code>GROUP BY</code>中的表达式一致，且<code>GROUP BY</code>中的表达式不能用别名；</li>
<li>除了聚集计算子句外，select语句中的每个列都必须在<code>GROUP BY</code>后面出现(*)；</li>
<li>如果分组列中有NULL值，则NULL将作为一个分组返回，出现多行NULL，它们会被作为一个分组返回；</li>
<li><code>GROUP BY</code>子句必须出现在WHERE子句之后，ORDER BY子句之前</li>
</ol>
<a id="more"></a>
<h4 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 过滤分组只能用HAVING，不能用WHERE，因为WHERE只能过滤指定的行，WHERE在数据分组前过滤，HAVING在数据分组后进行过滤。</span></div><div class="line"><span class="keyword">SELECT</span> vend_id,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_prods <span class="keyword">FROM</span> products <span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">3</span>;</div><div class="line"><span class="comment">-- 1002 5</span></div><div class="line"><span class="keyword">SELECT</span> vend_id,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_prods <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> price&gt;<span class="number">10</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">3</span>;</div><div class="line"><span class="comment">-- 1002 5</span></div><div class="line"><span class="keyword">SELECT</span> order_num,<span class="keyword">SUM</span>(quantity*item_price) <span class="keyword">AS</span> ordertotal <span class="keyword">FROM</span> orderitems <span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num <span class="keyword">HAVING</span> <span class="keyword">SUM</span>(quantity*item_price) &gt;=<span class="number">50</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> ordertotal;</div><div class="line"><span class="comment">-- GROUP BY 是不会排序的，需要排序的话还需要在后面跟上ORDER BY</span></div></pre></td></tr></table></figure>
<h3 id="0x01-子查询"><a href="#0x01-子查询" class="headerlink" title="0x01 子查询"></a>0x01 子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_id <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> prod_id=<span class="string">'ok1'</span>);</div><div class="line"><span class="comment">-- 子查询是从内往外查的。</span></div><div class="line"><span class="comment">-- 子查询作为计算字段来使用:</span></div><div class="line"><span class="keyword">SELECT</span> cust_name,cust_state,(<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> orders.cust_id = customers.cust_id) <span class="keyword">AS</span> orders <span class="keyword">FROM</span> customers <span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name ;</div></pre></td></tr></table></figure>
<h3 id="0x02-联结"><a href="#0x02-联结" class="headerlink" title="0x02 联结"></a>0x02 联结</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 在mysql中，为了避免二义性，即select中 有相同的列名分别来自两个表，此时需要用`表名.列名`</span></div><div class="line"><span class="comment">-- 的方式显式的指定。</span></div><div class="line"><span class="keyword">SELECT</span> vend_name,prod_name,prod_pice <span class="keyword">FROM</span> vendors,products <span class="keyword">WHERE</span> vendors.vend_id = products.vend_id ;</div><div class="line"></div><div class="line"><span class="comment">-- INNER JOIN</span></div><div class="line"><span class="keyword">SELECT</span> vend_name,prod_name,prod_pice <span class="keyword">FROM</span> vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> products <span class="keyword">ON</span> vendors.vend_id = products.vend_id ;</div></pre></td></tr></table></figure>
<h4 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> prod_id,prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> vend_id = (<span class="keyword">SELECT</span> vend_id <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_id = <span class="string">'ok1'</span>);</div></pre></td></tr></table></figure>
<h4 id="外部联结"><a href="#外部联结" class="headerlink" title="外部联结"></a>外部联结</h4><p>1.对每个顾客下了多少订单进行展示</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> customers.cus_id,orders.order_num <span class="keyword">FROM</span> customers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> customers.cust_id = orders.cust_id;</div><div class="line"><span class="comment">-- 10001 10</span></div><div class="line"><span class="comment">-- 10004 50</span></div></pre></td></tr></table></figure>
<p>2.对每个顾客下了多少订单进行展示(包括没有下订单的)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> customers.cus_id,orders.order_num <span class="keyword">FROM</span> customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> customers.cust_id = orders.cust_id;</div><div class="line"><span class="comment">-- 10001 10</span></div><div class="line"><span class="comment">-- 10002 NULL</span></div><div class="line"><span class="comment">-- 10004 50</span></div></pre></td></tr></table></figure>
<p><strong>INNER JOIN</strong>查的是customers和orders都有的，取的是orders和customers的交集。<br><strong>LEFT OUTER JOIN</strong>查的是left，即左边表customers中有的，不管orders中是否包含；当然还有RIGHT OUTER JOIN，方向与left相对。 </p>
<h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_id,prod_id,prod_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_price &lt;=<span class="number">5</span></div><div class="line"> <span class="keyword">UNION</span> </div><div class="line"> <span class="keyword">SELECT</span> vend_id,prod_id,prod_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>);</div><div class="line"></div><div class="line"><span class="comment">-- 同上</span></div><div class="line"><span class="keyword">SELECT</span> vend_id,prod_id,prod_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_price &lt;=<span class="number">5</span> <span class="keyword">OR</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>);</div></pre></td></tr></table></figure>
<p><code>UNION</code> 的每个查询中，必须包含相同的列、表达式或者聚集函数（不过列的顺序没有要求，因为已经在SELECT中指定了），列数据类型必须兼容。</p>
<p>参考上面的例子，可以看出UNION会去除重复的行（价格小于5，并且vend_id为1001或者1002的），如果需要展示重复的，则使用<code>UNION ALL</code>。<code>这也是UNION于WHERE最大的不同</code>。</p>
<p>在使用<code>UNION</code>时，只能在最后一个select的后面使用order by，它的作用域是整个select的结果。</p>
<h3 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h3><p>MySql有两种最常用的引擎，<code>MyISAM</code>、<code>InnoDB</code>，前者支持全文本搜索，而后者不支持。</p>
<h4 id="启用索引"><a href="#启用索引" class="headerlink" title="启用索引"></a>启用索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> productnotes(</div><div class="line">    note_id  <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> AUTO_INCREMENT,</div><div class="line">    note_date datetime <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    note_text <span class="built_in">text</span> <span class="literal">null</span>,</div><div class="line">    primary <span class="keyword">key</span>(note_id),</div><div class="line">    FULLTEXT(note_text)</div><div class="line">    )<span class="keyword">engine</span>=MyISAM;</div></pre></td></tr></table></figure>
<p>在定义之后，mysql自动维护该索引。不建议在到导入数据时使用FULLTEXT，因为更新索引需要花费时间，一般先导入数据，完成后修改表结构为FULLTEXT。</p>
<h4 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法"></a>一般用法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> note_text <span class="keyword">from</span> productnotes </div><div class="line">    <span class="keyword">where</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">'rabbit'</span>) ;</div><div class="line"><span class="comment">-- 其中Match指定检索的列，Against指定搜素的表达式。</span></div></pre></td></tr></table></figure>
<p>Macth传入的值必须于FULLTEXT中对应的一致，如果指定多个列，则必须列出它们而且次序正确。除非使用BINARY方式，否则全文本搜索是不区分大小写的。</p>
<p>上面的例子使用LIKE也是可以完成的，但全文本检索会根据每行的等级对结果进行排序，而LIKE返回的顺序却不是固定的。  </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> note_text, <span class="keyword">Match</span>(note_text) Against(<span class="string">'rabbit'</span>) <span class="keyword">AS</span> <span class="keyword">rank</span> <span class="keyword">from</span> productnotes;</div><div class="line"><span class="comment">-- 该例子中没有where字句，这使得所有的行都会被返回，且rank对应的是每行的等级，不包含`rabbit`的行值为0，`rabbit`位置靠前的行等级高。</span></div></pre></td></tr></table></figure>
<h4 id="查询扩展"><a href="#查询扩展" class="headerlink" title="查询扩展"></a>查询扩展</h4><p>查询扩展的作用是放宽检索结果范围的。比如我们查询<code>rabbit</code>只有一行，但是你还想检索出和这一行有关联的的其他行，就可以是使用该功能。顺序如下：</p>
<ol>
<li>首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有行；</li>
<li>其次，MySql检查这些匹配行，并选择所有有用的词（MySql自发的）；</li>
<li>使用所有有用的词在进行一次全文本搜索。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> note_text <span class="keyword">from</span> productnotes <span class="keyword">where</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">'rabbit'</span> <span class="keyword">WITH</span> <span class="keyword">QUERY</span> EXPANSION);</div></pre></td></tr></table></figure>
<h4 id="布尔文本搜索"><a href="#布尔文本搜索" class="headerlink" title="布尔文本搜索"></a>布尔文本搜索</h4><p>布尔方式不同于全文本搜索的地方时：即使没有定义FULLTEXT索引，也可以使用它，但其性能不高。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> note_text <span class="keyword">from</span> productnotes <span class="keyword">where</span> <span class="keyword">Match</span>(note_text) </div><div class="line">    Against(<span class="string">'rabbit -rope*'</span> <span class="keyword">IN</span> <span class="built_in">BOOLEAN</span> <span class="keyword">MODE</span>);</div><div class="line"><span class="comment">--`-rope*`表示排除包含rope开头的词的行。</span></div><div class="line"><span class="comment">-- -排除一个词</span></div><div class="line"><span class="comment">-- *是截断操作符，可以理解为词尾的通配符</span></div></pre></td></tr></table></figure>
<p><img src="/article_images/mysql_base-usage_04.png" alt="alt"></p>
<p><img src="/article_images/mysql_base-usage_05.png" alt="alt"></p>
<h4 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h4><ol>
<li>在索引全文本数据时，短词被忽略且从索引中排除（短词默认为长度小于等于3的词，该设定可以修改）；</li>
<li>MySql内建有非用词列表，索引时会被忽略，该设定可以修改；</li>
<li>50%规则：如果一个词出现在50%的行中，则它将作为一个非用词被忽略，该规则不适用于IN BOOLEAN MODE。</li>
<li>如果表中行数少于3行，则全文本搜索不返回结果，原因：50%规则；</li>
<li>词中的单引号会被忽略，don’t索引为dont；</li>
<li>MySql中没有邻近操作符。</li>
</ol>
<h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,cust_address,cust_city)</div><div class="line">    <span class="keyword">values</span>(<span class="string">'lala'</span>,<span class="string">'cn'</span>,<span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">-- 如果前面不是显式的指定`(cust_name,cust_address,cust_city)`，则values中值的顺序需要和表中出现的次序一致</span></div></pre></td></tr></table></figure>
<p>在执行insert时，可以省略以下列：</p>
<ol>
<li>该列定义为允许NULL（无值或者空值）；</li>
<li>表定义中该列有默认值；</li>
<li>指定列名后，主键为自增长的。</li>
</ol>
<p><code>LOW_PRIORITY</code>可以降低insert语句的优先级，其也可以用于update和delete。<br>用法：<code>insert LOW_PRIORITY into</code>。</p>
<p><em>insert多条语句</em></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,cust_address,cust_city)</div><div class="line">    <span class="keyword">values</span>(<span class="string">'lala'</span>,<span class="string">'cn'</span>,<span class="literal">NULL</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,cust_address,cust_city)</div><div class="line">    <span class="keyword">values</span>(<span class="string">'lala'</span>,<span class="string">'cn'</span>,<span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">-- 或者</span></div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,cust_address,cust_city)</div><div class="line">    <span class="keyword">values</span>(<span class="string">'lala'</span>,<span class="string">'cn'</span>,<span class="literal">NULL</span>),(<span class="string">'bsbs'</span>,<span class="string">'zh'</span>,<span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<p><em>insert select</em></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,cust_address,cust_city)</div><div class="line">    <span class="keyword">select</span> cust_name,cust_address,cust_city <span class="keyword">from</span> custnew;</div><div class="line"></div><div class="line"><span class="comment">-- 主键为自增长的，所以插入的时候忽略了，如果需要从custnew中拿主键插入，则需要注意主键冲突的问题</span></div><div class="line"><span class="comment">-- 列名不要求一致，MySql只关心顺序，相应的列插入相应的列。</span></div></pre></td></tr></table></figure>
<h3 id="更新和删除"><a href="#更新和删除" class="headerlink" title="更新和删除"></a>更新和删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> customers <span class="keyword">set</span> cust_name = <span class="string">'afaf'</span>,cust_email = <span class="string">'afaf@163.com'</span></div><div class="line">    <span class="keyword">where</span> cust_id = <span class="number">10001</span> ;</div><div class="line"><span class="comment">-- 使用时，一定要注意where语句，缺失的话会更新所有的行。</span></div></pre></td></tr></table></figure>
<p>当使用update更新多行时，如果其中一行或者多行出错，更新操作会被取消，并且之前已更新的会回滚，如果需要即使出错也要继续更新时，可以使用ignore关键字。<code>UPDATE IGNORE customers</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> customers <span class="keyword">where</span> cust_id = <span class="number">10001</span> ;</div><div class="line"><span class="comment">-- 使用时，一定要注意where语句，缺失的话会删除所有的行。</span></div></pre></td></tr></table></figure>
<p>delete只是删除内容，不能删除表，如果需要删除所有行，则可以使用<code>TRUNCATE TABLE</code>来完成。</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《mysql 必知必会》读书笔记一（1-12）]]></title>
      <url>http://dalufan.com/2016/06/28/mysql-base-usage-01/</url>
      <content type="html"><![CDATA[<h3 id="0x00-常见操作符"><a href="#0x00-常见操作符" class="headerlink" title="0x00 常见操作符"></a>0x00 常见操作符</h3><h4 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a>BETWEEN</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">from</span> products <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p><code>BETWEEN</code> 匹配范围包括开始值和结束值，即，包含5和10。</p>
<h4 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h4><p><code>AND</code>的优先级高于<code>OR</code>，而括号的优先级高于<code>AND</code>。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">from</span> products <span class="keyword">WHERE</span> price <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">25</span>);</div></pre></td></tr></table></figure>
<p><code>IN</code>操作符一般比<code>OR</code>操作符执行更快，且可以包含其他<code>SELECT</code>语句。</p>
<a id="more"></a>
<h3 id="0x01-通配符"><a href="#0x01-通配符" class="headerlink" title="0x01 通配符"></a>0x01 通配符</h3><h4 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">from</span> products <span class="keyword">WHERE</span> address <span class="keyword">LIKE</span> <span class="string">'c%n'</span>;</div></pre></td></tr></table></figure>
<p><code>%</code>匹配0到任意多的字符；<code>_</code>匹配唯一一个字符，不能多也不能少。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">from</span> products <span class="keyword">WHERE</span> address <span class="keyword">LIKE</span> <span class="string">'_ ton'</span>;</div><div class="line"></div><div class="line"><span class="comment">--结果只会匹配1 ton，而.5 ton是不会匹配的，否则要使用两个_</span></div></pre></td></tr></table></figure>
<p>通配符会影响搜索速度，最好把通配符放在搜索模式尽可能朝后的位置。</p>
<h3 id="0x02-正则"><a href="#0x02-正则" class="headerlink" title="0x02 正则"></a>0x02 正则</h3><h4 id="REGEXP"><a href="#REGEXP" class="headerlink" title="REGEXP"></a>REGEXP</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">from</span> products <span class="keyword">WHERE</span> <span class="keyword">content</span> REGEXP <span class="string">'.000'</span>;</div><div class="line"><span class="comment">-- jp 1000</span></div><div class="line"><span class="comment">-- Jp 2000</span></div><div class="line"><span class="comment">-- .表示匹配任一字符</span></div><div class="line"></div><div class="line"><span class="comment">--如果执行下面：</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">from</span> products <span class="keyword">WHERE</span> <span class="keyword">content</span> <span class="keyword">LIKE</span> <span class="string">'1000'</span>;</div><div class="line"><span class="comment">--是不会返回的，因为LIKE匹配的时完整的一列，而不是列值的一部分。</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">from</span> products <span class="keyword">WHERE</span> <span class="keyword">content</span> REGEXP <span class="string">'1000'</span>;</div><div class="line"><span class="comment">-- jp 1000</span></div><div class="line"><span class="comment">--REGEXP匹配的时列值。当然REGEXP也是可以匹配完整一列的，使用^和$定位符就行。</span></div><div class="line"><span class="comment">--^在集合`[]`中表示否定该集合，否则表示串的开始。</span></div></pre></td></tr></table></figure>
<p>MySql中的正则表达式是不区分大小写的，为了区分大小写，可以使用如下语句。<code>WHERE content REGEXP BINARY &#39;Jp .000&#39;</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--| 或</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">from</span> products <span class="keyword">WHERE</span> <span class="keyword">content</span> REGEXP <span class="string">'1000|2000|3000'</span>;</div><div class="line"><span class="comment">-- jp 1000</span></div><div class="line"><span class="comment">-- Jp 2000</span></div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--[] 取其中任一个</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">from</span> products <span class="keyword">WHERE</span> <span class="keyword">content</span> REGEXP <span class="string">'[123]000'</span>;</div><div class="line"><span class="comment">-- jp 1000</span></div><div class="line"><span class="comment">-- Jp 2000</span></div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--\\转义，两个反斜杠一个为MySql解释，一个正则解释库用</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">from</span> products <span class="keyword">WHERE</span> <span class="keyword">content</span> REGEXP <span class="string">'\\.'</span>;</div><div class="line"><span class="comment">-- j.p 1000</span></div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--在不使用数据库表的情况下，用SELECT来测试正则表达式</span></div><div class="line"><span class="keyword">SELECT</span> <span class="string">'hel11'</span> REGEXP <span class="string">'[0-9]'</span>;</div><div class="line"><span class="comment">-- 其会返回一行</span></div></pre></td></tr></table></figure>
<h3 id="0x03-拼接字段"><a href="#0x03-拼接字段" class="headerlink" title="0x03 拼接字段"></a>0x03 拼接字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--多数DBMS都是使用+或者||来实现拼接，但在mysql中，使用`Concat()`函数</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">Concat</span>(<span class="keyword">RTrim</span>(<span class="keyword">name</span>),<span class="string">'('</span>,<span class="keyword">LTrim</span>(country),<span class="string">')'</span>) <span class="keyword">FROM</span> student ;</div><div class="line"><span class="comment">-- dalu(cn)</span></div><div class="line"></div><div class="line"><span class="comment">--`RTrim`函数的作用是去除串最右边的空格。上面的语句只能用来展示，但没有有效的列名，可以使用`AS` 来赋值</span></div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">Concat</span>(<span class="keyword">RTrim</span>(<span class="keyword">name</span>),<span class="string">'('</span>,<span class="keyword">LTrim</span>(country),<span class="string">')'</span>) <span class="keyword">AS</span> title <span class="keyword">FROM</span> student ;</div><div class="line"><span class="comment">-- title</span></div><div class="line"><span class="comment">-- dalu(cn)</span></div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> item_price*item_count <span class="keyword">AS</span> expanded_price <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> item_name = <span class="string">'note book'</span>;</div><div class="line"><span class="comment">-- expanded_price</span></div><div class="line"><span class="comment">-- 100.98</span></div><div class="line"><span class="comment">-- mysql目前支持加减乘除</span></div></pre></td></tr></table></figure>
<h3 id="0x04-函数"><a href="#0x04-函数" class="headerlink" title="0x04 函数"></a>0x04 函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--多数DBMS都是使用+或者||来实现拼接，但在mysql中，使用`Concat()`函数</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">Concat</span>(<span class="keyword">RTrim</span>(<span class="keyword">name</span>),<span class="string">'('</span>,<span class="keyword">LTrim</span>(country),<span class="string">')'</span>) <span class="keyword">FROM</span> student ;</div><div class="line"><span class="comment">-- dalu(cn)</span></div></pre></td></tr></table></figure>
<h4 id="日期处理函数"><a href="#日期处理函数" class="headerlink" title="日期处理函数"></a>日期处理函数</h4><p><img src="/article_images/mysql_base-usage_01.png" alt="alt"></p>
<p>如果比较日期<code>order_date</code>，它的类型是datetime，当不能确认它的具体格式是<code>2016-01-01</code>还是<code>2016-01-01 12:23:33</code>或者其他格式，可以参考如下写法：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> order_name <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> <span class="built_in">Date</span>(order_date) <span class="keyword">BETWEEN</span> <span class="string">'2015-01-01'</span> <span class="keyword">AND</span> <span class="string">'2015-01-31'</span>;</div><div class="line"><span class="comment">--或者</span></div><div class="line"><span class="keyword">SELECT</span> order_name <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> <span class="keyword">Year</span>(order_date) = <span class="number">2015</span> <span class="keyword">AND</span> <span class="keyword">Month</span>(order_date) = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<h4 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h4><p><img src="/article_images/mysql_base-usage_02.png" alt="alt"></p>
<h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p><img src="/article_images/mysql_base-usage_03.png" alt="alt"></p>
<ol>
<li><code>AVG</code>、<code>MAX</code>、<code>MIN</code>、<code>SUM</code>会忽略列值为NULL的行；</li>
<li><code>COUNT()</code>函数中，如果使用的是<code>COUNT(*)</code>则返回值包含列值为NULL的行数，如果指定列名，则该列中值为NULL的会被忽略；</li>
<li><code>MAX</code>一般用来查找最大数值或者日期值，在适用于文本数据值，返回的是该列排序后的最后一行；</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(price*<span class="keyword">count</span>) <span class="keyword">AS</span> total_price <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'12'</span>;</div><div class="line"><span class="comment">-- 需要计算的是不同的值时，即price不相同的所有列值的平均值，需要指定DISTINCT，默认为ALL</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(<span class="keyword">DISTINCT</span> price) <span class="keyword">AS</span> avg_price <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'12'</span>;</div><div class="line"><span class="comment">-- 使用DISTINCT时候，必须指定后面的列名，且不能用于计算或者表达式</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> allCount,<span class="keyword">MIN</span>(price) <span class="keyword">AS</span> minPrice,<span class="keyword">AVG</span>(<span class="keyword">DISTINCT</span> price) <span class="keyword">AS</span> avg_price <span class="keyword">FROM</span> orders;</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> birth_place <span class="keyword">from</span> <span class="keyword">users</span>;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android listview的一些技巧]]></title>
      <url>http://dalufan.com/2016/06/21/android-listview-usage/</url>
      <content type="html"><![CDATA[<p>以下是listview使用过程中的一些技巧，虽然官方不推荐使用listview了。</p>
<h3 id="0x00-item"><a href="#0x00-item" class="headerlink" title="0x00 item"></a>0x00 item</h3><p>1.item需要根据textview的内容动态变化高度</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"0.23"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span> /&gt;</div><div class="line">        ....</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>2.item的高度固定</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"0.23"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span> /&gt;</div><div class="line">        ....</div></pre></td></tr></table></figure>
<p>区别主要在<code>android:layout_height</code>的设置上。</p>
<h3 id="0x01-padding"><a href="#0x01-padding" class="headerlink" title="0x01 padding"></a>0x01 padding</h3><p>对于listview来说，仅仅设置<code>android:dividerHeight=&quot;15dp&quot;</code>是不能让第一个和最后一个item距离外面有15dp高度的，如果只是简单的给listview设置padding或者margin还是不够美观。</p>
<p>起始listview还有<code>android:footerDividersEnabled</code>、<code>android:headerDividersEnabled</code>两个属性，其默认是true，这个两个属性只有在listview已经addFooterView和addHeaderView之后才会起效。</p>
<p>listview还有个<code>android:clipToPadding</code>属性，其定义了是否允许ViewGroup在padding中绘制,该值默认为true,即不允许。所以若我们给ListView设置了android:paddingTop=”70dip” ，android:paddingBottom=”70dip” 那么我们可以看到ListView的头部以上和尾部以下都占有70大小的padding，在滑动ListView的过程中这个padding当然是存在的。在padding部分是看不到ListView的item的，本质上是在这两部分没有绘制我们的ListView，假若我们此时为ListView设置属性android:clipToPadding=”false”,同样再滑动ListView此时可以发现在ListView的头部以上和尾部以下都占有70大小的padding部分依然可以显示我们的ListView的item。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/lv_left"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"235dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"15dp"</span></div><div class="line">        <span class="attr">android:divider</span>=<span class="string">"@null"</span></div><div class="line">        <span class="attr">android:dividerHeight</span>=<span class="string">"15dp"</span></div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"15dp"</span></div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"15dp"</span></div><div class="line">        <span class="attr">android:clipToPadding</span>=<span class="string">"false"</span></div><div class="line">        <span class="attr">android:listSelector</span>=<span class="string">"@android:color/transparent"</span></div><div class="line">        <span class="attr">android:scrollbars</span>=<span class="string">"none"</span> &gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="0x02-跑马灯"><a href="#0x02-跑马灯" class="headerlink" title="0x02 跑马灯"></a>0x02 跑马灯</h3><p>对item的元素设置跑马灯，一般仅仅需要如下设置即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tv_nickname"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span></div><div class="line">    <span class="attr">android:singleLine</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:textIsSelectable</span>=<span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure>
<p>但，如果该textview所在的item需要被点击时候，点击该textview不能响应onItemclick，因为事情被textview自己给吞了。解决这个问题可以在adapter中如下设置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">holder.tv.setSelected(<span class="keyword">true</span>);</div><div class="line">holder.tv.requestFocus();</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tv_nickname"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span></div><div class="line">    <span class="attr">android:singleLine</span>=<span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="0x03-item点击事件无响应"><a href="#0x03-item点击事件无响应" class="headerlink" title="0x03 item点击事件无响应"></a>0x03 item点击事件无响应</h3><p>当listview 中的item中有button 等获得焦点的优先级高于listview 时，listivew 的焦点去，不能获得点击事件，无法执行它的onItemOnclick事件。</p>
<p>在ListView的根控件中设置（若根控件是LinearLayout, 则在LinearLayout中加入以下属性设置）descendantFocusability属性。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:descendantFocusability="blocksDescendants"</div></pre></td></tr></table></figure>
<h3 id="0x04-getView被多次调用"><a href="#0x04-getView被多次调用" class="headerlink" title="0x04 getView被多次调用"></a>0x04 getView被多次调用</h3><p>解决方案可以是通过代码测量列表所需要的高度(eg:match_parent)，或者在getView中使用一个小技巧：parent.getChildCount == position</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (parent.getChildCount() == position) &#123;</div><div class="line">       <span class="comment">// does things here</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> convertView;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native学习笔记二]]></title>
      <url>http://dalufan.com/2016/06/11/android-react-native-learn-day02/</url>
      <content type="html"><![CDATA[<h3 id="0x00-环境配置"><a href="#0x00-环境配置" class="headerlink" title="0x00 环境配置"></a>0x00 环境配置</h3><p>Atom启动时候可能会提示<code>&#39;mono&#39; could not be spawned</code>的错误，需要<code>set the path to mono to /usr/local/bin for both iodide-fsharp and ionide-paket</code></p>
<p>nuclide安装完后需要以下配置：</p>
<ul>
<li>插件 settings 添加 flow 的路径(在终端里 运行 which flow 命令会告诉你之前运行环境配置的flow路径，将此路径写在 Nuclide 的settings 下nuclide-flow:Path to Flow Executabel 内)；</li>
<li>创建一个.flowconfig文件在你的工程根目录下(这个文件可以为空)；</li>
<li>添加/<em> @flow </em>/在你要检测JS语法文件的头部；</li>
</ul>
<p>react-native 自动生成的 <code>.flowconfig</code> 可能会让 flow 无法运行, 原因是其中的 [version] 会限制 flow 的版本, 不匹配就不能运行, 删掉那部分即可;</p>
<p>flow 执行需要几秒钟, 过了这几秒就可以像 readme 展示的那样支持 cmd-click 等功能了;</p>
<p>仔细观察 nuclide-flow 包的设置选项, 你会发现默认需要通过 save 来触发 flow 的错误检测, 并且提供了选项来让 flow 随时检测错误;</p>
<a id="more"></a> 
<h3 id="0x01-宽度单位和像素密度"><a href="#0x01-宽度单位和像素密度" class="headerlink" title="0x01 宽度单位和像素密度"></a>0x01 宽度单位和像素密度</h3><p>react 宽度基于pt为单位， 可以通过Dimensions 来获取宽高，PixelRatio 获取密度。例如</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Dimensions = <span class="built_in">require</span>(<span class="string">'Dimensions'</span>);</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span>&gt;</span></span></div><div class="line">          window.width=&#123;Dimensions.get('window').width + '\n'&#125; </div><div class="line">          window.height=&#123;Dimensions.get('window').height + '\n'&#125; </div><div class="line">          pxielRatio=&#123;PixelRatio.get()&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">Text</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="comment">//iPhone6的结果为</span></div><div class="line"><span class="built_in">window</span>.width  = <span class="number">375</span></div><div class="line"><span class="built_in">window</span>.height = <span class="number">667</span></div><div class="line"><span class="comment">//由此可见react的单位为pt。</span></div></pre></td></tr></table></figure>
<p>react 提供了PixelRatio 的获取方式:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> image = getImage(&#123;</div><div class="line">  <span class="attr">width</span>: PixelRatio.getPixelSizeForLayoutSize(<span class="number">200</span>),</div><div class="line">  <span class="attr">height</span>: PixelRatio.getPixelSizeForLayoutSize(<span class="number">100</span>),</div><div class="line">&#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=<span class="string">&#123;image&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> <span class="attr">200</span>, <span class="attr">height:</span> <span class="attr">100</span>&#125;&#125; /&gt;</span></span></div><div class="line"></div><div class="line">//Returns the device pixel density. Some examples:</div><div class="line"> </div><div class="line">PixelRatio.get() === 1</div><div class="line">    mdpi Android devices (160 dpi)</div><div class="line">PixelRatio.get() === 1.5</div><div class="line">    hdpi Android devices (240 dpi)</div><div class="line">PixelRatio.get() === 2</div><div class="line">    iPhone 4, 4S</div><div class="line">    iPhone 5, 5c, 5s</div><div class="line">    iPhone 6</div><div class="line">xhdpi Android devices (320 dpi)</div><div class="line">    PixelRatio.get() === 3</div><div class="line">iPhone 6 plus</div><div class="line">    xxhdpi Android devices (480 dpi)</div><div class="line">PixelRatio.get() === 3.5</div><div class="line">    Nexus 6</div></pre></td></tr></table></figure>
<h3 id="0x02-React-Native架构"><a href="#0x02-React-Native架构" class="headerlink" title="0x02 React-Native架构"></a>0x02 React-Native架构</h3><p><img src="/article_images/react-native-day0201.png" alt="alt"></p>
<p>自下而上依次是：</p>
<ol>
<li><strong>React</strong>：不同平台上编写基于React的代码，“Learn once, write anywhere”。</li>
<li><strong>Virtual DOM</strong>：相对Browser环境下的DOM（文档对象模型）而言，Virtual DOM是DOM在内存中的一种轻量级表达方式（原话是lightweight representation of the document），可以通过不同的渲染引擎生成不同平台下的UI，JS和Native之间通过Bridge通信。</li>
<li><strong>Web/iOS/Android</strong></li>
</ol>
<h3 id="0x03-组件的生命周期"><a href="#0x03-组件的生命周期" class="headerlink" title="0x03 组件的生命周期"></a>0x03 组件的生命周期</h3><p>React Native组件的生命周期可以总的概括为下面这一张图。</p>
<p><img src="/article_images/react-native-day0202.png" alt="alt"></p>
<p>可以把组件生命周期大致分为三个阶段：</p>
<ul>
<li>第一阶段：是组件第一次绘制阶段，如图中的上面虚线框内，在这里完成了组件的加载和初始化；</li>
<li>第二阶段：是组件在运行和交互阶段，如图中左下角虚线框，这个阶段组件可以处理用户交互，或者接收事件更新界面；</li>
<li>第三阶段：是组件卸载消亡的阶段，如图中右下角的虚线框中，这里做一些组件的清理工作。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Sample React Native App</div><div class="line">* https://github.com/facebook/react-native</div><div class="line">*/</div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</div><div class="line"><span class="keyword">var</span> &#123;</div><div class="line">    AppRegistry,</div><div class="line">    StyleSheet,</div><div class="line">    View,</div><div class="line">    Text</div><div class="line">&#125; = React;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">var</span> AwesomeProject = React.createClass(&#123;</div><div class="line">    <span class="comment">//在组件类创建的时候调用一次，然后返回值被缓存下来。</span></div><div class="line">    getDefaultProps:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"getDefaultProps"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//初始化状态,在组件挂载之前调用一次。返回值将会作为 this.state 的初始值。</span></div><div class="line">    getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"getInitialState"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        <span class="comment">//必须有返回值，可以是NULL或者一个对象。</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//组件将要被渲染</span></div><div class="line">    componentWillMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"componentWillmount"</span>);</div><div class="line"> </div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//渲染视图</span></div><div class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"render"</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line"> </div><div class="line">            <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        );</div><div class="line">        <span class="comment">//你也可以返回 null 或者 false 来表明不需要渲染任何东西</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//渲染视图完成后</span></div><div class="line">    componentDidMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"componentDidMount"</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">this</span>.loadDataToSetState();</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//组件接收到新属性,在初始化渲染的时候，该方法不会调用。</span></div><div class="line">    componentWillReceiveProps:<span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"componentWillReceiveProps"</span>);</div><div class="line">        <span class="comment">//console.log(nextProps);</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//组件是否需要更新</span></div><div class="line">    shouldComponentUpdate:<span class="function"><span class="keyword">function</span>(<span class="params">nextProps,nextState</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"shouldComponentUpdate"</span>);</div><div class="line">        <span class="comment">//console.log(nextProps+"|"+nextState);</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//组件将要被更新</span></div><div class="line">    componentWillUpdate:<span class="function"><span class="keyword">function</span>(<span class="params">nextProps,nextState</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"componentWillUpdate"</span>);</div><div class="line">        <span class="comment">//console.log(nextProps+"|"+nextState);</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//组件更新完毕</span></div><div class="line">    componentDidUpdate:<span class="function"><span class="keyword">function</span>(<span class="params">prevProps,prevState</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"conponentDidUpdate"</span>);</div><div class="line">        <span class="comment">//console.log(prevProps+"|"+prevState);</span></div><div class="line">    &#125;,</div><div class="line"> </div><div class="line">    <span class="comment">//组件被销毁之前，做清理操作</span></div><div class="line">    componentWillUnmount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"componentWillUnmount"</span>);</div><div class="line">    &#125;,</div><div class="line"> </div><div class="line">    <span class="attr">loadDataToSetState</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"loadDataToSetState"</span>);</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            <span class="attr">name</span> : <span class="string">"RN"</span></div><div class="line">        &#125;) </div><div class="line">    &#125;,</div><div class="line"> </div><div class="line"> </div><div class="line">&#125;);</div><div class="line"> </div><div class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</div><div class="line"> </div><div class="line">&#125;);</div><div class="line"> </div><div class="line"> </div><div class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, () =&gt; AwesomeProject);</div></pre></td></tr></table></figure>
<p>最后的输出如下，我们在componentDidMount中调用了loadDataToSetState函数，该函数中通过了setState函数对state进行了设置，这时候就会回调shouldComponentUpdate，如果返回true，则会继续调用componentWillUpdate，render,conponentDidUpdate，之后按返回键退出应用，则会进行销毁操作，回调componentWillUnmount</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">getDefaultProps</div><div class="line">getInitialState</div><div class="line">componentWillmount</div><div class="line">render</div><div class="line">componentDidMount</div><div class="line">loadDataToSetState</div><div class="line">shouldComponentUpdate</div><div class="line">componentWillUpdate</div><div class="line">render</div><div class="line">conponentDidUpdate</div><div class="line">componentWillUnmount</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="http://www.lijianfei.cn/" target="_blank" rel="external">原文地址已失效</a>，<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程：语法篇
</a>，<a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex 布局教程：实例篇
</a>，<a href="http://blog.cnbang.net/tech/2698/" target="_blank" rel="external">React Native通信机制详解
</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native学习笔记一]]></title>
      <url>http://dalufan.com/2016/05/26/android-react-native-learn-day01/</url>
      <content type="html"><![CDATA[<h3 id="0x00-升级版本"><a href="#0x00-升级版本" class="headerlink" title="0x00 升级版本"></a>0x00 升级版本</h3><p>自从上次安装好react-native之后，很久没运行了，碰巧周末，再捡起来。首先关注的是版本，据说更新很快，就先更新下版本吧。</p>
<h4 id="查看当前版本"><a href="#查看当前版本" class="headerlink" title="查看当前版本"></a>查看当前版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">daludeMacBook-Pro:AwesomeProject dalu$ react-<span class="keyword">native</span> --version</div><div class="line">react-<span class="keyword">native</span>-cli: <span class="number">1.0</span>.0</div><div class="line">react-<span class="keyword">native</span>: <span class="number">0.24</span>.1</div></pre></td></tr></table></figure>
<p>在项目目录下的<code>package.json</code>文件中也能看到当前版本。</p>
<a id="more"></a> 
<p>查询最新包信息或者在<a href="https://www.npmjs.com/package/react-native" target="_blank" rel="external">链接</a>中查看最新版本：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">daludeMacBook-Pro:AwesomeProject dalu$ npm info react-native</div><div class="line"> </div><div class="line">&#123; name: 'react-native',</div><div class="line">  description: 'A framework for building native apps using React',</div><div class="line">  'dist-tags': &#123; latest: '0.26.3', next: '0.27.0-rc1' &#125;,</div><div class="line">  time: </div><div class="line">   &#123; modified: '2016-06-01T19:45:34.000Z',</div><div class="line">     created: '2015-01-27T23:23:42.403Z',</div><div class="line">     '0.26.3': '2016-06-01T18:14:09.286Z',</div><div class="line">     '0.27.0-rc2': '2016-05-27T20:07:46.471Z',</div><div class="line">     '0.27.0-rc1': '2016-05-25T01:23:15.796Z',</div><div class="line">     '0.26.2': '2016-05-24T17:01:13.725Z',</div><div class="line">     '0.26.1': '2016-05-21T23:40:59.040Z',</div><div class="line">     ...</div><div class="line">     &#125;,</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>可见最新的版本是0.26.3，预览版还是不用吧。</p>
<h4 id="升级命令"><a href="#升级命令" class="headerlink" title="升级命令"></a>升级命令</h4><p>在项目中运行<code>npm install --save react-native@0.26.3</code> 即可自动升级。随后还要更新templates文件，运行<code>react-native upgrade</code>。如果需要降级，方法同升级一样，后面@相应的版本号。</p>
<p>之后查看<code>package.json</code>中，react的版本号没有变化，随后输入<code>react-native android</code>,发现版本号跟着变化了，运行也正常了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"dependencies": &#123;</div><div class="line">    "react": "15.0.2",</div><div class="line">    "react-native": "^0.26.3"</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//run</span></div><div class="line">react-native run-android</div></pre></td></tr></table></figure>
<h3 id="0x01-文档详解"><a href="#0x01-文档详解" class="headerlink" title="0x01 文档详解"></a>0x01 文档详解</h3><h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">普通内联样式:&#123;&#123;&#125;&#125;,第一层｛｝是表达式，第二层｛｝是js对象；</div><div class="line">JSX中遇到 &#123;&#125; 包裹的是 JS，遇到 &lt;&gt; 包裹的是 组件</div></pre></td></tr></table></figure>
<p>有两种定义样式的方法，其中<code>var</code>表示变量，<code>const</code>表示常量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">base</span>: &#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">38</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">38</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#F5FCFF'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//&#123;样式类.属性&#125;</span></div><div class="line">&lt;Text style=&#123;styles.base&#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">//样式表和内联样式共存</span></div><div class="line">&lt;View style=&#123;[styles.base, styles.background, &#123;<span class="attr">fontSize</span>:<span class="number">40</span>, <span class="attr">width</span>:<span class="number">80</span>&#125;]&#125; /&gt;</div><div class="line"><span class="comment">//为了避免多个值的冲突，最右边的元素优先级最高，而否定型的取值如false、undefined和null则会被忽略</span></div><div class="line">&lt;View style=&#123;[styles.base, <span class="keyword">this</span>.state.active &amp;&amp; styles.active]&#125; /&gt;</div><div class="line"><span class="comment">//当this.state.active为false时，styles.active就会被忽略掉</span></div></pre></td></tr></table></figure>
<p>不应该在<code>render</code>方法中创建样式，这样会在每次渲染的时候重复创建。<br>如果有多个样式，记得把这样动态创建的样式对象放到数组的最后。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;View</div><div class="line">  style=&#123;[styles.base, &#123;</div><div class="line">    <span class="attr">width</span>: <span class="keyword">this</span>.state.width,</div><div class="line">    <span class="attr">height</span>: <span class="keyword">this</span>.state.width * <span class="keyword">this</span>.state.aspectRatio</div><div class="line">  &#125;]&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><h5 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./my-icon.png'</span>)&#125; /&gt;</div></pre></td></tr></table></figure>
<p>图片文件的查找会和JS模块的查找方式一样。在上面的这个例子里，是哪个组件引用了这个图片，Packager就会去这个组件所在的文件夹下查找<code>my-icon.png</code>。并且，如果你有<code>my-icon.ios.png</code>和<code>my-icon.android.png</code>，Packager就会根据平台而选择不同的文件。</p>
<p>你还可以使用<code>@2x</code>，<code>@3x</code>这样的文件名后缀，来为不同的屏幕精度提供图片。比如下面这样的代码结构：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">├── button.js</div><div class="line">└── img</div><div class="line">    ├── check@<span class="number">2</span>x.png</div><div class="line">    └── check@<span class="number">3</span>x.png</div></pre></td></tr></table></figure>
<p>并且<code>button.js</code>里有这样的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./img/check.png'</span>)&#125; /&gt;</div></pre></td></tr></table></figure>
<h5 id="这样会带来如下的一些好处"><a href="#这样会带来如下的一些好处" class="headerlink" title="这样会带来如下的一些好处"></a>这样会带来如下的一些好处</h5><ol>
<li>iOS和Android一致的文件系统。</li>
<li>图片和JS代码处在相同的文件夹，这样组件就可以包含自己所用的图片而不用单独去设置。</li>
<li>不需要全局命名。你不用再担心图片名字的冲突问题了。</li>
<li>只有实际被用到（即被require）的图片才会被打包到你的app。</li>
<li>现在在开发期间，增加和修改图片不需要重新编译了，只要和修改js代码一样刷新你的模拟器就可以了。</li>
<li>与访问网络图片相比，Packager可以得知图片大小了，不需要在代码里再声明一遍尺寸。</li>
<li>现在通过npm来分发组件或库可以包含图片了。</li>
</ol>
<p>注意：为了使新的图片资源机制正常工作，require中的图片名字必须是一个静态字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正确</span></div><div class="line">&lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./my-icon.png'</span>)&#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">// 错误</span></div><div class="line"><span class="keyword">var</span> icon = <span class="keyword">this</span>.props.active ? <span class="string">'my-icon-active'</span> : <span class="string">'my-icon-inactive'</span>;</div><div class="line">&lt;Image source=&#123;require('./' + icon + '.png')&#125; /&gt;</div><div class="line"></div><div class="line">// 正确</div><div class="line">var icon = this.props.active ? require('./my-icon-active.png') : require('./my-icon-inactive.png');</div><div class="line">&lt;Image source=&#123;icon&#125; /&gt;</div></pre></td></tr></table></figure>
<h5 id="混合App"><a href="#混合App" class="headerlink" title="混合App"></a>混合App</h5><p>如果你在编写一个混合App（一部分UI使用React Native，而另一部分使用平台原生代码），也可以使用已经打包到App中的图片资源（通过Xcode的asset类目或者Android的drawable文件夹打包）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'app_icon'</span>&#125;&#125; style=&#123;&#123;<span class="attr">width</span>: <span class="number">40</span>, <span class="attr">height</span>: <span class="number">40</span>&#125;&#125; /&gt;</div></pre></td></tr></table></figure>
<p>注意：这一做法并没有任何安全检查。你需要自己确保图片在应用中确实存在，而且还需要<code>指定尺寸</code>。</p>
<h5 id="网络图片"><a href="#网络图片" class="headerlink" title="网络图片"></a>网络图片</h5><p>在使用网络图片时候，需要显式的<code>指定图片大小</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正确</span></div><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'https://facebook.github.io/react/img/logo_og.png'</span>&#125;&#125;</div><div class="line">       style=&#123;&#123;<span class="attr">width</span>: <span class="number">400</span>, <span class="attr">height</span>: <span class="number">400</span>&#125;&#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">// 错误</span></div><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'https://facebook.github.io/react/img/logo_og.png'</span>&#125;&#125; /&gt;</div></pre></td></tr></table></figure>
<p><code>在浏览器中</code>，如果你不给图片指定尺寸，那么浏览器会首先渲染一个0x0大小的元素占位，然后下载图片，在下载完成后再基于正确的尺寸来渲染图片。这样做的最大问题是UI会在图片加载的过程中上下跳动，使得用户体验非常糟糕。</p>
<p><code>在React Native</code>中我们有意避免了这一行为，<code>需要指定尺寸</code>。如此一来开发者就需要做更多工作来提前知晓远程图片的尺寸（或宽高比），但我们相信这样可以带来更好的用户体验。然而，从已经打包好的应用资源文件中读取图片（使用<code>require(&#39;image!x&#39;)</code>语法）则<code>无需指定尺寸</code>，因为它们的尺寸在加载时就可以立刻知道。</p>
<p>比如这样一个引用<code>require(&#39;image!logo&#39;)</code>的实际输出结果可能是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"__packager_asset"</span>:<span class="literal">true</span>,<span class="string">"isStatic"</span>:<span class="literal">true</span>,<span class="string">"path"</span>:<span class="string">"/Users/react/HelloWorld/iOS/Images.xcassets/react.imageset/logo.png"</span>,<span class="string">"uri"</span>:<span class="string">"logo"</span>,<span class="string">"width"</span>:<span class="number">591</span>,<span class="string">"height"</span>:<span class="number">573</span>&#125;</div></pre></td></tr></table></figure>
<p>在React Native中，另一个值得一提的变动是我们把<code>src</code>属性改为了<code>source</code>属性，而且并不接受字符串，正确的值是一个带有<code>uri</code>属性的对象。 可以在其中保存我们需要的参数<code>{uri: ..., crop: {left: 10, top: 50, width: 20, height: 40}}</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'something.jpg'</span>&#125;&#125; /&gt;</div></pre></td></tr></table></figure>
<h5 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=<span class="string">&#123;...&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Inside<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Image</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="http://www.2cto.com/kf/201601/486196.html" target="_blank" rel="external">升级</a>，<a href="http://reactnative.cn/docs/0.26/getting-started.html" target="_blank" rel="external">文档</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义ImageView系列第一版]]></title>
      <url>http://dalufan.com/2016/05/17/android-widget-imageview-1/</url>
      <content type="html"><![CDATA[<p>第一版一个很重要的地方就是<code>Paint.setXfermode(Xfermode xfermode)</code>方法，设置两图的相交模式，这里只作简单的介绍：</p>
<p>系统提供的Xfermode子类有三个：</p>
<ol>
<li><p>AvoidXfermode 指定了一个颜色和容差，强制Paint避免在它上面绘图(或者只在它上面绘图)。</p>
</li>
<li><p>PixelXorXfermode 当覆盖已有的颜色时，应用一个简单的像素XOR操作。</p>
</li>
<li><p>PorterDuffXfermode 这是一个非常强大的转换模式，使用它，可以使用图像合成的16条Porter-Duff规则的任意一条来控制Paint如何与已有的Canvas图像进行交互。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Canvas canvas = <span class="keyword">new</span> Canvas(bitmap1);   </div><div class="line">paint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(Mode.SRC_IN));   </div><div class="line">canvas.drawBitmap(mask, <span class="number">0f</span>, <span class="number">0f</span>, paint);</div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>可以简单理解为，canvas原有的图片就是背景，即dst， 新画上去的图片就是前景，即src，这样，不同的Mode展示效果如下：</p>
<p><img src="/article_images/android-widget-imageview-01.jpg" alt="alt"></p>
<p><strong>代码如下</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.dalu.learndemo.widget.imageview;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap.Config;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Color;</div><div class="line"><span class="keyword">import</span> android.graphics.Paint;</div><div class="line"><span class="keyword">import</span> android.graphics.PorterDuff.Mode;</div><div class="line"><span class="keyword">import</span> android.graphics.PorterDuffXfermode;</div><div class="line"><span class="keyword">import</span> android.graphics.Rect;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.BitmapDrawable;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 基本的三个构造函数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleImageView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 自定义View实现过程中很重要的onDraw绘制图形的方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line">        Drawable drawable = getDrawable();</div><div class="line">        <span class="comment">// 空值判断，防止无效操作</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == drawable) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (getWidth() == <span class="number">0</span> || getHeight() == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!(drawable <span class="keyword">instanceof</span> BitmapDrawable))</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        Bitmap b = ((BitmapDrawable) drawable).getBitmap();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == b)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="comment">// 用新的Config来复制源bitmap</span></div><div class="line">        <span class="comment">// true表示产生的图片是可变的。(比如，它的像素能被修改)</span></div><div class="line">        Bitmap bitmap = b.copy(Bitmap.Config.ARGB_8888, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> w = getWidth();</div><div class="line">        Bitmap roundBitmap = getCroppedBitmap(bitmap, w);</div><div class="line">        canvas.drawBitmap(roundBitmap, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始Bitmap对象的缩放裁剪过程</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> bmp</div><div class="line">     *            初始Bitmap对象</div><div class="line">     * <span class="doctag">@param</span> radius</div><div class="line">     *            圆形图片直径大小</div><div class="line">     * <span class="doctag">@return</span> 返回一个圆形的缩放裁剪过后的Bitmap对象</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">getCroppedBitmap</span><span class="params">(Bitmap bmp, <span class="keyword">int</span> radius)</span> </span>&#123;</div><div class="line">        Bitmap sbmp;</div><div class="line">        <span class="comment">// 比较初始Bitmap宽高和给定的圆形直径，判断是否需要缩放裁剪Bitmap对象</span></div><div class="line">        <span class="keyword">if</span> (bmp.getWidth() != radius || bmp.getHeight() != radius)</div><div class="line">            sbmp = Bitmap.createScaledBitmap(bmp, radius, radius, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            sbmp = bmp;</div><div class="line"></div><div class="line">        Bitmap output = Bitmap.createBitmap(sbmp.getWidth(), sbmp.getHeight(), Config.ARGB_8888);</div><div class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(output);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Paint paint = <span class="keyword">new</span> Paint();</div><div class="line">        <span class="keyword">final</span> Rect rect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, sbmp.getWidth(), sbmp.getHeight());</div><div class="line"></div><div class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">        paint.setFilterBitmap(<span class="keyword">true</span>);</div><div class="line">        paint.setDither(<span class="keyword">true</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//将会以颜色ARBG填充整个控件的Canvas背景 </span></div><div class="line">        canvas.drawARGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">        paint.setColor(Color.parseColor(<span class="string">"#BAB399"</span>));</div><div class="line">        <span class="comment">// sbmp.getWidth() * 0.5f 圆心的x坐标</span></div><div class="line">        canvas.drawCircle(sbmp.getWidth() * <span class="number">0.5f</span>, sbmp.getHeight() * <span class="number">0.5f</span>, sbmp.getWidth() / <span class="number">2</span>, paint);</div><div class="line">        <span class="comment">// 核心部分，设置两张图片的相交模式，在这里就是上面绘制的Circle和下面绘制的Bitmap</span></div><div class="line">        paint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(Mode.SRC_IN));</div><div class="line">        canvas.drawBitmap(sbmp, rect, rect, paint);</div><div class="line">        <span class="keyword">return</span> output;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="http://www.jianshu.com/p/4f55200cea14" target="_blank" rel="external">原文链接</a>，<a href="http://www.cnblogs.com/over140/archive/2011/11/21/2256727.html" target="_blank" rel="external">Bitmap api</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用maven配置springmvc的过程中遇到的问题]]></title>
      <url>http://dalufan.com/2016/04/26/web-maven-springmvc-start-learn/</url>
      <content type="html"><![CDATA[<h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>一般配置过程参考<a href="http://blog.csdn.net/fulai0_0/article/details/42967481" target="_blank" rel="external">链接</a>。</p>
<p>说明：该过程的最后，Maven Build，<code>Apply --&gt; Run</code>只是加载了项目的依赖包，并没有配置Server，还要单独下载Tomcat。</p>
<p>Tomcat的安装参考<a href="http://blog.csdn.net/huyisu/article/details/38372663" target="_blank" rel="external">链接</a>。</p>
<p>这之后项目还是不能运行的。</p>
<a id="more"></a>
<h3 id="0x01-问题"><a href="#0x01-问题" class="headerlink" title="0x01 问题"></a>0x01 问题</h3><blockquote>
<p>run as里 没有 run on server 选项</p>
</blockquote>
<p>解决：在项目-&gt;右击-&gt;Properties-&gt;Project Facets-&gt;Modify Project，选择Java和DynamicWeb Module。</p>
<blockquote>
<p>jsp页面提示“HttpServlet was not found on the Java”</p>
</blockquote>
<p>参考<a href="http://jingyan.baidu.com/article/f79b7cb34f40569144023ef9.html" target="_blank" rel="external">链接</a></p>
<blockquote>
<p>log4j报错：java.lang.ClassNotFoundException: org.springframework.web.util.Log4jConfigListener</p>
</blockquote>
<p>解决：在项目-&gt;右击-&gt;Properties-&gt;Deployment Assembly-&gt;Add-&gt;Java buid path entries-&gt;Next-&gt;Maven Dependencies</p>
<p>参考<a href="http://www.cnblogs.com/ning-blogs/p/4592752.html" target="_blank" rel="external">链接</a></p>
<blockquote>
<p>maven packagin改为war后报错：maven install Failed to execute goal org.apache.maven.plugins:maven-war-plugin:2.2:war (default-war) on project web_nanchang</p>
</blockquote>
<p>参考<a href="http://www.cnblogs.com/zhouyalei/p/3357145.html" target="_blank" rel="external">链接</a></p>
<p>最终的pom.xml内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>hagk.dalu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>WebContent<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- junit --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- log4j --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- spring 的基本依赖 开始 --&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- spring 的基本依赖 结束 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UML中的五种关系]]></title>
      <url>http://dalufan.com/2016/04/23/java-uml-learn/</url>
      <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/DebugLZQ/archive/2013/05/13/3066715.html" target="_blank" rel="external">原文地址</a></p>
<h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>Android官方出了<a href="http://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&amp;mid=403539764&amp;idx=1&amp;sn=d30d89e6848a8e13d4da0f5639100e5f#rd" target="_blank" rel="external">MVP架构的例子</a>，了解的过程中看到了类图，没看懂，这里做下准备。</p>
<p>什么是类图？</p>
<p>类图可能是UML中使用的最多的一种图。</p>
<p>和其他图一样，类图的基本语法并不复杂，可能一两天就能掌握，但是真正做到灵活的使用类图，可能需呀多年的功力。</p>
<p>类图是锻炼OOA(OO Analysis)和OOD(OO Design)思想的重要工具，有助于OOA、OOD思想的提升。</p>
<p>本篇博文，重点讲述类图中类与类之间的关系以及这种关系在代码中的实现形式。写作本文的原因是：网上关于UML类图的语法规则等的资料很多，但是涉及到关系在代码中实现形式的文章却很少。这是很容易理解的：UML语法规范什么的各种书上导出都是，网页上的也很多都是对各种语法规范的Copy；而类之间的关系反应到代码层面需要加入个人的理解。两者的区别是一个不需要动脑子，Copy过来就行，而另一个需要动脑子。</p>
<p>类与类之间的关系可以根据关系的强度依次分为以下五种：</p>
<blockquote>
<p>依赖关系(Dependency)<code>---</code>关联关系(Association)<code>---</code>聚合(Aggregation)<code>---</code>组合(Composition)<code>---</code>泛化(Generalization)</p>
</blockquote>
<a id="more"></a>
<h3 id="0x01-依赖关系-Dependency"><a href="#0x01-依赖关系-Dependency" class="headerlink" title="0x01 依赖关系(Dependency)"></a>0x01 依赖关系(Dependency)</h3><p>依赖关系使用虚线加箭头表示，如下图所示：</p>
<p><img src="/article_images/java_uml_01.png" alt="alt"></p>
<p>这个例子可能不太好（Animal(动物)体内有Water），换一个：</p>
<p><img src="/article_images/java_uml_02.png" alt="alt"></p>
<p>解释以下：Person 和 Computer之间是没有关系的，但是由于偶尔的需要，Person需要使用Computer，这时Person就依赖于Computer.</p>
<p><code>依赖关系是五种关系中耦合最小的一种关系。</code></p>
<p>类A要完成某个功能必须引用类B，则类A依赖类B。上述依赖关系在代码中的表现形式：这两个关系类都不会增加属性。</p>
<p><img src="/article_images/java_uml_03.png" alt="alt"></p>
<p>依赖关系的三种表现形式：</p>
<p>1.Computer类是public的，Person类可以调用它。</p>
<p>2.Computer类是Person类中某个方法的局部变量，则Person类可以调用它。代码如下：<br><img src="/article_images/java_uml_04.png" alt="alt"></p>
<p>Person有一个Programing方法，Computer类作为该方法的变量来使用。注意Computer类的生命周期，当Programing方法被调用的时候，才被实例化。持有Computer类的是Person类的一个方法，而不是Person类，这点是最重要的。</p>
<p>3.Computer类作为Person类中某个方法的参数或返回值。</p>
<p><img src="/article_images/java_uml_05.png" alt="alt"></p>
<p>Computer类被Person类的一个方法所持有，生命周期随着方法执行结束而结束。在依赖关系中，必须使用这三种方法之一。</p>
<h3 id="0x02-关联关系-Association"><a href="#0x02-关联关系-Association" class="headerlink" title="0x02 关联关系(Association)"></a>0x02 关联关系(Association)</h3><p>关联关系是实线加箭头表示。表示类之间的关系比依赖要强。例如，水和气候是关联的，表示如下：</p>
<p><img src="/article_images/java_uml_06.png" alt="alt"></p>
<p>在代码中的表现如下：<br><img src="/article_images/java_uml_07.png" alt="alt"></p>
<p>可见，在Water类属性中增加了Climate类。关联关系有单向关联、双向关联、自身关联、多维关联等等。其中后三个可以不加箭头。</p>
<ul>
<li><p>单向关联：<br><img src="/article_images/java_uml_08.png" alt="alt"></p>
</li>
<li><p>双向关联：<br><img src="/article_images/java_uml_09.png" alt="alt"></p>
</li>
<li><p>自身关联：<br><img src="/article_images/java_uml_10.png" alt="alt"></p>
</li>
<li><p>多维关联：<br><img src="/article_images/java_uml_11.png" alt="alt"></p>
</li>
</ul>
<p><strong>依赖和关联的区别：</strong></p>
<p>1.从类的属性是否增加的角度看：</p>
<p>发生依赖关系的两个类都不会增加属性。其中的一个类作为另一个类的方法的参数或者返回值，或者是某个方法的变量而已。发生关联关系的两个类，其中的一个类成为另一个类的属性，而属性是一种更为紧密的耦合，更为长久的持有关系。(<code>依赖是局部变量，关联更像是全局变量</code>)</p>
<p>2.从关系的生命周期来看：</p>
<p>依赖关系是仅当类的方法被调用时而产生，伴随着方法的结束而结束了。关联关系是当类实例化的时候即产生，当类销毁的时候，关系结束。相比依赖讲，关联关系的生存期更长。</p>
<h3 id="0x03-聚合-Aggregation"><a href="#0x03-聚合-Aggregation" class="headerlink" title="0x03 聚合(Aggregation)"></a>0x03 聚合(Aggregation)</h3><p>引用程杰的《大话设计模式》里举大那个大雁的例子 ：</p>
<p>大雁喜欢热闹害怕孤独，所以它们一直过着群居的生活，这样就有了雁群，每一只大雁都有自己的雁群，每个雁群都有好多大雁，大雁与雁群的这种关系就可以称之为聚合。另外每只大雁都有两只翅膀，大雁与雁翅的关系就叫做组合。</p>
<p>有此可见：聚合的关系明显没有组合紧密，大雁不会因为它们的群主将雁群解散而无法生存；而雁翅就无法脱离大雁而单独生存——组合关系的类具有相同的生命周期。</p>
<p>聚合关系图：<br><img src="/article_images/java_uml_12.png" alt="alt"></p>
<h3 id="0x04-组合-Composition"><a href="#0x04-组合-Composition" class="headerlink" title="0x04 组合(Composition)"></a>0x04 组合(Composition)</h3><p>组合关系图：<br><img src="/article_images/java_uml_13.png" alt="alt"></p>
<p>在代码中表现如下：<br><img src="/article_images/java_uml_14.png" alt="alt"></p>
<p><strong>这两种关系的区别是：</strong></p>
<p>1.构造函数不同:</p>
<p>聚合类的构造函数中包含另一个类的实例作为参数，因为构造函数中传递另一个类的实例，因此大雁类可以脱离雁群类独立存在。</p>
<p>组合类的构造函数包含另一个类的实例化，因为在构造函数中进行实例化，因此两者紧密耦合在一起，同生同灭，翅膀类不能脱离大雁类存在。</p>
<p>2.信息的封装性不同:</p>
<p>在聚合关系中，客户端可以同时了解GooseGroup类和Goose类，因为他们是独立的。在组合关系中，客户端只认识大雁类，根本不知道翅膀类的存在，因为翅膀类被严密地封装在大雁类中。</p>
<h3 id="0x05-泛化-Generalization"><a href="#0x05-泛化-Generalization" class="headerlink" title="0x05 泛化(Generalization)"></a>0x05 泛化(Generalization)</h3><p>泛化是学术名称，通俗的来讲，通常包含类与类之间的继承关系和类与接口实现关系。</p>
<p>类与类之间的泛化<br><img src="/article_images/java_uml_15.png" alt="alt"></p>
<p>接口的实现<br><img src="/article_images/java_uml_16.png" alt="alt"></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Android 开发艺术探索》读书笔记--第二章 IPC机制]]></title>
      <url>http://dalufan.com/2016/03/17/android-art-of-android-deveopment-note-2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>总而言之，现在完全不可能让时钟倒转了。你不能永远总是对过去也许会发生的事耿耿于怀。你应该认识到你与大多数人一样地过得很好，或许还要好得多，那就应该心满意足了。  – 《长日留痕》</p>
</blockquote>
<h3 id="0x01-Android中的多进程模式"><a href="#0x01-Android中的多进程模式" class="headerlink" title="0x01 Android中的多进程模式"></a>0x01 Android中的多进程模式</h3><p>通过给四大组件指定<code>android:process</code>属性就可 以开启多进程模式，默认进程的进程名是包名packageName，进程名以:开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中，而进程名不以:开头的进程属于全局进程，其他应用通过ShareUID的方式可以和它跑在同一个进程中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">android:process=<span class="string">":xyz"</span> <span class="comment">//进程名是 packageName:xyz</span></div><div class="line">android:process=<span class="string">"aaa.bbb.ccc"</span> <span class="comment">//进程名是 aaa.bbb.ccc</span></div></pre></td></tr></table></figure>
<p>Android系统会为每个应用分配一个唯一的UID，具有相同UID的应用才能共享数据。<code>两个应用通过ShareUID跑在同一个进程中是有要求的</code>，<code>需要这两个应用有相同的ShareUID并且签名相同才可以</code>。 在这种情况下，它们可以相互访问对方的私有数据，比如data目录、组件信息等，不管它们是否跑在同一个进程中。如果它们跑在同一个进程中，还可以共享内存数据，它们看起来就像是一个应用的两个部分。</p>
<p>Android系统会为每个进程分配一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，所以不同的虚拟机中访问同一个类的对象会产生多个副本。</p>
<a id="more"></a> 
<p>使用多进程容易造成以下几个问题：</p>
<ol>
<li>静态成员和单例模式完全失效；</li>
<li>线程同步机制完全失效：无论锁对象还是锁全局对象都无法保证线程同步，因为不同进程锁的不是同一个对象；</li>
<li>SharedPreferences的可靠性下降：SharedPreferences不支持并发读写；</li>
<li>Application会多次创建：当一个组件跑在一个新的进程的时候，系统要在创建新的进程的同时分配独立的虚拟机，应用会重新启动一次，也就会创建新的Application。运行在同一个进程中的组件是属于同一个虚拟机和同一个Application。同一个应用的不同组件，如果它们运行在不同进程中，那么和它们分别属于两个应用没有本质区别。</li>
</ol>
<h3 id="0x02-IPC基础概念介绍"><a href="#0x02-IPC基础概念介绍" class="headerlink" title="0x02 IPC基础概念介绍"></a>0x02 IPC基础概念介绍</h3><h4 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h4><p><code>Serializable</code>接口是Java中为对象提供标准的序列化和反序列化操作的接口，而<code>Parcelable</code>接口是Android提供的序列化方式的接口。</p>
<p><code>serialVersionUId</code>是一串long型数字，主要是用来辅助序列化和反序列化的，原则上序列化后的数据中的serialVersionUId只有和当前类的serialVersionUId相同才能够正常地被反序列化。</p>
<p><code>serialVersionUId的详细工作机制</code>：序列化的时候系统会把当前类的serialVersionUId写入序列化的文件中，当反序列化的时候系统会去检测文件中的serialVersionUId，看它是否和当前类的serialVersionUId一致，如果一致就说明序列化的类的版本和当前类的版本是相同的，这个时候可以成功反序列化；否则说明版本不一致无法正常反序列化。一般来说，我们应该手动指定serialVersionUId的值，这样就可以很大程度上避免反序列化失败的问题。</p>
<ol>
<li>静态成员变量属于类不属于对象，所以不参与序列化过程；</li>
<li>声明为transient的成员变量不参与序列化过程。</li>
</ol>
<h4 id="Parcelable"><a href="#Parcelable" class="headerlink" title="Parcelable"></a>Parcelable</h4><p><code>Parcelable</code>接口内部包装了可序列化的数据，可以在Binder中自由传输，Parcelable主要用在内存序列化上，可以直接序列化的有Intent、Bundle、Bitmap以及List和Map等等，集合类里面的元素必须也是可序列化的。对于将对象序列化到存储设备或者通过网络传输时，建议采用Serializable。下面是一个实现了Parcelable接口的示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> bookId;</div><div class="line">    <span class="keyword">public</span> String bookName;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> bookId, String bookName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bookId = bookId;</div><div class="line">        <span class="keyword">this</span>.bookName = bookName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//“内容描述”，如果含有文件描述符返回1，否则返回0，几乎所有情况下都是返回0</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//实现序列化操作，flags标识只有0和1，1表示标识当前对象需要作为返回值返回，不能立即释放资源，几乎所有情况都为0</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel out, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        out.writeInt(bookId);</div><div class="line">        out.writeString(bookName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//实现反序列化操作</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Book&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;Book&gt;() &#123;</div><div class="line">        <span class="comment">//从序列化后的对象中创建原始对象</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book(in);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;<span class="comment">//创建指定长度的原始对象数组</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Book</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        bookId = in.readInt();</div><div class="line">        bookName = in.readString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h4><p>Binder是Android中的一个类，它实现了IBinder接口。从IPC角度看，Binder是Android中一种跨进程通信的方式；Binder还可以理解为虚拟的物理设备，它的设备驱动是/dev/binder；从Framework层角度看，Binder是ServiceManager连接各种Manager和相应的ManagerService的桥梁；从Android应用层来说，Binder是客户端和服务端进行通信的媒介，当bindService的时候，服务端会返回一个包含了服务端业务调用的Binder对象，通过这个Binder对象，客户端就可以获取服务端提供的服务或者数据，这里的服务包括普通服务和基于AIDL的服务。</p>
<p>在Android开发中，Binder主要用在Service中，包括AIDL和Messenger，其中普通Service中的Binder不涉及进程间通信，较为简单；而Messenger的底层其实也是AIDL。</p>
<p>aidl工具根据aidl文件自动生成的java接口的解析：首先，它声明了几个接口方法，同时还声明了几个整型的id用于标识这些方法，id用于标识在transact过程中客户端所请求的到底是哪个方法；接着，它声明了一个内部类Stub，这个Stub就是一个Binder类，当客户端和服务端都位于同一个进程时，方法调用不会走跨进程的transact过程，而当两者位于不同进程时，方法调用需要走transact过程，这个逻辑由Stub内部的代理类Proxy来完成。<br>所以，这个接口的核心就是它的内部类Stub和Stub内部的代理类Proxy。 下面分析其中的方法：</p>
<ol>
<li><code>asInterface(android.os.IBinder obj)</code>：用于将服务端的Binder对象转换成客户端所需的AIDL接口类型的对象，这种转换过程是区分进程的，如果客户端和服务端是在同一个进程中，那么这个方法返回的是服务端的Stub对象本身，否则返回的是系统封装的Stub.Proxy对象。</li>
<li><code>asBinder</code>：返回当前Binder对象。</li>
<li><code>onTransact</code>：这个方法运行在服务端中的Binder线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。这个方法的原型是public Boolean onTransact(int code, Parcelable data, Parcelable reply, int flags)服务端通过code可以知道客户端请求的目标方法，接着从data中取出所需的参数，然后执行目标方法，执行完毕之后，将结果写入到reply中。如果此方法返回false，说明客户端的请求失败，利用这个特性可以做权限验证(即验证是否有权限调用该服务)。</li>
<li><code>Proxy#[Method]</code>：代理类中的接口方法，这些方法运行在客户端，当客户端远程调用此方法时，它的内部实现是：首先创建该方法所需要的参数，然后把方法的参数信息写入到_data中，接着调用transact方法来发起RPC请求，同时当前线程挂起；然后服务端的onTransact方法会被调用，直到RPC过程返回后，当前线程继续执行，并从_reply中取出RPC过程的返回结果，最后返回_reply中的数据。</li>
</ol>
<p>如果搞清楚了自动生成的接口文件的结构和作用之后，其实是可以不用通过AIDL而直接实现Binder的，主席写的<a href="https://github.com/singwhatiwanna/android-art-res/blob/master/Chapter_2/src/com/ryg/chapter_2/manualbinder/BookManagerImpl.java" target="_blank" rel="external">示例代码</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//IBookManager.aidl</span></div><div class="line"><span class="keyword">package</span> com.example.aidl.book;</div><div class="line"><span class="keyword">import</span> com.example.aidl.book.Book;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span></span>&#123;</div><div class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//gen/IBookManager.java</span></div><div class="line"></div><div class="line"><span class="keyword">package</span> com.example.aidl.book;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">IInterface</span> </span>&#123;</div><div class="line">    <span class="comment">/** Local-side IPC implementation stub class. */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span></span></div><div class="line">            <span class="title">com</span>.<span class="title">example</span>.<span class="title">aidl</span>.<span class="title">book</span>.<span class="title">IBookManager</span> &#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">"com.example.aidl.book.IBookManager"</span>;</div><div class="line"></div><div class="line">        <span class="comment">/** Construct the stub at attach it to the interface. */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Cast an IBinder object into an com.example.aidl.book.IBookManager</div><div class="line">         * interface, generating a proxy if needed.</div><div class="line">         */</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> com.example.aidl.book.<span class="function">IBookManager <span class="title">asInterface</span><span class="params">(</span></span></div><div class="line">                android.os.IBinder obj) &#123;</div><div class="line">            <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class="line">            <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> com.example.aidl.book.IBookManager))) &#123;</div><div class="line">                <span class="comment">//同进程</span></div><div class="line">                <span class="keyword">return</span> ((com.example.aidl.book.IBookManager) iin);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> com.example.aidl.book.IBookManager.Stub.Proxy(obj);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//该方法运行在服务端的Binder线程池中，</span></div><div class="line">        <span class="comment">//如果此方法return false，那么客户端的请求会出错，可以在此处做权限验证。</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data,</span></span></div><div class="line">                android.os.Parcel reply, <span class="keyword">int</span> flags)</div><div class="line">                <span class="keyword">throws</span> android.os.RemoteException &#123;</div><div class="line">            <span class="keyword">switch</span> (code) &#123;</div><div class="line">            <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</div><div class="line">                reply.writeString(DESCRIPTOR);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> TRANSACTION_getBookList: &#123;</div><div class="line">                data.enforceInterface(DESCRIPTOR);</div><div class="line">                java.util.List&lt;com.example.aidl.book.Book&gt; _result = <span class="keyword">this</span></div><div class="line">                        .getBookList();</div><div class="line">                reply.writeNoException();</div><div class="line">                reply.writeTypedList(_result);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> TRANSACTION_addBook: &#123;</div><div class="line">                data.enforceInterface(DESCRIPTOR);</div><div class="line">                com.example.aidl.book.Book _arg0;</div><div class="line">                <span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</div><div class="line">                    _arg0 = com.example.aidl.book.Book.CREATOR</div><div class="line">                            .createFromParcel(data);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    _arg0 = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">this</span>.addBook(_arg0);</div><div class="line">                reply.writeNoException();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span></span></div><div class="line">                <span class="title">com</span>.<span class="title">example</span>.<span class="title">aidl</span>.<span class="title">book</span>.<span class="title">IBookManager</span> &#123;</div><div class="line">            <span class="keyword">private</span> android.os.IBinder mRemote;</div><div class="line"></div><div class="line">            Proxy(android.os.IBinder remote) &#123;</div><div class="line">                mRemote = remote;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> mRemote;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> DESCRIPTOR;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//该方法运行在客户端</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> java.util.List&lt;com.example.aidl.book.Book&gt; getBookList()</div><div class="line">                    <span class="keyword">throws</span> android.os.RemoteException &#123;</div><div class="line">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">                java.util.List&lt;com.example.aidl.book.Book&gt; _result;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">                    <span class="comment">//transact方法调用后，当前线程会挂起</span></div><div class="line">                    mRemote.transact(Stub.TRANSACTION_getBookList, _data,</div><div class="line">                            _reply, <span class="number">0</span>);</div><div class="line">                    <span class="comment">//直到远程返回后，下面方法才会执行，所以如果一个远程方法是很耗时的，</span></div><div class="line">                    <span class="comment">//就不能在UI线程中发起此远程请求。</span></div><div class="line">                    <span class="comment">//而服务端的Binder方法，即transact实际调用的方法是运行在Binder线程池中的，不管是否耗时都应该进行同步</span></div><div class="line">                    _reply.readException();</div><div class="line">                    _result = _reply</div><div class="line">                            .createTypedArrayList(com.example.aidl.book.Book.CREATOR);</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    _reply.recycle();</div><div class="line">                    _data.recycle();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> _result;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(com.example.aidl.book.Book book)</span></span></div><div class="line">                    <span class="keyword">throws</span> android.os.RemoteException &#123;</div><div class="line">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">                    <span class="keyword">if</span> ((book != <span class="keyword">null</span>)) &#123;</div><div class="line">                        _data.writeInt(<span class="number">1</span>);</div><div class="line">                        book.writeToParcel(_data, <span class="number">0</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        _data.writeInt(<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                    mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class="number">0</span>);</div><div class="line">                    _reply.readException();</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    _reply.recycle();</div><div class="line">                    _data.recycle();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getBookList = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_addBook = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> java.util.List&lt;com.example.aidl.book.Book&gt; getBookList()</div><div class="line">            <span class="keyword">throws</span> android.os.RemoteException;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(com.example.aidl.book.Book book)</span></span></div><div class="line">            <span class="keyword">throws</span> android.os.RemoteException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/article_images/android-art-of-android-deveopment-note-2-01.png" alt="alt"></p>
<p>Binder的两个重要方法<code>linkToDeath</code>和<code>unlinkToDeath</code></p>
<p>Binder运行在服务端，如果由于某种原因服务端异常终止了的话会导致客户端的远程调用失败，所以Binder提供了两个配对的方法linkToDeath和unlinkToDeath，通过linkToDeath方法可以给Binder设置一个死亡代理，当Binder死亡的时候客户端就会收到通知，然后就可以重新发起连接请求从而恢复连接了。</p>
<p>如何给Binder设置死亡代理呢？</p>
<ol>
<li>声明一个DeathRecipient对象，DeathRecipient是一个接口，其内部只有一个方法bindeDied，实现这个方法就可以在Binder死亡的时候收到通知了。</li>
<li>在客户端绑定远程服务成功之后，给binder设置死亡代理</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> IBookManager mRemoteBookManager;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_book_manager);</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, BookManagerService.class);</div><div class="line">    bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> IBinder.DeathRecipient mDeathRecipient = <span class="keyword">new</span> IBinder.DeathRecipient() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binderDied</span><span class="params">()</span> </span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"binder died. tname:"</span> + Thread.currentThread().getName());</div><div class="line">            <span class="keyword">if</span> (mRemoteBookManager == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            mRemoteBookManager.asBinder().unlinkToDeath(mDeathRecipient, <span class="number">0</span>);</div><div class="line">            mRemoteBookManager = <span class="keyword">null</span>;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span>这里重新绑定远程Service</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"><span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName className, IBinder ibinder)</span> </span>&#123;</div><div class="line">            IBookManager bookManager = IBookManager.Stub.asInterface(ibinder);</div><div class="line">            mRemoteBookManager = bookManager;</div><div class="line">            mRemoteBookManager.asBinder().linkToDeath(mDeathRecipient, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName className)</span> </span>&#123;</div><div class="line">            mRemoteBookManager = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h3 id="0x03-Android中的IPC方式"><a href="#0x03-Android中的IPC方式" class="headerlink" title="0x03 Android中的IPC方式"></a>0x03 Android中的IPC方式</h3><p><strong>1</strong> 使用Bundle：Bundle实现了Parcelable接口，Activity、Service和Receiver都支持在Intent中传递Bundle数据。</p>
<p><strong>2</strong> 使用文件共享：这种方式简单，适合在对数据同步要求不高的进程之间进行通信，并且要妥善处理并发读写的问题。</p>
<p>SharedPreferences是一个特例，虽然它也是文件的一种，但是由于系统对它的读写有一定的缓存策略，即在内存中会有一份SharedPreferences文件的缓存，因此在多进程模式下，系统对它的读写就变得不可靠，当面对高并发读写访问的时候，有很大几率会丢失数据，因此，不建议在进程间通信中使用SharedPreferences。</p>
<p><strong>3</strong> 使用Messenger：Messenger是一种轻量级的IPC方案，它的底层实现就是AIDL。Messenger是以串行的方式处理请求的，即服务端只能一个个处理，不存在并发执行的情形，详细的示例见原书。</p>
<p><img src="/article_images/android-art-of-android-deveopment-note-2-03.png" alt="alt"></p>
<p><strong>4</strong> 使用AIDL</p>
<p>大致流程：首先建一个Service和一个AIDL接口，接着创建一个类继承自AIDL接口中的Stub类并实现Stub类中的抽象方法，在Service的onBind方法中返回这个类的对象，然后客户端就可以绑定服务端Service，建立连接后就可以访问远程服务端的方法了。</p>
<ol>
<li>AIDL支持的数据类型：基本数据类型、String和CharSequence、ArrayList、HashMap、Parcelable以及AIDL；</li>
<li>某些类即使和AIDL文件在同一个包中也要显式import进来；</li>
<li>AIDL中除了基本数据类，其他类型的参数都要标上方向：in、out或者inout；</li>
<li>AIDL接口中支持方法，不支持声明静态变量；</li>
<li>AIDL的包结构在服务端和客户端要保持一致，否则运行会报错。为了方便AIDL的开发，建议把所有和AIDL相关的类和文件全部放入同一个包中，这样做的好处是，当客户端是另一个应用的时候，可以直接把整个包复制到客户端工程中。</li>
<li>RemoteCallbackList是系统专门提供的用于删除跨进程Listener的接口。RemoteCallbackList是一个泛型，支持管理任意的AIDL接口，因为所有的AIDL接口都继承自IInterface接口。</li>
<li>Binder会把客户端传递过来的对象重新反序列化为一个新的对象，对象是不能直接跨进程传输的。</li>
</ol>
<p><strong>5</strong> 使用ContentProvider</p>
<ol>
<li>ContentProvider主要以表格的形式来组织数据，并且可以包含多个表；</li>
<li>ContentProvider还支持文件数据，比如图片、视频等，系统提供的MediaStore就是文件类型的ContentProvider；</li>
<li>ContentProvider对底层的数据存储方式没有任何要求，可以是SQLite、文件，甚至是内存中的一个对象都行；</li>
<li>要观察ContentProvider中的数据变化情况，可以通过ContentResolver的registerContentObserver方法来注册观察者；</li>
</ol>
<p><strong>6</strong> 使用Socket</p>
<p>Socket是网络通信中“套接字”的概念，分为流式套接字和用户数据包套接字两种，分别对应网络的传输控制层的TCP和UDP协议。</p>
<h3 id="0x04-Binder连接池"><a href="#0x04-Binder连接池" class="headerlink" title="0x04 Binder连接池"></a>0x04 Binder连接池</h3><p><strong>1</strong> 当项目规模很大的时候，创建很多个Service是不对的做法，因为service是系统资源，太多的service会使得应用看起来很重，所以最好是将所有的AIDL放在同一个Service中去管理。整个工作机制是：每个业务模块创建自己的AIDL接口并实现此接口，这个时候不同业务模块之间是不能有耦合的，所有实现细节我们要单独开来，然后向服务端提供自己的唯一标识和其对应的Binder对象；对于服务端来说，只需要一个Service，服务端提供一个queryBinder接口，这个接口能够根据业务模块的特征来返回相应的Binder对象给它们，不同的业务模块拿到所需的Binder对象后就可以进行远程方法调用了。<br>Binder连接池的主要作用就是将每个业务模块的Binder请求统一转发到远程Service去执行，从而避免了重复创建Service的过程。</p>
<p><strong>2</strong> 作者实现的Binder连接池BinderPool的<a href="https://github.com/singwhatiwanna/android-art-res/blob/master/Chapter_2/src/com/ryg/chapter_2/binderpool/BinderPool.java" target="_blank" rel="external">实现源码</a>，建议在AIDL开发工作中引入BinderPool机制。</p>
<h3 id="0x05-选用合适的IPC方式"><a href="#0x05-选用合适的IPC方式" class="headerlink" title="0x05 选用合适的IPC方式"></a>0x05 选用合适的IPC方式</h3><p><img src="/article_images/android-art-of-android-deveopment-note-2-02.png" alt="alt"></p>
<hr>
<p>参考链接：<a href="http://hujiaweibujidao.github.io/blog/2015/12/05/Art-of-Android-Development-Reading-Notes-2/" target="_blank" rel="external">五道口宅男</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Effective Java》读书笔记--第十章 并发（一）]]></title>
      <url>http://dalufan.com/2016/03/13/effective-java-learn-note-10-01/</url>
      <content type="html"><![CDATA[<h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>Atomic一词跟原子有点关系，后者曾被人认为是最小物质的单位。计算机中的Atomic是指不能分割成若干部分的意思。如果一段代码被认为是Atomic，则表示这段代码在执行过程中，是不能被中断的。通常来说，原子指令由硬件提供，供软件来实现原子方法（某个线程进入该方法后，就不会被中断，直到其执行完成）</p>
<p>在x86台上，CPU提供了在指令执行期间对总线加锁的手段。CPU芯片上有一条引线#HLOCK pin，如果汇编语言的程序中在一条指令前面加上前缀”LOCK”，经过汇编以后的机器代码就使CPU在执行这条指令的时候把#HLOCK pin的电位拉低，持续到这条指令结束时放开，从而把总线锁住，这样同一总线上别的CPU就暂时不能通过总线访问内存了，保证了这条指令在多处理器环境中的原子性。</p>
<a id="more"></a> 
<h3 id="同步访问共享的可变数据"><a href="#同步访问共享的可变数据" class="headerlink" title="同步访问共享的可变数据"></a>同步访问共享的可变数据</h3><h4 id="同步的意义："><a href="#同步的意义：" class="headerlink" title="同步的意义："></a>同步的意义：</h4><blockquote>
<p>如果没有同步，一个线程的变化就不能被其他线程看到。同步不仅可以阻止一个线程看到的对象处于不一致的状态，它还可以保证进入同步方法或者同步代码块的每个线程，都看到的是由同一锁保护的之前所有的修改效果（锁之后只能加锁的线程可以修改，解锁后会再一次保证一致性）。</p>
</blockquote>
<p>Java语言规范中说明：Java读或者写一个非long或者double类型的变量时，可以保证返回的值是某个线程中保存在该变量中的，即使多个线程在没有同步的情况下并发的修改这个变量也是如此（即，保证原子性）。虽然规范中保证了线程在读取原子数据时候，不会看到任意的数值，但它并不保证一个线程的写入对另一个线程是可见的，<code>因此，为了在线程间进行可靠的通信，以为了互斥访问，同步是必须的</code>。</p>
<p><a href="http://blog.sina.com.cn/s/blog_605f5b4f0102uw9c.html" target="_blank" rel="external">为何Java对long和double的赋值操作是非原子操作？</a>因为：long和double占用的字节数都是8，也就是64bits。<code>在32位操作系统上对64位的数据的读写要分两步完成，每一步取32位数据</code>。这样对double和long的赋值操作就会有问题：如果有两个线程同时写一个变量内存，一个进程写低32位，而另一个写高32位，这样将导致获取的64位数据是失效的数据。因此需要使用volatile关键字来防止此类现象。<code>volatile本身不保证获取和设置操作的原子性，仅仅保持修改的可见性。</code>但是java的内存模型保证声明为volatile的long和double变量的get和set操作是原子的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> stopRequested;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">        Thread backgroundThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span>(!stopRequested)&#123;</div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            &#125;);</div><div class="line">        backgroundThread.start();</div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        stopRequested = <span class="keyword">true</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码不能让backgroundThread在一秒后停止，因为stopRequested没有同步，backgroundThread不能看到其变化，编译后，虚拟机对上面的代码进行了优化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(!stopRequested)&#123;</div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line"><span class="comment">//转换为</span></div><div class="line"><span class="keyword">if</span>(!stopRequested)&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改方案有两种"><a href="#修改方案有两种" class="headerlink" title="修改方案有两种:"></a>修改方案有两种:</h4><p>一种修改stopRequested为volatile，第二种，添加同步方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> stopRequested;</div><div class="line"></div><div class="line">    <span class="comment">//读写两个方法都要同步，否则同步不会生效</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">requestStop</span><span class="params">()</span></span>&#123;</div><div class="line">        stopRequested = <span class="keyword">true</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">getStopRequested</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> stopRequested ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">        Thread backgroundThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span>(!getStopRequested())&#123;</div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            &#125;);</div><div class="line">        backgroundThread.start();</div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        requestStop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另一个例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> nextNum = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">generateNum</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> nextNum++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>volatile保证了nextNum的原子性，但<code>nextNum++</code>却破坏了取值的正确性，因为<code>++</code>不是原子性的，它的执行过程包括两步：读取旧值，写回新值。如果第二个线程在第一个线程取值和写值期间读取了这个值，就会导致两个线程获取的是同一个值。</p>
<p>解决方法：使用synchronized来同步方法，或者使用AtomicLong等原子类，他们会保证原子性。</p>
<h3 id="避免过度同步"><a href="#避免过度同步" class="headerlink" title="避免过度同步"></a>避免过度同步</h3><blockquote>
<p>在一个被同步的方法或者代码块中，永远不要放弃对客户端的控制，不要调用外来方法，即，在一个被同步的区域内，不要调用当前类中可能会被覆盖的方法，或者内部实例对象的外部方法。</p>
</blockquote>
<p>因为，相对于当前类，这些方法是外来方法，这些方法会带来哪些影响是不可控的，所以应当避免。</p>
<p>下面是个观察者的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;InnerObserver&lt;E&gt;&gt; observers = <span class="keyword">new</span> ArrayList&lt;InnerObserver&lt;E&gt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(InnerObserver&lt;E&gt; inner)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (observers) &#123;</div><div class="line">            observers.add(inner);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(InnerObserver&lt;E&gt; inner)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (observers) &#123;</div><div class="line">            observers.remove(inner);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyElementAdded</span><span class="params">(E element)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (observers) &#123;</div><div class="line">            <span class="keyword">for</span> (InnerObserver&lt;E&gt; inner : observers) &#123;</div><div class="line">                inner.added(<span class="keyword">this</span>, element);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</div><div class="line">        notifyElementAdded(element);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 观察者</div><div class="line">     * </div><div class="line">     * <span class="doctag">@author</span> Administrator</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> &lt;E&gt;</div><div class="line">     */</div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">InnerObserver</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">added</span><span class="params">(ObservableSet&lt;E&gt; set, E element)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        ObservableSet&lt;Integer&gt; set = <span class="keyword">new</span> ObservableSet&lt;Integer&gt;();</div><div class="line">        <span class="comment">//添加一观察者</span></div><div class="line">        set.addObserver(<span class="keyword">new</span> ObservableSet.InnerObserver&lt;Integer&gt;() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">added</span><span class="params">(ObservableSet&lt;Integer&gt; set, Integer element)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"element--&gt;"</span> + element);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            set.add(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//element--&gt;0</span></div><div class="line"><span class="comment">//element--&gt;1</span></div><div class="line"><span class="comment">//element--&gt;2</span></div><div class="line"><span class="comment">//element--&gt;3</span></div><div class="line"><span class="comment">//element--&gt;4</span></div><div class="line"><span class="comment">//element--&gt;5</span></div><div class="line"><span class="comment">//element--&gt;6</span></div><div class="line"><span class="comment">//element--&gt;7</span></div><div class="line"><span class="comment">//element--&gt;8</span></div><div class="line"><span class="comment">//element--&gt;9</span></div></pre></td></tr></table></figure>
<p>上面的写法是可以正常运行的，如果稍作修改，比如改成下面的代码，就会抛出<code>Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">added</span><span class="params">(ObservableSet&lt;Integer&gt; s, Integer element)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"element--&gt;"</span> + element);</div><div class="line">                <span class="keyword">if</span> (element == <span class="number">4</span>) &#123;</div><div class="line">                    s.removeObserver(<span class="keyword">this</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>因为，当notifyElementAdded在调用观察者的added方法的时候，它正处于遍历observers列表的过程，而added方法内部又调用removeObserver（即，observers.remove），这样才导致的异常。</p>
<p>下面是一个导致死锁的例子。后台线程在调用<code>s.removeObserver(inner)</code>的时候，企图锁定observers，但它无法获取到该锁，因为主线程已经锁定了observers。而这期间主线程在等待后台线程完成删除操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">added</span><span class="params">(<span class="keyword">final</span> ObservableSet&lt;Integer&gt; s, Integer element)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"element--&gt;"</span> + element);</div><div class="line">                <span class="keyword">if</span> (element == <span class="number">4</span>) &#123;</div><div class="line">                    <span class="comment">// s.removeObserver(this);</span></div><div class="line">                    ExecutorService executor = Executors</div><div class="line">                            .newSingleThreadExecutor();</div><div class="line">                    <span class="keyword">final</span> ObservableSet.InnerObserver&lt;Integer&gt; inner = <span class="keyword">this</span>;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        executor.submit(<span class="keyword">new</span> Runnable()&#123;</div><div class="line"></div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                                s.removeObserver(inner);</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                        &#125;).get();</div><div class="line">                        <span class="comment">//最后调用的get()是为了等待该任务运行结束</span></div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                        executor.shutdown();</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                &#125;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>应该在同步区域内做尽可能少的工作，一般步骤为：获得锁，检查共享数据，根据需要转换数据，然后释放锁。耗时操作应该在同步区域外执行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyElementAdded</span><span class="params">(E element)</span> </span>&#123;</div><div class="line">        List&lt;InnerObserver&lt;E&gt;&gt; snapshot = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">synchronized</span> (observers) &#123;</div><div class="line">            snapshot = <span class="keyword">new</span> ArrayList&lt;InnerObserver&lt;E&gt;&gt;(observers);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//把外来方法移出同步代码块</span></div><div class="line">        <span class="keyword">for</span> (InnerObserver&lt;E&gt; inner : snapshot) &#123;</div><div class="line">            inner.added(<span class="keyword">this</span>, element);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// CopyOnWriteArrayList是Java中的并发集合，是ArrayList的一种变种，通过重新拷贝整个底层数组，然后实现所有的写操作。由于内部数组永远不会改动，所以不需要锁定。大量使用会影响CopyOnWriteArrayList的效率，但其很适合观察者列表，因为他们几乎不会改动，并且经常被遍历。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;InnerObserver&lt;E&gt;&gt; observers = <span class="keyword">new</span> CopyOnWriteArrayList&lt;InnerObserver&lt;E&gt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(InnerObserver&lt;E&gt; inner)</span> </span>&#123;</div><div class="line">        observers.add(inner);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(InnerObserver&lt;E&gt; inner)</span> </span>&#123;</div><div class="line">        observers.remove(inner);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyElementAdded</span><span class="params">(E element)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (InnerObserver&lt;E&gt; inner : observers) &#123;</div><div class="line">            inner.added(<span class="keyword">this</span>, element);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</div><div class="line">        notifyElementAdded(element);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 观察者</div><div class="line">     * </div><div class="line">     * <span class="doctag">@author</span> Administrator</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> &lt;E&gt;</div><div class="line">     */</div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">InnerObserver</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">added</span><span class="params">(ObservableSet&lt;E&gt; set, E element)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="过度同步带来的性能影响："><a href="#过度同步带来的性能影响：" class="headerlink" title="过度同步带来的性能影响："></a>过度同步带来的性能影响：</h4><p>如果一个可变的类要做并发使用，应该使这个类变成线程安全的。通过内部同步，你可以获得明显比外部锁定整个对象更高的并发性，如果没有多线程的要求，就不应内部同步，而是交给用户在必要时候外部同步。</p>
<p>例如：<code>StringBuffer</code>的实例一般都是用于单线程中的，但它的内部却使用了内部同步，这也是后来出现<code>StringBuilder</code>的缘故。</p>
<p>注：如果方法修改了静态域，那边对于该域的访问也需要同步，即使它只用于单线程中。因为不能保证使用者会对这个域外部同步。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Android 开发艺术探索》读书笔记--第十二章 Bitmap 第十五章 性能优化]]></title>
      <url>http://dalufan.com/2016/02/20/android-art-of-android-deveopment-note-12/</url>
      <content type="html"><![CDATA[<h3 id="0x01-Bitmap的加载"><a href="#0x01-Bitmap的加载" class="headerlink" title="0x01 Bitmap的加载"></a>0x01 Bitmap的加载</h3><p><strong>一</strong>Bitmap是如何加载的？</p>
<p>BitmapFactory类提供了四类方法：<code>decodeFile</code>、<code>decodeResource</code>、<code>decodeStream</code>和<code>decodeByteArray</code>从不同来源加载出一个Bitmap对象，最终的实现是在底层实现的。</p>
<p><strong>二</strong>如何高效加载Bitmap？</p>
<p>采用BitmapFactory.Options按照一定的采样率来加载所需尺寸的图片，因为imageview所需的图片大小往往小于图片的原始尺寸。<code>BitmapFactory.Options</code>的inSampleSize参数，即采样率官方文档指出采样率的取值应该是2的指数（2、4、8、16、…）。</p>
<a id="more"></a> 
<p>获取采样率的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageResizer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ImageResizer"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageResizer</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res,</span></span></div><div class="line">            <span class="keyword">int</span> resId, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight) &#123;</div><div class="line">        <span class="comment">// First decode with inJustDecodeBounds=true to check dimensions</span></div><div class="line">        <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">        <span class="comment">//将inJustDecodeBounds设置为true的时候，BitmapFactory只会解析图片的原始宽高信息，</span></div><div class="line">        <span class="comment">//并不会真正的加载图片，所以这个操作是轻量级的</span></div><div class="line">        <span class="comment">//需要注意的是，这个时候BitmapFactory获取的图片宽高信息和图片的位置以及程序运行的设备有关，</span></div><div class="line">        <span class="comment">//这都会导致BitmapFactory获取到不同的结果。</span></div><div class="line">        options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">        BitmapFactory.decodeResource(res, resId, options);</div><div class="line"></div><div class="line">        <span class="comment">// Calculate inSampleSize</span></div><div class="line">        options.inSampleSize = calculateInSampleSize(options, reqWidth,</div><div class="line">                reqHeight);</div><div class="line"></div><div class="line">        <span class="comment">// Decode bitmap with inSampleSize set</span></div><div class="line">        options.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> BitmapFactory.decodeResource(res, resId, options);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">decodeSampledBitmapFromFileDescriptor</span><span class="params">(FileDescriptor fd, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</div><div class="line">        <span class="comment">// First decode with inJustDecodeBounds=true to check dimensions</span></div><div class="line">        <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">        options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">        BitmapFactory.decodeFileDescriptor(fd, <span class="keyword">null</span>, options);</div><div class="line"></div><div class="line">        <span class="comment">// Calculate inSampleSize</span></div><div class="line">        options.inSampleSize = calculateInSampleSize(options, reqWidth,</div><div class="line">                reqHeight);</div><div class="line"></div><div class="line">        <span class="comment">// Decode bitmap with inSampleSize set</span></div><div class="line">        options.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> BitmapFactory.decodeFileDescriptor(fd, <span class="keyword">null</span>, options);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateInSampleSize</span><span class="params">(BitmapFactory.Options options,</span></span></div><div class="line">            <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight) &#123;</div><div class="line">        <span class="keyword">if</span> (reqWidth == <span class="number">0</span> || reqHeight == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Raw height and width of image</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</div><div class="line">        Log.d(TAG, <span class="string">"origin, w= "</span> + width + <span class="string">" h="</span> + height);</div><div class="line">        <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> halfHeight = height / <span class="number">2</span>;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Calculate the largest inSampleSize value that is a power of 2 and</span></div><div class="line">            <span class="comment">// keeps both</span></div><div class="line">            <span class="comment">// height and width larger than the requested height and width.</span></div><div class="line">            <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt;= reqHeight</div><div class="line">                    &amp;&amp; (halfWidth / inSampleSize) &gt;= reqWidth) &#123;</div><div class="line">                inSampleSize *= <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Log.d(TAG, <span class="string">"sampleSize:"</span> + inSampleSize);</div><div class="line">        <span class="keyword">return</span> inSampleSize;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="0x02-缓存策略"><a href="#0x02-缓存策略" class="headerlink" title="0x02 缓存策略"></a>0x02 缓存策略</h3><ol>
<li>最常用的缓存算法是LRU，核心是当缓存满时，会优先淘汰那些近期最少使用的缓存对象，系统中采用LRU算法的缓存有两种：<code>LruCache</code>(内存缓存)和<code>DiskLruCache</code>(磁盘缓存)。</li>
<li><code>LruCache</code>是Android 3.1才有的，通过support-v4兼容包可以兼容到早期的Android版本。LruCache类是一个线程安全的泛型类，它内部采用一个LinkedHashMap以强引用的方式存储外界的缓存对象，其提供了get和put方法来完成缓存的获取和添加操作，当缓存满时，LruCache会移除较早使用的缓存对象，然后再添加新的缓存对象。</li>
<li><code>DiskLruCache</code>磁盘缓存，它不属于Android sdk的一部分，它的源码可以在<a href="https://android.googlesource.com/platform/libcore/+/android-4.1.1_r1/luni/src/main/java/libcore/io/DiskLruCache.java" target="_blank" rel="external">这里下载</a>或者<a href="https://github.com/singwhatiwanna/android-art-res/blob/master/Chapter_12/src/com/ryg/chapter_12/loader/DiskLruCache.java" target="_blank" rel="external">这里</a>。</li>
<li>ImageLoader的实现 具体内容看<a href="https://github.com/singwhatiwanna/android-art-res/blob/master/Chapter_12/src/com/ryg/chapter_12/loader/ImageLoader.java" target="_blank" rel="external">源码</a><br>功能：图片的同步/异步加载，图片压缩，内存缓存，磁盘缓存，网络拉取</li>
</ol>
<h3 id="0x03-ImageLoader的使用"><a href="#0x03-ImageLoader的使用" class="headerlink" title="0x03 ImageLoader的使用"></a>0x03 ImageLoader的使用</h3><p>避免发生列表item错位的解决方法：给显示图片的imageview添加tag属性，值为要加载的图片的目标url，显示的时候判断一下url是否匹配。<br>优化列表的卡顿现象</p>
<ol>
<li>要在getView中执行耗时操作，不要在getView中直接加载图片，否则肯定会导致卡顿；</li>
<li>控制异步任务的执行频率：在列表滑动的时候停止加载图片，等列表停下来以后再加载图片；</li>
<li>使用硬件加速来解决莫名的卡顿问题，给Activity添加配置<code>android:hardwareAccelerated=&quot;true&quot;</code>。</li>
</ol>
<h3 id="0x04-性能优化"><a href="#0x04-性能优化" class="headerlink" title="0x04 性能优化"></a>0x04 性能优化</h3><p><strong>一</strong> 2015年Google关于Android性能优化典范的专题视频 <a href="https://www.youtube.com/playlist?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE" target="_blank" rel="external">Youtube视频地址</a></p>
<p><strong>二</strong> 布局优化</p>
<ol>
<li>删除布局中无用的组件和层级，有选择地使用性能较低的ViewGroup；比如LinearLayout 优于RelativeLayout。</li>
<li>使用<include>、<merge>、<viewstub>等标签：<include>标签主要用于布局重用，<merge>标签一般和<include>配合使用，它可以减少布局中的层级；<viewstub>标签则提供了按需加载的功能，当需要的时候才会将ViewStub中的布局加载到内存，提供了程序的初始化效率。</viewstub></include></merge></include></viewstub></merge></include></li>
<li><include>标签只支持<code>android:layout_</code>开头的属性，android:id属性例外，如果当前引用的地方有id，源布局根目录也有id，以当前引用布局后的id为准。</include></li>
<li>ViewStub继承自View，它非常轻量级且宽高都为0，它本身不参与任何的布局和绘制过程。实际开发中，很多布局文件在正常情况下不会显示，例如网络异常时的界面，这个时候就没有必要在整个界面初始化的时候加载进行，通过ViewStub可以做到在需要的时候再加载。</li>
</ol>
<p>如下面示例，android:id是ViewStub的id，而android:inflatedId是布局的根元素的id。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ViewStub android:id="@+id/xxx"</div><div class="line">  android:inflatedId="@+id/yyy"</div><div class="line">  android:layout="@layout/zzz"</div><div class="line">  ...</div><div class="line">&lt;/ViewStub&gt;</div></pre></td></tr></table></figure>
<p><strong>三</strong> 绘制优化</p>
<ol>
<li>在onDraw中不要创建新的布局对象，因为onDraw会被频繁调用；</li>
<li>onDraw方法中不要指定耗时任务，也不能执行成千上万次的循环操作。</li>
</ol>
<p><strong>四</strong> 响应速度优化和ANR日志分析</p>
<ol>
<li>ANR出现的情况：Activity如果5s内没有响应屏幕触摸事件或者键盘输入事件就会ANR，而BroadcastReceiver如果10s内没有执行完操作也会出现ANR。</li>
<li>当一个进程发生了ANR之后，系统会在<code>/data/anr</code>目录下创建一个文件traces.txt，通过分析这个文件就能定位ANR的原因。</li>
</ol>
<p><strong>五</strong> 其他优化建议</p>
<ol>
<li>不要过多使用枚举，枚举占用的内存空间要比整型大；</li>
<li>常量请使用static final来修饰；</li>
<li>用一些Android特有的数据结构，比如SparseArray和Pair等，他们都具有更好的性能；</li>
<li>适当使用软引用和弱引用；</li>
<li>采用内存缓存和磁盘缓存；</li>
<li>尽量采用静态内部类，这样可以避免潜在的由于内部类而导致的内存泄露。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何获取当前Activity]]></title>
      <url>http://dalufan.com/2016/02/11/thinking-of-getting-the-current-activity-in-android/</url>
      <content type="html"><![CDATA[<h3 id="引出"><a href="#引出" class="headerlink" title="引出"></a>引出</h3><p>在Android开发过程中，我们有时候需要获取当前的Activity实例，比如弹出Dialog操作，必须要用到这个。关于如何实现由很多种思路，这其中有的简单，有的复杂，这里简单总结一下个人的一些经验吧。</p>
<a id="more"></a>
<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>反射是我们经常会想到的方法，思路大概为</p>
<p>1 获取ActivityThread中所有的ActivityRecord<br>2 从ActivityRecord中获取状态不是pause的Activity并返回</p>
<p>一个使用反射来实现的代码大致如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Activity <span class="title">getActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">    Class activityThreadClass = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        activityThreadClass = Class.forName(<span class="string">"android.app.ActivityThread"</span>);</div><div class="line">        Object activityThread = activityThreadClass.getMethod(<span class="string">"currentActivityThread"</span>).invoke(<span class="keyword">null</span>);</div><div class="line">        Field activitiesField = activityThreadClass.getDeclaredField(<span class="string">"mActivities"</span>);</div><div class="line">        activitiesField.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Map activities = (Map) activitiesField.get(activityThread);</div><div class="line">        <span class="keyword">for</span> (Object activityRecord : activities.values()) &#123;</div><div class="line">            Class activityRecordClass = activityRecord.getClass();</div><div class="line">            Field pausedField = activityRecordClass.getDeclaredField(<span class="string">"paused"</span>);</div><div class="line">            pausedField.setAccessible(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">if</span> (!pausedField.getBoolean(activityRecord)) &#123;</div><div class="line">                Field activityField = activityRecordClass.getDeclaredField(<span class="string">"activity"</span>);</div><div class="line">                activityField.setAccessible(<span class="keyword">true</span>);</div><div class="line">                Activity activity = (Activity) activityField.get(activityRecord);</div><div class="line">                <span class="keyword">return</span> activity;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而这种方法并不是很推荐，主要是有以下的不足：</p>
<ol>
<li>反射通常会比较慢</li>
<li>不稳定性，这个才是不推荐的原因，Android框架代码存在修改的可能性，谁要无法100%保证<code>mActivities</code>，<code>paused</code>固定不变。所以可靠性不是完全可靠。</li>
</ol>
<h3 id="Activity基类"><a href="#Activity基类" class="headerlink" title="Activity基类"></a>Activity基类</h3><p>既然反射不是很可靠，那么有一种比较可靠的方式，就是使用Activity基类。</p>
<p>在Activity的onResume方法中，将当前的Activity实例保存到一个变量中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        MyActivityManager.getInstance().setCurrentActivity(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivityManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyActivityManager sInstance = <span class="keyword">new</span> MyActivityManager();</div><div class="line">    <span class="keyword">private</span> WeakReference&lt;Activity&gt; sCurrentActivityWeakRef;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyActivityManager</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyActivityManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">getCurrentActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">        Activity currentActivity = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (sCurrentActivityWeakRef != <span class="keyword">null</span>) &#123;</div><div class="line">            currentActivity = sCurrentActivityWeakRef.get();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> currentActivity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentActivity</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        sCurrentActivityWeakRef = <span class="keyword">new</span> WeakReference&lt;Activity&gt;(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而，这一种方法也不仅完美，因为这种方法是基于约定的，所以必须每个Activity都继承BaseActivity，如果一旦出现没有继承BaseActivity的就可能有问题。</p>
<h3 id="回调方法"><a href="#回调方法" class="headerlink" title="回调方法"></a>回调方法</h3><p>介绍了上面两种不是尽善尽美的方法，这里实际上还是有一种更便捷的方法，那就是通过Framework提供的回调来实现。</p>
<p>Android自 API 14开始引入了一个方法，即Application的<code>registerActivityLifecycleCallbacks</code>方法，用来监听所有Activity的生命周期回调，比如onActivityCreated,onActivityResumed等。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        registerActivityLifecycleCallbacks(<span class="keyword">new</span> ActivityLifecycleCallbacks() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Activity activity, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStarted</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResumed</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">                MyActivityManager.getInstance().setCurrentActivity(activity);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPaused</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStopped</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivitySaveInstanceState</span><span class="params">(Activity activity, Bundle outState)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityDestroyed</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WorkFlow--功能分支工作流(Pull Requests)]]></title>
      <url>http://dalufan.com/2016/02/08/workflow-feature-branch-Pull-Request/</url>
      <content type="html"><![CDATA[<p>一旦你玩转了<a href="../../../../../2016/01/08/workflow-centralized-git-rebase/">集中式工作流</a>，在开发过程中可以很简单地加上功能分支，用来鼓励开发者之间协作和简化交流。</p>
<p>功能分支工作流背后的核心思路是所有的功能开发应该在一个专门的分支，而不是在<code>master</code>分支上。 这个隔离可以方便多个开发者在各自的功能上开发而不会弄乱主干代码。 另外，也保证了<code>master</code>分支的代码一定不会是有问题的，极大有利于集成环境。</p>
<p>功能开发隔离也让<a href="../../../../../2016/02/02/workflow-Pull-Request/">pull requests</a>工作流成功可能， <code>pull requests</code>工作流能为每个分支发起一个讨论，在分支合入正式项目之前，给其它开发者有表示赞同的机会。 另外，如果你在功能开发中有问题卡住了，可以开一个pull requests来向同学们征求建议。 这些做法的重点就是，pull requests让团队成员之间互相评论工作变成非常方便！</p>
<a id="more"></a> 
<p><img src="/article_images/git-workflow-feature-branch-1.png" alt="alt"></p>
<h3 id="0x01-工作方式"><a href="#0x01-工作方式" class="headerlink" title="0x01 工作方式"></a>0x01 工作方式</h3><p>功能分支工作流仍然用中央仓库，并且<code>master</code>分支还是代表了正式项目的历史。开发者每次在开始新功能前先创建一个新分支，而不是直接提交到本地master分支。 功能分支应该有个有描述性的名字，比如<code>animated-menu-items</code>或<code>issue-#1061</code>，这样可以让分支有个清楚且高聚焦的用途。</p>
<p>在master分支和功能分支之间，Git是没有技术上的区别，所以开发者可以用和集中式工作流中完全一样的方式编辑、暂存和提交修改到功能分支上。</p>
<p>另外，功能分支也可以（且应该）push到中央仓库中。这样不修改正式代码就可以和其它开发者分享提交的功能。 由于master是仅有的一个『特殊』分支，在中央仓库上存多个功能分支不会有任何问题。当然，这样做也可以很方便地备份各自的本地提交。</p>
<h3 id="0x02-Pull-Requests"><a href="#0x02-Pull-Requests" class="headerlink" title="0x02 Pull Requests"></a>0x02 Pull Requests</h3><p>功能分支除了可以隔离功能的开发，也使得通过<code>Pull Requests</code>讨论变更成为可能。 一旦某个开发完成一个功能，不是立即合并到master，而是push到中央仓库的功能分支上并发起一个Pull Request请求去合并修改到master。 在修改成为主干代码前，这让其它的开发者有机会先去Review变更。</p>
<p><code>Code Review</code>是Pull Requests的一个重要的收益，但Pull Requests目的是讨论代码一个通用方式。 你可以把Pull Requests当作是专门给某个分支设置的讨论。这意味着可以在更早的开发过程中就可以进行Code Review。 比如，一个开发者开发功能需要帮助时，要做的就是发起一个Pull Request，相关的人就会自动收到通知，在相关的提交旁边能看到需要帮助解决的问题。</p>
<p>一旦Pull Request被接受了，发布功能要做的就和集中式工作流就很像了。首先，确定本地的master分支和上游的master分支是同步的。然后合并功能分支到本地master分支并push已经更新的本地master分支到中央仓库。</p>
<p>仓库管理的产品解决方案像<a href="https://bitbucket.org/" target="_blank" rel="external">Bitbucket</a>或<a href="https://www.atlassian.com/software/bitbucket/server" target="_blank" rel="external">Stash</a>，可以良好地支持Pull Requests。可以看看Stash的<a href="https://confluence.atlassian.com/stash/using-pull-requests-in-stash-299570995.html" target="_blank" rel="external">Pull Requests</a>文档。</p>
<h3 id="0x03-示例"><a href="#0x03-示例" class="headerlink" title="0x03 示例"></a>0x03 示例</h3><p>下面的示例演示了如何把Pull Requests作为Code Review的方式，但注意Pull Requests可以用于很多其它的目的。</p>
<h4 id="小红开始开发一个新功能"><a href="#小红开始开发一个新功能" class="headerlink" title="小红开始开发一个新功能"></a>小红开始开发一个新功能</h4><p><img src="/article_images/git-workflow-feature-branch-2.png" alt="alt"></p>
<p>在开始开发功能前，小红需要一个独立的分支。使用下面的命令<a href="https://www.atlassian.com/git/tutorials/using-branches/git-branch" target="_blank" rel="external">新建一个分支</a>：</p>
<blockquote>
<p>git checkout -b marys-feature<br>【译注】：<br>原文用的命令是 git checkout -b marys-feature master<br>主流的git版本，可以省略后一个参数：基于哪个分支新建分支，<br>因为这个参数缺省就是 当前分支（本文目前的示例就是master）。<br>这样的用法更简单自然，我平时就是这么用的。</p>
</blockquote>
<p>这个命令检出一个基于master名为marys-feature的分支，Git的-b选项表示如果分支还不存在则新建分支。 这个新分支上，小红按老套路编辑、暂存和提交修改，按需要提交以实现功能：</p>
<blockquote>
<p>git status<br>git add <some-file><br>git commit</some-file></p>
</blockquote>
<h4 id="小红要去吃个午饭"><a href="#小红要去吃个午饭" class="headerlink" title="小红要去吃个午饭"></a>小红要去吃个午饭</h4><p><img src="/article_images/git-workflow-feature-branch-3.png" alt="alt"></p>
<p>早上小红为新功能添加一些提交。 去吃午饭前，push功能分支到中央仓库是很好的做法，这样可以方便地备份，如果和其它开发协作，也让他们可以看到小红的提交。</p>
<blockquote>
<p>git push -u origin marys-feature</p>
</blockquote>
<p>这条命令push marys-feature分支到中央仓库（origin），-u选项设置本地分支去跟踪远程对应的分支。设置好跟踪的分支后，小红就可以使用git push命令省去指定推送分支的参数。</p>
<h4 id="小红完成功能开发"><a href="#小红完成功能开发" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h4><p><img src="/article_images/git-workflow-feature-branch-4.png" alt="alt"></p>
<p>小红吃完午饭回来，完成整个功能的开发。在合并到master之前，她发起一个<code>Pull Request</code>让团队的其它人知道功能已经完成。但首先，她要确认中央仓库中已经有她最近的提交：</p>
<blockquote>
<p>git push</p>
</blockquote>
<p>然后，在她的Git GUI客户端中发起Pull Request，请求合并marys-feature到master，团队成员会自动收到通知。 Pull Request很酷的是可以在相关的提交旁边显示评注，所以你可以对某个变更集提问。</p>
<h4 id="小黑收到Pull-Request"><a href="#小黑收到Pull-Request" class="headerlink" title="小黑收到Pull Request"></a>小黑收到Pull Request</h4><p><img src="/article_images/git-workflow-feature-branch-5.png" alt="alt"></p>
<p>小黑收到了Pull Request后会查看marys-feature的修改。决定在合并到正式项目前是否要做些修改，且通过Pull Request和小红来回地讨论。</p>
<h4 id="小红再做修改"><a href="#小红再做修改" class="headerlink" title="小红再做修改"></a>小红再做修改</h4><p><img src="/article_images/git-workflow-feature-branch-6.png" alt="alt"></p>
<p>要再做修改，小红用和功能第一个迭代完全一样的过程。编辑、暂存、提交并push更新到中央仓库。小红这些活动都会显示在Pull Request上，小黑可以断续做评注。</p>
<p>如果小黑有需要，也可以把marys-feature分支拉到本地，自己来修改，他加的提交也会一样显示在Pull Request上。</p>
<h4 id="小红发布她的功能"><a href="#小红发布她的功能" class="headerlink" title="小红发布她的功能"></a>小红发布她的功能</h4><p><img src="/article_images/git-workflow-feature-branch-7.png" alt="alt"></p>
<p>一旦小黑可以的接受Pull Request，就可以合并功能到稳定项目代码中（可以由小黑或是小红来做这个操作）：</p>
<blockquote>
<p>git checkout master<br>git pull<br>git pull origin marys-feature<br>git push</p>
</blockquote>
<p>无论谁来做合并，首先要检出master分支并确认它是最新的。然后执行git pull origin marys-feature合并marys-feature分支到已经和远程一致的本地master分支。 你可以使用简单git merge marys-feature命令，但前面的命令可以保证总是最新的新功能分支。 最后更新的master分支要重新push回到origin。</p>
<p>这个过程常常会生成一个合并提交。有些开发者喜欢有合并提交，因为它像一个新功能和原来代码基线的连通符。但如果你偏爱线性的提交历史，可以在执行合并时rebase新功能到master分支的顶部，这样生成一个快进（fast-forward）的合并。</p>
<p>【译注】生成一个快进的合并的命令行：</p>
<blockquote>
<p>git checkout marys-feature<br>git pull # 确认是最新的<br>git pull –rebase origin master # rebase新功能到master分支的顶部</p>
<p>git checkout master<br>git merge marys-feature # 合并marys-feature分支的修改，因为这个分支之前对齐（rebase）了master，一定是快进合并<br>git push</p>
</blockquote>
<p>一些GUI客户端可以只要点一下『接受』按钮执行好上面的命令来自动化Pull Request接受过程。 如果你的不能这样，至少在功能合并到master分支后能自动关闭Pull Request。</p>
<h4 id="与此同时，小明在做和小红一样的事"><a href="#与此同时，小明在做和小红一样的事" class="headerlink" title="与此同时，小明在做和小红一样的事"></a>与此同时，小明在做和小红一样的事</h4><p>当小红和小黑在marys-feature上工作并讨论她的Pull Request的时候，小明在自己的功能分支上做完全一样的事。</p>
<p>通过隔离功能到独立的分支上，每个人都可以自主的工作，当然必要的时候在开发者之间分享变更还是比较繁琐的。</p>
<hr>
<p>参考链接：<a href="https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/workflow-feature-branch.md" target="_blank" rel="external">1</a>,<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow" target="_blank" rel="external">2</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pull Requests的使用]]></title>
      <url>http://dalufan.com/2016/02/02/workflow-Pull-Request/</url>
      <content type="html"><![CDATA[<p>Pull Requests是Bitbucket上方便开发者之间协作的功能。 提供了一个用户友好的Web界面，在集成提交的变更到正式项目前可以对变更进行讨论。</p>
<p><img src="/article_images/pull-request-bitbucket.png" alt="alt"></p>
<p>开发者向团队成员通知功能开发已经完成，Pull Requests是最简单的用法。 开发者完成功能开发后，通过Bitbucket账号发起一个Pull Request。 这样让涉及这个功能的所有人知道要去做Code Review和合并到master分支。</p>
<p>但是，Pull Request远不止一个简单的通知，而是为讨论提交的功能的一个专门论坛。 如果变更有任何问题，团队成员反馈在Pull Request中，甚至push新的提交微调功能。 所有的这些活动都直接跟踪在Pull Request中。</p>
<a id="more"></a> 
<p><img src="/article_images/pull-request-overview.png" alt="alt"></p>
<p>相比其它的协作模型，这种分享提交的形式有助于打造一个更流畅的工作流。 SVN和Git都能通过一个简单的脚本收到通知邮件；但是，讨论变更时，开发者通常只能去回复邮件。 这样做会变得杂乱，尤其还要涉及后面的几个提交时。 Pull Requests把所有相关功能整合到一个和Bitbucket仓库界面集成的用户友好Web界面中。</p>
<h3 id="0x01-解析Pull-Request"><a href="#0x01-解析Pull-Request" class="headerlink" title="0x01 解析Pull Request"></a>0x01 解析Pull Request</h3><p>当要发起一个Pull Request，你所要做的就是请求（Request）另一个开发者（比如项目的维护者） 来pull你仓库中一个分支到他的仓库中。这意味着你要提供4个信息以发起<code>Pull Request</code>： 源仓库、源分支、目的仓库、目的分支。</p>
<p><img src="/article_images/pull-request-anatomy.png" alt="alt"></p>
<p>这几值多数Bitbucket都会设置上合适的缺省值。但取决你用的协作工作流，你的团队可能会要指定不同的值。 上图显示了一个Pull Request请求合并一个功能分支到正式的master分支上，但可以有多种不同的Pull Request用法。</p>
<h3 id="0x02-工作方式"><a href="#0x02-工作方式" class="headerlink" title="0x02 工作方式"></a>0x02 工作方式</h3><p>Pull Request可以和功能分支工作流、Gitflow工作流或Forking工作流一起使用。 但一个Pull Request要求要么分支不同要么仓库不同，所以不能用于集中式工作流。 在不同的工作流中使用Pull Request会有一些不同，但基本的过程是这样的：</p>
<ol>
<li>开发者在本地仓库中新建一个专门的分支开发功能。</li>
<li>开发者push分支修改到公开的Bitbucket仓库中。</li>
<li>开发者通过Bitbucket发起一个Pull Request。</li>
<li>团队的其它成员review code，讨论并修改。</li>
<li>项目维护者合并功能到官方仓库中并关闭Pull Request。</li>
</ol>
<p>本文后面内容说明，Pull Request在不同协作工作流中如何应用。</p>
<h3 id="0x03-在功能分支工作流中使用Pull-Request"><a href="#0x03-在功能分支工作流中使用Pull-Request" class="headerlink" title="0x03 在功能分支工作流中使用Pull  Request"></a>0x03 在功能分支工作流中使用Pull  Request</h3><p>功能分支工作流用一个共享的Bitbucket仓库来管理协作，开发者在专门的分支上开发功能。但不是立即合并到master分支上，而是在合并到主代码库之前开发者应该开一个Pull Request发起功能的讨论。</p>
<p><img src="/article_images/pull-request-feature-branch.png" alt="alt"></p>
<p>功能分支工作流只有一个公开的仓库，所以Pull Request的目的仓库和源仓库总是同一个。 通常开发者会指定他的功能分支作为源分支，master分支作为目的分支。</p>
<p>收到Pull Request后，项目维护者要决定如何做。如果功能没问题，就简单地合并到master分支，关闭Pull Request。 但如果提交的变更有问题，他可以在Pull Request中反馈。之后新加的提交也会评论之后接着显示出来。</p>
<p>在功能还没有完全开发完的时候，也可能发起一个Pull Request。 比如开发者在实现某个需求时碰到了麻烦，他可以发一个包含正在进行中工作的Pull Request。 其它的开发者可以在Pull Request提供建议，或者甚至直接添加提交来解决问题。</p>
<h3 id="0x04-在Gitflow工作流中使用Pull-Request"><a href="#0x04-在Gitflow工作流中使用Pull-Request" class="headerlink" title="0x04 在Gitflow工作流中使用Pull Request"></a>0x04 在Gitflow工作流中使用Pull Request</h3><p>Gitflow工作流和功能分支工作流类似，但围绕项目发布定义一个严格的分支模型。 在Gitflow工作流中使用Pull Request让开发者在发布分支或是维护分支上工作时， 可以有个方便的地方对关于发布分支或是维护分支的问题进行交流。</p>
<p><img src="/article_images/gitflow-workflow-pull-request.png" alt="alt"></p>
<p>Gitflow工作流中Pull Request的使用过程和上一节中完全一致： 当一个功能、发布或是热修复分支需要Review时，开发者简单发起一个Pull Request， 团队的其它成员会通过Bitbucket收到通知。</p>
<p>新功能一般合并到develop分支，而发布和热修复则要同时合并到develop分支和master分支上。 Pull Request可能用做所有合并的正式管理。</p>
<h3 id="0x05-在Forking工作流中使用Pull-Request"><a href="#0x05-在Forking工作流中使用Pull-Request" class="headerlink" title="0x05 在Forking工作流中使用Pull Request"></a>0x05 在Forking工作流中使用Pull Request</h3><p>在Forking工作流中，开发者push完成的功能到他自己的仓库中，而不是共享仓库。 然后，他发起一个Pull Request，让项目维护者知道他的功能已经可以Review了。</p>
<p>在这个工作流，Pull Request的通知功能非常有用， 因为项目维护者不可能知道其它开发者在他们自己的仓库添加了提交。</p>
<p><img src="/article_images/pull-request-forking-workflow-1.png" alt="alt"></p>
<p>由于各个开发有自己的公开仓库，Pull Request的源仓库和目标仓库不是同一个。 源仓库是开发者的公开仓库，源分支是包含了修改的分支。 如果开发者要合并修改到正式代码库中，那么目标仓库是正式仓库，目标分支是master分支。</p>
<p>Pull Request也可以用于正式项目之外的其它开发者之间的协作。 比如，如果一个开发者和一个团队成员一起开发一个功能，他们可以发起一个Pull Request， 用团队成员的Bitbucket仓库作为目标，而不是正式项目的仓库。 然后使用相同的功能分支作为源和目标分支。</p>
<p><img src="/article_images/pull-request-forking-workflow-2.png" alt="alt"></p>
<p>2个开发者之间可以在Pull Request中讨论和开发功能。 完成开发后，他们可以发起另一个Pull Request，请求合并功能到正式的master分支。 在Forking工作流中，这样的灵活性让Pull Request成为一个强有力的协作工具。</p>
<h3 id="0x06-示例"><a href="#0x06-示例" class="headerlink" title="0x06 示例"></a>0x06 示例</h3><p>下面的示例演示了Pull Request如何在在Forking工作流中使用。 也同样适用于小团队的开发协作和第三方开发者向开源项目的贡献。</p>
<p>在示例中，小红是个开发，小明是项目维护者。他们各自有一个公开的Bitbucket仓库，而小明的仓库包含了正式工程。</p>
<h4 id="小红fork正式项目"><a href="#小红fork正式项目" class="headerlink" title="小红fork正式项目"></a>小红fork正式项目</h4><p><img src="/article_images/pull-request-1.png" alt="alt"></p>
<p>小红先要fork小明的Bitbucket仓库，开始项目的开发。她登陆Bitbucket，浏览到小明的仓库页面， 点Fork按钮。</p>
<p><img src="/article_images/pull-request-2.png" alt="alt"></p>
<p>然后为fork出来的仓库填写名字和描述，这样小红就有了服务端的项目拷贝了。</p>
<h4 id="小红克隆她的Bitbucket仓库"><a href="#小红克隆她的Bitbucket仓库" class="headerlink" title="小红克隆她的Bitbucket仓库"></a>小红克隆她的Bitbucket仓库</h4><p><img src="/article_images/pull-request-3.png" alt="alt"></p>
<p>下一步，小红克隆自己刚才fork出来的Bitbucket仓库，以在本机上准备出工作拷贝。命令如下：</p>
<blockquote>
<p>git clone <a href="https://user@bitbucket.org/user/repo.git" target="_blank" rel="external">https://user@bitbucket.org/user/repo.git</a></p>
</blockquote>
<p>请记住，git clone会自动创建origin远程别名，是指向小红fork出来的仓库。</p>
<h4 id="小红开发新功能"><a href="#小红开发新功能" class="headerlink" title="小红开发新功能"></a>小红开发新功能</h4><p><img src="/article_images/pull-request-4.png" alt="alt"></p>
<p>在开始改代码前，小红要为新功能先新建一个新分支。她会用这个分支作为Pull Request的源分支。</p>
<blockquote>
<p>git checkout -b some-feature<br>编辑代码<br>git commit -a -m “Add first draft of some feature”</p>
</blockquote>
<p>在新功能分支上，小红按需要添加提交。甚至如果小红觉得功能分支上的提交历史太乱了，她可以用<a href="https://www.atlassian.com/git/tutorial/rewriting-git-history#!rebase-i" target="_blank" rel="external">交互式rebase</a>来删除或压制提交。 对于大型项目，整理功能分支的历史可以让项目维护者更容易看出在Pull Request中做了什么内容。</p>
<h4 id="小红push功能到她的Bitbucket仓库中"><a href="#小红push功能到她的Bitbucket仓库中" class="headerlink" title="小红push功能到她的Bitbucket仓库中"></a>小红push功能到她的Bitbucket仓库中</h4><p><img src="/article_images/pull-request-5.png" alt="alt"></p>
<p>小红完成了功能后，push功能到她自己的Bitbucket仓库中（不是正式仓库），用下面简单的命令：</p>
<blockquote>
<p>git push origin some-branch</p>
</blockquote>
<p>这时她的变更可以让项目维护者看到了（或者任何想要看的协作者）。</p>
<h4 id="小红发起Pull-Request"><a href="#小红发起Pull-Request" class="headerlink" title="小红发起Pull Request"></a>小红发起Pull Request</h4><p><img src="/article_images/pull-request-6.png" alt="alt"></p>
<p>Bitbucket上有了她的功能分支后，小红可以用她的Bitbucket账号浏览到她的fork出来的仓库页面， 点右上角的【Pull Request】按钮，发起一个Pull Request。 弹出的表单自动设置小红的仓库为源仓库，询问小红以指定源分支、目标仓库和目标分支。</p>
<p>小红想要合并功能到正式仓库，所以源分支是她的功能分支，目标仓库是小明的公开仓库， 而目标分支是master分支。另外，小红需要提供Pull Request的标题和描述信息。 如果需要小明以外的人审核批准代码，她可以把这些人填在【Reviewers】文本框中。</p>
<p><img src="/article_images/pull-request-7.png" alt="alt"></p>
<p>创建好了Pull Request，通知会通过Bitbucket系统消息或邮件（可选）发给小明。</p>
<h4 id="小明review-Pull-Request"><a href="#小明review-Pull-Request" class="headerlink" title="小明review Pull Request"></a>小明review Pull Request</h4><p><img src="/article_images/pull-request-8.png" alt="alt"></p>
<p>在小明的Bitbucket仓库页面的【Pull Request】Tab可以看到所有人发起的Pull Request。 点击小红的Pull Request会显示出Pull Request的描述、功能的提交历史和每个变更的差异（diff）。</p>
<p>如果小明想要合并到项目中，只要点一下【Merge】按钮，就可以同意Pull Request并合并到master分支。</p>
<p>但如果像这个示例中一样小明发现了在小红的代码中的一个小Bug，要小红在合并前修复。 小明可以在整个Pull Request上加上评注，或是选择历史中的某个提交加上评注。</p>
<p><img src="/article_images/pull-request-9.png" alt="alt"></p>
<h4 id="小红补加提交"><a href="#小红补加提交" class="headerlink" title="小红补加提交"></a>小红补加提交</h4><p>如果小红对反馈有任何疑问，可以在Pull Request中响应，把Pull Request当作是她功能讨论的论坛。</p>
<p>小红在她的功能分支新加提交以解决代码问题，并push到她的Bitbucket仓库中，就像前一轮中的做法一样。 这些提交会进入的Pull Request，小明在原来的评注旁边可以再次review变更。</p>
<h4 id="小明接受Pull-Request"><a href="#小明接受Pull-Request" class="headerlink" title="小明接受Pull Request"></a>小明接受Pull Request</h4><p>最终，小明接受变更，合并功能分支到master分支，并关闭Pull Request。 至此，功能集成到项目中，其它的项目开发者可以用标准的git pull命令pull这些变更到自己的本地仓库中。</p>
<hr>
<p>参考链接：<a href="https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/pull-request.md" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Android 开发艺术探索》读书笔记--第十章Android的消息机制]]></title>
      <url>http://dalufan.com/2016/01/20/android-art-of-android-deveopment-note-10/</url>
      <content type="html"><![CDATA[<h3 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h3><p><strong>1.</strong>Android的消息机制主要是指Handler的运行机制，其底层需要<code>MessageQueue</code>和<code>Looper</code>的支撑。MessageQueue是以单链表的数据结构存储消息列表但是以队列的形式对外提供插入和删除消息操作的消息队列。MessageQueue只是消息的存储单元，而Looper则是以无限循环的形式去查找是否有新消息，如果有的话就去处理消息，否则就一直等待着。</p>
<p><strong>2.</strong>Handler的主要作用是将一个任务切换到某个指定的线程中去执行。</p>
<blockquote>
<p>为什么要提供这个功能呢？</p>
</blockquote>
<p>Android规定UI操作只能在主线程中进行，ViewRootImpl的checkThread方法会验证当前线程是否可以进行UI操作。</p>
<blockquote>
<p>为什么不允许子线程访问UI呢？</p>
</blockquote>
<p>这是因为UI组件不是线程安全的，如果在多线程中并发访问可能会导致UI组件处于不可预期的状态。另外，如果对UI组件的访问进行加锁机制的话又会降低UI访问的效率，所以还是采用单线程模型来处理UI事件。</p>
<p><strong>3.</strong>Handler的创建会采用当前线程的Looper来构建内部的消息循环系统，如果当前线程中不存在Looper的话就会报错。Handler可以用post方法将一个Runnable投递到消息队列中，也可以用send方法发送一个消息投递到消息队列中，其实post最终还是调用了send方法。</p>
<a id="more"></a> 
<h3 id="0x02-机制分析"><a href="#0x02-机制分析" class="headerlink" title="0x02 机制分析"></a>0x02 机制分析</h3><h4 id="ThreadLocal的工作原理"><a href="#ThreadLocal的工作原理" class="headerlink" title="ThreadLocal的工作原理"></a>ThreadLocal的工作原理</h4><p><strong>1.</strong>ThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只有在指定线程中可以获取到存储的数据，对于其他线程来说则无法获取到数据。一般来说，当某些数据是以线程为作用域并且不同线程具有不同的数据副本的时候，可以考虑使用ThreadLocal。 对于Handler来说，它需要获取当前线程的Looper，而Looper的作用域就是线程并且不同线程具有不同的Looper，这个时候通过ThreadLocal就可以实现Looper在线程中的存取了。</p>
<p><strong>2.</strong>ThreadLocal的原理：不同线程访问同一个ThreadLocal的get方法时，ThreadLocal内部会从各自的线程中取出一个数组，然后再从数组中根据当前ThreadLocal的索引去查找出对应的value值，不同线程中的数组是不同的，这就是为什么通过ThreadLocal可以在不同线程中维护一套数据的副本并且彼此互不干扰。</p>
<p><strong>3.</strong>ThreadLocal是一个泛型类public class ThreadLocal<t>，下面是它的set方法</t></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">    Thread currentThread = Thread.currentThread();</div><div class="line">    Values values = values(currentThread);</div><div class="line">    <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</div><div class="line">        values = initializeValues(currentThread);</div><div class="line">    &#125;</div><div class="line">    values.put(<span class="keyword">this</span>, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Values是Thread类内部专门用来存储线程的ThreadLocal数据的，它内部有一个数组private Object[] table，ThreadLocal的值就存在这个table数组中。如果values的值为null，那么就需要对其进行初始化然后再将ThreadLocal的值进行存储。</p>
<p><code>ThreadLocal数据的存储规则</code>：ThreadLocal的值在table数组中的存储位置总是ThreadLocal的索引+1的位置。</p>
<h4 id="MessageQueue的工作原理"><a href="#MessageQueue的工作原理" class="headerlink" title="MessageQueue的工作原理"></a>MessageQueue的工作原理</h4><p><strong>1.</strong>MessageQueue其实是通过单链表来维护消息列表的，它包含两个主要操作enqueueMessage和next，前者是插入消息，后者是取出一条消息并移除。</p>
<p><strong>2.</strong>next方法是一个无限循环的方法，如果消息队列中没有消息，那么next方法会一直阻塞在这里。当有新消息到来时，next方法会返回这条消息并将它从链表中移除。</p>
<h4 id="Looper的工作原理"><a href="#Looper的工作原理" class="headerlink" title="Looper的工作原理"></a>Looper的工作原理</h4><p><strong>1.</strong>为一个线程创建Looper的方法，代码如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="string">"test"</span>)&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        Looper.prepare();<span class="comment">//创建looper</span></div><div class="line">        Handler handler = <span class="keyword">new</span> Handler();<span class="comment">//可以创建handler了</span></div><div class="line">        Looper.loop();<span class="comment">//开始looper循环</span></div><div class="line">    &#125;</div><div class="line">&#125;.start();</div></pre></td></tr></table></figure>
<p><strong>2.</strong>Looper的prepareMainLooper方法主要是给主线程也就是ActivityThread创建Looper使用的，本质也是调用了prepare方法。</p>
<p><strong>3.</strong>Looper的quit和quitSafely方法的区别是：前者会直接退出Looper，后者只是设定一个退出标记，然后把消息队列中的已有消息处理完毕后才安全地退出。Looper退出之后，通过Handler发送的消息就会失败，这个时候Handler的send方法会返回false。<br>在子线程中，如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来终止消息循环，否则这个子线程就会一直处于等待的状态，而如果退出Looper以后，这个线程就会立刻终止，因此建议在不需要的时候终止Looper。</p>
<p><strong>4.</strong>Looper的loop方法会调用MessageQueue的next方法来获取新消息，而next是一个阻塞操作，当没有消息时，next方法会一直阻塞着在那里，这也导致了loop方法一直阻塞在那里。如果MessageQueue的next方法返回了新消息，Looper就会处理这条消息：msg.target.dispatchMessage(msg)，其中的msg.target就是发送这条消息的Handler对象。</p>
<h4 id="Handler的工作原理"><a href="#Handler的工作原理" class="headerlink" title="Handler的工作原理"></a>Handler的工作原理</h4><p>1.Handler就是处理消息的发送和接收之后的处理；<br>2.Handler处理消息的过程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">        handleCallback(msg);<span class="comment">//当message是runnable的情况，也就是Handler的post方法传递的参数，这种情况下直接执行runnable的run方法</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;<span class="comment">//如果创建Handler的时候是给Handler设置了Callback接口的实现，那么此时调用该实现的handleMessage方法</span></div><div class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);<span class="comment">//如果是派生Handler的子类，就要重写handleMessage方法，那么此时就是调用子类实现的handleMessage方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">        message.callback.run();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Subclasses must implement this to receive messages.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.Handler还有一个特殊的构造方法，它可以通过特定的Looper来创建Handler。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper)</span></span>&#123;</div><div class="line">  <span class="keyword">this</span>(looper, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4.Android的主线程就是ActivityThread，主线程的入口方法就是main，其中调用了Looper.prepareMainLooper()来创建主线程的Looper以及MessageQueue，并通过Looper.loop()方法来开启主线程的消息循环。主线程内有一个Handler，即ActivityThread.H，它定义了一组消息类型，主要包含了四大组件的启动和停止等过程，例如LAUNCH_ACTIVITY等。<br>ActivityThread通过ApplicationThread和AMS进行进程间通信，AMS以进程间通信的方法完成ActivityThread的请求后会回调ApplicationThread中的Binder方法，然后ApplicationThread会向H发送消息，H收到消息后会将ApplicationThread中的逻辑切换到ActivityThread中去执行，即切换到主线程中去执行，这个过程就是主线程的消息循环模型。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Android 开发艺术探索》读书笔记--第四章 View的工作原理]]></title>
      <url>http://dalufan.com/2016/01/11/android-art-of-android-deveopment-note-4/</url>
      <content type="html"><![CDATA[<h3 id="0x01-初始ViewRoot和DecorView"><a href="#0x01-初始ViewRoot和DecorView" class="headerlink" title="0x01 初始ViewRoot和DecorView"></a>0x01 初始ViewRoot和DecorView</h3><p>ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。</p>
<p>ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root = <span class="keyword">new</span> ViewRootImpl(view.getContext(),display);</div><div class="line">root.setView(view,wparams,panelParentView);</div></pre></td></tr></table></figure>
<p>View的绘制流程从ViewRoot的performTraversals方法开始，经过measure、layout和draw三大流程。</p>
<a id="more"></a>
<p><img src="/article_images/android_art_note_4_01.png" alt="alt"></p>
<p>performMeasure方法中会调用measure方法，在measure方法中又会调用onMeasure方法，在onMeasure方法中会对所有的子元素进行measure过程，这个时候measure流程就从父容器传递到子元素了，这样就完成了一次measure过程，layout和draw的过程类似。</p>
<p>measure过程决定了view的宽高，在几乎所有的情况下这个宽高都等同于view最终的宽高。layout过程决定了view的四个顶点的坐标和view实际的宽高，通过getWidth和getHeight方法可以得到最终的宽高。draw过程决定了view的显示。</p>
<p>DecorView其实是一个FrameLayout，其中包含了一个竖直方向的LinearLayout，上面是标题栏，下面是内容栏(id为<code>android.R.id.content</code>)。</p>
<p><a href="../../../../../2015/12/18/android-art-of-android-deveopment-note-3/">View的位置等解析参考连接</a></p>
<h3 id="0x02-理解MeasureSpec"><a href="#0x02-理解MeasureSpec" class="headerlink" title="0x02 理解MeasureSpec"></a>0x02 理解MeasureSpec</h3><p>在view测量的时候，系统会将LayoutParams在父容器的约束下转换成对应的MeasureSpec，然后再根据这个MeasureSpec来确定View测量后的宽高。</p>
<p>MeasureSpec是一个32的int值，其中高2位代表着SpecMode，低30位代表SpecSize。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXACTLY = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line"><span class="comment">//1左移30位</span></div></pre></td></tr></table></figure>
<p>view的MeasureSpec不是由view的LayoutParams独自决定的，LayoutParams需要和父容器一起才能决定view的MeasureSpec，从而进一步确定view的宽高。对于DecorView，它的MeasureSpec由窗口的尺寸和其自身的LayoutParams来决定；对于普通view，它的MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。</p>
<p><img src="/article_images/android_art_note_4_02.png" alt="alt"></p>
<ol>
<li>当view采用固定宽高时，不管父容器的MeasureSpec是什么，view的MeasureSpec都是精确模式，并且大小是LayoutParams中的大小。</li>
<li>当view的宽高是match_parent时，<code>其模式和父容器一致</code>。如果父容器的模式是精确模式，那么view也是精确模式，并且大小是父容器的剩余空间；如果父容器是最大模式，那么view也是最大模式，并且大小是不会超过父容器的剩余空间。</li>
<li>当view的宽高是wrap_content时，不管父容器的模式是精确模式还是最大模式，view的模式总是最大模式，并且大小不超过父容器的剩余空间。</li>
</ol>
<h3 id="0x03-view的工作流程"><a href="#0x03-view的工作流程" class="headerlink" title="0x03 view的工作流程"></a>0x03 view的工作流程</h3><p>view的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个view已经测量完毕了。如果view还没有测量完毕，那么获得的宽高就都是0。下面是四种解决该问题的方法：</p>
<p><strong>1.Activity/View # onWindowFocusChanged方法</strong></p>
<p><code>onWindowFocusChanged</code>方法表示view已经初始化完毕了，宽高已经准备好了，这个时候去获取宽高是没问题的。这个方法会被调用多次，当Activity继续执行或者暂停执行的时候，这个方法都会被调用。</p>
<p><strong>2.view.post(runnable)</strong></p>
<p>通过post将一个runnable投递到消息队列的尾部，然后等待Looper调用此runnable的时候，view也已经初始化好了。</p>
<p><strong>3.ViewTreeObserver</strong></p>
<p>使用ViewTreeObserver的众多回调方法可以完成这个功能，比如使用onGlobalLayoutListener接口，当view树的状态发生改变或者view树内部的view的可见性发生改变时，onGlobalLayout方法将被回调。伴随着view树的状态改变，这个方法也会被多次调用。</p>
<p><strong>4.view.measure(int widthMeasureSpec, int heightMeasureSpec)</strong></p>
<p>通过手动对view进行measure来得到view的宽高，这个要根据view的LayoutParams来处理：<br>match_parent：无法measure出具体的宽高；<br>wrap_content：如下measure，设置最大值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> widthMeasureSpec = MeasureSpec.makeMeasureSpec((<span class="number">1</span> &lt;&lt; <span class="number">30</span>) - <span class="number">1</span>, MeasureSpec.AT_MOST);</div><div class="line"><span class="keyword">int</span> heightMeasureSpec = MeasureSpec.makeMeasureSpec((<span class="number">1</span> &lt;&lt; <span class="number">30</span>) - <span class="number">1</span>, MeasureSpec.AT_MOST);</div><div class="line">view.measure(widthMeasureSpec, heightMeasureSpec);</div></pre></td></tr></table></figure>
<p>精确值：例如100px</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> widthMeasureSpec = MeasureSpec.makeMeasureSpec(<span class="number">100</span>, MeasureSpec.EXACTLY);</div><div class="line"><span class="keyword">int</span> heightMeasureSpec = MeasureSpec.makeMeasureSpec(<span class="number">100</span>, MeasureSpec.EXACTLY);</div><div class="line">view.measure(widthMeasureSpec, heightMeasureSpec);</div></pre></td></tr></table></figure>
<p>在view的默认实现中，view的测量宽高和最终宽高是相等的，只不过测量宽高形成于measure过程，而最终宽高形成于layout过程。</p>
<p>draw过程大概有下面几步：</p>
<ol>
<li>绘制背景：background.draw(canvas)；</li>
<li>绘制自己：onDraw()；</li>
<li>绘制children：dispatchDraw；</li>
<li>绘制装饰：onDrawScrollBars。</li>
</ol>
<h3 id="0x04自定义view时的注意事项"><a href="#0x04自定义view时的注意事项" class="headerlink" title="0x04自定义view时的注意事项"></a>0x04自定义view时的注意事项</h3><ol>
<li>继承view重写onDraw方法需要自己支持wrap_content，并且padding也要自己处理。继承特定的View例如TextView不需要考虑。</li>
<li>尽量不要在View中使用Handler，因为view内部本身已经提供了post系列的方法，完全可以替代Handler的作用。</li>
<li>view中如果有线程或者动画，需要在onDetachedFromWindow方法中及时停止。</li>
<li>处理好view的滑动冲突情况。</li>
</ol>
<p>关于事项1的补充：</p>
<p>直接继承View的自定义控件需要重写onMeasure方法，并设置wrap_content时的自身大小，否则在布局中view设置wrap_content就相当于match_parent，原因如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//View.java</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;  </div><div class="line">   setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),  </div><div class="line">           getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));  </div><div class="line">&#125;  </div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line">   * 作用是返回一个默认的值，如果MeasureSpec没有强制限制的话则使用提供的大小.否则在允许范围内可任意指定大小 </div><div class="line">   * 第一个参数size为提供的默认大小，第二个参数为测量的大小 </div><div class="line">   */  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;  </div><div class="line">      <span class="keyword">int</span> result = size;  </div><div class="line">      <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);  </div><div class="line">      <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);  </div><div class="line">  </div><div class="line">      <span class="keyword">switch</span> (specMode) &#123;  </div><div class="line">      <span class="comment">// Mode = UNSPECIFIED,AT_MOST时使用提供的默认大小  </span></div><div class="line">      <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:  </div><div class="line">          result = size;  </div><div class="line">          <span class="keyword">break</span>;  </div><div class="line">      <span class="keyword">case</span> MeasureSpec.AT_MOST:  </div><div class="line">      <span class="comment">// Mode = EXACTLY时使用测量的大小   </span></div><div class="line">      <span class="keyword">case</span> MeasureSpec.EXACTLY:  </div><div class="line">          result = specSize;  </div><div class="line">          <span class="keyword">break</span>;  </div><div class="line">      &#125;  </div><div class="line">      <span class="keyword">return</span> result;  </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>上面是View的方法，如果自定义的View在布局中使用wrap_content，那么它的specMode就是AT_MOST，在这种情况下，它的宽/高等于specSize，而这种情况下View的specSize是parentSize，而parentSize是父容器目前可用大小。示例代码如下：</p>
<p><img src="/article_images/android_art_note_4_03.png" alt="alt"></p>
<p><a href="../../../../../2014/12/23/android-View-learn-two/">详细的Measure过程</a></p>
<p>更详细的代码请参考<a href="https://github.com/singwhatiwanna/android-art-res/tree/master/Chapter_4" target="_blank" rel="external">链接</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WorkFlow--集中式工作流(git rebase)]]></title>
      <url>http://dalufan.com/2016/01/08/workflow-centralized-git-rebase/</url>
      <content type="html"><![CDATA[<p>集中式的工作流，只有一个事件主线。</p>
<h3 id="0x00-git-rebase的功能"><a href="#0x00-git-rebase的功能" class="headerlink" title="0x00 git rebase的功能"></a>0x00 git rebase的功能</h3><p>假设你现在基于远程分支”origin”，创建一个叫”mywork”的分支。</p>
<blockquote>
<p>$ git checkout -b mywork origin</p>
</blockquote>
<p><img src="/article_images/git-rebase0.png" alt="alt"></p>
<a id="more"></a> 
<p>现在我们在这个分支做一些修改，然后生成两个提交(commit).</p>
<blockquote>
<p>$ vi file.txt<br> $ git commit<br> $ vi otherfile.txt<br> $ git commit<br> …</p>
</blockquote>
<p>但是与此同时，有些人也在”origin”分支上做了一些修改并且做了提交了. 这就意味着”origin”和”mywork”这两个分支各自”前进”了，它们之间”分叉”了。</p>
<p><img src="/article_images/git-rebase01.png" alt="alt"></p>
<p>在这里，你可以用”pull”命令把”origin”分支上的修改拉下来并且和你的修改合并； 结果看起来就像一个新的”合并的提交”(merge commit)，效果如下：</p>
<p><img src="/article_images/git-rebase02.png" alt="alt"></p>
<p>但是，如果你想让”mywork”分支历史看起来像没有经过任何合并一样，你也许可以用 <a href="https://www.kernel.org/pub/software/scm/git/docs/git-rebase.html" target="_blank" rel="external">git rebase</a>:</p>
<blockquote>
<p>$ git checkout mywork<br> $ git rebase origin</p>
</blockquote>
<p>这些命令会把你的”mywork”分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到”.git/rebase”目录中),然后把”mywork”分支更新 到最新的”origin”分支，最后把保存的这些补丁应用到”mywork”分支上。通俗的说：就是把C5和C6从原有的分支引用中删掉，然后按照顺序先把C5应用到最新的origin分支上，再在这之后继续操作C6，相当于现在是在最新的origin上进行了C5和C6两次提交。</p>
<p><img src="/article_images/git-rebase03.png" alt="alt"></p>
<p>当’mywork’分支更新之后，它会指向这些新创建的提交(commit),而那些老的提交会被丢弃。 如果运行垃圾收集命令(pruning garbage collection), 这些被丢弃的提交就会删除. （请查看 <a href="https://www.kernel.org/pub/software/scm/git/docs/git-gc.html" target="_blank" rel="external">git gc</a>)</p>
<p><img src="/article_images/git-rebase04.png" alt="alt"></p>
<h4 id="merge和rebase的区别"><a href="#merge和rebase的区别" class="headerlink" title="merge和rebase的区别"></a>merge和rebase的区别</h4><p>现在我们可以看一下用合并(merge)和用rebase所产生的历史的区别：</p>
<p><img src="/article_images/git-rebase05.png" alt="alt"></p>
<p>在rebase的过程中，也许会出现冲突(conflict). 在这种情况，Git会停止rebase并会让你去解决冲突；在解决完冲突后，用”git add”命令去更新这些内容的索引(index), 然后，你无需执行git commit,只要执行:</p>
<blockquote>
<p>$ git rebase <code>--</code>continue</p>
</blockquote>
<p>这样git会继续应用(apply)余下的补丁。</p>
<p>在任何时候，你可以用<code>--abort</code>参数来终止rebase的行动，并且”mywork” 分支会回到rebase开始前的状态。</p>
<blockquote>
<p>$ git rebase <code>--</code>abort</p>
</blockquote>
<p>当我们使用Git log来参看commit时，其commit的顺序也有所不同。</p>
<p>假设C3提交于9:00AM,C5提交于10:00AM,C4提交于11:00AM，C6提交于12:00AM,</p>
<ol>
<li>对于使用git merge来合并所看到的commit的顺序（从新到旧）是：C7,C6,C4,C5,C3,C2,C1</li>
<li>对于使用git rebase来合并所看到的commit的顺序（从新到旧）是：C7,C6’,C5’,C4,C3,C2,C1</li>
</ol>
<p>因为C6’提交只是C6提交的克隆，C5’提交只是C5提交的克隆，所以从用户的角度看使用gitrebase来合并后所看到的commit的顺序（从新到旧）是：C7,C6,C5,C4,C3,C2,C1</p>
<h3 id="0x01-集中式工作流"><a href="#0x01-集中式工作流" class="headerlink" title="0x01 集中式工作流"></a>0x01 集中式工作流</h3><blockquote>
<p>git pull <code>--</code>rebase<br> 原文用的命令是 git pull <code>--</code>rebase origin master<br> 主流的git版本，可以省略后面2个参数：远程仓库别名、推送分支，<br> 因为这2个参数缺省分别就是 origin 、 当前分支（本文目前的示例就是master）。<br> 这样的用法更简单自然，我平时就是这么用的。</p>
</blockquote>
<p>这里表示把你的本地当前分支里的每个提交(commit)取消掉，并且把它们临时保存为补丁(patch)(这些补丁放到”.git/rebase”目录中),然后把本地当前分支更新 为最新的”origin”分支，最后把保存的这些补丁应用到本地当前分支上。关于git pull的更多内容请参考<a href="http://blog.csdn.net/hudashi/article/details/7664449" target="_blank" rel="external">git pull简介</a></p>
<p><code>--rebase</code>选项告诉Git把小红的提交移到同步了中央仓库修改后的master分支的顶部，如下图所示,如果你忘加了这个选项，pull操作仍然可以完成，但每次pull操作要同步中央仓库中别人修改时，提交历史会以一个多余的『合并提交』结尾，这样就会有多个分支。 对于集中式工作流，最好是使用rebase而不是生成一个合并提交。</p>
<p><img src="/article_images/git-rebase07.png" alt="alt"></p>
<h4 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h4><p>rebase操作过程是把本地提交一次一个地迁移到更新了的中央仓库master分支之上。 这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。 这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。反过来，简化了哪里引入Bug的分析，如果有必要，回滚修改也可以做到对项目影响最小。</p>
<p>如果小红和小明的功能是不相关的，不大可能在rebase过程中有冲突。如果有，Git在合并有冲突的提交处暂停rebase过程，输出下面的信息并带上相关的指令：</p>
<blockquote>
<p>CONFLICT (content): Merge conflict in <some-file></some-file></p>
</blockquote>
<p><img src="/article_images/git-rebase08.png" alt="alt"></p>
<p>Git很赞的一点是，任何人可以解决他自己的冲突。在这个例子中，小红可以简单的运行<a href="https://www.atlassian.com/git/tutorials/setting-up-a-repository/#!status" target="_blank" rel="external">git status</a>命令来查看哪里有问题。 冲突文件列在Unmerged paths（未合并路径）一节中：</p>
<blockquote>
<p>Unmerged paths:<br> (use “git reset HEAD <some-file>…” to unstage)<br> (use “git add/rm <some-file>…” as appropriate to mark resolution)<br> both modified: <some-file></some-file></some-file></some-file></p>
</blockquote>
<p>接着小红编辑这些文件。修改完成后，用老套路暂存这些文件，并让git rebase完成剩下的事：</p>
<blockquote>
<p>git add <some-file><br> git rebase <code>--</code>continue</some-file></p>
</blockquote>
<p>要做的就这些了。Git会继续一个一个地合并后面的提交，如其它的提交有冲突就重复这个过程。</p>
<p>如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行<code>git pull --rebase</code>命令前的样子：</p>
<blockquote>
<p>git rebase <code>--</code>abort</p>
</blockquote>
<p>最后小红完成和中央仓库的同步后，就能成功发布她的修改了：</p>
<blockquote>
<p>git push</p>
</blockquote>
<hr>
<p>参考链接：<a href="https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/workflow-centralized.md" target="_blank" rel="external">1</a>,<a href="http://gitbook.liuhui998.com/4_2.html" target="_blank" rel="external">2</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Activity中onActivityResult存在的坑]]></title>
      <url>http://dalufan.com/2016/01/03/android-activity-onActivityResult/</url>
      <content type="html"><![CDATA[<h4 id="startActivityForResult的文档"><a href="#startActivityForResult的文档" class="headerlink" title="startActivityForResult的文档"></a>startActivityForResult的文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span> <span class="params">(Intent intent, <span class="keyword">int</span> requestCode, Bundle options)</span></span></div><div class="line"></div><div class="line">Added in API level 16</div><div class="line"></div><div class="line">Launch an activity <span class="keyword">for</span> which you would like a result when it finished. When <span class="keyword">this</span> activity exits, your <span class="title">onActivityResult</span><span class="params">()</span> method will be called with the given requestCode. Using a negative requestCode is the same as calling <span class="title">startActivity</span><span class="params">(Intent)</span> <span class="params">(the activity is not launched as a sub-activity)</span>.</div><div class="line"></div><div class="line"><span class="comment">//加载一个Activity，当它结束时你会得到结果。当这个Activty退出了，你的onActivityResult()方法会根据给出的requestCode被调用。使用一个负的requestCode和调用startActivity(intent)一样（activity不被加载成子activity）</span></div><div class="line"></div><div class="line">Note that <span class="keyword">this</span> method should only be used with Intent protocols that are defined to return a result. In other <span class="title">protocols</span> <span class="params">(such as ACTION_MAIN or ACTION_VIEW)</span>, you may not get the result when you expect. For example, <span class="keyword">if</span> the activity you are launching uses the singleTask launch mode, it will not run in your task and thus you will immediately receive a cancel result.</div><div class="line"></div><div class="line"><span class="comment">//注意这个方法只能用于被定义要返回结果的Intent协议。在其他协议中（譬如ACTION_MAIN或ACTION_VIEW），你可能在你想得到结果时得不到。比如，当你正载入的Activity使用的singleTask加载模式，它不会在你的栈中运行，这样你会立马得到一个取消的结果。</span></div><div class="line"></div><div class="line">As a special <span class="keyword">case</span>, <span class="keyword">if</span> you call <span class="title">startActivityForResult</span><span class="params">()</span> with a requestCode &gt;= <span class="number">0</span> <span class="function">during the initial <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span>/<span class="title">onResume</span><span class="params">()</span> of your activity, then your window will not be displayed until a result is returned back from the started activity. This is to avoid visible flickering when redirecting to another activity.</span></div><div class="line"></div><div class="line"><span class="comment">//有一个特例是，当你在初始的onCreate()方法或onResume()方法中用一个大于等于0的请求码调用startActivityForResult()，你的窗口在被启动的Activity返回结果前不会显示。这是为了避免跳转到另一Activity时可见的闪烁。</span></div><div class="line"></div><div class="line">This method <span class="keyword">throws</span> ActivityNotFoundException <span class="keyword">if</span> there was no Activity found to run the given Intent.</div><div class="line"></div><div class="line"><span class="comment">//如果运行所给Intent的Activity没被找到，该方法会抛出ActivityNotFoundException异常。</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="一、不要使用startActivityForResult-intent-RESULT-OK"><a href="#一、不要使用startActivityForResult-intent-RESULT-OK" class="headerlink" title="一、不要使用startActivityForResult(intent,RESULT_OK)"></a>一、不要使用startActivityForResult(intent,RESULT_OK)</h4><p>这是因为startActivity()是这样实现的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, @Nullable Bundle options)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</div><div class="line">            startActivityForResult(intent, -<span class="number">1</span>, options);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Note we want to go through this call for compatibility with</span></div><div class="line">            <span class="comment">// applications that may have overridden the method.</span></div><div class="line">            startActivityForResult(intent, -<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>而</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Standard activity result: operation canceled. */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESULT_CANCELED    = <span class="number">0</span>;</div><div class="line"><span class="comment">/** Standard activity result: operation succeeded. */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESULT_OK           = -<span class="number">1</span>;</div><div class="line"><span class="comment">/** Start of user-defined activity results. */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESULT_FIRST_USER   = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>所以</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivityForResult(intent,RESULT_OK) = startActivity()</div></pre></td></tr></table></figure>
<p><a href="../../../../../2015/11/24/android-Activity-launch-learn/#0x04_送给你们的彩蛋">参考链接</a></p>
<h4 id="二、requestCode应该大于0"><a href="#二、requestCode应该大于0" class="headerlink" title="二、requestCode应该大于0"></a>二、requestCode应该大于0</h4><blockquote>
<p>@requestCode If &gt;= 0, this code will be returned in  onActivityResult() when the activity exits.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivityForResult(intent, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<h4 id="三、startActivityForResult直接返回"><a href="#三、startActivityForResult直接返回" class="headerlink" title="三、startActivityForResult直接返回"></a>三、startActivityForResult直接返回</h4><p>经测试，所有需要传递或接收的 Activity 不允许设置<code>singleInstance</code>，或只能设为标准模式，否则系统将在 startActivityForResult() 后直接返回Activity.RESULT_CANCELED。也有文章说<code>singleTop</code>也不行，我在测试的时候却是可以正常运行的。而对于<code>singleTask</code>，设置在被启动的Activity上是不行的。</p>
<p><a href="../../../../../2014/11/25/android-activity-launchMode/#1-standard">参考链接</a></p>
<h4 id="四、setResult-方法必须在finish-之前"><a href="#四、setResult-方法必须在finish-之前" class="headerlink" title="四、setResult()方法必须在finish()之前"></a>四、setResult()方法必须在finish()之前</h4><p>如果在startActivityForResult起来的Activity里面设置setResult,结果并不会马上返回给parent的Activity,只有当前Activity被finish,结果才会被发送给parent的onActivityResult去处理!</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setResult</span><span class="params">(<span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        mResultCode = resultCode;</div><div class="line">        mResultData = data;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">int</span> resultCode;</div><div class="line">        Intent resultData;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            resultCode = mResultCode;</div><div class="line">            resultData = mResultData;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (Config.LOGV) Log.v(TAG, <span class="string">"Finishing self: token="</span> + mToken);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (ActivityManagerNative.getDefault()</div><div class="line">                .finishActivity(mToken, resultCode, resultData)) &#123;</div><div class="line">                mFinished = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            <span class="comment">// Empty</span></div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mParent.finishFromChild(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码可以看出activity返回result是在被finish的时候，也就是说调用setResult()方法必须在finish()之前。</p>
<p>那么如果在onPause()， onStop()， onDestroy()这些方法中调用setResult()也有可能不会返回成功，<br>因为这些方法调用不一定是在finish之前的，当然在onCreate()就调用setResult肯定是在finish之前的</p>
<p>按BACK键从一个Activity退出来的，一按BACK，android就会自动调用Activity的finish()方法，然后设置resultCode为RESULT_CANCELED，也就不会返回任何数据了 .<br>解决方法就是在Activity里面捕获按BACK的事件，捕获到之后先setResult，然后自己来调用finish,就搞定了……把BACK事件直接自己给吞了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"onBackPressed"</span>);</div><div class="line">        setResult(Const.LIVE_OK);</div><div class="line">        <span class="keyword">super</span>.onBackPressed();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://www.cnblogs.com/tt_mc/p/3586834.html" target="_blank" rel="external">Android Activity的加载模式和onActivityResult方法之间的冲突</a>,<a href="http://www.cnblogs.com/lijunamneg/archive/2013/02/05/2892616.html" target="_blank" rel="external">startActivityForResult和setResult详解</a>,<a href="http://blog.sina.com.cn/s/blog_5da93c8f0101gzf5.html" target="_blank" rel="external">调用startActivityForResult，onActivityResult无响应的问题</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AndroidManifest Ambiguity方案原理及代码]]></title>
      <url>http://dalufan.com/2016/01/01/android-sec-AndroidManifest/</url>
      <content type="html"><![CDATA[<h3 id="0x01-简述"><a href="#0x01-简述" class="headerlink" title="0x01 简述"></a>0x01 简述</h3><p>前段时间在bluebox的一份android安全pdf中看到一个AndroidManifest Ambiguity(模糊)方案。该方案基于android系统解析AXML的一个特点：android在解析AXML的属性的时候，是通过该属性的res id号而非属性名定位的。所谓的AXML就是AndroidManifest.xml对应的二进制文件，APK包中存储的就是AXML。比如属性：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"attr"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"0x01010003"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>它的属性名为name，id号为0x01010003。</p>
<p>该方案的大致原理如下图所示：</p>
<p><img src="/article_images/android_sec_manifest01.png" alt="alt"></p>
<a id="more"></a> 
<p>我简要概括一下：</p>
<p>我们在axml(<code>注意是axml不是AndroidManifest.xml</code>)中添加一个属性，该属性的属性名是name，属性的值是some.class，属性的ID号为0。根据前文所述，android系统对于非法的res ID号是不会解析的。所以我们添加这个无用的属性后，并不影响该APK的正常工作(上图左下角所示)，但是对于apktool之类的逆向工具而言，他们却会对这个无用的属性进行解析(上图右下角所示)。所以，如果我们进行重打包的话，apktool就会将该属性变更为一个ID号0x01010003的可以被系统解析的属性。这样造成的后果就是：由于我们的APK中并没有实现detect.class类，所以APK启动时会报错“there is no detect.class~~”。</p>
<h3 id="0x02-实现方案"><a href="#0x02-实现方案" class="headerlink" title="0x02 实现方案"></a>0x02 实现方案</h3><p>该PDF虽然提出了这个方案，但并没有给出实现的代码(其实它就给了上面那张图~其它什么都木有了~)，google也是空白。所以当我看懂原理之后，就想自己将它实现出来。哪知事情并没有我想的那么简单~~</p>
<p><img src="/article_images/android_sec_manifest04.png" alt="alt"></p>
<h4 id="2-1-AXML文件格式"><a href="#2-1-AXML文件格式" class="headerlink" title="2.1 AXML文件格式"></a>2.1 AXML文件格式</h4><p>遇到的第一个挑战就是：网上竟然搜不到AXML文件的格式！！！当时差点就放弃了，不过后来一想，既然apktool能解析AXML那就说明它是了解AXML的文件格式的，所以就上网搜索了一下解析AXML的各种解析代码，综合过后觉得Claud大大的AXML Parser代码比较利于总结AXML的文件格式。所以就以该代码问蓝本总结了一下文件格式，如下表所示：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="number">0x0</span>~<span class="number">0x3</span>    magic: <span class="number">0x03000800</span>固定值</div><div class="line"></div><div class="line"><span class="number">0x4</span>~<span class="number">0x7</span>    filesize: 文件整体大小</div><div class="line"></div><div class="line"><span class="number">0x8</span>~<span class="number">0xb</span>     StringTag: 字符串块开始标志，<span class="number">0x01001c00</span>固定值</div><div class="line"></div><div class="line"><span class="number">0xc</span>~<span class="number">0xf</span>      StringChunkSize:字符串块大小</div><div class="line"></div><div class="line"><span class="number">0x10</span>~<span class="number">0x13</span>   count of strings:字符串个数,</div><div class="line"></div><div class="line"><span class="number">0x14</span>~<span class="number">0x17</span>   count of styles: 类型个数</div><div class="line"></div><div class="line"><span class="number">0x18</span>~<span class="number">0x1b</span>   reserve field: 保留的，为<span class="number">0</span></div><div class="line"></div><div class="line"><span class="number">0x1c</span>~<span class="number">0x1f</span>    <span class="built_in">string</span>的起始偏移值：注意，这个偏移值是相对于stringChunk而言的！</div><div class="line"></div><div class="line"><span class="number">0x20</span>~<span class="number">0x23</span>    styles的起始偏移值：同上</div><div class="line"></div><div class="line">下面存储的就是n个连续的<span class="built_in">string</span>的偏移值，每个偏移值占<span class="number">4</span>字节，需要注意的是，这个偏移值加上<span class="built_in">string</span>的起始偏移值和<span class="number">0x8</span>才是真正的偏移值！n的大小就是<span class="number">0x10</span>~<span class="number">0x13</span>的大小</div><div class="line"></div><div class="line">然后就是n个连续的style的偏移值，同上~</div><div class="line"></div><div class="line">String数据块</div><div class="line"></div><div class="line">........</div><div class="line"></div><div class="line">Style数据块</div><div class="line"></div><div class="line">........</div><div class="line"></div><div class="line">注意：到这里，stringchunk就算是结束了</div><div class="line"></div><div class="line">下面就是ResourceChunk了，里面保存的就是资源ID号</div><div class="line"></div><div class="line">ResourceTag: <span class="number">0x80010800</span>  </div><div class="line"></div><div class="line">ResourceChunkSize: 资源ID块的大小</div><div class="line"></div><div class="line">连续 ResourceChunkSize/<span class="number">4</span> <span class="number">-2</span>个res id值。<span class="number">-2</span>主要是除去上面的<span class="number">8</span>字节resourceChunkHeader。</div><div class="line"></div><div class="line">每个res id占<span class="number">4</span>字节</div><div class="line"></div><div class="line">                           ResourceChunk结束</div><div class="line"></div><div class="line">下面就是一些连续的chunk块了：</div><div class="line"></div><div class="line">CHUNK_STARTNS:  doc开始标志,<span class="number">0x00011000</span></div><div class="line"></div><div class="line">CHUNK SIZE:</div><div class="line"></div><div class="line">line number</div><div class="line"></div><div class="line">unknown, <span class="number">0xffffffff</span></div><div class="line"></div><div class="line">下面就是一个<span class="keyword">namespace</span> record结构体，简称NsRecord</div><div class="line"></div><div class="line">NsRecord-&gt;prefix</div><div class="line"></div><div class="line">NsRecord-&gt;uri,</div><div class="line"></div><div class="line">然后就是递归地进行chunk操作，因为一个命名空间里面往往含有很多子chunk</div><div class="line"></div><div class="line">CHUNK_TYPE:<span class="number">0x02011000</span>-&gt;<span class="number">0x00100102</span>为CHUNK_STARTTAG</div><div class="line"></div><div class="line">CHUNK_SIZE </div><div class="line"></div><div class="line">line number</div><div class="line"></div><div class="line">unknown, <span class="number">0xffffffff</span> </div><div class="line"></div><div class="line">current tag's <span class="keyword">namespace</span>'s uri</div><div class="line"></div><div class="line">当前tag的名字 所一个<span class="built_in">string</span>索引值</div><div class="line"></div><div class="line">flags, unknown usage</div><div class="line"></div><div class="line">当前标签含有的attr个数，注意最后结果要&amp;<span class="number">0x0000ffff</span></div><div class="line"></div><div class="line">classAttribute, unknown usage</div><div class="line"></div><div class="line">下面就是连续的n个attribution chunk，attribution的结构体如下：</div><div class="line"></div><div class="line"><span class="comment">/* attribute structure within tag */</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">uint32_t</span> uri;        <span class="comment">/* uri of its namespace  index  of strings*/</span></div><div class="line"></div><div class="line">      <span class="keyword">uint32_t</span> name;   <span class="comment">/*属性名，索引值 index  of strings */</span></div><div class="line"></div><div class="line">      <span class="keyword">uint32_t</span> <span class="built_in">string</span>;   <span class="comment">/* attribute value if type == ATTR_STRING ，索引值*/</span></div><div class="line"></div><div class="line">      <span class="keyword">uint32_t</span> type;             <span class="comment">/* attribute type, == ATTR_* * / 注意该值需要右移24位</span></div><div class="line"></div><div class="line">      uint32_t data;            /* attribute value, encoded on type */</div><div class="line"></div><div class="line">&#125; Attribute_t;</div><div class="line"></div><div class="line">依次类推</div><div class="line"></div><div class="line">........</div></pre></td></tr></table></figure>
<h4 id="2-2修改AXML的注意事项"><a href="#2-2修改AXML的注意事项" class="headerlink" title="2.2修改AXML的注意事项"></a>2.2修改AXML的注意事项</h4><p>了解了AXML的文件格式，我们就可以想法进行属性插入了。不过在属性插入之前，我们必须规划好具体地实施方案，因为它涉及到的东西并不算少。</p>
<p>1、 首先，需要对属性结构体做进一步分析。它的格式如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* attribute structure within tag */</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">uint32_t</span> uri;       <span class="comment">/* uri of its namespace  index  of strings*/</span></div><div class="line"></div><div class="line">         <span class="keyword">uint32_t</span> name;      <span class="comment">/*属性名，索引值 index  of strings */</span></div><div class="line"></div><div class="line">         <span class="keyword">uint32_t</span> <span class="built_in">string</span>;  <span class="comment">/* attribute value if type == ATTR_STRING ，索引值*/</span></div><div class="line"></div><div class="line">         <span class="keyword">uint32_t</span> type; <span class="comment">/* attribute type, == ATTR_* * / 注意该值需要右移24位</span></div><div class="line"></div><div class="line">         uint32_t data;  /* attribute value, encoded on type */</div><div class="line"></div><div class="line">&#125; Attribute_t;</div><div class="line"></div><div class="line"></div><div class="line">重点是name, <span class="built_in">string</span>, data。我提取出了一个AXML中属性片段，如下所示：</div><div class="line"></div><div class="line">Offset      <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>   <span class="number">8</span>  <span class="number">9</span>  A  B  C  D  E  F</div><div class="line"></div><div class="line"><span class="number">0</span>C <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   FF FF FF FF   <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span>   <span class="number">01</span> <span class="number">00</span> <span class="number">06</span> <span class="number">7F</span> </div><div class="line"></div><div class="line"><span class="number">0</span>C <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   FF FF FF FF   <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">05</span> <span class="number">7F</span></div><div class="line"></div><div class="line"><span class="number">0</span>C <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>[w1]   <span class="number">04</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>[w2]    <span class="number">17</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>[w3]   <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">03</span> [w4]   <span class="number">17</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>[w5] </div><div class="line"></div><div class="line"> [w1]uri：命名空间的URI，是<span class="built_in">string</span>的索引值</div><div class="line"></div><div class="line"> [w2]name：属性名，也是一个<span class="built_in">string</span>的索引值</div><div class="line"></div><div class="line"> [w3]<span class="built_in">string</span>：如果属性type为ATTR_STRING的话，此值就是属性android:name=<span class="string">"xxx"</span>,xxx在<span class="built_in">string</span>的索引值。其余情况均为<span class="number">0xffffffff</span></div><div class="line"></div><div class="line"> [w4]type：属性的类型，对于android:name，类型值为<span class="number">0x03000008</span></div><div class="line"></div><div class="line"> [w5]data：属性的数据值，对于ATTR_STRING而言，它的值就是<span class="built_in">string</span>的值。</div></pre></td></tr></table></figure>
<p>可以发现，结构体里面并没有一个叫做res ID的成员，那么系统又是如何获取某个属性的ID号的呢？原来这里的<code>name成员是身兼两职</code>，即作为属性名的一个string索引，又作为res ID的索引。比如这里name = 4，它对应StringChunk中的字符串为”name”，对应ResourceChunk中的res ID 0x01010003。所以要插入一个属性名为name，ID号又为0的属性，我们就必须新建一个string，该string的值为name，再新建一个res ID，值为0，<code>且两者在各自Chunk区域的索引值是相等的(这是重点)</code>。</p>
<p>2、其次，就是在StringChunk中string的对齐问题(最初被弄得脑洞大开~)。</p>
<p>AXML中几乎所有的成员都是uint32型的，除了使用UTF-16编码的string数据块之外。所以在加入string后必须对string数据块进行4字节对齐。而如果原AXML的string数据块已经进行过4字节对齐(即人为地填充了几个0x00)的话，我们就需要注意UTF-16编码的最后一个string的第一个字节的大小并不包含这几个填充的0x00(这个字节表示该string所占用的字节数，详情可查阅UTF-16编码相关资料)。为了绕过烦人的对齐问题，我们使用取巧的方式获取字符串的长度：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stringLen = stringChunkSize - stringOffset; <span class="comment">//此时的stringLen肯定是4字节对齐的</span></div></pre></td></tr></table></figure>
<p>当然，这是在没有style的情况下，如果有的话，还得采取额外的操作(实现代码中有~)。为了简便，我是直接将添加的string加在这个对齐后的字符串之后的，这样就只需要考虑添加的字符串是否需要对齐了~</p>
<p>3、然后，就是ResourceChunk的扩充。</p>
<p>在1中已经提到插入的属性的name的值同时充当res ID索引值。而通常ResourceChunk中的res ID个数是远少于string 的个数的，那么这就需要我们将ResourceChunk进行扩充。扩充很简单，全部赋值为0即可。</p>
<p>4、最后，除了需要添加数据外，还需要修改原文件的某些“计量值”，这些计量值都是与数据块大小或偏移值有关的，总结如下：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">①fileSize</div><div class="line"></div><div class="line">②StringChunkSize</div><div class="line"></div><div class="line">③<span class="built_in">count</span> <span class="keyword">of</span> <span class="built_in">string</span></div><div class="line"></div><div class="line">④styles的起始偏移值(如果有style的话就需要修改)</div><div class="line"></div><div class="line">⑤ResourceChunkSize</div><div class="line"></div><div class="line">⑥<span class="built_in">application</span>所属chunk的chunksize</div><div class="line"></div><div class="line">⑦applicationh含有的属性个数</div></pre></td></tr></table></figure>
<h4 id="2-3-修改AXML步骤"><a href="#2-3-修改AXML步骤" class="headerlink" title="2.3 修改AXML步骤"></a>2.3 修改AXML步骤</h4><ol>
<li>修改StringChunk，添加UTF-16表示的字符串chouchou.class和name，并为这两个字符串添加偏移值条目。同时对StringChunkSize、count of string、styles的起始偏移值进行修复；</li>
<li>修改ResourceChunk，主要是进行res ID扩充和对ResourceChunkSize的修复</li>
<li>修改application所在的chunk，插入属性，同时对chunksize和applicationh含有的属性个数进行修复；</li>
<li>将不需要修改的部分copy到合适的位置；</li>
<li>修复fileSize</li>
</ol>
<p>当然，具体地实现肯定比上诉步骤复杂一些，不过实现源码中有较为详细的注释，大家可参照源码阅读~</p>
<h3 id="0x03-代码说明"><a href="#0x03-代码说明" class="headerlink" title="0x03 代码说明"></a>0x03 代码说明</h3><p>AxmlParser.h/.c是Claud大大解析axml的源码，出于对作者的感谢以及让大家更详细地了解AXML的解析过程(其实，是我实在是不想自己写解析代码o(╯□╰)o)，我将实现代码跟它合并到一块了。AxmlModify.c就是我写的实现AXML修改功能。</p>
<h3 id="0x04-使用方法"><a href="#0x04-使用方法" class="headerlink" title="0x04 使用方法"></a>0x04 使用方法</h3><p>当前代码还不完善，只是初步实现了插入application.attr(“name”, “chouchou.class”,0x0)的功能。所以并非最终版。</p>
<p>代码只能在linux下运行，下载代码后make即可生成可执行文件manifestAmbiguity。然后直接运行./manifestAmbiguity可以得到完整的使用说明。</p>
<p>修改前：</p>
<p><img src="/article_images/android_sec_manifest02.png" alt="alt"></p>
<p>修改后：</p>
<p><img src="/article_images/android_sec_manifest03.png" alt="alt"></p>
<p>将修改后的xml覆盖原APK中的xml，然后删掉原来的签名文件夹再进行签名即可。这时候如果对按照此方案修改后的APK进行重打包，就会发现重打包的APK已经无法启动了。</p>
<h3 id="0x05-下一步工作"><a href="#0x05-下一步工作" class="headerlink" title="0x05 下一步工作"></a>0x05 下一步工作</h3><p>由于目前的apk软件保护主要是基于dex代码加密和so库文件加密，对AndroidManifest.xml并没有进行任何操作，而AndroidManifest.xml作为apk的入口文件，其重要性是不言而喻的。所以我想能不能在此文件中做些“手脚”，然后结合相应的处理代码实现另一角度的软件保护。</p>
<p>比如，我们完全可以实现那个陷阱类trap.class，且这个类继承自application等等，以便被重打包的apk也可运行。只是，从一开始，该apk就运行在一个错误的环境中，至于之后的操作，那就可以尽情发挥了。</p>
<p>或者，我们可以在其他tag中插入一些不会影响apk运行的属性(即新添加的属性不可被系统识别，重打包后该属性能被系统识别但又不会影响apk的运行)，然后在代码中检查AndroidManifest.xml是否含有该属性，如果有就说明软件被重打包了。</p>
<p>等等~</p>
<p>如果大家有好的建议或方法，请一定不吝赐教~谢谢！</p>
<p>代码地址：<br><a href="https://github.com/wanchouchou/ManifestAmbiguity" target="_blank" rel="external">https://github.com/wanchouchou/ManifestAmbiguity</a></p>
<blockquote>
<p>目前我在进行dalvik的插桩，但是apk的每个method对于使用的寄存器数有限制，有的限制在v0 ~v15之间，有的是v0 ~v 255. 这个设置感觉跟编译出来的结果有关，<br>但是我经常会需要加入比较多的 寄存器， 遇到限制在 v0 ~ v15 之间的限制，就没有办法了， 会重编译出现错误。 </p>
</blockquote>
<p>其实一般情况下在你插桩的指令附近找到几个可以复用的寄存器还是很简单的，一般添加打log相关的指令我都是这么干。不过如果你需要添加很复杂的代码，我觉得有两种方案：</p>
<ol>
<li>把你要添加的代码单独写到一个类中，然后你只需要插入一条指令Invoke-direct/static/virtual去调用这个类中的相应方法即可，这样也就需要2，3个寄存器，也就不存在寄存器不够用的情况了；</li>
<li>将所有的只能用16个寄存器的方法修改为可使用256个寄存器的方法。这涉及到dalvik指令，一般你看到invoke-direct/range这种指令的话，它所调用的方法就是可使用256个寄存器的。这里/range表示扩展寄存器，通常方法的寄存器都是vA这种形式，A表示4bit数据，即0~15。而range方法的寄存器都是vAA这种形式，AA表示8bit字节，即0~255，所以如果你要对某个方法的寄存器进行扩展的话，就需要改指令了。<br>个人推荐第一种方案：）</li>
</ol>
<hr>
<p>参考链接：<a href="http://www.cnblogs.com/wanyuanchun/p/4084292.html" target="_blank" rel="external">万抽抽</a>&lt;–&gt;<a href="http://bbs.pediy.com/showthread.php?t=194206" target="_blank" rel="external">AndroidManifest二进制文件格式分析</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Webview中上传文件支持全解析]]></title>
      <url>http://dalufan.com/2015/12/22/android-webview-upload-file/</url>
      <content type="html"><![CDATA[<h3 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h3><p>默认情况下情况下，使用Android的WebView是不能够支持上传文件的。而这个，也是在我们的前端工程师告知之后才了解的。因为Android的每个版本WebView的实现有差异，因此需要对不同版本去适配。花了一点时间，参考别人的代码，这个问题已经解决，这里把我踩过的坑分享出来。<br>主要思路是重写WebChromeClient，然后在WebViewActivity中接收选择到的文件Uri，传给页面去上传就可以了</p>
<a id="more"></a> 
<h3 id="0x01-创建WebViewActivity的内部类"><a href="#0x01-创建WebViewActivity的内部类" class="headerlink" title="0x01 创建WebViewActivity的内部类"></a>0x01 创建WebViewActivity的内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XHSWebChromeClient</span> <span class="keyword">extends</span> <span class="title">WebChromeClient</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// For Android 3.0+</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg)</span> </span>&#123;</div><div class="line">        CLog.i(<span class="string">"UPFILE"</span>, <span class="string">"in openFile Uri Callback"</span>);</div><div class="line">        <span class="keyword">if</span> (mUploadMessage != <span class="keyword">null</span>) &#123;</div><div class="line">            mUploadMessage.onReceiveValue(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        mUploadMessage = uploadMsg;</div><div class="line">        Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">        i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">        i.setType(<span class="string">"*/*"</span>);</div><div class="line">        startActivityForResult(Intent.createChooser(i, <span class="string">"File Chooser"</span>), FILECHOOSER_RESULTCODE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// For Android 3.0+</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback uploadMsg, String acceptType)</span> </span>&#123;</div><div class="line">        CLog.i(<span class="string">"UPFILE"</span>, <span class="string">"in openFile Uri Callback has accept Type"</span> + acceptType);</div><div class="line">        <span class="keyword">if</span> (mUploadMessage != <span class="keyword">null</span>) &#123;</div><div class="line">            mUploadMessage.onReceiveValue(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        mUploadMessage = uploadMsg;</div><div class="line">        Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">        i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">        String type = TextUtils.isEmpty(acceptType) ? <span class="string">"*/*"</span> : acceptType;</div><div class="line">        i.setType(type);</div><div class="line">        startActivityForResult(Intent.createChooser(i, <span class="string">"File Chooser"</span>),</div><div class="line">                FILECHOOSER_RESULTCODE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// For Android 4.1</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture)</span> </span>&#123;</div><div class="line">        CLog.i(<span class="string">"UPFILE"</span>, <span class="string">"in openFile Uri Callback has accept Type"</span> + acceptType + <span class="string">"has capture"</span> + capture);</div><div class="line">        <span class="keyword">if</span> (mUploadMessage != <span class="keyword">null</span>) &#123;</div><div class="line">            mUploadMessage.onReceiveValue(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        mUploadMessage = uploadMsg;</div><div class="line">        Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">        i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">        String type = TextUtils.isEmpty(acceptType) ? <span class="string">"*/*"</span> : acceptType;</div><div class="line">        i.setType(type);</div><div class="line">        startActivityForResult(Intent.createChooser(i, <span class="string">"File Chooser"</span>), FILECHOOSER_RESULTCODE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Android 5.0+</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onShowFileChooser</span><span class="params">(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, FileChooserParams fileChooserParams)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mUploadMessage != <span class="keyword">null</span>) &#123;</div><div class="line">            mUploadMessage.onReceiveValue(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        CLog.i(<span class="string">"UPFILE"</span>, <span class="string">"file chooser params："</span> + fileChooserParams.toString());</div><div class="line">        mUploadMessage = filePathCallback;</div><div class="line">        Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">        i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">        <span class="keyword">if</span> (fileChooserParams != <span class="keyword">null</span> &amp;&amp; fileChooserParams.getAcceptTypes() != <span class="keyword">null</span></div><div class="line">                &amp;&amp; fileChooserParams.getAcceptTypes().length &gt; <span class="number">0</span>) &#123;</div><div class="line">            i.setType(fileChooserParams.getAcceptTypes()[<span class="number">0</span>]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            i.setType(<span class="string">"*/*"</span>);</div><div class="line">        &#125;</div><div class="line">        startActivityForResult(Intent.createChooser(i, <span class="string">"File Chooser"</span>), FILECHOOSER_RESULTCODE);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面openFileChooser是系统未暴露的接口，因此不需要加Override的注解，同时不同版本有不同的参数，其中的参数，第一个ValueCallback用于我们在选择完文件后，接收文件回调到网页内处理，acceptType为接受的文件mime type。在Android 5.0之后，系统提供了onShowFileChooser来让我们实现选择文件的方法，仍然有ValueCallback，在FileChooserParams参数中，同样包括acceptType。我们可以根据acceptType，来打开系统的或者我们自己创建文件选择器。当然如果需要打开相机拍照，也可以自己去使用打开相机拍照的Intent去打开即可。</p>
<h3 id="0x02-处理选择的文件"><a href="#0x02-处理选择的文件" class="headerlink" title="0x02 处理选择的文件"></a>0x02 处理选择的文件</h3><p>以上是打开响应的选择文件的界面，我们还需要处理接收到文件之后，传给网页来响应。因为我们前面是使用startActivityForResult来打开的选择页面，我们会在onActivityResult中接收到选择的结果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">    <span class="keyword">if</span> (requestCode == FILECHOOSER_RESULTCODE) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == mUploadMessage) <span class="keyword">return</span>;</div><div class="line">        Uri result = data == <span class="keyword">null</span> || resultCode != RESULT_OK ? <span class="keyword">null</span> : data.getData();</div><div class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</div><div class="line">            mUploadMessage.onReceiveValue(<span class="keyword">null</span>);</div><div class="line">            mUploadMessage = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        CLog.i(<span class="string">"UPFILE"</span>, <span class="string">"onActivityResult"</span> + result.toString());</div><div class="line">        String path =  FileUtils.getPath(<span class="keyword">this</span>, result);</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(path)) &#123;</div><div class="line">            mUploadMessage.onReceiveValue(<span class="keyword">null</span>);</div><div class="line">            mUploadMessage = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        Uri uri = Uri.fromFile(<span class="keyword">new</span> File(path));</div><div class="line">        CLog.i(<span class="string">"UPFILE"</span>, <span class="string">"onActivityResult after parser uri:"</span> + uri.toString());</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">            mUploadMessage.onReceiveValue(<span class="keyword">new</span> Uri[]&#123;uri&#125;);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mUploadMessage.onReceiveValue(uri);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mUploadMessage = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码主要就是调用ValueCallback的onReceiveValue方法，将结果传回web。</p>
<h3 id="0x03-其他"><a href="#0x03-其他" class="headerlink" title="0x03 其他"></a>0x03 其他</h3><p>由于不同版本的差别，Android 5.0以下的版本，ValueCallback 的onReceiveValue接收的参数类型是Uri, 5.0及以上版本接收的是Uri数组，在传值的时候需要注意。<br>选择文件会使用系统提供的组件或者其他支持的app，返回的uri有的直接是文件的url，有的是contentprovider的uri，因此我们需要统一处理一下，转成文件的uri，可参考以下代码（获取文件的路径）。<br>调用getPath可以将Uri转成真实文件的Path，然后可以自己生成文件的Uri</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> uri The Uri to check.</div><div class="line">     * <span class="doctag">@return</span> Whether the Uri authority is ExternalStorageProvider.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExternalStorageDocument</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"com.android.externalstorage.documents"</span>.equals(uri.getAuthority());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> uri The Uri to check.</div><div class="line">     * <span class="doctag">@return</span> Whether the Uri authority is DownloadsProvider.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDownloadsDocument</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"com.android.providers.downloads.documents"</span>.equals(uri.getAuthority());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> uri The Uri to check.</div><div class="line">     * <span class="doctag">@return</span> Whether the Uri authority is MediaProvider.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMediaDocument</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"com.android.providers.media.documents"</span>.equals(uri.getAuthority());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the value of the data column for this Uri. This is useful for</div><div class="line">     * MediaStore Uris, and other file-based ContentProviders.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context The context.</div><div class="line">     * <span class="doctag">@param</span> uri The Uri to query.</div><div class="line">     * <span class="doctag">@param</span> selection (Optional) Filter used in the query.</div><div class="line">     * <span class="doctag">@param</span> selectionArgs (Optional) Selection arguments used in the query.</div><div class="line">     * <span class="doctag">@return</span> The value of the _data column, which is typically a file path.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataColumn</span><span class="params">(Context context, Uri uri, String selection,</span></span></div><div class="line">                                       String[] selectionArgs) &#123;</div><div class="line"></div><div class="line">        Cursor cursor = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">final</span> String column = <span class="string">"_data"</span>;</div><div class="line">        <span class="keyword">final</span> String[] projection = &#123;</div><div class="line">                column</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,</div><div class="line">                    <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> column_index = cursor.getColumnIndexOrThrow(column);</div><div class="line">                <span class="keyword">return</span> cursor.getString(column_index);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>)</div><div class="line">                cursor.close();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get a file path from a Uri. This will get the the path for Storage Access</div><div class="line">     * Framework Documents, as well as the _data field for the MediaStore and</div><div class="line">     * other file-based ContentProviders.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context The context.</div><div class="line">     * <span class="doctag">@param</span> uri The Uri to query.</div><div class="line">     * <span class="doctag">@author</span> paulburke</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Uri uri)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isKitKat = Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT;</div><div class="line"></div><div class="line">        <span class="comment">// DocumentProvider</span></div><div class="line">        <span class="keyword">if</span> (isKitKat &amp;&amp; DocumentsContract.isDocumentUri(context, uri)) &#123;</div><div class="line">            <span class="comment">// ExternalStorageProvider</span></div><div class="line">            <span class="keyword">if</span> (isExternalStorageDocument(uri)) &#123;</div><div class="line">                <span class="keyword">final</span> String docId = DocumentsContract.getDocumentId(uri);</div><div class="line">                <span class="keyword">final</span> String[] split = docId.split(<span class="string">":"</span>);</div><div class="line">                <span class="keyword">final</span> String type = split[<span class="number">0</span>];</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (<span class="string">"primary"</span>.equalsIgnoreCase(type)) &#123;</div><div class="line">                    <span class="keyword">return</span> Environment.getExternalStorageDirectory() + <span class="string">"/"</span> + split[<span class="number">1</span>];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// TODO handle non-primary volumes</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// DownloadsProvider</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isDownloadsDocument(uri)) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">final</span> String id = DocumentsContract.getDocumentId(uri);</div><div class="line">                <span class="keyword">final</span> Uri contentUri = ContentUris.withAppendedId(</div><div class="line">                        Uri.parse(<span class="string">"content://downloads/public_downloads"</span>), Long.valueOf(id));</div><div class="line"></div><div class="line">                <span class="keyword">return</span> getDataColumn(context, contentUri, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// MediaProvider</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isMediaDocument(uri)) &#123;</div><div class="line">                <span class="keyword">final</span> String docId = DocumentsContract.getDocumentId(uri);</div><div class="line">                <span class="keyword">final</span> String[] split = docId.split(<span class="string">":"</span>);</div><div class="line">                <span class="keyword">final</span> String type = split[<span class="number">0</span>];</div><div class="line"></div><div class="line">                Uri contentUri = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (<span class="string">"image"</span>.equals(type)) &#123;</div><div class="line">                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"video"</span>.equals(type)) &#123;</div><div class="line">                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"audio"</span>.equals(type)) &#123;</div><div class="line">                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">final</span> String selection = <span class="string">"_id=?"</span>;</div><div class="line">                <span class="keyword">final</span> String[] selectionArgs = <span class="keyword">new</span> String[] &#123;</div><div class="line">                        split[<span class="number">1</span>]</div><div class="line">                &#125;;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> getDataColumn(context, contentUri, selection, selectionArgs);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// MediaStore (and general)</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"content"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</div><div class="line">            <span class="keyword">return</span> getDataColumn(context, uri, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// File</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"file"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</div><div class="line">            <span class="keyword">return</span> uri.getPath();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再有，即使获取的结果为null，也要传给web，即直接调用<code>mUploadMessage.onReceiveValue(null)</code>,否则网页会阻塞。</p>
<p>最后，在打release包的时候，因为我们会混淆，要特别设置不要混淆WebChromeClient子类里面的openFileChooser方法，由于不是继承的方法，所以默认会被混淆，然后就无法选择文件了</p>
<hr>
<p>参考链接：<a href="http://blog.isming.me/2015/12/21/android-webview-upload-file/" target="_blank" rel="external">isming</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Webview中的问题及解决]]></title>
      <url>http://dalufan.com/2015/12/20/android-webview-issues/</url>
      <content type="html"><![CDATA[<h3 id="goback-跳过302方法"><a href="#goback-跳过302方法" class="headerlink" title="goback 跳过302方法"></a>goback 跳过302方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断是否可以返回操作</span></div><div class="line">        <span class="keyword">if</span> (webView.canGoBack() &amp;&amp; event.getKeyCode() == KeyEvent.KEYCODE_BACK) &#123;</div><div class="line">            <span class="comment">//获取历史列表</span></div><div class="line">            WebBackForwardList mWebBackForwardList = webView</div><div class="line">                    .copyBackForwardList();</div><div class="line">            <span class="comment">//判断当前历史列表是否最顶端,其实canGoBack已经判断过</span></div><div class="line">            <span class="keyword">if</span> (mWebBackForwardList.getCurrentIndex() &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">//获取历史列表</span></div><div class="line">                String historyUrl = mWebBackForwardList.getItemAtIndex(</div><div class="line">                        mWebBackForwardList.getCurrentIndex() - <span class="number">1</span>).getUrl();</div><div class="line">                <span class="comment">//按照自己规则检查是否为可跳转地址</span></div><div class="line">                <span class="comment">//注意:这里可以根据自己逻辑循环判断,拿到可以跳转的那一个然后webView.goBackOrForward(steps)</span></div><div class="line">                <span class="comment">// steps为负数时，表示回退，正数表示向前</span></div><div class="line">                <span class="keyword">if</span> (!historyUrl.contains(<span class="string">"s.click.taobao.com"</span>)) &#123;</div><div class="line">                    <span class="comment">//执行跳转逻辑</span></div><div class="line">                    webView.goBack();</div><div class="line">                    <span class="comment">//webView.goBackOrForward(-1)</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<a id="more"></a> 
<h3 id="无法浏览AJAX网页问题"><a href="#无法浏览AJAX网页问题" class="headerlink" title="无法浏览AJAX网页问题"></a>无法浏览AJAX网页问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">webView.getSettings().setCacheMode(WebSettings.LOAD_DEFAULT);</div><div class="line">webView.getSettings().setDomStorageEnabled(<span class="keyword">true</span>);</div><div class="line">webView.getSettings().setAllowFileAccess(<span class="keyword">true</span>);</div><div class="line">webView.getSettings().setUserAgentString(<span class="string">"User-Agent"</span>);</div></pre></td></tr></table></figure>
<h3 id="为WebView自定义错误显示界面"><a href="#为WebView自定义错误显示界面" class="headerlink" title="为WebView自定义错误显示界面"></a>为WebView自定义错误显示界面</h3><p>覆写WebViewClient中的onReceivedError()方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 显示自定义错误提示页面，用一个View覆盖在WebView </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">showErrorPage</span><span class="params">()</span> </span>&#123;  </div><div class="line">    LinearLayout webParentView = (LinearLayout)mWebView.getParent();  </div><div class="line">      </div><div class="line">    initErrorPage();  </div><div class="line">    <span class="keyword">while</span> (webParentView.getChildCount() &gt; <span class="number">1</span>) &#123;  </div><div class="line">        webParentView.removeViewAt(<span class="number">0</span>);  </div><div class="line">    &#125;  </div><div class="line">    LinearLayout.LayoutParams lp = <span class="keyword">new</span> LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT);  </div><div class="line">    webParentView.addView(mErrorView, <span class="number">0</span>, lp);  </div><div class="line">    mIsErrorPage = <span class="keyword">true</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">hideErrorPage</span><span class="params">()</span> </span>&#123;  </div><div class="line">    LinearLayout webParentView = (LinearLayout)mWebView.getParent();  </div><div class="line">      </div><div class="line">    mIsErrorPage = <span class="keyword">false</span>;  </div><div class="line">    <span class="keyword">while</span> (webParentView.getChildCount() &gt; <span class="number">1</span>) &#123;  </div><div class="line">        webParentView.removeViewAt(<span class="number">0</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initErrorPage</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (mErrorView == <span class="keyword">null</span>) &#123;  </div><div class="line">        mErrorView = View.inflate(<span class="keyword">this</span>, R.layout.online_error, <span class="keyword">null</span>);  </div><div class="line">        Button button = (Button)mErrorView.findViewById(R.id.online_error_btn_retry);  </div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">                mWebView.reload();  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">        mErrorView.setOnClickListener(<span class="keyword">null</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, <span class="keyword">int</span> errorCode, String description, String failingUrl)</span> </span>&#123;</div><div class="line">    mErrorView.setVisibility(View.VISIBLE);</div><div class="line">    <span class="keyword">super</span>.onReceivedError(view, errorCode, description, failingUrl);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="cookies清理："><a href="#cookies清理：" class="headerlink" title="cookies清理："></a>cookies清理：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CookieSyncManager.createInstance(<span class="keyword">this</span>);   </div><div class="line">CookieSyncManager.getInstance().startSync();   </div><div class="line">CookieManager.getInstance().removeSessionCookie();</div></pre></td></tr></table></figure>
<h3 id="清理cache-和历史记录"><a href="#清理cache-和历史记录" class="headerlink" title="清理cache 和历史记录"></a>清理cache 和历史记录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">webView.clearCache(<span class="keyword">true</span>);   </div><div class="line">webView.clearHistory();</div></pre></td></tr></table></figure>
<h3 id="判断WebView是否已经滚动到页面底端"><a href="#判断WebView是否已经滚动到页面底端" class="headerlink" title="判断WebView是否已经滚动到页面底端"></a>判断WebView是否已经滚动到页面底端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//getScrollY()方法返回的是当前可见区域的顶端距整个页面顶端的距离,也就是当前内容滚动的距离.   </span></div><div class="line"><span class="comment">//getHeight()或者getBottom()方法都返回当前WebView 这个容器的高度   </span></div><div class="line"><span class="comment">//getContentHeight 返回的是整个html 的高度,但并不等同于当前整个页面的高度,因为WebView 有缩放功能, 所以当前整个页面的高度实际上应该是原始html 的高度再乘上缩放比例. 因此,更正后的结果,准确的判断方法应该是：   </span></div><div class="line"><span class="keyword">if</span>(WebView.getContentHeight*WebView.getScale() == (webview.getHeight()+WebView.getScrollY()))&#123; </div><div class="line"><span class="comment">//已经处于底端 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="处理WebView中的非超链接请求-如Ajax请求"><a href="#处理WebView中的非超链接请求-如Ajax请求" class="headerlink" title="处理WebView中的非超链接请求(如Ajax请求)"></a>处理WebView中的非超链接请求(如Ajax请求)</h3><p>有时候需要加上请求头，但是非超链接的请求，没有办法再<code>shouldOverrideUrlLoading</code>中拦截并用webView.loadUrl(String url,HashMap headers)方法添加请求头</p>
<p>目前用了一个临时的办法解决：</p>
<p>首先需要在url中加特殊标记/协议, 如在onWebViewResource方法中拦截对应的请求，然后将要添加的请求头，以get形式拼接到url末尾<br>在shouldInterceptRequest()方法中,可以拦截到所有的网页中资源请求，比如加载JS，图片以及Ajax请求等等</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="comment">//通知应用程序内核即将加载url制定的资源，应用程序可以返回本地的资源提供给内核，若本地处理返回数据，内核不从网络上获取数据。这个回调并不一定在UI线程执行，所以我们需要注意在这里操作View或者私有数据相关的动作。</span></div><div class="line"><span class="comment">//如果我们需要改变网页的背景，或者需要实现网页页面颜色定制化的需求，可以在这个回调时机处理。</span></div><div class="line"><span class="function"><span class="keyword">public</span> WebResourceResponse <span class="title">shouldInterceptRequest</span><span class="params">(WebView view,String url)</span> </span>&#123;  </div><div class="line">    <span class="comment">// 非超链接(如Ajax)请求无法直接添加请求头，现拼接到url末尾,这里拼接一个imei作为示例  </span></div><div class="line">  </div><div class="line">    String ajaxUrl = url;  </div><div class="line">    <span class="comment">// 如标识:req=ajax  </span></div><div class="line">    <span class="keyword">if</span> (url.contains(<span class="string">"req=ajax"</span>)) &#123;  </div><div class="line">       ajaxUrl += <span class="string">"&amp;imei="</span> + imei;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.shouldInterceptRequest(view, ajaxUrl);  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在页面中先显示图片"><a href="#在页面中先显示图片" class="headerlink" title="在页面中先显示图片"></a>在页面中先显示图片</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadResource</span><span class="params">(WebView view, String url)</span> </span>&#123;  </div><div class="line">  mEventListener.onWebViewEvent(CustomWebView.<span class="keyword">this</span>, OnWebViewEventListener.EVENT_ON_LOAD_RESOURCE, url);  </div><div class="line">    <span class="keyword">if</span> (url.indexOf(<span class="string">".jpg"</span>) &gt; <span class="number">0</span>) &#123;  </div><div class="line">     hideProgress(); <span class="comment">//请求图片时即显示页面  </span></div><div class="line">     mEventListener.onWebViewEvent(CustomWebView.<span class="keyword">this</span>, OnWebViewEventListener.EVENT_ON_HIDE_PROGRESS, view.getUrl());  </div><div class="line">     &#125;  </div><div class="line">    <span class="keyword">super</span>.onLoadResource(view, url);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="屏蔽掉长按事件"><a href="#屏蔽掉长按事件" class="headerlink" title="屏蔽掉长按事件"></a>屏蔽掉长按事件</h3><p>因为webview长按时将会调用系统的复制控件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mWebView.setOnLongClickListener(<span class="keyword">new</span> OnLongClickListener() &#123;  </div><div class="line">            </div><div class="line">          <span class="meta">@Override</span>  </div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">          &#125;  </div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<h3 id="加入-flash支持"><a href="#加入-flash支持" class="headerlink" title="加入 flash支持"></a>加入 flash支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String temp = <span class="string">"&lt;html&gt;&lt;body bgcolor=\""</span> + <span class="string">"black"</span>  </div><div class="line">                + <span class="string">"\"&gt; &lt;br/&gt;&lt;embed src=\""</span> + url + <span class="string">"\" width=\""</span> + <span class="string">"100%"</span>  </div><div class="line">                + <span class="string">"\" height=\""</span> + <span class="string">"90%"</span> + <span class="string">"\" scale=\""</span> + <span class="string">"noscale"</span>  </div><div class="line">                + <span class="string">"\" type=\""</span> + <span class="string">"application/x-shockwave-flash"</span>  </div><div class="line">                + <span class="string">"\"&gt; &lt;/embed&gt;&lt;/body&gt;&lt;/html&gt;"</span>;  </div><div class="line">String mimeType = <span class="string">"text/html"</span>;  </div><div class="line">String encoding = <span class="string">"utf-8"</span>;  </div><div class="line">web.loadDataWithBaseURL(<span class="string">"null"</span>, temp, mimeType, encoding, <span class="string">""</span>);</div></pre></td></tr></table></figure>
<h3 id="保留缩放功能但隐藏缩放控件"><a href="#保留缩放功能但隐藏缩放控件" class="headerlink" title="保留缩放功能但隐藏缩放控件"></a>保留缩放功能但隐藏缩放控件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//setDisplayZoomControls是在Android 3.0中新增的API.</span></div><div class="line">mWebView.getSettings().setSupportZoom(<span class="keyword">true</span>);  </div><div class="line">        mWebView.getSettings().setBuiltInZoomControls(<span class="keyword">true</span>);  </div><div class="line">        <span class="keyword">if</span> (DeviceUtils.hasHoneycomb())  </div><div class="line">              mWebView.getSettings().setDisplayZoomControls(<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<h3 id="onPageFinished"><a href="#onPageFinished" class="headerlink" title="onPageFinished()"></a>onPageFinished()</h3><p>WebView 在Android4.4的手机上onPageFinished()回调会多调用一次(具体原因待追查)<br>需要尽量避免在onPageFinished()中做业务操作，否则会导致重复调用，还有可能会引起逻辑上的错误。</p>
<h3 id="获取Web页中的title"><a href="#获取Web页中的title" class="headerlink" title="获取Web页中的title"></a>获取Web页中的title</h3><p>需要给WebView设置 WebChromeClient,并在onReceiveTitle()回调中获取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">WebChromeClient webChromeClient = <span class="keyword">new</span> WebChromeClient() &#123;    </div><div class="line">            <span class="meta">@Override</span>    </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span> </span>&#123;    </div><div class="line">                <span class="keyword">super</span>.onReceivedTitle(view, title);    </div><div class="line">                 </div><div class="line">                txtTitle.setText(title);    </div><div class="line">            &#125;    </div><div class="line">    </div><div class="line">        &#125;;</div></pre></td></tr></table></figure>
<p>但是发现在小米3的手机上，当通过webview.goBack()回退的时候，并没有触发onReceiveTitle()，这样会导致标题仍然是之前子页面的标题，没有切换回来.<br>这里可以分两种情况去处理：</p>
<ol>
<li>可以确定webview中子页面只有二级页面，没有更深的层次，这里只需要判断当前页面是否为初始的主页面，可以goBack的话，只要将标题设置回来即可.</li>
<li>webview中可能有多级页面或者以后可能增加多级页面,这种情况处理起来要复杂一些:因为正常顺序加载的情况onReceiveTitle是一定会触发的，所以就需要自己来维护webviewloading的一个url栈及url与title的映射关系那么就需要一个ArrayList来保持加载过的url,一个HashMap保存url及对应的title.正常顺序加载时，将url和对应的title保存起来，webview回退时，移除当前url并取出将要回退到的web 页的url,找到对应的title进行设置即可.</li>
</ol>
<p>这里还要说一点，当加载出错的时候，比如无网络，这时onReceiveTitle中获取的标题为 找不到该网页,因此建议当触发onReceiveError时，不要使用获取到的title.</p>
<h3 id="addJavaScriptInterface-引起的安全问题"><a href="#addJavaScriptInterface-引起的安全问题" class="headerlink" title="addJavaScriptInterface()引起的安全问题."></a>addJavaScriptInterface()引起的安全问题.</h3><p>这个问题主要是因为会有恶意的js代码注入,尤其是在已经获取root权限的手机上，一些恶意程序可能会利用该漏洞安装或者卸载应用.<br>关于详细的情况可以参考下面这篇文章：<br><a href="http://blog.csdn.net/leehong2005/article/details/11808557" target="_blank" rel="external">http://blog.csdn.net/leehong2005/article/details/11808557</a></p>
<p>还有一个开源项目可以参考: <a href="https://github.com/dalufine/safe-java-js-webview-bridge" target="_blank" rel="external">https://github.com/dalufine/safe-java-js-webview-bridge</a>, 该项目利用onJsPrompt() 替代了addJavaScriptInterface(),(解决方案类似上述参考的博客)同时增加了异步回调,<br>很好地解决了webview  js注入的安全问题.</p>
<h3 id="webView-destroy"><a href="#webView-destroy" class="headerlink" title="webView.destroy()"></a>webView.destroy()</h3><p>直接调用可能会引起如下错误:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span>-<span class="number">10</span> <span class="number">15</span>:<span class="number">01</span>:<span class="number">11.402</span>: E/ViewRootImpl(<span class="number">7502</span>): sendUserActionEvent() mView == <span class="keyword">null</span>  </div><div class="line"><span class="number">10</span>-<span class="number">10</span> <span class="number">15</span>:<span class="number">01</span>:<span class="number">26.818</span>: E/webview(<span class="number">7502</span>): java.lang.Throwable: Error: WebView.destroy() called <span class="keyword">while</span> still attached!  </div><div class="line"><span class="number">10</span>-<span class="number">10</span> <span class="number">15</span>:<span class="number">01</span>:<span class="number">26.818</span>: E/webview(<span class="number">7502</span>):    at android.webkit.WebViewClassic.destroy(WebViewClassic.java:<span class="number">4142</span>)  </div><div class="line"><span class="number">10</span>-<span class="number">10</span> <span class="number">15</span>:<span class="number">01</span>:<span class="number">26.818</span>: E/webview(<span class="number">7502</span>):    at android.webkit.WebView.destroy(WebView.java:<span class="number">707</span>)</div></pre></td></tr></table></figure>
<p>如上所示，webview调用destory时,webview仍绑定在Activity上.这是由于自定义webview构建时传入了该Activity的context对象,因此需要先从父容器中移除webview,然后再销毁webview:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rootLayout.removeView(webView);  </div><div class="line">webView.destroy();</div></pre></td></tr></table></figure>
<h3 id="长按自定义菜单"><a href="#长按自定义菜单" class="headerlink" title="长按自定义菜单"></a>长按自定义菜单</h3><p> 这个功能首先可以从两方面完成：</p>
<p><strong>1</strong> 在js中完成:</p>
<p>处理<code>android.selection.longTouch</code>这里推荐一个开源项目进行参考,：<br><a href="https://github.com/dalufine/BTAndroidWebViewSelection" target="_blank" rel="external">https://github.com/dalufine/BTAndroidWebViewSelection</a></p>
<p><strong>2</strong> 安卓层处理:</p>
<p>首先使用OnTouchListener实现长按实现监听,然后实现WebView的Context menu,最后调用webview中的emulateShiftHeld(),为了适配安卓不同版本,最好使用反射方式调用.</p>
<h3 id="调用js的方法"><a href="#调用js的方法" class="headerlink" title="调用js的方法"></a>调用js的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">evaluateJavascript</span><span class="params">(String js)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">        mWebview.evaluateJavascript(js, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mWebview.loadUrl(js);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在android4.4开始系统提供了evaluateJavascript方法来执行js方法，并且可以进行回调。但是在低于4.4的版本并没有这个方法，我们需要只要直接通过loadUrl的方式来执行js，此时需要在js代码前加<code>javascript:</code>。.</p>
<h3 id="响应Javascript中的alert"><a href="#响应Javascript中的alert" class="headerlink" title="响应Javascript中的alert"></a>响应Javascript中的alert</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">webView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message, <span class="keyword">final</span> JsResult result)</span> </span>&#123;</div><div class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>);</div><div class="line">        builder.setTitle(<span class="string">"测试alert"</span>);</div><div class="line">        builder.setMessage(message);</div><div class="line">        builder.setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                result.confirm();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        builder.show();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>通过以上代码就可以实现当JS中执行alert时，在Android上以原生的对话框显示出来，当然这里也可以直接Toast。</p>
<p>而这段代码中需要注意的地方有两点：</p>
<ol>
<li>返回值必须为true。<br>返回true，则说明已经处理了，不需要交由WebChromeClient来执行。而如果返回的是false，则Webview会继续执行后续的js代码，现象就是，弹出对话框之后，用户还没点确定，后续的js代码已经执行完了.</li>
</ol>
<p>最后必须调用result.confirm()。<br>原因在于，如果没有调用此函数，则后续的JS代码将无法继续执行下去。最常见的现象就是，alert对话框只出现一次，第二次再进行alert的时候没有任何反应。其实这里是因为没有调用confirm函数，就相当于在浏览器中alert之后，用户没有点确定。</p>
<p>result.confirm()应该放到onClick回调中。<br>正如前面说的，调用confirm函数，就相当于用户点击了确定按钮。因此，我们要把confirm函数的调用放到Android原生对话框的“确定”按钮的回调函数中进行调用。 之前没理解透，把confirm函数放在了builder.show之后进行调用，结果现象是alert之后，对话框弹出来了，但是后续的js代码没有阻塞，而是继续执行下去了，变得就像是异步了一样，和在chrome中调用js代码的执行逻辑不一致。<br>不过，如果需求就是要直接执行下去，那也可以，只要理解了就行。</p>
<h3 id="访问证书有问题的SSL网页"><a href="#访问证书有问题的SSL网页" class="headerlink" title="访问证书有问题的SSL网页"></a>访问证书有问题的SSL网页</h3><p>对于有证书问题的网页，比如过期、信息不正确、发行机关不被信任等，Webview默认情况下会拒绝访问。而PC端浏览器的处理则是提供用户进行选择是否要继续，在android也是可以实现的。<br>首先第一种是直接继续，不需要让用户进行选择</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedSslError</span><span class="params">(WebView view, SslErrorHandler handler, SslError error)</span> </span>&#123;</div><div class="line">    <span class="comment">// 默认为调用handler.cancel()方法，因此不要调用super的onReceivedSslError方法</span></div><div class="line">    <span class="comment">// super.onReceivedSslError(view, handler, error);</span></div><div class="line">    handler.proceed();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里要注意的是，千万不要调用super的onReceivedSslError方法，因为此方法中已经调用了handler.cancel()。<br>如果调用了，则会出现第一次无法加载，第二次却能正常访问的现象。</p>
<p>内核会记住本次选择，如果下次还有相同的错误，内核会直接执行之前选择的结果。</p>
<h3 id="慎重在shouldoverrideurlloading中返回true"><a href="#慎重在shouldoverrideurlloading中返回true" class="headerlink" title="慎重在shouldoverrideurlloading中返回true"></a>慎重在shouldoverrideurlloading中返回true</h3><p>当设置了WebviewClient时，在shouldoverrideurlloading中如果不需要对url进行拦截做处理，而是简单的继续加载此网址。<br>则建议采用返回false的方式而不是loadUrl的方式进行加载网址。</p>
<p><code>当请求的方式是&quot;POST&quot;方式时这个回调是不会通知的。</code></p>
<p>为什么这么建议呢？<br>因为如果采用loadUrl的方式进行加载，那么对于加载有跳转的网址时，进行webview.goBack就会特别麻烦。<br>例如加载链接如下：<br>A-&gt;(B-&gt;C-&gt;D)-&gt;E 括号内为跳转<br>如果采用return false的方式，那么在goBack的时候，可以从第二步直接回到A网页。从E回到A只需要执行两次goBack<br>而如果采用的是loadUrl，则没办法直接从第二步回到A网页。因为loadUrl把第二步的每个跳转都认为是一个新的网页加载，因此从E回到A需要执行四次goBack</p>
<p>只有当不需要加载网址而是拦截做其他处理，如拦截tel:xxx等特殊url做拨号处理的时候，才应该返回true。</p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/t12x3456/article/details/13769731/" target="_blank" rel="external">CSDN</a>&lt;–&gt;<a href="http://blog.csdn.net/typename/article/details/39495409" target="_blank" rel="external">CSDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Android 开发艺术探索》读书笔记--第三章View事件体系]]></title>
      <url>http://dalufan.com/2015/12/18/android-art-of-android-deveopment-note-3/</url>
      <content type="html"><![CDATA[<h3 id="0x00-View位置"><a href="#0x00-View位置" class="headerlink" title="0x00 View位置"></a>0x00 View位置</h3><p>1.top、left、right、bottom，分别对应View的左上角和右下角相对于父容器的横纵坐标值，即<code>相对位置坐标</code>。</p>
<p>详细的位置说明，参考<a href="../../../../../2015/05/05/android-motionevent/">链接</a></p>
<p>2.从Android 3.0开始，view增加了<code>x、y、translationX、translationY</code>四个参数，这几个参数也是相对于父容器的坐标。x和y是左上角的坐标，而translationX和translationY是view左上角相对于父容器的偏移量，默认值都是0。</p>
<blockquote>
<p>x = left + translationX<br>y = top + translationY</p>
</blockquote>
<p>3.在View的平移过程中，top和left表示原始左上角的位置信息，其值是固定的，而变化的是translationX，translationY，进而导致x，y的变化。</p>
<p>通过MotionEvent可以得到点击事件发生的x和y坐标，其中getX和getY是相对于当前view左上角的x和y坐标（<code>相对坐标</code>），getRawX和getRawY是相对于手机屏幕左上角的x和y坐标（<code>绝对坐标</code>）。</p>
<a id="more"></a> 
<p>4.<strong>TouchSlope</strong>是系统所能识别出的可以被认为是滑动的最小距离，获取方式是ViewConfiguration.get(getContext()).getScaledTouchSlope()。一般用于处理滑动时候作为临界值来使用。</p>
<p>5.<strong>VelocityTracker</strong>用于追踪手指在滑动过程中的速度，包括水平和垂直方向上的速度。<br>速度计算公式： </p>
<blockquote>
<p>速度 = （终点位置 - 起点位置） / 时间段</p>
</blockquote>
<p>速度可能为负值，例如当手指从屏幕右边往左边滑动的时候。此外，速度是单位时间内移动的像素数，单位时间不一定是1秒钟，可以使用方法computeCurrentVelocity(xxx)指定单位时间是多少，单位是ms。例如通过computeCurrentVelocity(1000)来获取速度，手指在1s中滑动了100个像素，那么速度是100，即100(像素/1000ms)。如果computeCurrentVelocity(100)来获取速度，在100ms内手指只是滑动了10个像素，那么速度是10，即10(像素/100ms)。</p>
<p>VelocityTracker的使用方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化</span></div><div class="line">VelocityTracker mVelocityTracker = VelocityTracker.obtain();</div><div class="line"><span class="comment">//在onTouchEvent方法中</span></div><div class="line">mVelocityTracker.addMovement(event);</div><div class="line"><span class="comment">//获取速度</span></div><div class="line">mVelocityTracker.computeCurrentVelocity(<span class="number">1000</span>);</div><div class="line"><span class="keyword">float</span> xVelocity = mVelocityTracker.getXVelocity();</div><div class="line"><span class="comment">//重置和回收</span></div><div class="line">mVelocityTracker.clear(); <span class="comment">//一般在MotionEvent.ACTION_UP的时候调用</span></div><div class="line">mVelocityTracker.recycle(); <span class="comment">//一般在onDetachedFromWindow中调用</span></div></pre></td></tr></table></figure>
<p>6.<strong>GestureDetector</strong>用于辅助检测用户的单击、滑动、长按、双击等行为。GestureDetector的使用比较简单，主要也是辅助检测常见的触屏事件。如果只是监听滑动相关的事件在onTouchEvent中实现；如果要监听双击这种行为的话，那么就使用GestureDetector。</p>
<p>GestureDetector的使用方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//this中实现了OnGestureListener </span></div><div class="line">GestureDetector mGestureDetector = <span class="keyword">new</span> GestureDetector(<span class="keyword">this</span>);</div><div class="line"><span class="comment">//解决长按屏幕后无法拖动的问题</span></div><div class="line">mGestureDetector。setIsLongpressEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    <span class="comment">/*  </span></div><div class="line">     * 在onTouch()方法中，我们调用GestureDetector的onTouchEvent()方法，将捕捉到的MotionEvent交给GestureDetector  </div><div class="line">     * 来分析是否有合适的callback函数来处理用户的手势  </div><div class="line">     */    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mGestureDetector.onTouchEvent(event);     </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>7.<strong>Scroller</strong>本身无法让View弹性滑动，需要结合View的computeScroll()方法。</p>
<p>Scroller的一般使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Scroller mScroller = <span class="keyword">new</span> Scroller(mContext);</div><div class="line"></div><div class="line"><span class="comment">//缓慢滑动到指定位置，自定义方法</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">smoothScrollTo</span><span class="params">(<span class="keyword">int</span> destX,<span class="keyword">int</span> destY)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> scrollX = getScrollX();</div><div class="line">    <span class="keyword">int</span> delta = destX -scrollX;</div><div class="line">    <span class="comment">//1000ms</span></div><div class="line">    mScroller.startScroll(scrollX,<span class="number">0</span>,delta,<span class="number">0</span>,<span class="number">1000</span>);</div><div class="line">    invalidate();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(mScroller.computeScrllOffset())&#123;</div><div class="line">        <span class="comment">//在mScroller.computeScrllOffset()方法中，对CurrX进行了新的赋值</span></div><div class="line">        scrollTo(mScroller.getCurrX(),mScroller.getCurrY());</div><div class="line">        postInvalidate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="0x01-View的滑动"><a href="#0x01-View的滑动" class="headerlink" title="0x01 View的滑动"></a>0x01 View的滑动</h3><p>1.常见的实现view的滑动的方式有三种：</p>
<ul>
<li>第一种是通过view本身提供的scrollTo和scrollBy方法：操作简单，适合对view内容的滑动；</li>
<li>第二种是通过动画给view施加平移效果来实现滑动：操作简单，适用于没有交互的view和实现复杂的动画效果；</li>
<li>第三种是通过改变view的LayoutParams使得view重新布局从而实现滑动：操作稍微复杂，适用于有交互的view。</li>
</ul>
<p>2.scrollTo和scrollBy方法只能改变view内容的位置而不能改变view在布局中的位置。 scrollBy实际上调用的也是scrollTo来实现的。scrollBy是相对当前位置的滑动，而scrollTo是基于所传参数的绝对滑动。通过View的getScrollX和getScrollY方法可以得到滑动的距离。</p>
<p>其中，mScrollX的值总是等于View左边缘（即left top 等四个点确定的范围）与View内容的左边缘的距离。相对于初始位置来说：如果View内容从左向右滑动，那么mScrollX为负值，反之为正值。</p>
<p>3.使用动画来移动view主要是操作view的translationX和translationY属性，既可以使用传统的view动画，也可以使用属性动画，使用后者需要考虑兼容性问题，如果要兼容Android 3.0以下版本系统的话推荐使用nineoldandroids。<br>使用动画还存在一个交互问题：在android3.0以前的系统上，无论view动画还是属性动画，新位置均无法触发点击事件，同时，老位置仍然可以触发单击事件。从3.0开始，属性动画的单击事件触发位置为移动后的位置，而view动画仍然在原位置。</p>
<p>4.动画兼容库nineoldandroids中的ViewHelper类提供了很多的get/set方法来为属性动画服务，例如setTranslationX和setTranslationY方法，这些方法是没有版本要求的。</p>
<p>5.通过改变LayoutParams来实现的示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MarginLayoutParams params = (MarginLayoutParams)mButton.getLayoutParams();</div><div class="line">params.width +=<span class="number">50</span>;</div><div class="line">params.leftMargin +=<span class="number">100</span>;</div><div class="line">mButton.requestLayout();</div><div class="line"><span class="comment">//或者</span></div><div class="line"><span class="comment">//mButton.setLayoutParams(params);</span></div></pre></td></tr></table></figure>
<h3 id="0x02-View的事件分发"><a href="#0x02-View的事件分发" class="headerlink" title="0x02 View的事件分发"></a>0x02 View的事件分发</h3><p>1.事件分发过程的三个重要方法</p>
<blockquote>
<p>public boolean dispatchTouchEvent(MotionEvent ev)</p>
</blockquote>
<p>用来进行事件的分发。如果事件能够传递给当前view，那么此方法一定会被调用，返回结果受当前view的onTouchEvent和下级view的dispatchTouchEvent方法的影响，表示是否消耗当前事件。</p>
<blockquote>
<p>public boolean onInterceptTouchEvent(MotionEvent event)</p>
</blockquote>
<p>在dispatchTouchEvent方法内部调用，用来判断是否拦截某个事件，如果当前view拦截了某个事件，那么在同一个事件序列当中，此方法不会再被调用，返回结果表示是否拦截当前事件。<br>若返回值为True事件会传递到自己的onTouchEvent()；<br>若返回值为False传递到子view的dispatchTouchEvent()。</p>
<p>其中一个事件序列指的是：从手指接触屏幕的那一刻起到手指离开屏幕的那一刻结束。</p>
<blockquote>
<p>public boolean onTouchEvent(MotionEvent event)</p>
</blockquote>
<p>在dispatchTouchEvent方法内部调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前view无法再次接收到事件。<br>若返回值为True，事件由自己处理，后续事件序列让其处理；<br>若返回值为False，自己不消耗事件，向上返回让其他的父容器的onTouchEvent接受处理。</p>
<p>三个方法的关系可以用下面的伪代码表示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> consume = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (onInterceptTouchEvent(ev)) &#123;</div><div class="line">        consume = onTouchEvent(ev);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        consume = child.dispatchTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> consume;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.一些结论</p>
<p>结论1的补充：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MyLin.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLin</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">            Log.e(getClass().getName(), <span class="string">"ACTION_DOWN"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">            Log.e(getClass().getName(), <span class="string">"ACTION_MOVE"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">            Log.e(getClass().getName(), <span class="string">"ACTION_UP"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">boolean</span> result = <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line">        Log.e(getClass().getName(), <span class="string">"---&gt;"</span> + result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MainActivity.java</span></div><div class="line">myLin.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                    Log.e(getClass().getName(), <span class="string">"ACTION_DOWN"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                    Log.e(getClass().getName(), <span class="string">"ACTION_MOVE"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                    Log.e(getClass().getName(), <span class="string">"ACTION_UP"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"><span class="comment">//此时并未给myLin.setOnClickListener</span></div><div class="line"></div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">20999</span>): ACTION_DOWN</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">20999</span>): ACTION_DOWN</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">20999</span>): ---&gt;<span class="keyword">false</span></div></pre></td></tr></table></figure>
<p>当修改MainActivity为下面时，其他不变</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">myLin.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                    Log.e(getClass().getName(), <span class="string">"ACTION_DOWN"</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                    Log.e(getClass().getName(), <span class="string">"ACTION_MOVE"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                    Log.e(getClass().getName(), <span class="string">"ACTION_UP"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="comment">//打印如下：</span></div><div class="line"></div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">20999</span>): ACTION_DOWN</div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">20999</span>): ACTION_MOVE</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">20999</span>): ACTION_MOVE</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">20999</span>): ---&gt;<span class="keyword">false</span></div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">20999</span>): ACTION_UP</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">20999</span>): ACTION_UP</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">20999</span>): ---&gt;<span class="keyword">false</span></div></pre></td></tr></table></figure>
<p>当修改MainActivity为下面时，并添加OnClickListener</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">myLin.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                    Log.e(getClass().getName(), <span class="string">"ACTION_DOWN"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                    Log.e(getClass().getName(), <span class="string">"ACTION_MOVE"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                    Log.e(getClass().getName(), <span class="string">"ACTION_UP"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        myLin.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Log.e(getClass().getName(), <span class="string">"OnClickListener"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="comment">//打印如下：</span></div><div class="line"></div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">21701</span>): ACTION_DOWN</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">21701</span>): ACTION_DOWN</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">21701</span>): ---&gt;<span class="keyword">true</span></div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">21701</span>): ACTION_MOVE</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">21701</span>): ACTION_MOVE</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">21701</span>): ---&gt;<span class="keyword">true</span></div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">21701</span>): ACTION_UP</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">21701</span>): ACTION_UP</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">21701</span>): ---&gt;<span class="keyword">true</span></div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">2</span>(<span class="number">21701</span>): OnClickListener</div></pre></td></tr></table></figure>
<p>此时如果注释掉MyLin中的super.onTouchEvent(event)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLin</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">            Log.e(getClass().getName(), <span class="string">"ACTION_DOWN"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">            Log.e(getClass().getName(), <span class="string">"ACTION_MOVE"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">            Log.e(getClass().getName(), <span class="string">"ACTION_UP"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//boolean result = super.onTouchEvent(event);</span></div><div class="line">        <span class="comment">//Log.e(getClass().getName(), "---&gt;" + result);</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//结果如下：</span></div><div class="line"></div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">21701</span>): ACTION_DOWN</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">21701</span>): ACTION_DOWN</div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">21701</span>): ACTION_MOVE</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">21701</span>): ACTION_MOVE</div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">21701</span>): ACTION_UP</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">21701</span>): ACTION_UP</div></pre></td></tr></table></figure>
<p>可见OnClickListener没有执行，说明在super.onTouchEvent(event)方法中有影响OnClickListener执行的条件。</p>
<p>如果MyLin中的修改如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> result = <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line">Log.e(getClass().getName(), <span class="string">"---&gt;"</span> + result);</div><div class="line"><span class="keyword">return</span> result;</div></pre></td></tr></table></figure>
<p>并且MainActivity作如下修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">myLin.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                    Log.e(getClass().getName(), <span class="string">"ACTION_DOWN"</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                    Log.e(getClass().getName(), <span class="string">"ACTION_MOVE"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                    Log.e(getClass().getName(), <span class="string">"ACTION_UP"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        myLin.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Log.e(getClass().getName(), <span class="string">"OnClickListener"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="comment">//结果如下：</span></div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">23358</span>): ACTION_DOWN</div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">23358</span>): ACTION_MOVE</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">23358</span>): ACTION_MOVE</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">23358</span>): ---&gt;<span class="keyword">true</span></div><div class="line">E/com.dalu.viewtouchdemo.MainActivity$<span class="number">1</span>(<span class="number">23358</span>): ACTION_UP</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">23358</span>): ACTION_UP</div><div class="line">E/com.dalu.viewtouchdemo.MyLin(<span class="number">23358</span>): ---&gt;<span class="keyword">true</span></div></pre></td></tr></table></figure>
<p>可见OnClickListener仍然没有执行，因为OnClick成立的条件是必须在一个事件序列中获取到成对的DOWN和UP事件，只有一个是不行的。</p>
<ol>
<li>OnTouchListener的优先级比onTouchEvent要高<br>如果给一个view设置了OnTouchListener，那么OnTouchListener中的onTouch方法会被回调。这时事件如何处理还要看onTouch的返回值，如果返回false，那么当前view的onTouchEvent方法会被调用；如果返回true，那么onTouchEvent方法将不会被调用。<br>在onTouchEvent可被执行的情况下（也即super.onTouchEvent(event)可被调用的情况下），如果当前view设置了OnClickListener，那么它的onClick方法会在onTouchEvent执行完成后被调用，所以OnClickListener的优先级最低。</li>
<li>当一个点击事件发生之后，传递过程遵循如下顺序：Activity -&gt; Window -&gt; View。<br>如果一个view的onTouchEvent方法返回false，那么它的父容器的onTouchEvent方法将会被调用，依此类推，如果所有的元素都不处理这个事件，那么这个事件将会最终传递给Activity处理(调用Activity的onTouchEvent方法)。</li>
<li>正常情况下一个事件序列只能被一个View拦截且消耗，因为一旦一个元素拦截了此事件，那么同一个事件序列中的所有事件都会交由它来处理；而如果它将本该自己处理的事件，通过onTouchEvent交给其他View来处理的话就可能表现的为多个View处理同一个事件序列。</li>
<li>如果一个View决定拦截事件，那么这一序列的事件都只能交由它来处理（如果事件序列能够传递给他的话），并且它的<code>onInterceptTouchEvent不再会被调用</code>，这里可能会和伪代码展示的不一致，因为其已经拦截了，后续就不需要判断了。</li>
<li>如果一个View不在onTouchEvent中处理ACTION_DOWN，即返回了false，那么序列中其它事件都不会交给该View处理，而会调用super.onTouchEvent()，交给父元素处理。就相当于，别人找你做一系列任务，你第一个没做好，别人短期内不会在找你做事情。</li>
<li>如果View除了ACTION_DOWN，其他事件都返回了false，那么这个点击事件会消失，此时并不会调用super.onTouchEvent()，即不会交给父元素处理，而且该View还是会持续收到该序列中的后续事件，最终这些事件会交给Activity的onTouchEvent来处理。</li>
<li>ViewGroup默认不拦截任何事件，其代码中onInterceptTouchEvent默认返回false。view没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。</li>
<li>View的onTouchEvent默认都会消耗事件(返回true)，除非它是不可点击的(clickable和longClickable都为false)。view的longClickable默认是false的，clickable则不一定，Button默认是true，而TextView默认是false。</li>
<li>View的enable属性不影响onTouchEvent的默认返回值。哪怕一个view是disable状态，只要它的clickable或者longClickable有一个是true，那么它的onTouchEvent就会返回true。</li>
<li>事件传递过程总是先传递给父元素，然后再由父元素分发给子view，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是<code>ACTION_DOWN</code>事件除外，即当面对ACTION_DOWN事件时，ViewGroup总是会调用自己的onInterceptTouchEvent方法来询问自己是否要拦截事件，因为此时ViewGroup会重置<code>FLAG_DISALLOW_INTERCEPT</code>这个标志位，所以子元素在<code>ACTION_DOWN</code>时干预父元素是无效的。而其他情况下，这个标志位可以通过子view调用requestDisallowInterceptTouchEvent方法来设置，一旦设置为true，那么ViewGroup不会拦截该事件。如果子元素想干预父元素获取到<code>ACTION_DOWN</code>事件，需要父元素在其onInterceptTouchEvent方法中，对<code>ACTION_DOWN</code>返回false。</li>
<li>在滑动事件冲突中，父元素的<code>ACTION_DOWN</code>需要返回为false，这样子元素才能收到事件，而<code>ACTION_MOVE</code>则需要子元素和父元素看需要处理了。父元素需要就拦截返回true，不需要就返回false。最后的<code>ACTION_UP</code>本身并没有太多意义，父元素必须返回false。如果返回true，子元素的onClick等需要<code>ACTION_UP</code>等来组成事件的方法就不会被调用了。而父元素相对特殊，因为一旦它拦截了事件，后续事件都会交给它，它可以在处理后在返回。</li>
<li>Window的实现类为PhoneWindow，获取Activity的contentView的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((ViewGroup)getWindow().getDecorView().findViewById(android.R.id.content)).getChildAt(<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h3 id="0x03-View冲突解决"><a href="#0x03-View冲突解决" class="headerlink" title="0x03 View冲突解决"></a>0x03 View冲突解决</h3><p>1.常见的滑动冲突的场景：</p>
<ol>
<li>外部滑动方向和内部滑动方向不一致，例如viewpager中包含listview；</li>
<li>外部滑动方向和内部滑动方向一致，例如viewpager的单页中存在可以滑动的bannerview；</li>
<li>上面两种情况的嵌套，例如viewpager的单个页面中包含了bannerview和listview。</li>
</ol>
<p>2.滑动冲突处理规则</p>
<p>可以根据滑动距离和水平方向形成的夹角；或者根绝水平和竖直方向滑动的距离差；或者两个方向上的速度差等</p>
<p>3.解决方式</p>
<p>1).<strong>外部拦截法</strong>：点击事件都先经过父容器的拦截处理，如果父容器需要此事件就拦截，如果不需要就不拦截。该方法需要重写父容器的onInterceptTouchEvent方法，在内部做相应的拦截即可，其他均不需要做修改。<br>伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> intercepted = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</div><div class="line">    <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class="line">        intercepted = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class="line">        <span class="keyword">int</span> deltaX = x - mLastXIntercept;</div><div class="line">        <span class="keyword">int</span> deltaY = y - mLastYIntercept;</div><div class="line">        <span class="keyword">if</span> (父容器需要拦截当前点击事件的条件，例如：Math.abs(deltaX) &gt; Math.abs(deltaY)) &#123;</div><div class="line">            intercepted = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            intercepted = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</div><div class="line">        intercepted = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLastXIntercept = x;</div><div class="line">    mLastYIntercept = y;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> intercepted;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2).<strong>内部拦截法</strong>：父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交给父容器来处理。这种方法和Android中的事件分发机制不一致，需要配合requestDisallowInterceptTouchEvent方法才能正常工作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//子元素中</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</div><div class="line">    <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class="line">        getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class="line">        <span class="keyword">int</span> deltaX = x - mLastX;</div><div class="line">        <span class="keyword">int</span> deltaY = y - mLastY;</div><div class="line">        <span class="keyword">if</span> (当前view需要拦截当前点击事件的条件，例如：Math.abs(deltaX) &gt; Math.abs(deltaY)) &#123;</div><div class="line">            getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLastX = x;</div><div class="line">    mLastY = y;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//父元素中</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptionTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> action = event.getAction();</div><div class="line">    <span class="keyword">if</span>(action == MotionEvent.ACTION_DOWN)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更详细的代码请参考<a href="https://github.com/singwhatiwanna/android-art-res/tree/master/Chapter_3/src/com/ryg/chapter_3" target="_blank" rel="external">链接</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java工程中调用Android库出现“Stub!”错误]]></title>
      <url>http://dalufan.com/2015/12/02/java-JSONObject-Stub/</url>
      <content type="html"><![CDATA[<p>在Java工程中尝试使用Android库中的org.json.JSONObject类，在执行时出现“Stub！”错误，</p>
<p>执行代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JSONObject jsonResponse = <span class="keyword">new</span> JSONObject(sb.toString());</div></pre></td></tr></table></figure>
<p>控制台显示错误：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Exception in thread <span class="string">"main"</span> java.lang.RuntimeException: Stub!</div><div class="line">                at org.json.JSONObject.&lt;init&gt;(JSONObject.java:<span class="number">8</span>)</div></pre></td></tr></table></figure>
<p>原因是：Android工程和Java工程还有一定的差异，不能混用他们的库，和函数入口方法。</p>
<p>将上面的代码，移植到在Android工程可以正确执行！</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中ScrollView不能被完全填充]]></title>
      <url>http://dalufan.com/2015/11/30/android-ScrollView-fill/</url>
      <content type="html"><![CDATA[<p>一个开源支持ListView、GridView、RecyclerView等滚动的方法<a href="https://github.com/EverythingMe/overscroll-decor" target="_blank" rel="external">链接</a></p>
<p>最近在开发项目中遇到一个问题，布局高度在某些国产酷派小屏幕手机上高度不够全部显示，于是使用了ScrollView嵌套LinearLayout，但问题又出现了，在大屏幕手机如三星note3手机上下面会留白，问题的解决办法是在第一层LinearLayout里面嵌套多个LinearLayout，最重要的是将ScrollView中设置<code>android:fillViewport=&quot;true&quot;</code>。</p>
<p>当ScrollView里的元素想填满ScrollView时，使用”fill_parent”是不管用的，必需为ScrollView设置：android:fillViewport=”true”。</p>
<p>当ScrollView没有android:fillViewport=”true”时, 里面的元素(比如LinearLayout)会按照wrap_content来计算(不论它是否设了”fill_parent”),而如果LinearLayout的元素设置了fill_parent,那么也是不管用的，因为LinearLayout依赖里面的元素，而里面的元素又依赖LinearLayout,这样自相矛盾。所以里面元素设置了fill_parent，也会当做wrap_content来计算。</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android TextView始终显示滚动条的方法]]></title>
      <url>http://dalufan.com/2015/11/30/android-TextView-show-scrollbar/</url>
      <content type="html"><![CDATA[<p>接到任务说，为了能让用户知道，Scrollview中的文字没有展示完，需要一直显示滚动条给予提示；</p>
<p>解决方法：</p>
<p>需要在外层的Srcollview中添加</p>
<p><code>android:fadeScrollbars=&quot;false&quot; android:scrollbarAlwaysDrawVerticalTrack=&quot;true&quot;</code></p>
<p>如果需要文字滚动到最底端，只需要再加上</p>
<p><code>tv_show.setGravity(Gravity.BOTTOM);</code></p>
<a id="more"></a> 
<p>完整demo</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;ScrollView  </div><div class="line">        android:id="@+id/sv_show"  </div><div class="line">        android:layout_width="fill_parent"  </div><div class="line">        android:layout_height="fill_parent"  </div><div class="line">        android:layout_above="@id/tl_botton"  </div><div class="line">        android:layout_alignParentTop="true"  </div><div class="line">        android:background="#E6E6FA"  </div><div class="line">        android:fadeScrollbars="false"  </div><div class="line">        android:scrollbarAlwaysDrawVerticalTrack="true"  </div><div class="line">        android:scrollbars="vertical" &gt;  </div><div class="line"> </div><div class="line">            &lt;TextView  </div><div class="line">                android:id="@+id/tv_show"  </div><div class="line">                android:layout_width="wrap_content"  </div><div class="line">                android:layout_height="wrap_content"  </div><div class="line">                android:background="#FFC0CB"  </div><div class="line">                android:padding="@dimen/padding_medium"  </div><div class="line">                android:scrollbars="vertical"  </div><div class="line">                android:text="@string/hello_world"   /&gt;  </div><div class="line">    &lt;/ScrollView&gt;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android性能优化--使用线程池处理异步任务]]></title>
      <url>http://dalufan.com/2015/11/30/android-optimization-thread-ThreadPoolExecutor/</url>
      <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>ThreadPoolExecutor线程池的详细说明参考<a href="../../../../../2014/09/26/java-ThreadPoolExecutor/">地址</a></p>
<p>说到线程，我想大家都不陌生，因为在开发时候或多或少都会用到线程，而通常创建线程有两种方式：</p>
<ol>
<li>继承Thread类 </li>
<li>实现Runnable接口</li>
</ol>
<p>虽说这两种方式都可以创建出一个线程，不过它们之间还是有一点区别的，主要区别在于在多线程访问同一资源的情况下，<code>用Runnable接口创建的线程可以处理同一资源</code>，而用Thread类创建的线程则各自独立处理，各自拥有自己的资源。</p>
<p>所以，在Java中大多数多线程程序都是通过实现Runnable来完成的，而对于Android来说也不例外，当涉及到需要开启线程去完成某件事时，我们都会这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//do sth .</span></div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>这段代码创建了一个线程并执行，它在任务结束后GC会自动回收该线程，一切看起来如此美妙，是的，它在线程并发不多的程序中确实不错，而假如这个程序有很多地方需要开启大量线程来处理任务，那么如果还是用上述的方式去创建线程处理的话，那么将导致系统的性能表现的非常糟糕，更别说在内存有限的移动设备上，主要的影响如下：</p>
<ol>
<li><p>线程的创建和销毁都需要时间，当有大量的线程创建和销毁时，那么这些时间的消耗则比较明显，将导致性能上的缺失</p>
</li>
<li><p>大量的线程创建、执行和销毁是非常耗cpu和内存的，这样将直接影响系统的吞吐量，导致性能急剧下降，如果内存资源占用的比较多，还很可能造成OOM</p>
</li>
<li><p>大量的线程的创建和销毁很容易导致GC频繁的执行，从而发生内存抖动现象，而发生了内存抖动，对于移动端来说，最大的影响就是造成界面卡顿</p>
</li>
</ol>
<p>而针对上述所描述的问题，解决的办法归根到底就是：重用已有的线程，从而减少线程的创建。<br>所以这就涉及到线程池（ExecutorService）的概念了，线程池的基本作用就是进行线程的复用，下面将具体介绍线程池的使用</p>
<h3 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h3><p>通过上述分析，我们知道了通过new Thread().start()方式创建线程去处理任务的弊端，而为了解决这些问题，Java为我们提供了ExecutorService线程池来优化和管理线程的使用</p>
<h4 id="使用线程池管理线程的优点"><a href="#使用线程池管理线程的优点" class="headerlink" title="使用线程池管理线程的优点"></a>使用线程池管理线程的优点</h4><ol>
<li><p>线程的创建和销毁由线程池维护，一个线程在完成任务后并不会立即销毁，而是由后续的任务复用这个线程，从而减少线程的创建和销毁，节约系统的开销</p>
</li>
<li><p>线程池旨在线程的复用，这就可以节约我们用以往的方式创建线程和销毁所消耗的时间，减少线程频繁调度的开销，从而节约系统资源，提高系统吞吐量</p>
</li>
<li><p>在执行大量异步任务时提高了性能</p>
</li>
<li><p>Java内置的一套ExecutorService线程池相关的api，可以更方便的控制线程的最大并发数、线程的定时任务、单线程的顺序执行等</p>
</li>
</ol>
<h4 id="ExecutorService简介"><a href="#ExecutorService简介" class="headerlink" title="ExecutorService简介"></a>ExecutorService简介</h4><p>通常来说我们说到线程池第一时间想到的就是它：ExecutorService，它是一个接口，其实如果要从真正意义上来说，它可以叫做线程池的服务，因为它提供了众多接口api来控制线程池中的线程，而真正意义上的线程池就是：ThreadPoolExecutor，它实现了ExecutorService接口，并封装了一系列的api使得它具有线程池的特性，其中包括工作队列、核心线程数、最大线程数等。</p>
<h4 id="线程池：ThreadPoolExecutor"><a href="#线程池：ThreadPoolExecutor" class="headerlink" title="线程池：ThreadPoolExecutor"></a>线程池：ThreadPoolExecutor</h4><p>主要提供了如下五种功能不一样的线程池：</p>
<h5 id="1、newFixedThreadPool-："><a href="#1、newFixedThreadPool-：" class="headerlink" title="1、newFixedThreadPool() ："></a>1、newFixedThreadPool() ：</h5><p>作用：该方法返回一个固定线程数量的线程池，该线程池中的线程数量始终不变，即不会再创建新的线程，也不会销毁已经创建好的线程，自始自终都是那几个固定的线程在工作，所以该线程池可以控制线程的最大并发数。<br>栗子：假如有一个新任务提交时，线程池中如果有空闲的线程则立即使用空闲线程来处理任务，如果没有，则会把这个新任务存在一个任务队列中，一旦有线程空闲了，则按FIFO方式处理任务队列中的任务。</p>
<h5 id="2、newCachedThreadPool-："><a href="#2、newCachedThreadPool-：" class="headerlink" title="2、newCachedThreadPool() ："></a>2、newCachedThreadPool() ：</h5><p>作用：该方法返回一个可以根据实际情况调整线程池中线程的数量的线程池。即该线程池中的线程数量不确定，是根据实际情况动态调整的。<br>栗子：假如该线程池中的所有线程都正在工作，而此时有新任务提交，那么将会创建新的线程去处理该任务，而此时假如之前有一些线程完成了任务，现在又有新任务提交，那么将不会创建新线程去处理，而是复用空闲的线程去处理新任务。那么此时有人有疑问了，那这样来说该线程池的线程岂不是会越集越多？其实并不会，因为线程池中的线程都有一个“保持活动时间”的参数，通过配置它，如果线程池中的空闲线程的空闲时间超过该“保存活动时间”则立刻停止该线程，而该线程池默认的“保持活动时间”为60s。</p>
<h5 id="3、newSingleThreadExecutor-："><a href="#3、newSingleThreadExecutor-：" class="headerlink" title="3、newSingleThreadExecutor() ："></a>3、newSingleThreadExecutor() ：</h5><p>作用：该方法返回一个只有一个线程的线程池，即每次只能执行一个线程任务，多余的任务会保存到一个任务队列中，等待这一个线程空闲，当这个线程空闲了再按FIFO方式顺序执行任务队列中的任务。</p>
<h5 id="4、newScheduledThreadPool-："><a href="#4、newScheduledThreadPool-：" class="headerlink" title="4、newScheduledThreadPool() ："></a>4、newScheduledThreadPool() ：</h5><p>作用：该方法返回一个可以控制线程池内线程定时或周期性执行某任务的线程池。</p>
<h5 id="5、newSingleThreadScheduledExecutor-："><a href="#5、newSingleThreadScheduledExecutor-：" class="headerlink" title="5、newSingleThreadScheduledExecutor() ："></a>5、newSingleThreadScheduledExecutor() ：</h5><p>作用：该方法返回一个可以控制线程池内线程定时或周期性执行某任务的线程池。只不过和上面的区别是该线程池大小为1，而上面的可以指定线程池的大小。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</div><div class="line">            (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</div><div class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</div><div class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</div><div class="line">                                      <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们可以清楚的看到这些方法的内部实现都是通过创建一个ThreadPoolExecutor对象来创建的，正所谓万变不离其宗，所以我们要了解线程池还是得了解ThreadPoolExecutor这个线程池类，其中由于和定时任务相关的线程池比较特殊（newScheduledThreadPool()、newSingleThreadScheduledExecutor()），它们创建的线程池内部实现是由ScheduledThreadPoolExecutor这个类实现的，而ScheduledThreadPoolExecutor是继承于ThreadPoolExecutor扩展而成的，所以本质还是一样的，只不过多封装了一些定时任务相关的api。</p>
<h4 id="扩展线程池ThreadPoolExecutor"><a href="#扩展线程池ThreadPoolExecutor" class="headerlink" title="扩展线程池ThreadPoolExecutor"></a>扩展线程池ThreadPoolExecutor</h4><p>除了内置的功能外，ThreadPoolExecutor也向外提供了三个接口供我们自己扩展满足我们需求的线程池，这三个接口分别是：</p>
<ul>
<li>beforeExecute() - 任务执行前执行的方法 </li>
<li>afterExecute() -任务执行结束后执行的方法 </li>
<li>terminated() -线程池关闭后执行的方法</li>
</ul>
<p>这三个方法在ThreadPoolExecutor内部都没有实现</p>
<p>前面两个方法我们可以在ThreadPoolExecutor内部的runWorker()方法中找到，而runWorker()是ThreadPoolExecutor的内部类Worker实现的方法，Worker它实现了Runnable接口，也正是线程池内处理任务的工作线程，而Worker.runWorker()方法则是处理我们所提交的任务的方法，它会同时被多个线程访问，所以我们看runWorker()方法的实现，由于涉及到多个线程的异步调用，必然是需要使用锁来处理，而这里使用的是Lock来实现的，我们来看看runWorker()方法内主要实现： </p>
<p><img src="/article_images/android_optimization_thread01.png" alt="alt"></p>
<p>可以看到在task.run()之前和之后分别调用了beforeExecute和afterExecute方法，并传入了我们的任务Runnable对象</p>
<p>而terminated()则是在关闭线程池的方法中调用，而关闭线程池有两个方法，我贴其中一个： </p>
<p><img src="/article_images/android_optimization_thread02.png" alt="alt"></p>
<p>所以，我们要扩展线程池，只需要重写这三个方法，并实现我们自己的功能即可，这三个方法分别都会在任务执行前调用、任务执行完成后调用、线程池关闭后调用。 </p>
<h4 id="优化线程池ThreadPoolExecutor"><a href="#优化线程池ThreadPoolExecutor" class="headerlink" title="优化线程池ThreadPoolExecutor"></a>优化线程池ThreadPoolExecutor</h4><p>虽说线程池极大改善了系统的性能，不过创建线程池也是需要资源的，所以线程池内线程数量的大小也会影响系统的性能，大了反而浪费资源，小了反而影响系统的吞吐量，所以我们创建线程池需要把握一个度才能合理的发挥它的优点，通常来说我们要考虑的因素有CPU的数量、内存的大小、并发请求的数量等因素，按需调整。</p>
<p>通常核心线程数可以设为CPU数量+1，而最大线程数可以设为CPU的数量*2+1。</p>
<p>获取CPU数量的方法为：</p>
<blockquote>
<p>Runtime.getRuntime().availableProcessors();</p>
</blockquote>
<h4 id="shutdown-和shutdownNow-的区别"><a href="#shutdown-和shutdownNow-的区别" class="headerlink" title="shutdown()和shutdownNow()的区别"></a>shutdown()和shutdownNow()的区别</h4><p>关于线程池的停止，ExecutorService为我们提供了两个方法：shutdown和shutdownNow，这两个方法各有不同，可以根据实际需求方便的运用，如下：</p>
<ol>
<li>shutdown()方法在终止前允许执行以前提交的任务。 </li>
<li>shutdownNow()方法则是阻止正在任务队列中等待任务的启动并试图停止当前正在执行的任务。</li>
</ol>
<h4 id="关于AsyncTask的实现"><a href="#关于AsyncTask的实现" class="headerlink" title="关于AsyncTask的实现"></a>关于AsyncTask的实现</h4><p>大家都知道AsyncTask内部实现其实就是Thread+Handler。其中Handler是为了处理线程之间的通信，而这个Thread到底是指什么呢？通过AsyncTask源码可以得知，其实这个Thread是线程池，AsyncTask内部实现了两个线程池，分别是：串行线程池和固定线程数量的线程池。而这个固定线程数量则是通过CPU的数量决定的。</p>
<p>在默认情况下，我们大都通过AsyncTask::execute()来执行任务的，<br>，而execute()内部则是调用executeOnExecutor(sDefaultExecutor, params)方法执行的，第一个参数就是指定处理该任务的线程池，而默认情况下AsyncTask是传入串行线程池（在这里不讲版本的变化），也就是任务只能单个的按顺序执行，而我们要是想让AsyncTask并行的处理任务，大家都知道调用AsyncTask::executeOnExecutor(sDefaultExecutor, params)方法传入这个参数即可：AsyncTask.THREAD_POOL_EXECUTOR。<br>而这个参数的意义在于为任务指定了一个固定线程数量的线程池去处理，从而达到了并行处理的功能，我们可以在源码中看到AsyncTask.THREAD_POOL_EXECUTOR这个参数就是一个固定线程数量的线程池：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR</div><div class="line">            = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,</div><div class="line">                    TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/u010687392/article/details/49850803" target="_blank" rel="external">Sunzxyong</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中EventBus的使用]]></title>
      <url>http://dalufan.com/2015/11/30/android-open-eventbus-usage/</url>
      <content type="html"><![CDATA[<h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><p>使用EventBus不仅使代码变得清晰，而且增强了类型安全（type-safe）。当用Intent传递数据时，在编译时并不能检查出所设的extra类型与收到时的类型一致。所以一个很常见的错误便是你或者你团队中的其他人改变了Intent所传递的数据，但忘记了对全部的接收器（receiver）进行更新。这种错误在编译时是无法被发现的，只有在运行时才会发现问题。</p>
<p>而使用EventBus所传递的消息则是通过你所定义的Event类。由于接收者方法是直接与这些类实例打交道，所以所有的数据均可以进行类型检查，这样任何由于类型不一致所导致的错误都可以在编译时刻被发现。</p>
<p>另外就是你的Event类可以定义成任何类型。我通常会为了表示事件而显式地创建明确命名的类，你也通过EventBus发送/接收任何类。通过这种方法，你就不必受限于那些只能添加到Intent extras中的简单数据类型了。例如，你可以发送一个和ORM(Object Relational Mapping，对象关系映射，简称ORM，或O/RM，或O/R mapping)模型类实例，并且在接收端直接处理与ORM操作相关的类实例。</p>
<p>本文主要讲述以下内容:</p>
<ol>
<li>EventBus的一般使用</li>
<li>EventBus替代Bundle</li>
<li>EventBus替代AsyncTask, Loader和Executor</li>
</ol>
<a id="more"></a> 
<h3 id="一般使用"><a href="#一般使用" class="headerlink" title="一般使用"></a>一般使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    Button btn;  </div><div class="line">    TextView tv;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">  </div><div class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);  </div><div class="line">  </div><div class="line">        btn = (Button) findViewById(R.id.btn_try);  </div><div class="line">        tv = (TextView)findViewById(R.id.tv);  </div><div class="line">  </div><div class="line">        btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">                <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(getApplicationContext(),  </div><div class="line">                        SecondActivity.class);  </div><div class="line">                startActivity(intent);  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(FirstEvent event)</span> </span>&#123;  </div><div class="line">  </div><div class="line">        String msg = <span class="string">"onEventMainThread收到了消息："</span> + event.getMsg();  </div><div class="line">        Log.d(<span class="string">"harvic"</span>, msg);  </div><div class="line">        tv.setText(msg);  </div><div class="line">        Toast.makeText(<span class="keyword">this</span>, msg, Toast.LENGTH_LONG).show();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> Button btn_FirstEvent;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_second);  </div><div class="line">        btn_FirstEvent = (Button) findViewById(R.id.btn_first_event);  </div><div class="line">  </div><div class="line">        btn_FirstEvent.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">                <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">                EventBus.getDefault().post(  </div><div class="line">                        <span class="keyword">new</span> FirstEvent(<span class="string">"FirstEvent btn clicked"</span>));  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>onEvent</li>
<li>onEventMainThread</li>
<li>onEventBackgroundThread</li>
<li>onEventAsync</li>
</ol>
<p>这四种订阅函数都是使用onEvent开头的，它们的功能稍有不同,在介绍不同之前先介绍两个概念：<br>告知观察者事件发生时通过EventBus.post函数实现，这个过程叫做事件的发布，观察者被告知事件发生叫做事件的接收，是通过下面的订阅函数实现的。</p>
<p><code>onEvent</code>:如果使用onEvent作为订阅函数，那么该事件在哪个线程发布出来的，onEvent就会在这个线程中运行，也就是说发布事件和接收事件线程在同一个线程。使用这个方法时，在onEvent方法中不能执行耗时操作，如果执行耗时操作容易导致事件分发延迟。</p>
<p><code>onEventMainThread</code>:如果使用onEventMainThread作为订阅函数，那么不论事件是在哪个线程中发布出来的，onEventMainThread都会在UI线程中执行，接收事件就会在UI线程中运行，这个在Android中是非常有用的，因为在Android中只能在UI线程中跟新UI，所以在onEvnetMainThread方法中是不能执行耗时操作的。</p>
<p><code>onEventBackground</code>:如果使用onEventBackgrond作为订阅函数，那么如果事件是在UI线程中发布出来的，那么onEventBackground就会在子线程中运行，如果事件本来就是子线程中发布出来的，那么onEventBackground函数直接在该子线程中执行。</p>
<p><code>onEventAsync</code>：使用这个函数作为订阅函数，那么无论事件在哪个线程发布，都会创建新的子线程在执行onEventAsync。</p>
<h3 id="sticky是什么？"><a href="#sticky是什么？" class="headerlink" title="sticky是什么？"></a>sticky是什么？</h3><p>sticky事件就是指在EventBus内部被缓存的那些事件。EventBus为每个类（class）类型保存了最近一次被发送的事件——sticky。后续被发送过来的相同类型的sticky事件会自动替换之前缓存的事件。当一个监听者向EventBus进行注册时，它可能会去请求这些缓存事件。这时，所有已缓存的事件就会立即自动发送给这个监听者，就象这些事件又重新刚被发送了一次一样。这就意味着，一个监听者可以收到在它注册之前就已经被发送到EventBus中的事件（甚至是在这个监听者的实例被创建出来前，这一点是不是很奇妙）。这一强大功能将有助于我们解决某些固有的问题，如Android上跨Activity和Fragment生命周期传递数据这种复杂问题，异步调用等等。</p>
<p>使用sticky事件需要从两个方面进行：</p>
<ol>
<li>发送者必须通过调用bus.postSticky(event)将事件进行缓存。</li>
<li>监听者须调用bus.registerSticky(this)以获取缓存的事件。</li>
</ol>
<p>当调用了bus.registerSticky(this)后，监听者会立即收到所有已在onEvent处理程序中定义过的那些已缓存的事件。另外，监听者也可以根据需要通过bus.getStickyEvent(SomeEvent.class)来获取这些缓存事件。</p>
<p>（注：调用postSticky，会像普通的post调用一样将事件发送给所有当前活动的监听者，而不是仅限于那些通过registerSticky注册的。registerSticky仅仅是使缓存事件在注册时被重发。）</p>
<p>sticky事件在缓存中存在的时间并不确定。所以如果你想在某一时刻消除缓存中的事件好让它们不再被发送，可以通过bus.removeStickyEvent(event)或bus.removeStickyEvent(SomeEvent.class)，以及bus.removeAllStickyEvents()来实现。</p>
<h3 id="Stinky-Bundles-Sticky-Events"><a href="#Stinky-Bundles-Sticky-Events" class="headerlink" title="Stinky Bundles Sticky Events"></a>Stinky Bundles Sticky Events</h3><p>程序运行状态除了保存到Bundle中，另一种方法是将它们保存到某些在配置改变时依然生存着的对象中去。GR的EventBus刚好内置了这种缓存机制可供我们使用。</p>
<p>考虑下面这个响应“Master/Detail流程”的标准场景：</p>
<ul>
<li>有一个List组件（通常为Fragment）显示一个摘要列表。</li>
<li>另外一个组件（另一个Fragment）显示每一项的详细内容。</li>
<li>点击某一列表项可显示对应的详细信息。</li>
<li>在竖屏模式中，列表和详细信息分为两页，各占一屏，每次只能看到一个页面。</li>
<li>在横屏模式中，列表在屏幕的左侧，详细信息在右侧，当左侧的列表项被选中时，右侧的详细信息也随之改变。</li>
<li>主Activity中包含一个布局（layout）用于在不同模式下进行切换。</li>
</ul>
<p>在这个例子中具有挑战性的是，当用户在横竖屏间来回切换时，程序要如何维护当前所选项的状态。这个状态的重要性不但在于详细页面需要知道该显示哪条详细信息，而且列表也需要显示出当前哪一项被选中了。此外，对于主页面来说也需要知道当前是否有项目被选中，以便决定在竖屏模式时需要加载哪个页面，列表或详细信息。</p>
<p>如你所见，这三个组件都需要同一个状态信息（被选中项）。使用传统方法，这三个组件每一个都需要在各自的onSaveInstanceState方法中将这一状态保存进Bundle中，然后再从各自的onResumeInstanceState方法里把数据取回来。不爽！</p>
<p>然而使用sticky事件，事情就变得简单多了。为了更好地说明问题，我创建了一个Android<a href="https://github.com/dalufine/EventBus-Config-Demo" target="_blank" rel="external">示例工程</a>, 下面所有的示例代码都包含在这个工程里。</p>
<p>首先，创建一个事件类（ItemSelectedEvent.java）用于传递被选中项的位置信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemSelectedEvent</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> position;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ItemSelectedEvent</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.position = position;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在List组件（ItemListFragment.java）的listItemClick方法里发送一个sticky事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(ListView listView, View itemView, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.onListItemClick(listView, itemView, position, id);</div><div class="line">bus.postSticky(<span class="keyword">new</span> ItemSelectedEvent(position));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，Detail组件（ItemDetailFragment.java）注册接收sticky事件，并定义一个ItemSelectedEvent的处理方法。当收到事件时，查询并显示被选中项的详细信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.onResume();</div><div class="line">bus.registerSticky(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">bus.unregister(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">super</span>.onPause();</div><div class="line">&#125;</div><div class="line"> </div><div class="line">...</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(ItemSelectedEvent event)</span> </span>&#123;</div><div class="line">Item item = MockDataSource.ITEMS.get(event.position);</div><div class="line">titleView.setText(item.title);</div><div class="line">dateView.setText(item.getDateStr());</div><div class="line">bodyView.setText(item.body);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，在Main组件（MainActivity.java）中将所有内容集合到一起。Activity自身注册监听sticky事件，并创建与Detail组件一样的ItemSelectedEvent处理方法。当收到事件时，根据当前页面布局（layout）决定将Detail fragment加载哪个合适的容器中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.onResume();</div><div class="line">bus.registerSticky(<span class="keyword">this</span>);</div><div class="line">bus.postSticky(<span class="keyword">new</span> LayoutEvent(isTwoPane()));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">bus.unregister(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">super</span>.onPause();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(ItemSelectedEvent event)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(isTwoPane())&#123;</div><div class="line">getFragmentManager().beginTransaction()</div><div class="line">.replace(detailContainer.getId(), <span class="keyword">new</span> ItemDetailFragment())</div><div class="line">.commit();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">getFragmentManager().beginTransaction()</div><div class="line">.replace(listContainer.getId(), <span class="keyword">new</span> ItemDetailFragment())</div><div class="line">.addToBackStack(ItemDetailFragment.class.getName())</div><div class="line">.commit();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，这个activity不仅监听sticky事件，还发送了另外一个sticky事件用来传递当前屏幕模式。这一事件随后会被List fragment（ItemListFragment.java）收到，并且根据条件对列表进行设置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(LayoutEvent event)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(event.isTwoPane)&#123;</div><div class="line">getListView().setChoiceMode(ListView.CHOICE_MODE_SINGLE);</div><div class="line">updateSelectedItem(activePosition);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">getListView().setChoiceMode(ListView.CHOICE_MODE_NONE);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外可以看到，没有一个组件要去实现onSaveInstanceState(Bundle bundle)以及onRestoreInstanceState(Bundle bundle)方法。取而代之的是它们只需简单地依赖于在registerSticky(this)时自动发送的缓存事件。所以，当用户选择一个项目并且在查看详细信息时，以下情况便会在配置改变时自动发生：</p>
<ol>
<li>在onPause时，每个组件都会将自身从EventBus注销掉。</li>
<li>Main activity重启并在它的onResume方法里注册监听sticky事件。</li>
<li>缓存的ItemSelectedEvent被发送到Main activity，然后Detail fragment被加载。</li>
<li>Detail fragment的onResume被调用并且接收到ItemSelectedEvent，从而使得被选中项目的详细信息被显示出来。</li>
<li>此外，List fragment的onResume被调用并且收到ItemSelectedEvent和LayoutEvent，然后根据当前布局正确地显示被选中项目。</li>
</ol>
<h3 id="AsyncTask-Loader和Executor"><a href="#AsyncTask-Loader和Executor" class="headerlink" title="AsyncTask, Loader和Executor"></a>AsyncTask, Loader和Executor</h3><p>Android中有很多种执行异步操作的方法（指平行于UI线程的）。AsyncTask对于用户来说是最简单的一种机制，并且只需要少量的设置代码即可。然而，它的使用是有局限的，正如Android官方文档中所描述的：</p>
<p>AsyncTask被设计成为一个工具类，在它内部包含了Thread和Handler，但它本身并不是通用线程框架的一部分。AsyncTask应该尽可能地被用在执行一些较短的操作中（最多几秒）。如果你需要在线程中执行较长时间的任务，那么建议你直接使用java.util.concurrent包中提供的各种API，如Executor、 ThreadPoolExecutor以及FutureTask。</p>
<p>不过即便是执行短时间的操作也会带来一些问题，特别是在与Activity/Fragment生命周期有关的地方。由于AsyncTask会持续地运行下去（即使启动它们的Activity/Fragment已经被销毁了）。这样，一旦你在onPostExecute方法中试图对UI进行更新，那么最终将导致抛出一个IllegalStateException异常。</p>
<p>Android 3.0中引入了Loader API用来解决Activity/Fragment生命周期的问题（它们的确很有效）。Loader API被设计成向Activity/Fragment中以异步方式加载数据。尽管加载数据是一种非常常见的异步操作，但并非唯一一种需要从UI线程中分开的操作。Loader还需要在Activity/Fragment中实现另外一个监听接口。尽管这么做没有错，但我个人并不喜欢这种模式（我的意思是最终你的代码中会包含许多的回调函数，导致代码的可读性变得很差）。最后，Activity和Fragment也并非唯一需要对异步操作分线程的地方。例如如果在Service里，你就不能访问LoaderManager，所以最终你还是得使用AsyncTask或者java.util.concurrent。</p>
<p>java.util.concurrent包很不错，我在Android和非Android项目中都可以使用。不过使用时需要对其进行多一点儿配置和管理，不象AsyncTask那么简单。你需要对ExecutorService进行初始化，管理和监视它的生命周期，并且可能需要跟一些Future对象打交道。</p>
<p>只要使用恰当，AsyncTask、 Loader和Executor都是非常有效的。但在复杂应用中，需要为每个任务选择合适的工具，最终你可能三种都会用到。这样你就得维护三种不同的处理并发的框架代码。</p>
<p>GR的EventBus中内置了一个非常棒的并发处理机制。在监听类中，你可以实现4种不同类型的处理方法。当一个匹配事件被发送过来时，EventBus会根据不同的并发模型将事件发送到相应的处理方法中：</p>
<ul>
<li>onEvent(T event)：运行在和被发送事件相同的线程中。</li>
<li>onEventMainThread(T event)：运行在主（UI）线程中，不管事件从哪个线程中被发送过来。</li>
<li>onEventBackgroundThread(T event)：如果发送事件的线程不是UI线程，则运行在该线程中。如果发送事件的是UI线程，则它运行在由EventBus维护的一个单独的线程中。多个事件会同步地被这个单独的后台线程所处理。</li>
<li>onEventAsync(T event)：运行在单独的线程中，即非UI线程，也非发送事件的线程。</li>
</ul>
<p>这些方法功能强大而且使用简单。例如有一个比较耗时的操作（可能是网络调用，大量数据处理等），这一操作需要由UI上的行为来触发，并且当操作执行完毕后还需对UI进行更新。在这个例子中，UI行为即按钮点击，按钮在activity中，耗时操作在service中。我们可以按下面的方式来实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">SomeActivity.java:</div><div class="line"> </div><div class="line">...</div><div class="line"><span class="meta">@Inject</span> EventBus bus;</div><div class="line">...</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">...</div><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">//需要先实例化SomeService，不然接收不到事件</span></div><div class="line">        <span class="comment">//startSomeService();</span></div><div class="line">        eventBus.post(<span class="keyword">new</span> DoOperationEvent());</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.onResume();</div><div class="line">bus.register(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">bus.unregister(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">super</span>.onPause();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(OperationCompleteEvent event)</span> </span>&#123;</div><div class="line">Toast.makeText(<span class="keyword">this</span>, <span class="string">"Operation complete!"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div><div class="line">...</div><div class="line"> </div><div class="line">SomeService.java:</div><div class="line"> </div><div class="line">...</div><div class="line"><span class="meta">@Inject</span> EventBus bus;</div><div class="line">...</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.onCreate();</div><div class="line">bus.register(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">bus.unregister(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">super</span>.onDestroy();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventAsync</span><span class="params">(DoOperationEvent event)</span></span>&#123;</div><div class="line"><span class="comment">// DO SOMETHING LONG-RUNNING HERE</span></div><div class="line"><span class="comment">// 在这里执行一些耗时操作</span></div><div class="line"><span class="comment">// 执行完之后post</span></div><div class="line">eventBus.post(<span class="keyword">new</span> OperationCompleteEvent());</div><div class="line">&#125;</div><div class="line"> </div><div class="line">...</div></pre></td></tr></table></figure>
<p>尽管这个例子比较简单，但它却非常简明扼要地说明了问题。这里即不需要实现监听接口，也不会出现类似生命周期之类的问题（由于activity只能在它存在的时候才能接收到OperationCompleteEvent事件）。除此之外，如果发生了配置改变（旋转屏幕）或其他什么原因导致activity在两次事件发生之间被销毁并重建（事件会被重新注册），最终仍可以接收到OperationCompleteEvent事件。</p>
<p>此外，我们也可以容易地想到一些其它用法。比如，如果需要将更新进度发出去，你只需另外实现一个封装了进度值的事件类，然后将其发送出去即可。或者，如果你想让其它一些事件（不管是相同还是不同类型）不被并行处理（同步执行），你可以选择使用onEventBackgroundThread。</p>
<h3 id="依赖Bus"><a href="#依赖Bus" class="headerlink" title="依赖Bus"></a>依赖Bus</h3><p>实例化EventBus最简单的方法就是通过EventBus.getDefault()。然而，在EventBusBuilder类（通过EventBus.builder()获得）中还包含了另外一些有用的配置方法。特别是在本文中提到过的使用你自己的ExecutorService。缺省情况下EventBus通过Executors.newCachedThreadPool()创建自己的ExecutorService，在大多数情况下都已满足你的需要。然而，有时你可能仍然想要显示地控制EventBus所使用的线程数量，这种情况下你就可以象下面这样初始化EventBus：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.builder().executorService(Executors.newFixedTheadPool(NUM_THREADS)).installDefaultEventBus();</div></pre></td></tr></table></figure>
<p>在EventBusBuilder中另外一些可供配置的是一些和异常处理的有关的控制，以及一个是否允许事件类被继承的控制开关。这些内容超出了本文所讨论的范围，但我还是建议你仔细去研究一番。GR可能并没有把这些内容都写在文档里，但如果你读一读EventBusBuilder和EventBus的源代码，相信你会很容易理解它们的。</p>
<hr>
<p>参考链接：<a href="http://android.jobbole.com/81098/" target="_blank" rel="external">1</a>&lt;–&gt;<a href="http://android.jobbole.com/82049/" target="_blank" rel="external">2</a>&lt;–&gt;<a href="http://android.jobbole.com/82050/" target="_blank" rel="external">3</a>&lt;–&gt;<a href="http://blog.csdn.net/harvic880925/article/details/40787203" target="_blank" rel="external">EventBus使用</a>&lt;–&gt;<a href="http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">源码解析</a>&lt;–&gt;<a href="http://blog.csdn.net/luohai859/article/details/23938291" target="_blank" rel="external">Android之Loader理解</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android判断用户的网络类型(2/3/4G、wifi)]]></title>
      <url>http://dalufan.com/2015/11/30/android-network-type/</url>
      <content type="html"><![CDATA[<p>很多时候需要先判断当前用户的网络，才会继续之后的一些处理逻辑。但网络类型获取这一块，我用我自己的的手机调试时遇到一些问题，这里记录一下。</p>
<p>网络类型对应的<a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.0_r1/android/telephony/TelephonyManager.java#TelephonyManager" target="_blank" rel="external">源码</a></p>
<a id="more"></a> 
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">GetNetworkType</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    String strNetworkType = <span class="string">""</span>;</div><div class="line">    </div><div class="line">    NetworkInfo networkInfo = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE).getActiveNetworkInfo();</div><div class="line">    <span class="keyword">if</span> (networkInfo != <span class="keyword">null</span> &amp;&amp; networkInfo.isConnected())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (networkInfo.getType() == ConnectivityManager.TYPE_WIFI)</div><div class="line">        &#123;</div><div class="line">            strNetworkType = <span class="string">"WIFI"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (networkInfo.getType() == ConnectivityManager.TYPE_MOBILE)</div><div class="line">        &#123;</div><div class="line">            String _strSubTypeName = networkInfo.getSubtypeName();</div><div class="line">            </div><div class="line">            Log.e(<span class="string">"cocos2d-x"</span>, <span class="string">"Network getSubtypeName : "</span> + _strSubTypeName);</div><div class="line">            </div><div class="line">            <span class="comment">// TD-SCDMA   networkType is 17</span></div><div class="line">            <span class="keyword">int</span> networkType = networkInfo.getSubtype();</div><div class="line">            <span class="keyword">switch</span> (networkType) &#123;</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_GPRS:</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_EDGE:</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_CDMA:</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_1xRTT:</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_IDEN: <span class="comment">//api&lt;8 : replace by 11</span></div><div class="line">                    strNetworkType = <span class="string">"2G"</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_UMTS:</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_EVDO_0:</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_EVDO_A:</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_HSDPA:</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_HSUPA:</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_HSPA:</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_EVDO_B: <span class="comment">//api&lt;9 : replace by 14</span></div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_EHRPD:  <span class="comment">//api&lt;11 : replace by 12</span></div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_HSPAP:  <span class="comment">//api&lt;13 : replace by 15</span></div><div class="line">                    strNetworkType = <span class="string">"3G"</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> TelephonyManager.NETWORK_TYPE_LTE:    <span class="comment">//api&lt;11 : replace by 13</span></div><div class="line">                    strNetworkType = <span class="string">"4G"</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="comment">// http://baike.baidu.com/item/TD-SCDMA 中国移动 联通 电信 三种3G制式</span></div><div class="line">                    <span class="keyword">if</span> (_strSubTypeName.equalsIgnoreCase(<span class="string">"TD-SCDMA"</span>) || _strSubTypeName.equalsIgnoreCase(<span class="string">"WCDMA"</span>) || _strSubTypeName.equalsIgnoreCase(<span class="string">"CDMA2000"</span>)) </div><div class="line">                    &#123;</div><div class="line">                        strNetworkType = <span class="string">"3G"</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        strNetworkType = _strSubTypeName;</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">             &#125;</div><div class="line">             </div><div class="line">            Log.e(<span class="string">"cocos2d-x"</span>, <span class="string">"Network getSubtype : "</span> + Integer.valueOf(networkType).toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Log.e(<span class="string">"cocos2d-x"</span>, <span class="string">"Network Type : "</span> + strNetworkType);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> strNetworkType;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>手机通过<code>telephony.getNetworkType()</code>获得的值，不见得API里面会有，比如有的手机会返回16、17等，而API只有下面的类型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">API里面的如下： </div><div class="line"><span class="comment">/** Network type is unknown */</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_UNKNOWN = <span class="number">0</span>; </div><div class="line"><span class="comment">/** Current network is GPRS */</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_GPRS = <span class="number">1</span>; </div><div class="line"><span class="comment">/** Current network is EDGE */</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_EDGE = <span class="number">2</span>; </div><div class="line"><span class="comment">/** Current network is UMTS */</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_UMTS = <span class="number">3</span>; </div><div class="line"><span class="comment">/** Current network is CDMA: Either IS95A or IS95B*/</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_CDMA = <span class="number">4</span>; </div><div class="line"><span class="comment">/** Current network is EVDO revision 0*/</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_EVDO_0 = <span class="number">5</span>; </div><div class="line"><span class="comment">/** Current network is EVDO revision A*/</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_EVDO_A = <span class="number">6</span>; </div><div class="line"><span class="comment">/** Current network is 1xRTT*/</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_1xRTT = <span class="number">7</span>; </div><div class="line"><span class="comment">/** Current network is HSDPA */</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_HSDPA = <span class="number">8</span>; </div><div class="line"><span class="comment">/** Current network is HSUPA */</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_HSUPA = <span class="number">9</span>; </div><div class="line"><span class="comment">/** Current network is HSPA */</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_HSPA = <span class="number">10</span>; </div><div class="line"><span class="comment">/** Current network is iDen */</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_IDEN = <span class="number">11</span>; </div><div class="line"><span class="comment">/** Current network is EVDO revision B*/</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_EVDO_B = <span class="number">12</span>; </div><div class="line"><span class="comment">/** Current network is LTE */</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_LTE = <span class="number">13</span>; </div><div class="line"><span class="comment">/** Current network is eHRPD */</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_EHRPD = <span class="number">14</span>; </div><div class="line"><span class="comment">/** Current network is HSPA+ */</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_TYPE_HSPAP = <span class="number">15</span>;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://www.cnblogs.com/meteoric_cry/p/4627075.html" target="_blank" rel="external">cnblogs</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中使用LinearGradient实现文字闪烁的效果]]></title>
      <url>http://dalufan.com/2015/11/26/android-View-LinearGradient/</url>
      <content type="html"><![CDATA[<h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>在看View自定义的时候，看到有个跑文字动态闪烁的效果，虽然过程很简单，但对里面用到的工具类LinearGradient一点都不了解，运行效果如下</p>
<p><img src="/article_images/android_view_LinearGradient01.gif" alt="alt"></p>
<p>详细的自定义view过程参考<a href="../../../../../2014/12/23/android-View-learn-two/">链接</a></p>
<a id="more"></a> 
<p>LinearGradient也称作线性渲染，LinearGradient的作用是实现某一区域内颜色的线性渐变效果</p>
<p>它有两个构造函数</p>
<blockquote>
<p>public LinearGradient(float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile)</p>
</blockquote>
<p>其中，参数x0表示渐变的起始点x坐标；参数y0表示渐变的起始点y坐标；参数x1表示渐变的终点x坐标；参数y1表示渐变的终点y坐标　；color0表示渐变开始颜色；color1表示渐变结束颜色；参数tile表示平铺方式。</p>
<p>Shader.TileMode有3种参数可供选择，分别为CLAMP、REPEAT和MIRROR：</p>
<p><code>CLAMP</code>的作用是如果渲染器超出原始边界范围，则会复制边缘颜色对超出范围的区域进行着色</p>
<p><code>REPEAT</code>的作用是在横向和纵向上以平铺的形式重复渲染位图</p>
<p><code>MIRROR</code>的作用是在横向和纵向上以镜像的方式重复渲染位图</p>
<blockquote>
<p>public LinearGradient (float x0, float y0, float x1, float y1, int[] colors, float[] positions, Shader.TileMode tile);</p>
</blockquote>
<p>其中，参数x0表示渐变的起始点x坐标；参数y0表示渐变的起始点y坐标；参数x1表示渐变的终点x坐标；参数y1表示渐变的终点y坐标；参数colors表示渐变的颜色数组；参数positions用来指定颜色数组的相对位置；参数tile表示平铺方式。通常，参数positions设为null，表示颜色数组以斜坡线的形式均匀分布。</p>
<h3 id="0x01-示例代码"><a href="#0x01-示例代码" class="headerlink" title="0x01 示例代码"></a>0x01 示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.LinearGradient;</div><div class="line"><span class="keyword">import</span> android.graphics.Matrix;</div><div class="line"><span class="keyword">import</span> android.graphics.Paint;</div><div class="line"><span class="keyword">import</span> android.graphics.Shader;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTextView</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinearGradient mLinearGradient;</div><div class="line">    <span class="keyword">private</span> Matrix mGradientMatrix;</div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mViewWidth = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTranslate = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mAnimating = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">//自定义的View 必须要重写两个或者三个参数的构造方法，才能在Eclipse视图浏览中查看效果。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class="line">        <span class="keyword">if</span> (mViewWidth == <span class="number">0</span>) &#123;</div><div class="line">            mViewWidth = getMeasuredWidth();</div><div class="line">            <span class="keyword">if</span> (mViewWidth &gt; <span class="number">0</span>) &#123;</div><div class="line">                mPaint = getPaint();</div><div class="line">                mLinearGradient = <span class="keyword">new</span> LinearGradient(-mViewWidth, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">                        <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0x33ffffff</span>, <span class="number">0xffffffff</span>, <span class="number">0x33ffffff</span> &#125;,</div><div class="line">                        <span class="keyword">new</span> <span class="keyword">float</span>[] &#123; <span class="number">0</span>, <span class="number">0.5f</span>, <span class="number">1</span> &#125;, Shader.TileMode.CLAMP);</div><div class="line">                mPaint.setShader(mLinearGradient);</div><div class="line">                mGradientMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        <span class="keyword">if</span> (mAnimating &amp;&amp; mGradientMatrix != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//每一次运动的递增值</span></div><div class="line">            mTranslate += mViewWidth / <span class="number">10</span>;</div><div class="line">            <span class="keyword">if</span> (mTranslate &gt; <span class="number">2</span> * mViewWidth) &#123;</div><div class="line">                mTranslate = -mViewWidth;</div><div class="line">            &#125;</div><div class="line">            mGradientMatrix.setTranslate(mTranslate, <span class="number">0</span>);</div><div class="line">            mLinearGradient.setLocalMatrix(mGradientMatrix);</div><div class="line">            postInvalidateDelayed(<span class="number">50</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>onSizeChanged()</code>这里主要是做初始化操作，为什么要在这里初始化，因为getMeasuredWidth()只有在onMeasure()执行后才能获取到，执行过程看下图<br>这段代码可以这么理解，它定义了一组渐变的数值是{ 0x33ffffff, 0xffffffff, 0x33ffffff }，这组数值分别在相对应的0，0.5，1中显示，0位置对应0x33ffffff颜色，0.5位置对应0xffffffff，１位置对应0x33ffffff，这个渐变的初始位置是在手机屏幕的外面x=(-mViewWidth，0)就是屏幕外面</p>
<p><img src="/article_images/android_view_LinearGradient02.png" alt="alt"></p>
<p>运动过程如下图：</p>
<p>我就把LinearGradient这个比作一个长方形，如上图是初始化的位置在手机屏幕的最左边，要运动到屏幕的最右边就需要２*width的长度。</p>
<p><img src="/article_images/android_view_LinearGradient03.png" alt="alt"></p>
<hr>
<p>参考链接：<br><a href="cn.net/sj/android/71833.htm">渐变效果实例</a>&lt;–&gt;<a href="http://blog.csdn.net/q445697127/article/details/7865504" target="_blank" rel="external">LinearGradient线性渲染</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Activity启动过程全解析]]></title>
      <url>http://dalufan.com/2015/11/24/android-Activity-launch-learn/</url>
      <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><ul>
<li>一个App是怎么启动起来的？</li>
<li>App的程序入口到底是哪里？</li>
<li>Launcher到底是什么神奇的东西？</li>
<li>听说还有个AMS的东西，它是做什么的？</li>
<li>Binder是什么？他是如何进行IPC通信的？</li>
<li>Activity生命周期到底是什么时候调用的？被谁调用的？</li>
<li>等等…</li>
</ul>
<p>你是不是还有很多类似的疑问一直没有解决？没关系，这篇文章将结合源码以及大量的优秀文章，站在巨人的肩膀上，更加通俗的来试着解释一些问题。但是毕竟源码繁多、经验有限，文中不免会出现一些纰漏甚至是错误，还恳请大家指出，互相学习。</p>
<a id="more"></a> 
<h3 id="0x01-学习目标"><a href="#0x01-学习目标" class="headerlink" title="0x01 学习目标"></a>0x01 学习目标</h3><ol>
<li>了解从手机开机第一个zygote进程创建，到点击桌面上的图标，进入一个App的完整流程，并且从源码的角度了解到一个Activity的生命周期是怎么回事</li>
<li>了解到ActivityManagerServices(即AMS)、ActivityStack、ActivityThread、Instrumentation等Android framework中非常重要的基础类的作用，及相互间的关系</li>
<li>了解AMS与ActivityThread之间利用Binder进行IPC通信的过程，了解AMS和ActivityThread在控制Activity生命周期起到的作用和相互之间的配合</li>
<li>了解与Activity相关的framework层的其他琐碎问题</li>
</ol>
<h3 id="0x02-主要对象功能介绍"><a href="#0x02-主要对象功能介绍" class="headerlink" title="0x02 主要对象功能介绍"></a>0x02 主要对象功能介绍</h3><p>我们下面的文章将围绕着这几个类进行介绍。可能你第一次看的时候，印象不深，不过没关系，当你跟随者我读完这篇文章的时候，我会在最后再次列出这些对象的功能，相信那时候你会对这些类更加的熟悉和深刻。</p>
<ul>
<li><code>ActivityManagerServices</code>，简称AMS，服务端对象，负责系统中所有Activity的生命周期</li>
<li><code>ActivityThread</code>，App的真正入口。当开启App之后，会调用main()开始运行，开启消息循环队列，这就是传说中的UI线程或者叫主线程。与ActivityManagerServices配合，一起完成Activity的管理工作</li>
<li><code>ApplicationThread</code>，用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。</li>
<li><code>ApplicationThreadProxy</code>，是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。</li>
<li><code>Instrumentation</code>，每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作。</li>
<li><code>ActivityStack</code>，Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。</li>
<li><code>ActivityRecord</code>，ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息。其实就是服务器端的Activity对象的映像。</li>
<li><code>TaskRecord</code>，AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。</li>
</ul>
<h3 id="0x03-主要流程介绍"><a href="#0x03-主要流程介绍" class="headerlink" title="0x03 主要流程介绍"></a>0x03 主要流程介绍</h3><p>下面将按照App启动过程的先后顺序，一问一答，来解释一些事情。</p>
<p>让我们开始吧！</p>
<h4 id="zygote是什么有什么作用"><a href="#zygote是什么有什么作用" class="headerlink" title="zygote是什么有什么作用"></a>zygote是什么有什么作用</h4><p>首先，你觉得这个单词眼熟不？当你的程序Crash的时候，打印的红色log下面通常带有这一个单词。</p>
<p>zygote意为“受精卵“。Android是基于Linux系统的，而在Linux中，所有的进程都是由init进程直接或者是间接fork出来的，zygote进程也不例外。</p>
<p>在Android系统里面，zygote是一个进程的名字。Android是基于Linux System的，当你的手机开机的时候，Linux的内核加载完成之后就会启动一个叫“init“的进程。在Linux System里面，所有的进程都是由init进程fork出来的，我们的zygote进程也不例外。</p>
<p>我们都知道，每一个App其实都是</p>
<ul>
<li>一个单独的dalvik虚拟机</li>
<li>一个单独的进程</li>
</ul>
<p>所以当系统里面的第一个zygote进程运行之后，在这之后再开启App，就相当于开启一个新的进程。而为了实现资源共用和更快的启动速度，Android系统开启新进程的方式，是<code>通过fork第一个zygote进程实现的</code>。所以说，除了第一个zygote进程，其他应用所在的进程都是zygote的子进程，这下你明白为什么这个进程叫“受精卵”了吧？因为就像是一个受精卵一样，它能快速的分裂，并且产生遗传物质一样的细胞！</p>
<h4 id="SystemServer是什么有什么作用它与zygote的关系是什么"><a href="#SystemServer是什么有什么作用它与zygote的关系是什么" class="headerlink" title="SystemServer是什么有什么作用它与zygote的关系是什么"></a>SystemServer是什么有什么作用它与zygote的关系是什么</h4><p>首先我要告诉你的是，SystemServer也是一个进程，而且是由zygote进程fork出来的。</p>
<p>知道了SystemServer的本质，我们对它就不算太陌生了，这个进程是Android Framework里面两大非常重要的进程之一,另外一个进程就是上面的zygote进程。</p>
<p>为什么说SystemServer非常重要呢？因为系统里面重要的服务都是在这个进程里面开启的，比如<br>ActivityManagerService、PackageManagerService、WindowManagerService等等，看着是不是都挺眼熟的？</p>
<p>那么这些系统服务是怎么开启起来的呢？</p>
<p>在zygote开启的时候，会调用ZygoteInit.main()进行初始化</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">     ...ignore some code...</div><div class="line"></div><div class="line">    <span class="comment">//在加载首个zygote的时候，会传入初始化参数，使得startSystemServer = true</span></div><div class="line">     <span class="keyword">boolean</span> startSystemServer = <span class="keyword">false</span>;</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; argv.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="string">"start-system-server"</span>.equals(argv[i])) &#123;</div><div class="line">                    startSystemServer = <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i].startsWith(ABI_LIST_ARG)) &#123;</div><div class="line">                    abiList = argv[i].substring(ABI_LIST_ARG.length());</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i].startsWith(SOCKET_NAME_ARG)) &#123;</div><div class="line">                    socketName = argv[i].substring(SOCKET_NAME_ARG.length());</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unknown command line argument: "</span> + argv[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            ...ignore some code...</div><div class="line"></div><div class="line">         <span class="comment">//开始fork我们的SystemServer进程</span></div><div class="line">     <span class="keyword">if</span> (startSystemServer) &#123;</div><div class="line">                startSystemServer(abiList, socketName);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">     ...ignore some code...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们看下startSystemServer()做了些什么</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**留着这个注释，就是为了说明SystemServer确实是被fork出来的</span></div><div class="line"> * Prepare the arguments and fork for the system server process.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">startSystemServer</span><span class="params">(String abiList, String socketName)</span></span></div><div class="line">        <span class="keyword">throws</span> MethodAndArgsCaller, RuntimeException &#123;</div><div class="line"></div><div class="line">     ...ignore some code...</div><div class="line"></div><div class="line">    <span class="comment">//留着这段注释，就是为了说明上面ZygoteInit.main(String argv[])里面的argv就是通过这种方式传递进来的</span></div><div class="line">    <span class="comment">/* Hardcoded command line to start the system server */</span></div><div class="line">    String args[] = &#123;</div><div class="line">        <span class="string">"--setuid=1000"</span>,</div><div class="line">        <span class="string">"--setgid=1000"</span>,</div><div class="line">        <span class="string">"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1032,3001,3002,3003,3006,3007"</span>,</div><div class="line">        <span class="string">"--capabilities="</span> + capabilities + <span class="string">","</span> + capabilities,</div><div class="line">        <span class="string">"--runtime-init"</span>,</div><div class="line">        <span class="string">"--nice-name=system_server"</span>,</div><div class="line">        <span class="string">"com.android.server.SystemServer"</span>,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> pid;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        parsedArgs = <span class="keyword">new</span> ZygoteConnection.Arguments(args);</div><div class="line">        ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);</div><div class="line">        ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);</div><div class="line"></div><div class="line">    <span class="comment">//确实是fuck出来的吧，我没骗你吧~不对，是fork出来的 -_-|||</span></div><div class="line">        <span class="comment">/* Request to fork the system server process */</span></div><div class="line">        pid = Zygote.forkSystemServer(</div><div class="line">                parsedArgs.uid, parsedArgs.gid,</div><div class="line">                parsedArgs.gids,</div><div class="line">                parsedArgs.debugFlags,</div><div class="line">                <span class="keyword">null</span>,</div><div class="line">                parsedArgs.permittedCapabilities,</div><div class="line">                parsedArgs.effectiveCapabilities);</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* For child process */</span></div><div class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123;</div><div class="line">            waitForSecondaryZygote(socketName);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        handleSystemServerProcess(parsedArgs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityManagerService是什么什么时候初始化的有什么作用"><a href="#ActivityManagerService是什么什么时候初始化的有什么作用" class="headerlink" title="ActivityManagerService是什么什么时候初始化的有什么作用"></a>ActivityManagerService是什么什么时候初始化的有什么作用</h4><p>ActivityManagerService，简称AMS，服务端对象，负责系统中所有Activity的生命周期。</p>
<p>ActivityManagerService进行初始化的时机很明确，就是在SystemServer进程开启的时候，就会初始化ActivityManagerService。从下面的代码中可以看到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemServer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//zygote的主入口</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> SystemServer().run();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SystemServer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Check for factory test mode.</span></div><div class="line">        mFactoryTestMode = FactoryTest.getMode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        ...ignore some code...</div><div class="line"></div><div class="line">        <span class="comment">//加载本地系统服务库，并进行初始化 </span></div><div class="line">        System.loadLibrary(<span class="string">"android_servers"</span>);</div><div class="line">        nativeInit();</div><div class="line"></div><div class="line">        <span class="comment">// 创建系统上下文</span></div><div class="line">        createSystemContext();</div><div class="line"></div><div class="line">        <span class="comment">//初始化SystemServiceManager对象，下面的系统服务开启都需要调用SystemServiceManager.startService(Class&lt;T&gt;)，这个方法通过反射来启动对应的服务</span></div><div class="line">        mSystemServiceManager = <span class="keyword">new</span> SystemServiceManager(mSystemContext);</div><div class="line"></div><div class="line">        <span class="comment">//开启服务</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            startBootstrapServices();</div><div class="line">            startCoreServices();</div><div class="line">            startOtherServices();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">            Slog.e(<span class="string">"System"</span>, <span class="string">"******************************************"</span>);</div><div class="line">            Slog.e(<span class="string">"System"</span>, <span class="string">"************ Failure starting system services"</span>, ex);</div><div class="line">            <span class="keyword">throw</span> ex;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ...ignore some code...</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//初始化系统上下文对象mSystemContext，并设置默认的主题,mSystemContext实际上是一个ContextImpl对象。调用ActivityThread.systemMain()的时候，会调用ActivityThread.attach(true)，而在attach()里面，则创建了Application对象，并调用了Application.onCreate()。</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createSystemContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        ActivityThread activityThread = ActivityThread.systemMain();</div><div class="line">        mSystemContext = activityThread.getSystemContext();</div><div class="line">        mSystemContext.setTheme(android.R.style.Theme_DeviceDefault_Light_DarkActionBar);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//在这里开启了几个核心的服务，因为这些服务之间相互依赖，所以都放在了这个方法里面。</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBootstrapServices</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        ...ignore some code...</div><div class="line"></div><div class="line">        <span class="comment">//初始化ActivityManagerService</span></div><div class="line">        mActivityManagerService = mSystemServiceManager.startService(</div><div class="line">                ActivityManagerService.Lifecycle.class).getService();</div><div class="line">        mActivityManagerService.setSystemServiceManager(mSystemServiceManager);</div><div class="line"></div><div class="line">        <span class="comment">//初始化PowerManagerService，因为其他服务需要依赖这个Service，因此需要尽快的初始化</span></div><div class="line">        mPowerManagerService = mSystemServiceManager.startService(PowerManagerService.class);</div><div class="line"></div><div class="line">        <span class="comment">// 现在电源管理已经开启，ActivityManagerService负责电源管理功能</span></div><div class="line">        mActivityManagerService.initPowerManagement();</div><div class="line"></div><div class="line">        <span class="comment">// 初始化DisplayManagerService</span></div><div class="line">        mDisplayManagerService = mSystemServiceManager.startService(DisplayManagerService.class);</div><div class="line"></div><div class="line">    <span class="comment">//初始化PackageManagerService</span></div><div class="line">    mPackageManagerService = PackageManagerService.main(mSystemContext, mInstaller,</div><div class="line">       mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</div><div class="line"></div><div class="line">    ...ignore some code...</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过上面这些步骤，我们的ActivityManagerService对象已经创建好了，并且完成了成员变量初始化。而且在这之前，调用createSystemContext()创建系统上下文的时候，也已经完成了mSystemContext和ActivityThread的创建。注意，这是系统进程开启时的流程，在这之后，会开启系统的Launcher程序，完成系统界面的加载与显示。</p>
<p>你是否会好奇，我为什么说AMS是服务端对象？下面我给你介绍下Android系统里面的服务器和客户端的概念。</p>
<p>其实服务器客户端的概念不仅仅存在于Web开发中，在Android的框架设计中，使用的也是这一种模式。服务器端指的就是所有App共用的系统服务，比如我们这里提到的ActivityManagerService，和前面提到的PackageManagerService、WindowManagerService等等，这些基础的系统服务是被所有的App公用的，当某个App想实现某个操作的时候，要告诉这些系统服务，比如你想打开一个App，那么我们知道了包名和MainActivity类名之后就可以打开</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);  </div><div class="line">intent.addCategory(Intent.CATEGORY_LAUNCHER);              </div><div class="line">ComponentName cn = <span class="keyword">new</span> ComponentName(packageName, className);              </div><div class="line">intent.setComponent(cn);  </div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<p>但是，我们的App通过调用startActivity()并不能直接打开另外一个App，这个方法会通过一系列的调用，最后还是告诉AMS说：“我要打开这个App，我知道他的住址和名字，你帮我打开吧！”所以是AMS来通知zygote进程来fork一个新进程，来开启我们的目标App的。这就像是浏览器想要打开一个超链接一样，浏览器把网页地址发送给服务器，然后还是服务器把需要的资源文件发送给客户端的。</p>
<p>知道了Android Framework的客户端服务器架构之后，我们还需要了解一件事情，那就是我们的App和AMS(SystemServer进程)还有zygote进程分属于三个独立的进程，他们之间如何通信呢？</p>
<p>App与AMS通过Binder进行IPC通信，AMS(SystemServer进程)与zygote通过Socket进行IPC通信。</p>
<p>那么AMS有什么用呢？在前面我们知道了，如果想打开一个App的话，需要AMS去通知zygote进程，除此之外，其实所有的Activity的开启、暂停、关闭都需要AMS来控制，所以我们说，AMS负责系统中所有Activity的生命周期。</p>
<p>在Android系统中，任何一个Activity的启动都是由AMS和应用程序进程（主要是ActivityThread）相互配合来完成的。AMS服务统一调度系统中所有进程的Activity启动，而每个Activity的启动过程则由其所属的进程具体来完成。</p>
<p>这样说你可能还是觉得比较抽象，没关系，下面有一部分是专门来介绍AMS与ActivityThread如何一起合作控制Activity的生命周期的。</p>
<h4 id="Launcher是什么什么时候启动的"><a href="#Launcher是什么什么时候启动的" class="headerlink" title="Launcher是什么什么时候启动的"></a>Launcher是什么什么时候启动的</h4><p>当我们点击手机桌面上的图标的时候，App就由Launcher开始启动了。但是，你有没有思考过Launcher到底是一个什么东西？</p>
<p>Launcher本质上也是一个应用程序，和我们的App一样，也是继承自Activity</p>
<p>packages/apps/Launcher2/src/com/android/launcher2/Launcher.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Launcher</span> <span class="keyword">extends</span> <span class="title">Activity</span></span></div><div class="line">        <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span>, <span class="title">OnLongClickListener</span>, <span class="title">LauncherModel</span>.<span class="title">Callbacks</span>,</div><div class="line">                   <span class="title">View</span>.<span class="title">OnTouchListener</span> &#123;</div><div class="line">                   &#125;</div></pre></td></tr></table></figure>
<p>Launcher实现了点击、长按等回调接口，来接收用户的输入。既然是普通的App，那么我们的开发经验在这里就仍然适用，比如，我们点击图标的时候，是怎么开启的应用呢？如果让你，你怎么做这个功能呢？捕捉图标点击事件，然后startActivity()发送对应的Intent请求呗！是的，Launcher也是这么做的，就是这么easy！</p>
<p>那么到底是处理的哪个对象的点击事件呢？既然Launcher是App，并且有界面，那么肯定有布局文件呀，是的，我找到了布局文件launcher.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:launcher</span>=<span class="string">"http://schemas.android.com/apk/res/com.android.launcher"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/launcher"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.android.launcher2.DragLayer</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/drag_layer"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Keep these behind the workspace so that they are not visible when</span></div><div class="line">             we go into AllApps --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">include</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/dock_divider"</span></div><div class="line">            <span class="attr">layout</span>=<span class="string">"@layout/workspace_divider"</span></div><div class="line">            <span class="attr">android:layout_marginBottom</span>=<span class="string">"@dimen/button_bar_height"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">include</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/paged_view_indicator"</span></div><div class="line">            <span class="attr">layout</span>=<span class="string">"@layout/scroll_indicator"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></div><div class="line">            <span class="attr">android:layout_marginBottom</span>=<span class="string">"@dimen/button_bar_height"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- The workspace contains 5 screens of cells --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">com.android.launcher2.Workspace</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/workspace"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:paddingStart</span>=<span class="string">"@dimen/workspace_left_padding"</span></div><div class="line">            <span class="attr">android:paddingEnd</span>=<span class="string">"@dimen/workspace_right_padding"</span></div><div class="line">            <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/workspace_top_padding"</span></div><div class="line">            <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/workspace_bottom_padding"</span></div><div class="line">            <span class="attr">launcher:defaultScreen</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">launcher:cellCountX</span>=<span class="string">"@integer/cell_count_x"</span></div><div class="line">            <span class="attr">launcher:cellCountY</span>=<span class="string">"@integer/cell_count_y"</span></div><div class="line">            <span class="attr">launcher:pageSpacing</span>=<span class="string">"@dimen/workspace_page_spacing"</span></div><div class="line">            <span class="attr">launcher:scrollIndicatorPaddingLeft</span>=<span class="string">"@dimen/workspace_divider_padding_left"</span></div><div class="line">            <span class="attr">launcher:scrollIndicatorPaddingRight</span>=<span class="string">"@dimen/workspace_divider_padding_right"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">android:id</span>=<span class="string">"@+id/cell1"</span> <span class="attr">layout</span>=<span class="string">"@layout/workspace_screen"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">android:id</span>=<span class="string">"@+id/cell2"</span> <span class="attr">layout</span>=<span class="string">"@layout/workspace_screen"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">android:id</span>=<span class="string">"@+id/cell3"</span> <span class="attr">layout</span>=<span class="string">"@layout/workspace_screen"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">android:id</span>=<span class="string">"@+id/cell4"</span> <span class="attr">layout</span>=<span class="string">"@layout/workspace_screen"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">android:id</span>=<span class="string">"@+id/cell5"</span> <span class="attr">layout</span>=<span class="string">"@layout/workspace_screen"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">com.android.launcher2.Workspace</span>&gt;</span></div><div class="line"></div><div class="line">    ...ignore some code...</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">com.android.launcher2.DragLayer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>为了方便查看，我删除了很多代码，从上面这些我们应该可以看出一些东西来：Launcher大量使用标签来实现界面的复用，而且定义了很多的自定义控件实现界面效果，dock_divider从布局的参数声明上可以猜出，是底部操作栏和上面图标布局的分割线，而paged_view_indicator则是页面指示器，和App首次进入的引导页下面的界面引导是一样的道理。当然，我们最关心的是Workspace这个布局，因为注释里面说在这里面包含了5个屏幕的单元格，想必你也猜到了，这个就是在首页存放我们图标的那五个界面(不同的ROM会做不同的DIY，数量不固定)。</p>
<p>接下来，我们应该打开workspace_screen布局，看看里面有什么东东。</p>
<p>workspace_screen.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.android.launcher2.CellLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:launcher</span>=<span class="string">"http://schemas.android.com/apk/res/com.android.launcher"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:paddingStart</span>=<span class="string">"@dimen/cell_layout_left_padding"</span></div><div class="line">    <span class="attr">android:paddingEnd</span>=<span class="string">"@dimen/cell_layout_right_padding"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/cell_layout_top_padding"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/cell_layout_bottom_padding"</span></div><div class="line">    <span class="attr">android:hapticFeedbackEnabled</span>=<span class="string">"false"</span></div><div class="line">    <span class="attr">launcher:cellWidth</span>=<span class="string">"@dimen/workspace_cell_width"</span></div><div class="line">    <span class="attr">launcher:cellHeight</span>=<span class="string">"@dimen/workspace_cell_height"</span></div><div class="line">    <span class="attr">launcher:widthGap</span>=<span class="string">"@dimen/workspace_width_gap"</span></div><div class="line">    <span class="attr">launcher:heightGap</span>=<span class="string">"@dimen/workspace_height_gap"</span></div><div class="line">    <span class="attr">launcher:maxGap</span>=<span class="string">"@dimen/workspace_max_gap"</span> /&gt;</div></pre></td></tr></table></figure>
<p>里面就一个CellLayout，也是一个自定义布局，那么我们就可以猜到了，既然可以存放图标，那么这个自定义的布局很有可能是继承自ViewGroup或者是其子类，实际上，CellLayout确实是继承自ViewGroup。在CellLayout里面，只放了一个子View，那就是ShortcutAndWidgetContainer。从名字也可以看出来，ShortcutAndWidgetContainer这个类就是用来存放快捷图标和Widget小部件的，那么里面放的是什么对象呢？</p>
<p>在桌面上的图标，使用的是BubbleTextView对象，这个对象在TextView的基础之上，添加了一些特效，比如你长按移动图标的时候，图标位置会出现一个背景(不同版本的效果不同)，所以我们找到BubbleTextView对象的点击事件，就可以找到Launcher如何开启一个App了。</p>
<p>除了在桌面上有图标之外，在程序列表中点击图标，也可以开启对应的程序。这里的图标使用的不是BubbleTextView对象，而是PagedViewIcon对象，我们如果找到它的点击事件，就也可以找到Launcher如何开启一个App。</p>
<p>其实说这么多，和今天的主题隔着十万八千里，上面这些东西，你有兴趣就看，没兴趣就直接跳过，不知道不影响这篇文章阅读。</p>
<p>BubbleTextView的点击事件在哪里呢？我来告诉你：在Launcher.onClick(View v)里面。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Launches the intent referred by the clicked shortcut</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">         ...ignore some code...</div><div class="line"></div><div class="line">        Object tag = v.getTag();</div><div class="line">       <span class="keyword">if</span> (tag <span class="keyword">instanceof</span> ShortcutInfo) &#123;</div><div class="line">           <span class="comment">// Open shortcut</span></div><div class="line">           <span class="keyword">final</span> Intent intent = ((ShortcutInfo) tag).intent;</div><div class="line">           <span class="keyword">int</span>[] pos = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">           v.getLocationOnScreen(pos);</div><div class="line">           intent.setSourceBounds(<span class="keyword">new</span> Rect(pos[<span class="number">0</span>], pos[<span class="number">1</span>],</div><div class="line">                   pos[<span class="number">0</span>] + v.getWidth(), pos[<span class="number">1</span>] + v.getHeight()));</div><div class="line">       <span class="comment">//开始开启Activity咯~</span></div><div class="line">           <span class="keyword">boolean</span> success = startActivitySafely(v, intent, tag);</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (success &amp;&amp; v <span class="keyword">instanceof</span> BubbleTextView) &#123;</div><div class="line">               mWaitingForResume = (BubbleTextView) v;</div><div class="line">               mWaitingForResume.setStayPressed(<span class="keyword">true</span>);</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag <span class="keyword">instanceof</span> FolderInfo) &#123;</div><div class="line">           <span class="comment">//如果点击的是图标文件夹，就打开文件夹</span></div><div class="line">           <span class="keyword">if</span> (v <span class="keyword">instanceof</span> FolderIcon) &#123;</div><div class="line">               FolderIcon fi = (FolderIcon) v;</div><div class="line">               handleFolderClick(fi);</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v == mAllAppsButton) &#123;</div><div class="line">       ...ignore some code...</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>从上面的代码我们可以看到，在桌面上点击快捷图标的时候，会调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivitySafely(v, intent, tag);</div></pre></td></tr></table></figure>
<p>那么从程序列表界面，点击图标的时候会发生什么呢？实际上，程序列表界面使用的是AppsCustomizePagedView对象，所以我在这个类里面找到了onClick(View v)。</p>
<p>com.android.launcher2.AppsCustomizePagedView.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The Apps/Customize page that displays all the applications, widgets, and shortcuts.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppsCustomizePagedView</span> <span class="keyword">extends</span> <span class="title">PagedViewWithDraggableItems</span> <span class="keyword">implements</span></span></div><div class="line">        <span class="title">View</span>.<span class="title">OnClickListener</span>, <span class="title">View</span>.<span class="title">OnKeyListener</span>, <span class="title">DragSource</span>,</div><div class="line">        <span class="title">PagedViewIcon</span>.<span class="title">PressedCallback</span>, <span class="title">PagedViewWidget</span>.<span class="title">ShortPressListener</span>,</div><div class="line">        <span class="title">LauncherTransitionable</span> &#123;</div><div class="line"></div><div class="line">     <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">         ...ignore some code...</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (v <span class="keyword">instanceof</span> PagedViewIcon) &#123;</div><div class="line">            mLauncher.updateWallpaperVisibility(<span class="keyword">true</span>);</div><div class="line">            mLauncher.startActivitySafely(v, appInfo.intent, appInfo);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">instanceof</span> PagedViewWidget) &#123;</div><div class="line">                 ...ignore some code..</div><div class="line">         &#125;</div><div class="line">     &#125;      </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>可以看到，调用的是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mLauncher.startActivitySafely(v, appInfo.intent, appInfo);</div></pre></td></tr></table></figure>
<p>和上面一样！这叫什么？这叫殊途同归！</p>
<p>所以咱们现在又明白了一件事情：不管从哪里点击图标，调用的都是Launcher.startActivitySafely()。</p>
<p>下面我们就可以一步步的来看一下Launcher.startActivitySafely()到底做了什么事情。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startActivitySafely</span><span class="params">(View v, Intent intent, Object tag)</span> </span>&#123;</div><div class="line">       <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           success = startActivity(v, intent, tag);</div><div class="line">       &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</div><div class="line">           Toast.makeText(<span class="keyword">this</span>, R.string.activity_not_found, Toast.LENGTH_SHORT).show();</div><div class="line">           Log.e(TAG, <span class="string">"Unable to launch. tag="</span> + tag + <span class="string">" intent="</span> + intent, e);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> success;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>调用了startActivity(v, intent, tag)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startActivity</span><span class="params">(View v, Intent intent, Object tag)</span> </span>&#123;</div><div class="line"></div><div class="line">       intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">boolean</span> useLaunchAnimation = (v != <span class="keyword">null</span>) &amp;&amp;</div><div class="line">                   !intent.hasExtra(INTENT_EXTRA_IGNORE_LAUNCH_ANIMATION);</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (useLaunchAnimation) &#123;</div><div class="line">               <span class="keyword">if</span> (user == <span class="keyword">null</span> || user.equals(android.os.Process.myUserHandle())) &#123;</div><div class="line">                   startActivity(intent, opts.toBundle());</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   launcherApps.startMainActivity(intent.getComponent(), user,</div><div class="line">                           intent.getSourceBounds(),</div><div class="line">                           opts.toBundle());</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">if</span> (user == <span class="keyword">null</span> || user.equals(android.os.Process.myUserHandle())) &#123;</div><div class="line">                   startActivity(intent);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   launcherApps.startMainActivity(intent.getComponent(), user,</div><div class="line">                           intent.getSourceBounds(), <span class="keyword">null</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</div><div class="line">       ...</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这里会调用Activity.startActivity(intent, opts.toBundle())，这个方法熟悉吗？这就是我们经常用到的Activity.startActivity(Intent)的重载函数。而且由于设置了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div></pre></td></tr></table></figure>
<p>所以这个Activity会添加到一个新的Task栈中，而且，startActivity()调用的其实是startActivityForResult()这个方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, @Nullable Bundle options)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</div><div class="line">            startActivityForResult(intent, -<span class="number">1</span>, options);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Note we want to go through this call for compatibility with</span></div><div class="line">            <span class="comment">// applications that may have overridden the method.</span></div><div class="line">            startActivityForResult(intent, -<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>所以我们现在明确了，Launcher中开启一个App，其实和我们在Activity中直接startActivity()基本一样，都是调用了Activity.startActivityForResult()。</p>
<h4 id="Instrumentation是什么和ActivityThread是什么关系"><a href="#Instrumentation是什么和ActivityThread是什么关系" class="headerlink" title="Instrumentation是什么和ActivityThread是什么关系"></a>Instrumentation是什么和ActivityThread是什么关系</h4><p>还记得前面说过的Instrumentation对象吗？每个Activity都持有Instrumentation对象的一个引用，但是整个进程只会存在一个Instrumentation对象。当startActivityForResult()调用之后，实际上还是调用了mInstrumentation.execStartActivity()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(Intent intent, <span class="keyword">int</span> requestCode, @Nullable Bundle options)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</div><div class="line">            Instrumentation.ActivityResult ar =</div><div class="line">                mInstrumentation.execStartActivity(</div><div class="line">                    <span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>,</div><div class="line">                    intent, requestCode, options);</div><div class="line">            <span class="keyword">if</span> (ar != <span class="keyword">null</span>) &#123;</div><div class="line">                mMainThread.sendActivityResult(</div><div class="line">                    mToken, mEmbeddedID, requestCode, ar.getResultCode(),</div><div class="line">                    ar.getResultData());</div><div class="line">            &#125;</div><div class="line">            ...ignore some code...    </div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</div><div class="line">                 <span class="comment">//当现在的Activity有父Activity的时候会调用，但是在startActivityFromChild()内部实际还是调用的mInstrumentation.execStartActivity()</span></div><div class="line">                mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode, options);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">         ...ignore some code...    </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>下面是mInstrumentation.execStartActivity()的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(</span></span></div><div class="line">           Context who, IBinder contextThread, IBinder token, Activity target,</div><div class="line">           Intent intent, <span class="keyword">int</span> requestCode, Bundle options) &#123;</div><div class="line">       IApplicationThread whoThread = (IApplicationThread) contextThread;</div><div class="line">           ...ignore some code...</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">           intent.migrateExtraStreamToClipData();</div><div class="line">           intent.prepareToLeaveProcess();</div><div class="line">           <span class="keyword">int</span> result = ActivityManagerNative.getDefault()</div><div class="line">               .startActivity(whoThread, who.getBasePackageName(), intent,</div><div class="line">                       intent.resolveTypeIfNeeded(who.getContentResolver()),</div><div class="line">                       token, target != <span class="keyword">null</span> ? target.mEmbeddedID : <span class="keyword">null</span>,</div><div class="line">                       requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options);</div><div class="line">           checkStartActivityResult(result, intent);</div><div class="line">       &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>所以当我们在程序中调用startActivity()的 时候，实际上调用的是Instrumentation的相关的方法。</p>
<p>Instrumentation意为“仪器”，我们先看一下这个类里面包含哪些方法吧</p>
<p><img src="/article_images/android_activity_launch01.png" alt="alt"></p>
<p>我们可以看到，这个类里面的方法大多数和Application和Activity有关，是的，这个类就是完成对Application和Activity初始化和生命周期的工具类。比如说，我单独挑一个callActivityOnCreate()让你看看</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnCreate</span><span class="params">(Activity activity, Bundle icicle)</span> </span>&#123;</div><div class="line">        prePerformCreate(activity);</div><div class="line">        activity.performCreate(icicle);</div><div class="line">        postPerformCreate(activity);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>对activity.performCreate(icicle);这一行代码熟悉吗？这一行里面就调用了传说中的Activity的入口函数onCreate()，不信？接着往下看</p>
<p>Activity.performCreate()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</div><div class="line">        onCreate(icicle);</div><div class="line">        mActivityTransitionState.readState(icicle);</div><div class="line">        performCreateCommon();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>没骗你吧，onCreate在这里调用了吧。但是有一件事情必须说清楚，那就是这个Instrumentation类这么重要，为啥我在开发的过程中，没有发现他的踪迹呢？</p>
<p>是的，Instrumentation这个类很重要，对Activity生命周期方法的调用根本就离不开他，他可以说是一个大管家，但是，这个大管家比较害羞，是一个女的，管内不管外，是老板娘~</p>
<p>那么你可能要问了，老板是谁呀？<br>老板当然是大名鼎鼎的ActivityThread了！</p>
<p>ActivityThread你都没听说过？那你肯定听说过传说中的UI线程吧？是的，这就是UI线程。我们前面说过，App和AMS是通过Binder传递信息的，那么ActivityThread就是专门与AMS的外交工作的。</p>
<p>AMS说：“ActivityThread，你给我暂停一个Activity！”<br>ActivityThread就说：“没问题！”然后转身和Instrumentation说：“老婆，AMS让暂停一个Activity，我这里忙着呢，你快去帮我把这事办了把~”<br>于是，Instrumentation就去把事儿搞定了。</p>
<p>所以说，AMS是董事会，负责指挥和调度的，ActivityThread是老板，虽然说家里的事自己说了算，但是需要听从AMS的指挥，而Instrumentation则是老板娘，负责家里的大事小事，但是一般不抛头露面，听一家之主ActivityThread的安排。</p>
<h4 id="如何理解AMS和ActivityThread之间的Binder通信"><a href="#如何理解AMS和ActivityThread之间的Binder通信" class="headerlink" title="如何理解AMS和ActivityThread之间的Binder通信"></a>如何理解AMS和ActivityThread之间的Binder通信</h4><p>前面我们说到，在调用startActivity()的时候，实际上调用的是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mInstrumentation.execStartActivity()</div></pre></td></tr></table></figure>
<p>但是到这里还没完呢！里面又调用了下面的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ActivityManagerNative.getDefault()</div><div class="line">                .startActivity</div></pre></td></tr></table></figure>
<p>这里的ActivityManagerNative.getDefault返回的就是ActivityManagerService的远程接口，即ActivityManagerProxy。</p>
<p>怎么知道的呢？往下看</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityManagerNative</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">IActivityManager</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="comment">//从类声明上，我们可以看到ActivityManagerNative是Binder的一个子类，而且实现了IActivityManager接口</span></div><div class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> gDefault.get();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="comment">//通过单例模式获取一个IActivityManager对象，这个对象通过asInterface(b)获得</span></div><div class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class="line">        <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">            IBinder b = ServiceManager.getService(<span class="string">"activity"</span>);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">                Log.v(<span class="string">"ActivityManager"</span>, <span class="string">"default service binder = "</span> + b);</div><div class="line">            &#125;</div><div class="line">            IActivityManager am = asInterface(b);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">                Log.v(<span class="string">"ActivityManager"</span>, <span class="string">"default service = "</span> + am);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> am;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//最终返回的还是一个ActivityManagerProxy对象</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title">asInterface</span><span class="params">(IBinder obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        IActivityManager in =</div><div class="line">            (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class="line">        <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> in;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">     <span class="comment">//这里面的Binder类型的obj参数会作为ActivityManagerProxy的成员变量保存为mRemote成员变量，负责进行IPC通信</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActivityManagerProxy(obj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再看ActivityManagerProxy.startActivity()，在这里面做的事情就是IPC通信，利用Binder对象，调用transact()，把所有需要的参数封装成Parcel对象，向AMS发送数据进行通信。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage, Intent intent,</span></span></div><div class="line">           String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</div><div class="line">           <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options) <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">       Parcel data = Parcel.obtain();</div><div class="line">       Parcel reply = Parcel.obtain();</div><div class="line">       data.writeInterfaceToken(IActivityManager.descriptor);</div><div class="line">       data.writeStrongBinder(caller != <span class="keyword">null</span> ? caller.asBinder() : <span class="keyword">null</span>);</div><div class="line">       data.writeString(callingPackage);</div><div class="line">       intent.writeToParcel(data, <span class="number">0</span>);</div><div class="line">       data.writeString(resolvedType);</div><div class="line">       data.writeStrongBinder(resultTo);</div><div class="line">       data.writeString(resultWho);</div><div class="line">       data.writeInt(requestCode);</div><div class="line">       data.writeInt(startFlags);</div><div class="line">       <span class="keyword">if</span> (profilerInfo != <span class="keyword">null</span>) &#123;</div><div class="line">           data.writeInt(<span class="number">1</span>);</div><div class="line">           profilerInfo.writeToParcel(data, Parcelable.PARCELABLE_WRITE_RETURN_VALUE);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           data.writeInt(<span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</div><div class="line">           data.writeInt(<span class="number">1</span>);</div><div class="line">           options.writeToParcel(data, <span class="number">0</span>);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           data.writeInt(<span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line">       mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, <span class="number">0</span>);</div><div class="line">       reply.readException();</div><div class="line">       <span class="keyword">int</span> result = reply.readInt();</div><div class="line">       reply.recycle();</div><div class="line">       data.recycle();</div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>Binder本质上只是一种底层通信方式，和具体服务没有关系。为了提供具体服务，Server必须提供一套接口函数以便Client通过远程访问使用各种服务。这时通常采用Proxy设计模式：将接口函数定义在一个抽象类中，Server和Client都会以该抽象类为基类实现所有接口函数，所不同的是Server端是真正的功能实现，而Client端是对这些函数远程调用请求的包装。</p>
<p>为了更方便的说明客户端和服务器之间的Binder通信，下面以ActivityManagerServices和他在客户端的代理类ActivityManagerProxy为例。</p>
<p>ActivityManagerServices和ActivityManagerProxy都实现了同一个接口——IActivityManager。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActivityManagerProxy</span> <span class="keyword">implements</span> <span class="title">IActivityManager</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityManagerService</span> <span class="keyword">extends</span> <span class="title">ActivityManagerNative</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityManagerNative</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">IActivityManager</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>虽然都实现了同一个接口，但是代理对象ActivityManagerProxy并不会对这些方法进行真正地实现，ActivityManagerProxy只是通过这种方式对方法的参数进行打包(因为都实现了相同接口，所以可以保证同一个方法有相同的参数，即对要传输给服务器的数据进行打包)，真正实现的是ActivityManagerService。</p>
<p>但是这个地方并不是直接由客户端传递给服务器，而是通过Binder驱动进行中转。其实我对Binder驱动并不熟悉，我们就把他当做一个中转站就OK，客户端调用ActivityManagerProxy接口里面的方法，把数据传送给Binder驱动，然后Binder驱动就会把这些东西转发给服务器的ActivityManagerServices，由ActivityManagerServices去真正的实施具体的操作。</p>
<p>但是Binder只能传递数据，并不知道是要调用ActivityManagerServices的哪个方法，所以在数据中会添加方法的唯一标识码，比如前面的startActivity()方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage, Intent intent,</span></span></div><div class="line">            String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</div><div class="line">            <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options) <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">        Parcel data = Parcel.obtain();</div><div class="line">        Parcel reply = Parcel.obtain();</div><div class="line"></div><div class="line">        ...ignore some code...</div><div class="line"></div><div class="line">        mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, <span class="number">0</span>);</div><div class="line">        reply.readException();</div><div class="line">        <span class="keyword">int</span> result = reply.readInt();</div><div class="line">        reply.recycle();</div><div class="line">        data.recycle();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面的START_ACTIVITY_TRANSACTION就是方法标示，data是要传输给Binder驱动的数据，reply则接受操作的返回值。</p>
<p>即</p>
<p>客户端：ActivityManagerProxy =====&gt;Binder驱动=====&gt; ActivityManagerService：服务器</p>
<p>而且由于继承了同样的公共接口类，ActivityManagerProxy提供了与ActivityManagerService一样的函数原型，使用户感觉不出Server是运行在本地还是远端，从而可以更加方便的调用这些重要的系统服务。</p>
<p>但是！这里Binder通信是单方向的，即从ActivityManagerProxy指向ActivityManagerService的，如果AMS想要通知ActivityThread做一些事情，应该咋办呢？</p>
<p>还是通过Binder通信，不过是换了另外一对，换成了ApplicationThread和ApplicationThreadProxy。</p>
<p>客户端：ApplicationThread &lt;=====Binder驱动&lt;===== ApplicationThreadProxy：服务器</p>
<p>他们也都实现了相同的接口IApplicationThread</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationThread</span> <span class="keyword">extends</span> <span class="title">ApplicationThreadNative</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationThreadNative</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">IApplicationThread</span></span>&#123;&#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationThreadProxy</span> <span class="keyword">implements</span> <span class="title">IApplicationThread</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>剩下的就不必多说了吧，和前面一样。</p>
<h4 id="AMS接收到客户端的请求之后会如何开启一个Activity"><a href="#AMS接收到客户端的请求之后会如何开启一个Activity" class="headerlink" title="AMS接收到客户端的请求之后会如何开启一个Activity"></a>AMS接收到客户端的请求之后会如何开启一个Activity</h4><p>OK，至此，点击桌面图标调用startActivity()，终于把数据和要开启Activity的请求发送到了AMS了。说了这么多，其实这些都在一瞬间完成了，下面咱们研究下AMS到底做了什么。</p>
<p>注：前方有高能的方法调用链，如果你现在累了，请先喝杯咖啡或者是上趟厕所休息下</p>
<p>AMS收到startActivity的请求之后，会按照如下的方法链进行调用</p>
<p>调用startActivity()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></div><div class="line">            Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</div><div class="line">            <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options) &#123;</div><div class="line">        <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</div><div class="line">            resultWho, requestCode, startFlags, profilerInfo, options,</div><div class="line">            UserHandle.getCallingUserId());</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>调用startActivityAsUser()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityAsUser</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></div><div class="line">           Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</div><div class="line">           <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options, <span class="keyword">int</span> userId) &#123;</div><div class="line"></div><div class="line">           ...ignore some code...</div><div class="line"></div><div class="line">       <span class="keyword">return</span> mStackSupervisor.startActivityMayWait(caller, -<span class="number">1</span>, callingPackage, intent,</div><div class="line">               resolvedType, <span class="keyword">null</span>, <span class="keyword">null</span>, resultTo, resultWho, requestCode, startFlags,</div><div class="line">               profilerInfo, <span class="keyword">null</span>, <span class="keyword">null</span>, options, userId, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>在这里又出现了一个新对象ActivityStackSupervisor，通过这个类可以实现对ActivityStack的部分操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityMayWait</span><span class="params">(IApplicationThread caller, <span class="keyword">int</span> callingUid,</span></span></div><div class="line">            String callingPackage, Intent intent, String resolvedType,</div><div class="line">            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</div><div class="line">            IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> startFlags,</div><div class="line">            ProfilerInfo profilerInfo, WaitResult outResult, Configuration config,</div><div class="line">            Bundle options, <span class="keyword">int</span> userId, IActivityContainer iContainer, TaskRecord inTask) &#123;</div><div class="line"></div><div class="line">            ...ignore some code...</div><div class="line"></div><div class="line">              <span class="keyword">int</span> res = startActivityLocked(caller, intent, resolvedType, aInfo,</div><div class="line">                    voiceSession, voiceInteractor, resultTo, resultWho,</div><div class="line">                    requestCode, callingPid, callingUid, callingPackage,</div><div class="line">                    realCallingPid, realCallingUid, startFlags, options,</div><div class="line">                    componentSpecified, <span class="keyword">null</span>, container, inTask);</div><div class="line"></div><div class="line">            ...ignore some code...</div><div class="line"></div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>继续调用startActivityLocked()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityLocked</span><span class="params">(IApplicationThread caller,</span></span></div><div class="line">           Intent intent, String resolvedType, ActivityInfo aInfo,</div><div class="line">           IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</div><div class="line">           IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</div><div class="line">           <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid, String callingPackage,</div><div class="line">           <span class="keyword">int</span> realCallingPid, <span class="keyword">int</span> realCallingUid, <span class="keyword">int</span> startFlags, Bundle options,</div><div class="line">           <span class="keyword">boolean</span> componentSpecified, ActivityRecord[] outActivity, ActivityContainer container,</div><div class="line">           TaskRecord inTask) &#123;</div><div class="line"></div><div class="line">             err = startActivityUncheckedLocked(r, sourceRecord, voiceSession, voiceInteractor,</div><div class="line">             startFlags, <span class="keyword">true</span>, options, inTask);</div><div class="line">       <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</div><div class="line">           notifyActivityDrawnForKeyguard();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> err;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>调用startActivityUncheckedLocked(),此时要启动的Activity已经通过检验，被认为是一个正当的启动请求。</p>
<p>终于，在这里调用到了ActivityStack的startActivityLocked(ActivityRecord r, boolean newTask,boolean doResume, boolean keepCurTransition, Bundle options)。</p>
<p>ActivityRecord代表的就是要开启的Activity对象，里面分装了很多信息，比如所在的ActivityTask等，如果这是首次打开应用，那么这个Activity会被放到ActivityTask的栈顶，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityUncheckedLocked</span><span class="params">(ActivityRecord r, ActivityRecord sourceRecord,</span></span></div><div class="line">            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor, <span class="keyword">int</span> startFlags,</div><div class="line">            <span class="keyword">boolean</span> doResume, Bundle options, TaskRecord inTask) &#123;</div><div class="line"></div><div class="line">            ...ignore some code...</div><div class="line"></div><div class="line">            targetStack.startActivityLocked(r, newTask, doResume, keepCurTransition, options);</div><div class="line"></div><div class="line">            ...ignore some code...</div><div class="line"></div><div class="line">             <span class="keyword">return</span> ActivityManager.START_SUCCESS;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>调用的是ActivityStack.startActivityLocked()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startActivityLocked</span><span class="params">(ActivityRecord r, <span class="keyword">boolean</span> newTask,</span></span></div><div class="line">           <span class="keyword">boolean</span> doResume, <span class="keyword">boolean</span> keepCurTransition, Bundle options) &#123;</div><div class="line"></div><div class="line">       <span class="comment">//ActivityRecord中存储的TaskRecord信息</span></div><div class="line">       TaskRecord rTask = r.task;</div><div class="line"></div><div class="line">        ...ignore some code...</div><div class="line"></div><div class="line">       <span class="comment">//如果不是在新的ActivityTask(也就是TaskRecord)中的话，就找出要运行在的TaskRecord对象</span></div><div class="line">    TaskRecord task = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">if</span> (!newTask) &#123;</div><div class="line">           <span class="keyword">boolean</span> startIt = <span class="keyword">true</span>;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> taskNdx = mTaskHistory.size() - <span class="number">1</span>; taskNdx &gt;= <span class="number">0</span>; --taskNdx) &#123;</div><div class="line">               task = mTaskHistory.get(taskNdx);</div><div class="line">               <span class="keyword">if</span> (task.getTopActivity() == <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="comment">// task中的所有Activity都结束了</span></div><div class="line">                   <span class="keyword">continue</span>;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (task == r.task) &#123;</div><div class="line">                   <span class="comment">// 找到了</span></div><div class="line">                   <span class="keyword">if</span> (!startIt) &#123;</div><div class="line">                       task.addActivityToTop(r);</div><div class="line">                       r.putInHistory();</div><div class="line">                       mWindowManager.addAppToken(task.mActivities.indexOf(r), r.appToken,</div><div class="line">                               r.task.taskId, mStackId, r.info.screenOrientation, r.fullscreen,</div><div class="line">                               (r.info.flags &amp; ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != <span class="number">0</span>,</div><div class="line">                               r.userId, r.info.configChanges, task.voiceSession != <span class="keyword">null</span>,</div><div class="line">                               r.mLaunchTaskBehind);</div><div class="line">                       <span class="keyword">if</span> (VALIDATE_TOKENS) &#123;</div><div class="line">                           validateAppTokensLocked();</div><div class="line">                       &#125;</div><div class="line">                       ActivityOptions.abort(options);</div><div class="line">                       <span class="keyword">return</span>;</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (task.numFullscreen &gt; <span class="number">0</span>) &#123;</div><div class="line">                   startIt = <span class="keyword">false</span>;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">     ...ignore some code...</div><div class="line"></div><div class="line">       <span class="comment">// Place a new activity at top of stack, so it is next to interact</span></div><div class="line">       <span class="comment">// with the user.</span></div><div class="line">       task = r.task;</div><div class="line">       task.addActivityToTop(r);</div><div class="line">       task.setFrontOfTask();</div><div class="line"></div><div class="line">       ...ignore some code...</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (doResume) &#123;</div><div class="line">           mStackSupervisor.resumeTopActivitiesLocked(<span class="keyword">this</span>, r, options);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>靠！这来回折腾什么呢！从ActivityStackSupervisor到ActivityStack，又调回ActivityStackSupervisor，这到底是在折腾什么玩意啊！！！</p>
<p>淡定…淡定…我知道你也在心里骂娘，世界如此美妙，你却如此暴躁，这样不好，不好…</p>
<p>来来来，咱们继续哈，刚才说到哪里了？哦，对，咱们一起看下StackSupervisor.resumeTopActivitiesLocked(this, r, options)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeTopActivitiesLocked</span><span class="params">(ActivityStack targetStack, ActivityRecord target,</span></span></div><div class="line">            Bundle targetOptions) &#123;</div><div class="line">        <span class="keyword">if</span> (targetStack == <span class="keyword">null</span>) &#123;</div><div class="line">            targetStack = getFocusedStack();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Do targetStack first.</span></div><div class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (isFrontStack(targetStack)) &#123;</div><div class="line">            result = targetStack.resumeTopActivityLocked(target, targetOptions);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">          ...ignore some code...</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我…已无力吐槽了，又调回ActivityStack去了…</p>
<p>ActivityStack.resumeTopActivityLocked()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">resumeTopActivityLocked</span><span class="params">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (inResumeTopActivity) &#123;</div><div class="line">            <span class="comment">// Don't even start recursing.</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// Protect against recursion.</span></div><div class="line">            inResumeTopActivity = <span class="keyword">true</span>;</div><div class="line">            result = resumeTopActivityInnerLocked(prev, options);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            inResumeTopActivity = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>咱们坚持住，看一下ActivityStack.resumeTopActivityInnerLocked()到底进行了什么操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">resumeTopActivityInnerLocked</span><span class="params">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class="line"></div><div class="line">        ...ignore some code...</div><div class="line">    <span class="comment">//找出还没结束的首个ActivityRecord</span></div><div class="line">   ActivityRecord next = topRunningActivityLocked(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">  <span class="comment">//如果一个没结束的Activity都没有，就开启Launcher程序</span></div><div class="line">  <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</div><div class="line">          ActivityOptions.abort(options);</div><div class="line">          <span class="keyword">if</span> (DEBUG_STATES) Slog.d(TAG, <span class="string">"resumeTopActivityLocked: No more activities go home"</span>);</div><div class="line">          <span class="keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();</div><div class="line">          <span class="comment">// Only resume home if on home display</span></div><div class="line">          <span class="keyword">final</span> <span class="keyword">int</span> returnTaskType = prevTask == <span class="keyword">null</span> || !prevTask.isOverHomeStack() ?</div><div class="line">                  HOME_ACTIVITY_TYPE : prevTask.getTaskToReturnTo();</div><div class="line">          <span class="keyword">return</span> isOnHomeDisplay() &amp;&amp;</div><div class="line">                  mStackSupervisor.resumeHomeStackTask(returnTaskType, prev);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//先需要暂停当前的Activity。因为我们是在Lancher中启动mainActivity，所以当前mResumedActivity！=null，调用startPausingLocked()使得Launcher进入Pausing状态</span></div><div class="line">        <span class="keyword">if</span> (mResumedActivity != <span class="keyword">null</span>) &#123;</div><div class="line">          pausing |= startPausingLocked(userLeaving, <span class="keyword">false</span>, <span class="keyword">true</span>, dontWaitForPause);</div><div class="line">          <span class="keyword">if</span> (DEBUG_STATES) Slog.d(TAG, <span class="string">"resumeTopActivityLocked: Pausing "</span> + mResumedActivity);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个方法里，prev.app为记录启动Lancher进程的ProcessRecord，prev.app.thread为Lancher进程的远程调用接口IApplicationThead，所以可以调用prev.app.thread.schedulePauseActivity，到Lancher进程暂停指定Activity。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">startPausingLocked</span><span class="params">(<span class="keyword">boolean</span> userLeaving, <span class="keyword">boolean</span> uiSleeping, <span class="keyword">boolean</span> resuming,</span></span></div><div class="line">            <span class="keyword">boolean</span> dontWait) &#123;</div><div class="line">        <span class="keyword">if</span> (mPausingActivity != <span class="keyword">null</span>) &#123;</div><div class="line">            completePauseLocked(<span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">       ...ignore some code...    </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (prev.app != <span class="keyword">null</span> &amp;&amp; prev.app.thread != <span class="keyword">null</span>) </div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">                mService.updateUsageStats(prev, <span class="keyword">false</span>);</div><div class="line">                prev.app.thread.schedulePauseActivity(prev.appToken, prev.finishing,</div><div class="line">                        userLeaving, prev.configChangeFlags, dontWait);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                mPausingActivity = <span class="keyword">null</span>;</div><div class="line">                mLastPausedActivity = <span class="keyword">null</span>;</div><div class="line">                mLastNoHistoryActivity = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mPausingActivity = <span class="keyword">null</span>;</div><div class="line">            mLastPausedActivity = <span class="keyword">null</span>;</div><div class="line">            mLastNoHistoryActivity = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      ...ignore some code...  </div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>在Lancher进程中消息传递，调用ActivityThread.handlePauseActivity()，最终调用ActivityThread.performPauseActivity()暂停指定Activity。接着通过前面所说的Binder通信，通知AMS已经完成暂停的操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ActivityManagerNative.getDefault().activityPaused(token).</div></pre></td></tr></table></figure>
<p>上面这些调用过程非常复杂，源码中各种条件判断让人眼花缭乱，所以说如果你没记住也没关系，你只要记住这个流程，理解了Android在控制Activity生命周期时是如何操作，以及是通过哪几个关键的类进行操作的就可以了，以后遇到相关的问题之道从哪块下手即可，这些过程我虽然也是撸了一遍，但还是记不清。</p>
<p>最后来一张高清无码大图，方便大家记忆：</p>
<p><img src="/article_images/android_activity_launch02.png" alt="http://i11.tietuku.com/0582844414810f38.png"></p>
<h3 id="0x04-送给你们的彩蛋"><a href="#0x04-送给你们的彩蛋" class="headerlink" title="0x04 送给你们的彩蛋"></a>0x04 送给你们的彩蛋</h3><h4 id="不要使用-startActivityForResult-intent-RESULT-OK"><a href="#不要使用-startActivityForResult-intent-RESULT-OK" class="headerlink" title="不要使用 startActivityForResult(intent,RESULT_OK)"></a>不要使用 startActivityForResult(intent,RESULT_OK)</h4><p>这是因为startActivity()是这样实现的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, @Nullable Bundle options)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</div><div class="line">            startActivityForResult(intent, -<span class="number">1</span>, options);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Note we want to go through this call for compatibility with</span></div><div class="line">            <span class="comment">// applications that may have overridden the method.</span></div><div class="line">            startActivityForResult(intent, -<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>而</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESULT_OK  = -<span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>所以</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivityForResult(intent,RESULT_OK) = startActivity()</div></pre></td></tr></table></figure>
<p>你不可能从onActivityResult()里面收到任何回调。而这个问题是相当难以被发现的，就是因为这个坑，我工作一年多来第一次加班到9点 (ˇˍˇ）</p>
<h4 id="一个App的程序入口到底是什么"><a href="#一个App的程序入口到底是什么" class="headerlink" title="一个App的程序入口到底是什么"></a>一个App的程序入口到底是什么</h4><p>是ActivityThread.main()。</p>
<h4 id="整个App的主线程的消息循环是在哪里创建的"><a href="#整个App的主线程的消息循环是在哪里创建的" class="headerlink" title="整个App的主线程的消息循环是在哪里创建的"></a>整个App的主线程的消息循环是在哪里创建的</h4><p>是在ActivityThread初始化的时候，就已经创建消息循环了，所以在主线程里面创建Handler不需要指定Looper，而如果在其他线程使用Handler，则需要单独使用Looper.prepare()和Looper.loop()创建消息循环。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">         ...ignore some code...    </div><div class="line"></div><div class="line">     Looper.prepareMainLooper();</div><div class="line"></div><div class="line">       ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">       thread.attach(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">           sMainThreadHandler = thread.getHandler();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       AsyncTask.init();</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">           Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">                   LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       Looper.loop();</div><div class="line"></div><div class="line">         ...ignore some code...    </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Application是在什么时候创建的onCreate什么时候调用的"><a href="#Application是在什么时候创建的onCreate什么时候调用的" class="headerlink" title="Application是在什么时候创建的onCreate什么时候调用的"></a>Application是在什么时候创建的onCreate什么时候调用的</h4><p>也是在ActivityThread.main()的时候，再具体点呢，就是在thread.attach(false)的时候。</p>
<p>看你的表情，不信是吧！凯子哥带你溜溜~</p>
<p>我们先看一下ActivityThread.attach()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(<span class="keyword">boolean</span> system)</span> </span>&#123;</div><div class="line">        sCurrentActivityThread = <span class="keyword">this</span>;</div><div class="line">        mSystemThread = system;</div><div class="line">        <span class="comment">//普通App进这里</span></div><div class="line">        <span class="keyword">if</span> (!system) &#123;</div><div class="line"></div><div class="line">            ...ignore some code...    </div><div class="line"></div><div class="line">            RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class="line">            <span class="keyword">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mgr.attachApplication(mAppThread);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">                <span class="comment">// Ignore</span></div><div class="line">            &#125;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">             <span class="comment">//这个分支在SystemServer加载的时候会进入，通过调用</span></div><div class="line">             <span class="comment">// private void createSystemContext() &#123;</span></div><div class="line">             <span class="comment">//    ActivityThread activityThread = ActivityThread.systemMain()；</span></div><div class="line">             <span class="comment">//&#125; </span></div><div class="line"></div><div class="line">             <span class="comment">// public static ActivityThread systemMain() &#123;</span></div><div class="line">        <span class="comment">//        if (!ActivityManager.isHighEndGfx()) &#123;</span></div><div class="line">        <span class="comment">//            HardwareRenderer.disable(true);</span></div><div class="line">        <span class="comment">//        &#125; else &#123;</span></div><div class="line">        <span class="comment">//            HardwareRenderer.enableForegroundTrimming();</span></div><div class="line">        <span class="comment">//        &#125;</span></div><div class="line">        <span class="comment">//        ActivityThread thread = new ActivityThread();</span></div><div class="line">        <span class="comment">//        thread.attach(true);</span></div><div class="line">        <span class="comment">//        return thread;</span></div><div class="line">        <span class="comment">//    &#125;       </span></div><div class="line">           &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里需要关注的就是mgr.attachApplication(mAppThread)，这个就会通过Binder调用到AMS里面对应的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attachApplication</span><span class="params">(IApplicationThread thread)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">int</span> callingPid = Binder.getCallingPid();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</div><div class="line">            attachApplicationLocked(thread, callingPid);</div><div class="line">            Binder.restoreCallingIdentity(origId);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>然后就是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">attachApplicationLocked</span><span class="params">(IApplicationThread thread,</span></span></div><div class="line">            <span class="keyword">int</span> pid) &#123;</div><div class="line">             thread.bindApplication(processName, appInfo, providers, app.instrumentationClass,</div><div class="line">                    profilerInfo, app.instrumentationArguments, app.instrumentationWatcher,</div><div class="line">                    app.instrumentationUiAutomationConnection, testMode, enableOpenGlTrace,</div><div class="line">                    isRestrictedBackupMode || !normalMode, app.persistent,</div><div class="line">                    <span class="keyword">new</span> Configuration(mConfiguration), app.compat, getCommonServicesLocked(),</div><div class="line">                    mCoreSettingsObserver.getCoreSettingsLocked());</div><div class="line"></div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>thread是IApplicationThread，实际上就是ApplicationThread在服务端的代理类ApplicationThreadProxy，然后又通过IPC就会调用到ApplicationThread的对应方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationThread</span> <span class="keyword">extends</span> <span class="title">ApplicationThreadNative</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">bindApplication</span><span class="params">(String processName, ApplicationInfo appInfo,</span></span></div><div class="line">                List&lt;ProviderInfo&gt; providers, ComponentName instrumentationName,</div><div class="line">                ProfilerInfo profilerInfo, Bundle instrumentationArgs,</div><div class="line">                IInstrumentationWatcher instrumentationWatcher,</div><div class="line">                IUiAutomationConnection instrumentationUiConnection, <span class="keyword">int</span> debugMode,</div><div class="line">                <span class="keyword">boolean</span> enableOpenGlTrace, <span class="keyword">boolean</span> isRestrictedBackupMode, <span class="keyword">boolean</span> persistent,</div><div class="line">                Configuration config, CompatibilityInfo compatInfo, Map&lt;String, IBinder&gt; services,</div><div class="line">                Bundle coreSettings) &#123;</div><div class="line"></div><div class="line">                 ...ignore some code...    </div><div class="line"></div><div class="line">             AppBindData data = <span class="keyword">new</span> AppBindData();</div><div class="line">            data.processName = processName;</div><div class="line">            data.appInfo = appInfo;</div><div class="line">            data.providers = providers;</div><div class="line">            data.instrumentationName = instrumentationName;</div><div class="line">            data.instrumentationArgs = instrumentationArgs;</div><div class="line">            data.instrumentationWatcher = instrumentationWatcher;</div><div class="line">            data.instrumentationUiAutomationConnection = instrumentationUiConnection;</div><div class="line">            data.debugMode = debugMode;</div><div class="line">            data.enableOpenGlTrace = enableOpenGlTrace;</div><div class="line">            data.restrictedBackupMode = isRestrictedBackupMode;</div><div class="line">            data.persistent = persistent;</div><div class="line">            data.config = config;</div><div class="line">            data.compatInfo = compatInfo;</div><div class="line">            data.initProfilerInfo = profilerInfo;</div><div class="line">            sendMessage(H.BIND_APPLICATION, data);</div><div class="line"></div><div class="line">           &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们需要关注的其实就是最后的sendMessage()，里面有函数的编号H.BIND_APPLICATION，然后这个Messge会被H这个Handler处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBindApplication</span><span class="params">(AppBindData data)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">          ...ignore some code... </div><div class="line"></div><div class="line">           Application app = data.info.makeApplication(data.restrictedBackupMode, <span class="keyword">null</span>);</div><div class="line">           mInitialApplication = app;</div><div class="line"></div><div class="line">          ...ignore some code... </div><div class="line"></div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               mInstrumentation.onCreate(data.instrumentationArgs);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               mInstrumentation.callApplicationOnCreate(app);</div><div class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;            &#125;</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           StrictMode.setThreadPolicy(savedPolicy);</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>data.info是一个LoadeApk对象。<br>LoadeApk.data.info.makeApplication()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Application <span class="title">makeApplication</span><span class="params">(<span class="keyword">boolean</span> forceDefaultAppClass,</span></span></div><div class="line">            Instrumentation instrumentation) &#123;</div><div class="line">        <span class="keyword">if</span> (mApplication != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> mApplication;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Application app = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        String appClass = mApplicationInfo.className;</div><div class="line">        <span class="keyword">if</span> (forceDefaultAppClass || (appClass == <span class="keyword">null</span>)) &#123;</div><div class="line">            appClass = <span class="string">"android.app.Application"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            java.lang.ClassLoader cl = getClassLoader();</div><div class="line">            <span class="keyword">if</span> (!mPackageName.equals(<span class="string">"android"</span>)) &#123;</div><div class="line">                initializeJavaContextClassLoader();</div><div class="line">            &#125;</div><div class="line">            ContextImpl appContext = ContextImpl.createAppContext(mActivityThread, <span class="keyword">this</span>);</div><div class="line">            app = mActivityThread.mInstrumentation.newApplication(</div><div class="line">                    cl, appClass, appContext);</div><div class="line">            appContext.setOuterContext(app);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;        &#125;</div><div class="line">        mActivityThread.mAllApplications.add(app);</div><div class="line">        mApplication = app;</div><div class="line"></div><div class="line">    <span class="comment">//传进来的是null，所以这里不会执行，onCreate在上一层执行</span></div><div class="line">        <span class="keyword">if</span> (instrumentation != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                instrumentation.callApplicationOnCreate(app);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ...ignore some code... </div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> app;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>所以最后还是通过Instrumentation.makeApplication()实例化的，这个老板娘真的很厉害呀！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> Application <span class="title">newApplication</span><span class="params">(Class&lt;?&gt; clazz, Context context)</span></span></div><div class="line">            <span class="keyword">throws</span> InstantiationException, IllegalAccessException, </div><div class="line">            ClassNotFoundException &#123;</div><div class="line">        Application app = (Application)clazz.newInstance();</div><div class="line">        app.attach(context);</div><div class="line">        <span class="keyword">return</span> app;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>而且通过反射拿到Application对象之后，直接调用attach()，所以attach()调用是在onCreate()之前的。</p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/zhaokaiqiang1992/article/details/49428287" target="_blank" rel="external">引用</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中使用DownloadManager来下载]]></title>
      <url>http://dalufan.com/2015/11/23/android-DownloadManager-usage/</url>
      <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>在android2.3以后android系统提供了一个系统组件来供其他app调用来下载东西，使用起来非常方便。</p>
<p>例如我们可以拿来下载app的新版本apk，同时在同时注册一个广播接收器来接收下载完成时DownloadManager发出的的广播，然后自动安装程序。</p>
<p>因为通常大家的安装包都比较大，不可能一下子就下载完让用户在界面上等着下载完的话用户体验就非常不好了。如果我们使用DownloadManager来下载就非常好了，用户能去使用app的其他功能。</p>
<a id="more"></a> 
<p>下载需要的权限</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> DownloadManager dManager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);</div><div class="line"><span class="comment">//DownloadManager.Request除了构造函数的Uri必须外，其他设置都为可选设置</span></div><div class="line">Uri uri = Uri.parse(dowloadPath);</div><div class="line">DownloadManager.Request request = <span class="keyword">new</span> Request(uri);</div><div class="line"><span class="comment">// 表示设置下载地址为sd卡的download文件夹，文件名为updata.apk，下载前应保证“download”目录已经创建。</span></div><div class="line">request.setDestinationInExternalPublicDir(<span class="string">"download"</span>, <span class="string">"updata.apk"</span>);</div><div class="line"><span class="comment">//设置下载中通知栏提示的标题</span></div><div class="line">request.setTitle(<span class="string">"标题"</span>);</div><div class="line">request.setDescription(<span class="string">"软件新版本下载"</span>);</div><div class="line"><span class="comment">//表示下载进行中和下载完成的通知栏是否显示。默认只显示下载中通知。</span></div><div class="line"><span class="comment">//VISIBILITY_HIDDEN表示不显示任何通知栏提示，这个需要在AndroidMainfest中添加权限android.permission.DOWNLOAD_WITHOUT_NOTIFICATION.</span></div><div class="line">request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);</div><div class="line"><span class="comment">//表示下载允许的网络类型，默认在任何网络下都允许下载。有NETWORK_MOBILE、NETWORK_WIFI、NETWORK_BLUETOOTH三种及其组合可供选择。如果只允许wifi下载，而当前网络为3g，则下载会等待。</span></div><div class="line">request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI);</div><div class="line"><span class="comment">//设置下载文件的mineType。因为下载管理Ui中点击某个已下载完成文件及下载完成点击通知栏提示都会根据mimeType去打开文件，所以我们可以利用这个属性。</span></div><div class="line">request.setMimeType(<span class="string">"application/vnd.android.package-archive"</span>);</div><div class="line"><span class="comment">// 设置为可被媒体扫描器找到，默认不允许</span></div><div class="line">request.allowScanningByMediaScanner();</div><div class="line"><span class="comment">// 设置为可见和可管理</span></div><div class="line">request.setVisibleInDownloadsUi(<span class="keyword">true</span>);</div><div class="line"><span class="comment">// 获取此次下载的ID</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> refernece = dManager.enqueue(request);</div><div class="line"><span class="comment">//下载完成后，下载管理会发出DownloadManager.ACTION_DOWNLOAD_COMPLETE这个广播</span></div><div class="line"><span class="comment">//点击下载中通知栏提示，系统会对下载的应用单独发送Action为DownloadManager.ACTION_NOTIFICATION_CLICKED广播。(同时下载多个应用，需要其他处理)</span></div><div class="line"><span class="comment">// 注册广播接收器，当下载完成时自动安装</span></div><div class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE);</div><div class="line">BroadcastReceiver receiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">         <span class="keyword">long</span> myDwonloadID = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -<span class="number">1</span>);</div><div class="line">         <span class="keyword">if</span> (refernece == myDwonloadID) &#123;</div><div class="line">            Intent install = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">             Uri downloadFileUri = dManager.getUriForDownloadedFile(refernece);</div><div class="line">             install.setDataAndType(downloadFileUri, <span class="string">"application/vnd.android.package-archive"</span>);</div><div class="line">             install.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">             startActivity(install);</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;;</div><div class="line"> registerReceiver(receiver, filter);</div></pre></td></tr></table></figure>
<p>上面这个只是在当前注册一个广播接收器，退出activity时要记得注销掉广播接收器。而且有一定的局限性，出了这个activity就不能接受到广播了。</p>
<p>所以我比较推荐在AndroidManifest.xml里注册一个广播接收器，这样就算你的应用退出后也能接收到下载完成的广播，然后自动弹出安装界面。</p>
<p>需要修改下代码，把当前下载任务的ID持久化储存起来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">DownloadManager dManager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);</div><div class="line">Uri uri = Uri.parse(dowloadPath);</div><div class="line">DownloadManager.Request request = <span class="keyword">new</span> Request(uri);</div><div class="line"><span class="comment">// 设置下载路径和文件名</span></div><div class="line">request.setDestinationInExternalPublicDir(<span class="string">"download"</span>, <span class="string">"DOTA2资料库.apk"</span>);</div><div class="line">request.setDescription(<span class="string">"DOTA2资料库新版本下载"</span>);</div><div class="line">request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);</div><div class="line">request.setMimeType(<span class="string">"application/vnd.android.package-archive"</span>);</div><div class="line"><span class="comment">// 设置为可被媒体扫描器找到</span></div><div class="line">request.allowScanningByMediaScanner();</div><div class="line"><span class="comment">// 设置为可见和可管理</span></div><div class="line">request.setVisibleInDownloadsUi(<span class="keyword">true</span>);</div><div class="line"><span class="keyword">long</span> refernece = dManager.enqueue(request);</div><div class="line"><span class="comment">// 把当前下载的ID保存起来</span></div><div class="line">SharedPreferences sPreferences = getSharedPreferences(<span class="string">"downloadcomplete"</span>, <span class="number">0</span>);</div><div class="line">sPreferences.edit().putLong(<span class="string">"refernece"</span>, refernece).commit();</div></pre></td></tr></table></figure>
<p>然后我们先写一个我们需要的接收器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdataBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> myDwonloadID = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -<span class="number">1</span>);</div><div class="line">        SharedPreferences sPreferences = context.getSharedPreferences(<span class="string">"downloadcomplete"</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">long</span> refernece = sPreferences.getLong(<span class="string">"refernece"</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (refernece == myDwonloadID) &#123;</div><div class="line">            String serviceString = Context.DOWNLOAD_SERVICE;</div><div class="line">             DownloadManager dManager = (DownloadManager) context.getSystemService(serviceString);</div><div class="line">             Intent install = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">            Uri downloadFileUri = dManager.getUriForDownloadedFile(myDwonloadID);</div><div class="line">             install.setDataAndType(downloadFileUri, <span class="string">"application/vnd.android.package-archive"</span>);</div><div class="line">            install.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">            context.startActivity(install);<span class="number">16</span>         &#125;</div><div class="line">     &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在AndroidManifest.xml的application节点下加入以下代码就行了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;receiver</div><div class="line">             android:name=".UpdataBroadcastReceiver"&gt;</div><div class="line">             &lt;intent-filter&gt;</div><div class="line">                 &lt;action android:name="android.intent.action.DOWNLOAD_COMPLETE" /&gt;</div><div class="line">             &lt;/intent-filter&gt;</div><div class="line">         &lt;/receiver&gt;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://www.cnblogs.com/zhengxt/p/3657833.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">引用</a>&lt;–&gt;<a href="http://www.trinea.cn/android/android-downloadmanager/" target="_blank" rel="external">解释</a>&lt;–&gt;<a href="http://blog.csdn.net/heikefangxian23/article/details/38582261" target="_blank" rel="external">MIME讲解</a>&lt;–&gt;<a href="http://www.trinea.cn/android/android-downloadmanager-pro/" target="_blank" rel="external">DownloadManager功能扩展和bug修改</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Context完全解析]]></title>
      <url>http://dalufan.com/2015/11/22/android-context-learn/</url>
      <content type="html"><![CDATA[<h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>Context相信所有的Android开发人员基本上每天都在接触，因为它太常见了。但是这并不代表Context没有什么东西好讲的，实际上Context有太多小的细节并不被大家所关注，那么今天我们就来学习一下那些你所不知道的细节。</p>
<a id="more"></a> 
<h3 id="0x01-Context类型"><a href="#0x01-Context类型" class="headerlink" title="0x01 Context类型"></a>0x01 Context类型</h3><p>我们知道，Android应用都是使用Java语言来编写的，那么大家可以思考一下，一个Android程序和一个Java程序，他们最大的区别在哪里？划分界限又是什么呢？其实简单点分析，Android程序不像Java程序一样，随便创建一个类，写个main()方法就能跑了，而是要有一个完整的Android工程环境，在这个环境下，我们有像Activity、Service、BroadcastReceiver等系统组件，而这些组件并不是像一个普通的Java对象new一下就能创建实例的了，而是要有它们各自的上下文环境，也就是我们这里讨论的Context。可以这样讲，Context是维持Android程序中各组件能够正常工作的一个核心功能类。</p>
<p>下面我们来看一下Context的继承结构：<br><img src="/article_images/android-context-learn01.png" alt="alt"></p>
<p>Context的继承结构还是稍微有点复杂的，可以看到，直系子类有两个，一个是ContextWrapper，一个是ContextImpl。那么从名字上就可以看出，ContextWrapper是上下文功能的封装类，而ContextImpl则是上下文功能的实现类。而ContextWrapper又有三个直接的子类，ContextThemeWrapper、Service和Application。其中，ContextThemeWrapper是一个带主题的封装类，而它有一个直接子类就是Activity。</p>
<p>那么在这里我们至少看到了几个所比较熟悉的面孔，Activity、Service、还有Application。由此，其实我们就已经可以得出结论了，Context一共有三种类型，分别是Application、Activity和Service。这三个类虽然分别各种承担着不同的作用，但它们都属于Context的一种，而它们具体Context的功能则是由ContextImpl类去实现的。</p>
<p>那么Context到底可以实现哪些功能呢？这个就实在是太多了，弹出Toast、启动Activity、启动Service、发送广播、操作数据库等等等等都需要用到Context。由于Context的具体能力是由ContextImpl类去实现的，因此在绝大多数场景下，Activity、Service和Application这三种类型的Context都是可以通用的。不过有几种场景比较特殊，比如<code>启动Activity，还有弹出Dialog</code>。出于安全原因的考虑，Android是不允许Activity或Dialog凭空出现的，一个Activity的启动必须要建立在另一个Activity的基础之上，也就是以此形成的返回栈。而Dialog则必须在一个Activity上面弹出（除非是System Alert类型的Dialog），因此在这种场景下，我们只能使用Activity类型的Context，否则将会出错。</p>
<h3 id="0x02-Context数量"><a href="#0x02-Context数量" class="headerlink" title="0x02 Context数量"></a>0x02 Context数量</h3><p>那么一个应用程序中到底有多少个Context呢？其实根据上面的Context类型我们就已经可以得出答案了。Context一共有Application、Activity和Service三种类型，因此一个应用程序中Context数量的计算公式就可以这样写：</p>
<p><code>Context数量 = Activity数量 + Service数量 + 1</code></p>
<p>上面的1代表着Application的数量，因为一个应用程序中可以有多个Activity和多个Service，但是只能有一个Application。</p>
<h3 id="0x03-Application-Context的设计"><a href="#0x03-Application-Context的设计" class="headerlink" title="0x03 Application Context的设计"></a>0x03 Application Context的设计</h3><p>基本上每一个应用程序都会有一个自己的Application，并让它继承自系统的Application类，然后在自己的Application类中去封装一些通用的操作。其实这并不是Google所推荐的一种做法，因为这样我们只是把Application当成了一个通用工具类来使用的，而实际上使用一个简单的单例类也可以实现同样的功能。但是根据我的观察，有太多的项目都是这样使用Application的。当然这种做法也并没有什么副作用，只是说明还是有不少人对于Application理解的还有些欠缺。那么这里我们先来对Application的设计进行分析，讲一些大家所不知道的细节，然后再看一下平时使用Application的问题。</p>
<p>首先新建一个MyApplication并让它继承自Application，然后在AndroidManifest.xml文件中对MyApplication进行指定，如下所示：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;application  </div><div class="line">    android:name=".MyApplication"  </div><div class="line">    android:allowBackup="true"  </div><div class="line">    android:icon="@drawable/ic_launcher"  </div><div class="line">    android:label="@string/app_name"  </div><div class="line">    android:theme="@style/AppTheme" &gt;  </div><div class="line">    ......  </div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure>
<p>指定完成后，当我们的程序启动时Android系统就会创建一个MyApplication的实例，如果这里不指定的话就会默认创建一个Application的实例。</p>
<p>前面提到过，现在很多的Application都是被当作通用工具类来使用的，那么既然作为一个通用工具类，我们要怎样才能获取到它的实例呢？如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        MyApplication myApp = (MyApplication) getApplication();  </div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"getApplication is "</span> + myApp);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，代码很简单，只需要调用getApplication()方法就能拿到我们自定义的Application的实例了，打印结果如下所示：</p>
<p><img src="/article_images/android-context-learn02.png" alt="alt"></p>
<p>那么除了getApplication()方法，其实还有一个getApplicationContext()方法，这两个方法看上去好像有点关联，那么它们的区别是什么呢？我们将代码修改一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        MyApplication myApp = (MyApplication) getApplication();  </div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"getApplication is "</span> + myApp);  </div><div class="line">        Context appContext = getApplicationContext();  </div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"getApplicationContext is "</span> + appContext);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样，我们把getApplicationContext()的结果打印了出来，现在重新运行代码，结果如下图所示：同样，我们把getApplicationContext()的结果打印了出来，现在重新运行代码，结果如下图所示：</p>
<p><img src="/article_images/android-context-learn03.png" alt="alt"></p>
<p>咦？好像打印出的结果是一样的呀，连后面的内存地址都是相同的，看来它们是同一个对象。其实这个结果也很好理解，因为前面已经说过了，Application本身就是一个Context，所以这里获取getApplicationContext()得到的结果就是MyApplication本身的实例。</p>
<p>那么有的朋友可能就会问了，既然这两个方法得到的结果都是相同的，那么Android为什么要提供两个功能重复的方法呢？实际上这两个方法在作用域上有比较大的区别。getApplication()方法的语义性非常强，一看就知道是用来获取Application实例的，但是这个方法只有在Activity和Service中才能调用的到。那么也许在绝大多数情况下我们都是在Activity或者Service中使用Application的，但是如果在一些其它的场景，比如BroadcastReceiver中也想获得Application的实例，这时就可以借助getApplicationContext()方法了，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">        MyApplication myApp = (MyApplication) context.getApplicationContext();  </div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"myApp is "</span> + myApp);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是说，getApplicationContext()方法的作用域会更广一些，任何一个Context的实例，只要调用getApplicationContext()方法都可以拿到我们的Application对象。</p>
<p>那么更加细心的朋友会发现，除了这两个方法之外，其实还有一个getBaseContext()方法，这个baseContext又是什么东西呢？我们还是通过打印的方式来验证一下：</p>
<p><img src="/article_images/android-context-learn04.png" alt="alt"></p>
<p>哦？这次得到的是不同的对象了，getBaseContext()方法得到的是一个ContextImpl对象。这个ContextImpl是不是感觉有点似曾相识？回去看一下Context的继承结构图吧，ContextImpl正是上下文功能的实现类。也就是说像Application、Activity这样的类其实并不会去具体实现Context的功能，而仅仅是做了一层接口封装而已，Context的具体功能都是由ContextImpl类去完成的。那么这样的设计到底是怎么实现的呢？我们还是来看一下源码吧。因为Application、Activity、Service都是直接或间接继承自ContextWrapper的，我们就直接看ContextWrapper的源码，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * Proxying implementation of Context that simply delegates all of its calls to </div><div class="line"> * another Context.  Can be subclassed to modify behavior without changing </div><div class="line"> * the original Context. </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextWrapper</span> <span class="keyword">extends</span> <span class="title">Context</span> </span>&#123;  </div><div class="line">    Context mBase;  </div><div class="line">      </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * Set the base context for this ContextWrapper.  All calls will then be </div><div class="line">     * delegated to the base context.  Throws </div><div class="line">     * IllegalStateException if a base context has already been set. </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@param</span> base The new base context for this wrapper. </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (mBase != <span class="keyword">null</span>) &#123;  </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Base context already set"</span>);  </div><div class="line">        &#125;  </div><div class="line">        mBase = base;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * <span class="doctag">@return</span> the base context as set by the constructor or setBaseContext </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">getBaseContext</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBase;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> AssetManager <span class="title">getAssets</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBase.getAssets();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBase.getResources();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> ContentResolver <span class="title">getContentResolver</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBase.getContentResolver();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBase.getMainLooper();  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBase.getApplicationContext();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPackageName</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBase.getPackageName();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span> </span>&#123;  </div><div class="line">        mBase.startActivity(intent);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBroadcast</span><span class="params">(Intent intent)</span> </span>&#123;  </div><div class="line">        mBase.sendBroadcast(intent);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Intent <span class="title">registerReceiver</span><span class="params">(  </span></span></div><div class="line">        BroadcastReceiver receiver, IntentFilter filter) &#123;  </div><div class="line">        <span class="keyword">return</span> mBase.registerReceiver(receiver, filter);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterReceiver</span><span class="params">(BroadcastReceiver receiver)</span> </span>&#123;  </div><div class="line">        mBase.unregisterReceiver(receiver);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(Intent service)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBase.startService(service);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">stopService</span><span class="params">(Intent name)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBase.stopService(name);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bindService</span><span class="params">(Intent service, ServiceConnection conn,  </span></span></div><div class="line">            <span class="keyword">int</span> flags) &#123;  </div><div class="line">        <span class="keyword">return</span> mBase.bindService(service, conn, flags);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unbindService</span><span class="params">(ServiceConnection conn)</span> </span>&#123;  </div><div class="line">        mBase.unbindService(conn);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSystemService</span><span class="params">(String name)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBase.getSystemService(name);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    ......  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于ContextWrapper中的方法还是非常多的，我就进行了一些筛选，只贴出来了部分方法。那么上面的这些方法相信大家都是非常熟悉的，getResources()、getPackageName()、getSystemService()等等都是我们经常要用到的方法。那么所有这些方法的实现又是什么样的呢？其实所有ContextWrapper中方法的实现都非常统一，就是调用了mBase对象中对应当前方法名的方法。<br>那么这个mBase对象又是什么呢？我们来看第16行的attachBaseContext()方法，这个方法中传入了一个base参数，并把这个参数赋值给了mBase对象。而attachBaseContext()方法其实是由系统来调用的，它会把ContextImpl对象作为参数传递到attachBaseContext()方法当中，从而赋值给mBase对象，之后ContextWrapper中的所有方法其实都是通过这种委托的机制交由ContextImpl去具体实现的，所以说ContextImpl是上下文功能的实现类是非常准确的。</p>
<p>那么另外再看一下我们刚刚打印的getBaseContext()方法，在第26行。这个方法只有一行代码，就是返回了mBase对象而已，而mBase对象其实就是ContextImpl对象，因此刚才的打印结果也得到了印证。</p>
<h3 id="0x04-使用Application的问题"><a href="#0x04-使用Application的问题" class="headerlink" title="0x04 使用Application的问题"></a>0x04 使用Application的问题</h3><p>虽说Application的用法确实非常简单，但是我们平时的开发工作当中也着实存在着不少Application误用的场景，那么今天就来看一看有哪些比较容易犯错的地方是我们应该注意的。</p>
<p>Application是Context的其中一种类型，那么是否就意味着，只要是Application的实例，就能随时使用Context的各种方法呢？我们来做个实验试一下就知道了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyApplication</span><span class="params">()</span> </span>&#123;  </div><div class="line">        String packageName = getPackageName();  </div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"package name is "</span> + packageName);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个非常简单的自定义Application，我们在MyApplication的构造方法当中获取了当前应用程序的包名，并打印出来。获取包名使用了getPackageName()方法，这个方法就是由Context提供的。那么上面的代码能正常运行吗？跑一下就知道了，你将会看到如下所示的结果：</p>
<p><img src="/article_images/android-context-learn05.png" alt="alt"></p>
<p>应用程序一启动就立刻崩溃了，报的是一个空指针异常。看起来好像挺简单的一段代码，怎么就会成空指针了呢？但是如果你尝试把代码改成下面的写法，就会发现一切正常了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate();  </div><div class="line">        String packageName = getPackageName();  </div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"package name is "</span> + packageName);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下所示：</p>
<p><img src="/article_images/android-context-learn06.png" alt="alt"></p>
<p>在构造方法中调用Context的方法就会崩溃，在onCreate()方法中调用Context的方法就一切正常，那么这两个方法之间到底发生了什么事情呢？我们重新回顾一下ContextWrapper类的源码，ContextWrapper中有一个attachBaseContext()方法，这个方法会将传入的一个Context参数赋值给mBase对象，之后mBase对象就有值了。而我们又知道，所有Context的方法都是调用这个mBase对象的同名方法，那么也就是说如果在mBase对象还没赋值的情况下就去调用Context中的任何一个方法时，就会出现空指针异常，上面的代码就是这种情况。Application中方法的执行顺序如下图所示：</p>
<p><img src="/article_images/android-context-learn07.png" alt="alt"></p>
<p>Application中在onCreate()方法里去初始化各种全局的变量数据是一种比较推荐的做法，但是如果你想把初始化的时间点提前到极致，也可以去重写attachBaseContext()方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;  </div><div class="line">        <span class="comment">// 在这里调用Context的方法会崩溃  </span></div><div class="line">        <span class="keyword">super</span>.attachBaseContext(base);  </div><div class="line">        <span class="comment">// 在这里可以正常调用Context的方法  </span></div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是我们平时在使用Application时需要注意的一个点，下面再来介绍另外一种非常普遍的Application误用情况。</p>
<p>其实Android官方并不太推荐我们使用自定义的Application，基本上只有需要做一些全局初始化的时候可能才需要用到自定义Application，官方文档描述如下：</p>
<p><img src="/article_images/android-context-learn08.png" alt="alt"></p>
<p>但是就我的观察而言，现在自定义Application的使用情况基本上可以达到100%了，也就是我们平时自己写测试demo的时候可能不会使用，正式的项目几乎全部都会使用自定义Application。可是使用归使用，有不少项目对自定义Application的用法并不到位，正如官方文档中所表述的一样，多数项目只是把自定义Application当成了一个通用工具类，而这个功能并不需要借助Application来实现，使用单例可能是一种更加标准的方式。</p>
<p>不过自定义Application也并没有什么副作用，它和单例模式二选一都可以实现同样的功能，但是我见过有一些项目，会把自定义Application和单例模式混合到一起使用，这就让人大跌眼镜了。一个非常典型的例子如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyApplication app;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyApplication <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (app == <span class="keyword">null</span>) &#123;  </div><div class="line">            app = <span class="keyword">new</span> MyApplication();  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> app;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就像单例模式一样，这里提供了一个getInstance()方法，用于获取MyApplication的实例，有了这个实例之后，就可以调用MyApplication中的各种工具方法了。<br>但是这种写法对吗？这种写法是大错特错！因为我们知道Application是属于系统组件，系统组件的实例是要由系统来去创建的，如果这里我们自己去new一个MyApplication的实例，它就只是一个普通的Java对象而已，而不具备任何Context的能力。有很多人向我反馈使用 LitePal 时发生了空指针错误其实都是由于这个原因，因为你提供给LitePal的只是一个普通的Java对象，它无法通过这个对象来进行Context操作。</p>
<p>那么如果真的想要提供一个获取MyApplication实例的方法，比较标准的写法又是什么样的呢？其实这里我们只需谨记一点，Application全局只有一个，它本身就已经是单例了，无需再用单例模式去为它做多重实例保护了，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyApplication app;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyApplication <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> app;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate();  </div><div class="line">        app = <span class="keyword">this</span>;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getInstance()方法可以照常提供，但是里面不要做任何逻辑判断，直接返回app对象就可以了，而app对象又是什么呢？在onCreate()方法中我们将app对象赋值成this，this就是当前Application的实例，那么app也就是当前Application的实例了。</p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/guolin_blog/article/details/47028975" target="_blank" rel="external">引用</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android项目重构的整理-实现篇]]></title>
      <url>http://dalufan.com/2015/11/21/android-reconstruction-achievement/</url>
      <content type="html"><![CDATA[<h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>前两篇文章已经讲了我的项目开始搭建时的架构设计和界面设计，这篇就讲讲具体怎么实现的，以实现最小化可用产品(MVP)的目标，用最简单的方式来搭建架构和实现代码。<br>IDE采用Android Studio，Demo实现的功能为用户注册、登录和展示一个券列表，数据采用我们现有项目的测试数据，接口也是我们项目中的测试接口。</p>
<p><a href="https://github.com/dalufine/kandroid" target="_blank" rel="external">项目地址</a></p>
<a id="more"></a> 
<h3 id="0x01-项目搭建"><a href="#0x01-项目搭建" class="headerlink" title="0x01 项目搭建"></a>0x01 项目搭建</h3><p>根据架构篇所讲的，将项目分为了四个层级：模型层、接口层、核心层、界面层。四个层级之间的关系如下图所示：</p>
<p><img src="/article_images/android-reconstruction-architecture01.jpg" alt="alt"></p>
<p>实现上，在Android Studio分为了相应的四个模块(Module)：model、api、core、app。<br>model为模型层，api为接口层，core为核心层，app为界面层。<br>model、api、core这三个模块的类型为library，app模块的类型为application。<br>四个模块之间的依赖设置为：model没有任何依赖，接口层依赖了模型层，核心层依赖了模型层和接口层，界面层依赖了核心层和模型层。</p>
<p>项目搭建的步骤如下：</p>
<p><strong>1.</strong> 创建新项目，项目名称为KAndroid，包名为com.keegan.kandroid。默认已创建了app模块，查看下app模块下的build.gradle，会看到第一行为：</p>
<p><code>apply plugin: &#39;com.android.application&#39;</code></p>
<p>这行表明了app模块是application类型的。</p>
<p><strong>2.</strong> 分别新建模块model、api、core，Module Type都选为Android Library，在Add an activity to module页面选择Add No Activity，这三个模块做为库使用，并不需要界面。创建完之后，查看相应模块的build.gradle，会看到第一行为：</p>
<p><code>apply plugin: &#39;com.android.library&#39;</code></p>
<p><strong>3.</strong> 建立模块之间的依赖关系。有两种方法可以设置：</p>
<p>第一种：通过右键模块，然后Open Module Settings，选择模块的Dependencies，点击左下方的加号，选择Module dependency，最后选择要依赖的模块，下图为api模块添加了model依赖；</p>
<p><img src="/article_images/android-reconstruction-architecture03.jpeg" alt="alt"></p>
<p>第二种：直接在模块的build.gradle设置。打开build.gradle，在最后的dependencies一项里面添加新的一行：compile project(‘:ModuleName’)，比如app模块添加对model模块和core模块依赖之后的dependencies如下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.0.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':model'</span>)</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':core'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面两种方式的任意一种，创建了模块之间的依赖关系之后，每个模块的build.gradle的dependencies项的结果将会如下：</p>
<p>model:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line">    compile 'com.android.support:appcompat-v7:22.0.0'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>api:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">       <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line">       compile 'com.android.support:appcompat-v7:22.0.0'</div><div class="line">       compile <span class="title">project</span><span class="params">(<span class="string">':model'</span>)</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>core:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line">    compile 'com.android.support:appcompat-v7:22.0.0'</div><div class="line">    compile <span class="title">project</span><span class="params">(<span class="string">':model'</span>)</span></div><div class="line">    compile <span class="title">project</span><span class="params">(<span class="string">':api'</span>)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>app:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line">    compile 'com.android.support:appcompat-v7:22.0.0'</div><div class="line">    compile <span class="title">project</span><span class="params">(<span class="string">':model'</span>)</span></div><div class="line">    compile <span class="title">project</span><span class="params">(<span class="string">':core'</span>)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="0x02-创建业务对象模型"><a href="#0x02-创建业务对象模型" class="headerlink" title="0x02 创建业务对象模型"></a>0x02 创建业务对象模型</h3><p>业务对象模型统一存放于model模块，是对业务数据的封装，大部分都是从接口传过来的对象，因此，其属性也与接口传回的对象属性相一致。在这个Demo里，只有一个业务对象模型，封装了券的基本信息，以下是该实体类的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 券的业务模型类，封装了券的基本信息。</div><div class="line"> * 券分为了三种类型：现金券、抵扣券、折扣券。</div><div class="line"> * 现金券是拥有固定面值的券，有固定的售价；</div><div class="line"> * 抵扣券是满足一定金额后可以抵扣的券，比如满100减10元；</div><div class="line"> * 折扣券是可以打折的券。</div><div class="line"> *</div><div class="line"> * <span class="doctag">@version</span> 1.0 创建时间：15/6/21</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CouponBO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8022957276104379230L</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;                <span class="comment">// 券id</span></div><div class="line">    <span class="keyword">private</span> String name;           <span class="comment">// 券名称</span></div><div class="line">    <span class="keyword">private</span> String introduce;      <span class="comment">// 券简介</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> modelType;         <span class="comment">// 券类型，1为现金券，2为抵扣券，3为折扣券</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> faceValue;      <span class="comment">// 现金券的面值</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> estimateAmount; <span class="comment">// 现金券的售价</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> debitAmount;    <span class="comment">// 抵扣券的抵扣金额</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> discount;       <span class="comment">// 折扣券的折扣率（0-100）</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> miniAmount;     <span class="comment">// 抵扣券和折扣券的最小使用金额</span></div><div class="line"></div><div class="line">    <span class="comment">// TODO 所有属性的getter和setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="0x03-接口层的封装"><a href="#0x03-接口层的封装" class="headerlink" title="0x03 接口层的封装"></a>0x03 接口层的封装</h3><p>在这个Demo里，提供了4个接口：一个发送验证码的接口、一个注册接口、一个登录接口、一个获取券列表的接口。这4个接口具体如下：</p>
<h4 id="发送验证码接口"><a href="#发送验证码接口" class="headerlink" title="发送验证码接口"></a>发送验证码接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">URL：http:<span class="comment">//uat.b.quancome.com/platform/api</span></div><div class="line">参数：</div><div class="line"></div><div class="line">参数名 描述  类型</div><div class="line">appKey  ANDROID_KCOUPON String</div><div class="line">method  service.sendSmsCode4Register    String</div><div class="line">phoneNum    手机号码    String</div><div class="line">输出样例：</div><div class="line"></div><div class="line">&#123; <span class="string">"event"</span>: <span class="string">"0"</span>, <span class="string">"msg"</span>: <span class="string">"success"</span> &#125;</div></pre></td></tr></table></figure>
<h4 id="注册接口"><a href="#注册接口" class="headerlink" title="注册接口"></a>注册接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">URL：http:<span class="comment">//uat.b.quancome.com/platform/api</span></div><div class="line">参数：</div><div class="line"></div><div class="line">参数名 描述  类型</div><div class="line">appKey  ANDROID_KCOUPON String</div><div class="line">method  customer.registerByPhone    String</div><div class="line">phoneNum    手机号码    String</div><div class="line">code    验证码 String</div><div class="line">password    MD5加密密码 String</div><div class="line">输出样例：</div><div class="line"></div><div class="line">&#123; <span class="string">"event"</span>: <span class="string">"0"</span>, <span class="string">"msg"</span>: <span class="string">"success"</span> &#125;</div></pre></td></tr></table></figure>
<h4 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">URL：http:<span class="comment">//uat.b.quancome.com/platform/api</span></div><div class="line">其他参数：</div><div class="line"></div><div class="line">参数名 描述  类型</div><div class="line">appKey  ANDROID_KCOUPON String</div><div class="line">method  customer.loginByApp String</div><div class="line">loginName   登录名（手机号）    String</div><div class="line">password    MD5加密密码 String</div><div class="line">imei    手机imei串号    String</div><div class="line">loginOS 系统，android为<span class="number">1</span>    <span class="keyword">int</span></div><div class="line">输出样例：</div><div class="line"></div><div class="line">&#123; <span class="string">"event"</span>: <span class="string">"0"</span>, <span class="string">"msg"</span>: <span class="string">"success"</span> &#125;</div></pre></td></tr></table></figure>
<h4 id="券列表"><a href="#券列表" class="headerlink" title="券列表"></a>券列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">URL：http:<span class="comment">//uat.b.quancome.com/platform/api</span></div><div class="line">其他参数：</div><div class="line"></div><div class="line">参数名 描述  类型</div><div class="line">appKey  ANDROID_KCOUPON String</div><div class="line">method  issue.listNewCoupon String</div><div class="line">currentPage 当前页数    <span class="keyword">int</span></div><div class="line">pageSize    每页显示数量  <span class="keyword">int</span></div><div class="line">输出样例：</div><div class="line"></div><div class="line">&#123; <span class="string">"event"</span>: <span class="string">"0"</span>, <span class="string">"msg"</span>: <span class="string">"success"</span>, <span class="string">"maxCount"</span>: <span class="number">125</span>, <span class="string">"maxPage"</span>: <span class="number">7</span>, <span class="string">"currentPage"</span>: <span class="number">1</span>, <span class="string">"pageSize"</span>: <span class="number">20</span>, <span class="string">"objList"</span>:[</div><div class="line">    &#123;<span class="string">"id"</span>: <span class="number">1</span>, <span class="string">"name"</span>: <span class="string">"测试现金券"</span>, <span class="string">"modelType"</span>: <span class="number">1</span>, ...&#125;, </div><div class="line">    &#123;...&#125;, </div><div class="line">    ...</div><div class="line">]&#125;</div></pre></td></tr></table></figure>
<p>在架构篇已经讲过，接口返回的json数据有三种固定结构：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"event"</span>: <span class="string">"0"</span>, <span class="string">"msg"</span>: <span class="string">"success"</span>&#125;</div><div class="line">&#123;<span class="string">"event"</span>: <span class="string">"0"</span>, <span class="string">"msg"</span>: <span class="string">"success"</span>, <span class="string">"obj"</span>:&#123;...&#125;&#125;</div><div class="line">&#123;<span class="string">"event"</span>: <span class="string">"0"</span>, <span class="string">"msg"</span>: <span class="string">"success"</span>, <span class="string">"objList"</span>:[&#123;...&#125;, &#123;...&#125;], <span class="string">"currentPage"</span>: <span class="number">1</span>, <span class="string">"pageSize"</span>: <span class="number">20</span>, <span class="string">"maxCount"</span>: <span class="number">2</span>, <span class="string">"maxPage"</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure>
<p>因此可以封装成实体类，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiResponse</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> String event;    <span class="comment">// 返回码，0为成功</span></div><div class="line">    <span class="keyword">private</span> String msg;      <span class="comment">// 返回信息</span></div><div class="line">    <span class="keyword">private</span> T obj;           <span class="comment">// 单个对象</span></div><div class="line">    <span class="keyword">private</span> T objList;       <span class="comment">// 数组对象</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentPage; <span class="comment">// 当前页数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;    <span class="comment">// 每页显示数量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxCount;    <span class="comment">// 总条数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPage;     <span class="comment">// 总页数</span></div><div class="line"></div><div class="line">    <span class="comment">// 构造函数，初始化code和msg</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApiResponse</span><span class="params">(String event, String msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.event = event;</div><div class="line">        <span class="keyword">this</span>.msg = msg;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断结果是否成功</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> event.equals(<span class="string">"0"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// TODO 所有属性的getter和setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面4个接口，URL和appKey都是一样的，用来区别不同接口的则是method字段，因此，URL和appKey可以统一定义，method则根据不同接口定义不同常量。而除去appKey和method，剩下的参数才是每个接口需要定义的参数。因此，对上面4个接口的定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line">    <span class="comment">// 发送验证码</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SEND_SMS_CODE = <span class="string">"service.sendSmsCode4Register"</span>;</div><div class="line">    <span class="comment">// 注册</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String REGISTER = <span class="string">"customer.registerByPhone"</span>;</div><div class="line">    <span class="comment">// 登录</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String LOGIN = <span class="string">"customer.loginByApp"</span>;</div><div class="line">    <span class="comment">// 券列表</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String LIST_COUPON = <span class="string">"issue.listNewCoupon"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发送验证码</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> phoneNum 手机号码</div><div class="line">     * <span class="doctag">@return</span> 成功时返回：&#123; "event": "0", "msg":"success" &#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">sendSmsCode4Register</span><span class="params">(String phoneNum)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注册</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> phoneNum 手机号码</div><div class="line">     * <span class="doctag">@param</span> code     验证码</div><div class="line">     * <span class="doctag">@param</span> password MD5加密的密码</div><div class="line">     * <span class="doctag">@return</span> 成功时返回：&#123; "event": "0", "msg":"success" &#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">registerByPhone</span><span class="params">(String phoneNum, String code, String password)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 登录</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> loginName 登录名（手机号）</div><div class="line">     * <span class="doctag">@param</span> password  MD5加密的密码</div><div class="line">     * <span class="doctag">@param</span> imei      手机IMEI串号</div><div class="line">     * <span class="doctag">@param</span> loginOS   Android为1</div><div class="line">     * <span class="doctag">@return</span> 成功时返回：&#123; "event": "0", "msg":"success" &#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">loginByApp</span><span class="params">(String loginName, String password, String imei, <span class="keyword">int</span> loginOS)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 券列表</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> currentPage 当前页数</div><div class="line">     * <span class="doctag">@param</span> pageSize    每页显示数量</div><div class="line">     * <span class="doctag">@return</span> 成功时返回：&#123; "event": "0", "msg":"success", "objList":[...] &#125;</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> ApiResponse&lt;List&lt;CouponBO&gt;&gt; listNewCoupon(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Api的实现类则是ApiImpl了，实现类需要封装好请求数据并向服务器发起请求，并将响应结果的数据转为ApiResonse返回。而向服务器发送请求并将响应结果返回的处理则封装到http引擎类去处理。另外，这里引用了gson将json转为对象。ApiImpl的实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiImpl</span> <span class="keyword">implements</span> <span class="title">Api</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String APP_KEY = <span class="string">"ANDROID_KCOUPON"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TIME_OUT_EVENT = <span class="string">"CONNECT_TIME_OUT"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TIME_OUT_EVENT_MSG = <span class="string">"连接服务器失败"</span>;</div><div class="line">    <span class="comment">// http引擎</span></div><div class="line">    <span class="keyword">private</span> HttpEngine httpEngine;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApiImpl</span><span class="params">()</span> </span>&#123;</div><div class="line">        httpEngine = HttpEngine.getInstance();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">sendSmsCode4Register</span><span class="params">(String phoneNum)</span> </span>&#123;</div><div class="line">        Map&lt;String, String&gt; paramMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">        paramMap.put(<span class="string">"appKey"</span>, APP_KEY);</div><div class="line">        paramMap.put(<span class="string">"method"</span>, SEND_SMS_CODE);</div><div class="line">        paramMap.put(<span class="string">"phoneNum"</span>, phoneNum);</div><div class="line"></div><div class="line">        Type type = <span class="keyword">new</span> TypeToken&lt;ApiResponse&lt;Void&gt;&gt;()&#123;&#125;.getType();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> httpEngine.postHandle(paramMap, type);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ApiResponse(TIME_OUT_EVENT, TIME_OUT_EVENT_MSG);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">registerByPhone</span><span class="params">(String phoneNum, String code, String password)</span> </span>&#123;</div><div class="line">        Map&lt;String, String&gt; paramMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">        paramMap.put(<span class="string">"appKey"</span>, APP_KEY);</div><div class="line">        paramMap.put(<span class="string">"method"</span>, REGISTER);</div><div class="line">        paramMap.put(<span class="string">"phoneNum"</span>, phoneNum);</div><div class="line">        paramMap.put(<span class="string">"code"</span>, code);</div><div class="line">        paramMap.put(<span class="string">"password"</span>, EncryptUtil.makeMD5(password));</div><div class="line"></div><div class="line">        Type type = <span class="keyword">new</span> TypeToken&lt;ApiResponse&lt;List&lt;CouponBO&gt;&gt;&gt;()&#123;&#125;.getType();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> httpEngine.postHandle(paramMap, type);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ApiResponse(TIME_OUT_EVENT, TIME_OUT_EVENT_MSG);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">loginByApp</span><span class="params">(String loginName, String password, String imei, <span class="keyword">int</span> loginOS)</span> </span>&#123;</div><div class="line">        Map&lt;String, String&gt; paramMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">        paramMap.put(<span class="string">"appKey"</span>, APP_KEY);</div><div class="line">        paramMap.put(<span class="string">"method"</span>, LOGIN);</div><div class="line">        paramMap.put(<span class="string">"loginName"</span>, loginName);</div><div class="line">        paramMap.put(<span class="string">"password"</span>, EncryptUtil.makeMD5(password));</div><div class="line">        paramMap.put(<span class="string">"imei"</span>, imei);</div><div class="line">        paramMap.put(<span class="string">"loginOS"</span>, String.valueOf(loginOS));</div><div class="line"></div><div class="line">        Type type = <span class="keyword">new</span> TypeToken&lt;ApiResponse&lt;List&lt;CouponBO&gt;&gt;&gt;()&#123;&#125;.getType();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> httpEngine.postHandle(paramMap, type);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ApiResponse(TIME_OUT_EVENT, TIME_OUT_EVENT_MSG);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> ApiResponse&lt;List&lt;CouponBO&gt;&gt; listNewCoupon(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize) &#123;</div><div class="line">        Map&lt;String, String&gt; paramMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">        paramMap.put(<span class="string">"appKey"</span>, APP_KEY);</div><div class="line">        paramMap.put(<span class="string">"method"</span>, LIST_COUPON);</div><div class="line">        paramMap.put(<span class="string">"currentPage"</span>, String.valueOf(currentPage));</div><div class="line">        paramMap.put(<span class="string">"pageSize"</span>, String.valueOf(pageSize));</div><div class="line"></div><div class="line">        Type type = <span class="keyword">new</span> TypeToken&lt;ApiResponse&lt;List&lt;CouponBO&gt;&gt;&gt;()&#123;&#125;.getType();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> httpEngine.postHandle(paramMap, type);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ApiResponse(TIME_OUT_EVENT, TIME_OUT_EVENT_MSG);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEngine</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String SERVER_URL = <span class="string">"http://uat.b.quancome.com/platform/api"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String REQUEST_MOTHOD = <span class="string">"POST"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String ENCODE_TYPE = <span class="string">"UTF-8"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> TIME_OUT = <span class="number">15000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpEngine instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HttpEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpEngine <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> HttpEngine();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">postHandle</span><span class="params">(Map&lt;String, String&gt; paramsMap, Type typeOfT)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        String data = joinParams(paramsMap);</div><div class="line">        HttpUrlConnection connection = getConnection();</div><div class="line">        connection.setRequestProperty(<span class="string">"Content-Length"</span>, String.valueOf(data.getBytes().length));</div><div class="line">        connection.connect();</div><div class="line">        OutputStream os = connection.getOutputStream();</div><div class="line">        os.write(data.getBytes());</div><div class="line">        os.flush();</div><div class="line">        <span class="keyword">if</span> (connection.getResponseCode() == <span class="number">200</span>) &#123;</div><div class="line">            <span class="comment">// 获取响应的输入流对象</span></div><div class="line">            InputStream is = connection.getInputStream();</div><div class="line">            <span class="comment">// 创建字节输出流对象</span></div><div class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">            <span class="comment">// 定义读取的长度</span></div><div class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">            <span class="comment">// 定义缓冲区</span></div><div class="line">            <span class="keyword">byte</span> buffer[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="comment">// 按照缓冲区的大小，循环读取</span></div><div class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">// 根据读取的长度写入到os对象中</span></div><div class="line">                baos.write(buffer, <span class="number">0</span>, len);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 释放资源</span></div><div class="line">            is.close();</div><div class="line">            baos.close();</div><div class="line">            connection.disconnect();</div><div class="line">            <span class="comment">// 返回字符串</span></div><div class="line">            <span class="keyword">final</span> String result = <span class="keyword">new</span> String(baos.toByteArray());</div><div class="line">            Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">            <span class="keyword">return</span> gson.fromJson(result, typeOfT);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            connection.disconnect();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> HttpURLConnection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</div><div class="line">        HttpURLConnection connection = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// 初始化connection</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 根据地址创建URL对象</span></div><div class="line">            URL url = <span class="keyword">new</span> URL(SERVER_URL);</div><div class="line">            <span class="comment">// 根据URL对象打开链接</span></div><div class="line">            connection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="comment">// 设置请求的方式</span></div><div class="line">            connection.setRequestMethod(REQUEST_MOTHOD);</div><div class="line">            <span class="comment">// 发送POST请求必须设置允许输入，默认为true</span></div><div class="line">            connection.setDoInput(<span class="keyword">true</span>);</div><div class="line">            <span class="comment">// 发送POST请求必须设置允许输出</span></div><div class="line">            connection.setDoOutput(<span class="keyword">true</span>);</div><div class="line">            <span class="comment">// 设置不使用缓存</span></div><div class="line">            connection.setUseCaches(<span class="keyword">false</span>);</div><div class="line">            <span class="comment">// 设置请求的超时时间</span></div><div class="line">            connection.setReadTimeout(TIME_OUT);</div><div class="line">            connection.setConnectTimeout(TIME_OUT);</div><div class="line">            connection.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">            connection.setRequestProperty(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>);</div><div class="line">            connection.setRequestProperty(<span class="string">"Response-Type"</span>, <span class="string">"json"</span>);</div><div class="line">            connection.setChunkedStreamingMode(<span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> connection;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">joinParams</span><span class="params">(Map&lt;String, String&gt; paramsMap)</span> </span>&#123;</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (String key : paramsMap.keySet()) &#123;</div><div class="line">            stringBuilder.append(key);</div><div class="line">            stringBuilder.append(<span class="string">"="</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                stringBuilder.append(URLEncoder.encode(paramsMap.get(key), ENCODE_TYPE));</div><div class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            stringBuilder.append(<span class="string">"&amp;"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stringBuilder.substring(<span class="number">0</span>, stringBuilder.length() - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，接口层的封装就完成了。接下来再往上看看核心层吧。</p>
<h3 id="0x04-核心层的逻辑"><a href="#0x04-核心层的逻辑" class="headerlink" title="0x04 核心层的逻辑"></a>0x04 核心层的逻辑</h3><p>核心层处于接口层和界面层之间，向下调用Api，向上提供Action，它的核心任务就是处理复杂的业务逻辑。先看看我对Action的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppAction</span> </span>&#123;</div><div class="line">    <span class="comment">// 发送手机验证码</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSmsCode</span><span class="params">(String phoneNum, ActionCallbackListener&lt;Void&gt; listener)</span></span>;</div><div class="line">    <span class="comment">// 注册</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String phoneNum, String code, String password, ActionCallbackListener&lt;Void&gt; listener)</span></span>;</div><div class="line">    <span class="comment">// 登录</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String loginName, String password, ActionCallbackListener&lt;Void&gt; listener)</span></span>;</div><div class="line">    <span class="comment">// 按分页获取券列表</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listCoupon</span><span class="params">(<span class="keyword">int</span> currentPage, ActionCallbackListener&lt;List&lt;CouponBO&gt;&gt; listener)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，和Api接口对比就会发现，参数并不一致。登录并没有iemi和loginOS的参数，获取券列表的参数里也少了pageSize。这是因为，这几个参数，跟界面其实并没有直接关系。Action只要定义好跟界面相关的就可以了，其他需要的参数，在具体实现时再去获取。<br>另外，大部分action的处理都是异步的，因此，添加了回调监听器ActionCallbackListener，回调监听器的泛型则是返回的对象数据类型，例如获取券列表，返回的数据类型就是List，没有对象数据时则为Void。回调监听器只定义了成功和失败的方法，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActionCallbackListener</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 成功时调用</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> data 返回的数据</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(T data)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 失败时调用</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> errorEvemt 错误码</div><div class="line">     * <span class="doctag">@param</span> message    错误信息</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String errorEvent, String message)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来再看看Action的实现。首先，要获取imei，那就需要传入一个Context；另外，还需要loginOS和pageSize，这定义为常量就可以了；还有，要调用接口层，所以还需要Api实例。而接口的实现分为两步，第一步做参数检查，第二步用异步任务调用Api。具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppActionImpl</span> <span class="keyword">implements</span> <span class="title">AppAction</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOGIN_OS = <span class="number">1</span>; <span class="comment">// 表示Android</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PAGE_SIZE = <span class="number">20</span>; <span class="comment">// 默认每页20条</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> Api api;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppActionImpl</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        <span class="keyword">this</span>.api = <span class="keyword">new</span> ApiImpl();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSmsCode</span><span class="params">(<span class="keyword">final</span> String phoneNum, <span class="keyword">final</span> ActionCallbackListener&lt;Void&gt; listener)</span> </span>&#123;</div><div class="line">        <span class="comment">// 参数为空检查</span></div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(phoneNum)) &#123;</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onFailure(ErrorEvent.PARAM_NULL, <span class="string">"手机号为空"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 参数合法性检查</span></div><div class="line">        Pattern pattern = Pattern.compile(<span class="string">"1\\d&#123;10&#125;"</span>);</div><div class="line">        Matcher matcher = pattern.matcher(phoneNum);</div><div class="line">        <span class="keyword">if</span> (!matcher.matches()) &#123;</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onFailure(ErrorEvent.PARAM_ILLEGAL, <span class="string">"手机号不正确"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 请求Api</span></div><div class="line">        <span class="keyword">new</span> AsyncTask&lt;Void, Void, ApiResponse&lt;Void&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> ApiResponse&lt;Void&gt; <span class="title">doInBackground</span><span class="params">(Void... voids)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> api.sendSmsCode4Register(phoneNum);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(ApiResponse&lt;Void&gt; response)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; response != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (response.isSuccess()) &#123;</div><div class="line">                        listener.onSuccess(<span class="keyword">null</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        listener.onFailure(response.getEvent(), response.getMsg());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;.execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="keyword">final</span> String phoneNum, <span class="keyword">final</span> String code, <span class="keyword">final</span> String password, <span class="keyword">final</span> ActionCallbackListener&lt;Void&gt; listener)</span> </span>&#123;</div><div class="line">        <span class="comment">// 参数为空检查</span></div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(phoneNum)) &#123;</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onFailure(ErrorEvent.PARAM_NULL, <span class="string">"手机号为空"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(code)) &#123;</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onFailure(ErrorEvent.PARAM_NULL, <span class="string">"验证码为空"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(password)) &#123;</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onFailure(ErrorEvent.PARAM_NULL, <span class="string">"密码为空"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 参数合法性检查</span></div><div class="line">        Pattern pattern = Pattern.compile(<span class="string">"1\\d&#123;10&#125;"</span>);</div><div class="line">        Matcher matcher = pattern.matcher(phoneNum);</div><div class="line">        <span class="keyword">if</span> (!matcher.matches()) &#123;</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onFailure(ErrorEvent.PARAM_ILLEGAL, <span class="string">"手机号不正确"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// TODO 长度检查，密码有效性检查等</span></div><div class="line"></div><div class="line">        <span class="comment">// 请求Api</span></div><div class="line">        <span class="keyword">new</span> AsyncTask&lt;Void, Void, ApiResponse&lt;Void&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> ApiResponse&lt;Void&gt; <span class="title">doInBackground</span><span class="params">(Void... voids)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> api.registerByPhone(phoneNum, code, password);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(ApiResponse&lt;Void&gt; response)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; response != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (response.isSuccess()) &#123;</div><div class="line">                        listener.onSuccess(<span class="keyword">null</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        listener.onFailure(response.getEvent(), response.getMsg());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;.execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(<span class="keyword">final</span> String loginName, <span class="keyword">final</span> String password, <span class="keyword">final</span> ActionCallbackListener&lt;Void&gt; listener)</span> </span>&#123;</div><div class="line">        <span class="comment">// 参数为空检查</span></div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(loginName)) &#123;</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onFailure(ErrorEvent.PARAM_NULL, <span class="string">"登录名为空"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(password)) &#123;</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onFailure(ErrorEvent.PARAM_NULL, <span class="string">"密码为空"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// TODO 长度检查，密码有效性检查等        </span></div><div class="line"></div><div class="line">        <span class="comment">// 请求Api</span></div><div class="line">        <span class="keyword">new</span> AsyncTask&lt;Void, Void, ApiResponse&lt;Void&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> ApiResponse&lt;Void&gt; <span class="title">doInBackground</span><span class="params">(Void... voids)</span> </span>&#123;</div><div class="line">                TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);</div><div class="line">                String imei = telephonyManager.getDeviceId();</div><div class="line">                <span class="keyword">return</span> api.loginByApp(loginName, password, imei, LOGIN_OS);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(ApiResponse&lt;Void&gt; response)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; response != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (response.isSuccess()) &#123;</div><div class="line">                        listener.onSuccess(<span class="keyword">null</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        listener.onFailure(response.getEvent(), response.getMsg());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;.execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listCoupon</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> currentPage, <span class="keyword">final</span> ActionCallbackListener&lt;List&lt;CouponBO&gt;&gt; listener)</span> </span>&#123;</div><div class="line">        <span class="comment">// 参数检查</span></div><div class="line">        <span class="keyword">if</span> (currentPage &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onFailure(ErrorEvent.PARAM_ILLEGAL, <span class="string">"当前页数小于零"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// TODO 添加缓存</span></div><div class="line"></div><div class="line">        <span class="comment">// 请求Api</span></div><div class="line">        <span class="keyword">new</span> AsyncTask&lt;Void, Void, ApiResponse&lt;List&lt;CouponBO&gt;&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">protected</span> ApiResponse&lt;List&lt;CouponBO&gt;&gt; doInBackground(Void... voids) &#123;</div><div class="line">                <span class="keyword">return</span> api.listNewCoupon(currentPage, PAGE_SIZE);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(ApiResponse&lt;List&lt;CouponBO&gt;&gt; response)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; response != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (response.isSuccess()) &#123;</div><div class="line">                        listener.onSuccess(response.getObjList());</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        listener.onFailure(response.getEvent(), response.getMsg());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;.execute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单的实现代码就是这样，其实，这还有很多地方可以优化，比如，将参数为空的检查、手机号有效性的检查、数字型范围的检查等等，都可以抽成独立的方法，从而减少重复代码的编写。异步任务里的代码也一样，都是可以通过重构优化的。另外，需要扩展时，比如添加缓存，那就在调用Api之前处理。<br>核心层的逻辑就是这样了。最后就到界面层了。</p>
<h3 id="0x05-界面层"><a href="#0x05-界面层" class="headerlink" title="0x05 界面层"></a>0x05 界面层</h3><p>在这个Demo里，只有三个页面：登录页、注册页、券列表页。在这里，也会遵循界面篇提到的三个基本原则：规范性、单一性、简洁性。<br>首先，界面层需要调用核心层的Action，而这会在整个应用级别都用到，因此，Action的实例最好放在Application里。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> AppAction appAction;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        appAction = <span class="keyword">new</span> AppActionImpl(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> AppAction <span class="title">getAppAction</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> appAction;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，一个Activity的基类也是很有必要的，可以减少很多重复的工作。基类的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">KBaseActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</div><div class="line">    <span class="comment">// 上下文实例</span></div><div class="line">    <span class="keyword">public</span> Context context;</div><div class="line">    <span class="comment">// 应用全局的实例</span></div><div class="line">    <span class="keyword">public</span> KApplication application;</div><div class="line">    <span class="comment">// 核心层的Action实例</span></div><div class="line">    <span class="keyword">public</span> AppAction appAction;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        context = getApplicationContext();</div><div class="line">        application = (KApplication) <span class="keyword">this</span>.getApplication();</div><div class="line">        appAction = application.getAppAction();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再看看登录的Activity：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">KBaseActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EditText phoneEdit;</div><div class="line">    <span class="keyword">private</span> EditText passwordEdit;</div><div class="line">    <span class="keyword">private</span> Button loginBtn;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_login);</div><div class="line">        <span class="comment">// 初始化View</span></div><div class="line">        initViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        getMenuInflater().inflate(R.menu.menu_login, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="comment">// 如果是注册按钮</span></div><div class="line">        <span class="keyword">if</span> (id == R.id.action_register) &#123;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, RegisterActivity.class);</div><div class="line">            startActivity(intent);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 初始化View</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        phoneEdit = (EditText) findViewById(R.id.edit_phone);</div><div class="line">        passwordEdit = (EditText) findViewById(R.id.edit_password);</div><div class="line">        loginBtn = (Button) findViewById(R.id.btn_login);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 准备登录</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toLogin</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        String loginName = phoneEdit.getText().toString();</div><div class="line">        String password = passwordEdit.getText().toString();</div><div class="line">        loginBtn.setEnabled(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">this</span>.appAction.login(loginName, password, <span class="keyword">new</span> ActionCallbackListener&lt;Void&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Void data)</span> </span>&#123;</div><div class="line">                Toast.makeText(context, R.string.toast_login_success, Toast.LENGTH_SHORT).show();</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(context, CouponListActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String errorEvent, String message)</span> </span>&#123;</div><div class="line">                Toast.makeText(context, message, Toast.LENGTH_SHORT).show();</div><div class="line">                loginBtn.setEnabled(<span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>登录页的布局文件则如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.keegan.kandroid.activity.LoginActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/edit_phone"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"@dimen/edit_vertical_margin"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"@dimen/edit_vertical_margin"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"@string/hint_phone"</span></div><div class="line">        <span class="attr">android:inputType</span>=<span class="string">"phone"</span></div><div class="line">        <span class="attr">android:singleLine</span>=<span class="string">"true"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/edit_password"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"@dimen/edit_vertical_margin"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"@dimen/edit_vertical_margin"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"@string/hint_password"</span></div><div class="line">        <span class="attr">android:inputType</span>=<span class="string">"textPassword"</span></div><div class="line">        <span class="attr">android:singleLine</span>=<span class="string">"true"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_login"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"@dimen/btn_vertical_margin"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"@dimen/btn_vertical_margin"</span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"toLogin"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/btn_login"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到，EditText的id命名统一以edit开头，而在Activity里的控件变量名则以Edit结尾。按钮的onClick也统一用toXXX的方式命名，明确表明这是一个将要做的动作。还有，string，dimen也都统一在相应的资源文件里按照相应的规范去定义。<br>注册页和登陆页差不多，这里就不展示代码了。主要再看看券列表页，因为用到了ListView，ListView需要添加适配器。实际上，适配器很多代码都是可以复用的，因此，我抽象了一个适配器的基类，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">KBaseAdapter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> Context context;</div><div class="line">    <span class="keyword">protected</span> LayoutInflater inflater;</div><div class="line">    <span class="keyword">protected</span> List&lt;T&gt; itemList = <span class="keyword">new</span> ArrayList&lt;T&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KBaseAdapter</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        inflater = LayoutInflater.from(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断数据是否为空</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 为空返回true，不为空返回false</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> itemList.isEmpty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在原有的数据上添加新数据</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> itemList</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItems</span><span class="params">(List&lt;T&gt; itemList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.itemList.addAll(itemList);</div><div class="line">        notifyDataSetChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置为新的数据，旧数据会被清空</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> itemList</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(List&lt;T&gt; itemList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.itemList.clear();</div><div class="line">        <span class="keyword">this</span>.itemList = itemList;</div><div class="line">        notifyDataSetChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 清空数据</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearItems</span><span class="params">()</span> </span>&#123;</div><div class="line">        itemList.clear();</div><div class="line">        notifyDataSetChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> itemList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> itemList.get(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> i, View view, ViewGroup viewGroup)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个抽象基类集成了设置数据的方法，每个具体的适配器类只要再实现各自的getView方法就可以了。本Demo的券列表的适配器如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CouponListAdapter</span> <span class="keyword">extends</span> <span class="title">KBaseAdapter</span>&lt;<span class="title">CouponBO</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CouponListAdapter</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</div><div class="line">        ViewHolder holder;</div><div class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">            view = inflater.inflate(R.layout.item_list_coupon, viewGroup, <span class="keyword">false</span>);</div><div class="line">            holder = <span class="keyword">new</span> ViewHolder();</div><div class="line">            holder.titleText = (TextView) view.findViewById(R.id.text_item_title);</div><div class="line">            holder.infoText = (TextView) view.findViewById(R.id.text_item_info);</div><div class="line">            holder.priceText = (TextView) view.findViewById(R.id.text_item_price);</div><div class="line">            view.setTag(holder);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            holder = (ViewHolder) view.getTag();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        CouponBO coupon = itemList.get(i);</div><div class="line">        holder.titleText.setText(coupon.getName());</div><div class="line">        holder.infoText.setText(coupon.getIntroduce());</div><div class="line">        SpannableString priceString;</div><div class="line">        <span class="comment">// 根据不同的券类型展示不同的价格显示方式</span></div><div class="line">        <span class="keyword">switch</span> (coupon.getModelType()) &#123;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">case</span> CouponBO.TYPE_CASH:</div><div class="line">                priceString = CouponPriceUtil.getCashPrice(context, coupon.getFaceValue(), coupon.getEstimateAmount());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> CouponBO.TYPE_DEBIT:</div><div class="line">                priceString = CouponPriceUtil.getVoucherPrice(context, coupon.getDebitAmount(), coupon.getMiniAmount());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> CouponBO.TYPE_DISCOUNT:</div><div class="line">                priceString = CouponPriceUtil.getDiscountPrice(context, coupon.getDiscount(), coupon.getMiniAmount());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        holder.priceText.setText(priceString);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        TextView titleText;</div><div class="line">        TextView infoText;</div><div class="line">        TextView priceText;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而券列表的Activity简单实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CouponListActivity</span> <span class="keyword">extends</span> <span class="title">KBaseActivity</span> <span class="keyword">implements</span> <span class="title">SwipeRefreshLayout</span>.<span class="title">OnRefreshListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SwipeRefreshLayout swipeRefreshLayout;</div><div class="line">    <span class="keyword">private</span> ListView listView;</div><div class="line">    <span class="keyword">private</span> CouponListAdapter listAdapter;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentPage = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_coupon_list);</div><div class="line"></div><div class="line">        initViews();</div><div class="line">        getData();</div><div class="line"></div><div class="line">        <span class="comment">// TODO 添加上拉加载更多的功能</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        swipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.swipe_refresh_layout);</div><div class="line">        swipeRefreshLayout.setOnRefreshListener(<span class="keyword">this</span>);</div><div class="line">        listView = (ListView) findViewById(R.id.list_view);</div><div class="line">        listAdapter = <span class="keyword">new</span> CouponListAdapter(<span class="keyword">this</span>);</div><div class="line">        listView.setAdapter(listAdapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.appAction.listCoupon(currentPage, <span class="keyword">new</span> ActionCallbackListener&lt;List&lt;CouponBO&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;CouponBO&gt; data)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!data.isEmpty()) &#123;</div><div class="line">                    <span class="keyword">if</span> (currentPage == <span class="number">1</span>) &#123; <span class="comment">// 第一页</span></div><div class="line">                        listAdapter.setItems(data);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 分页数据</span></div><div class="line">                        listAdapter.addItems(data);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                swipeRefreshLayout.setRefreshing(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String errorEvent, String message)</span> </span>&#123;</div><div class="line">                Toast.makeText(context, message, Toast.LENGTH_SHORT).show();</div><div class="line">                swipeRefreshLayout.setRefreshing(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 需要重置当前页为第一页，并且清掉数据</span></div><div class="line">        currentPage = <span class="number">1</span>;</div><div class="line">        listAdapter.clearItems();</div><div class="line">        getData();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://keeganlee.me/post/android/20150629" target="_blank" rel="external">引用</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android项目重构的整理-界面篇]]></title>
      <url>http://dalufan.com/2015/11/21/android-reconstruction-view/</url>
      <content type="html"><![CDATA[<h3 id="0x01-基本原则"><a href="#0x01-基本原则" class="headerlink" title="0x01 基本原则"></a>0x01 基本原则</h3><ol>
<li>保持规范性：定义好开发规范，包括书写规范、命名规范、注释规范等，并按照规范严格执行；</li>
<li>保持单一性：布局就只做布局，内容就只做内容，各自分离好；每个方法、每个类，也只做一件事情；</li>
<li>保持简洁性：保持代码和结构的简洁，每个方法，每个类，每个包，每个文件，都不要塞太多代码或资源，感觉多了就应该拆分。</li>
</ol>
<a id="more"></a> 
<h3 id="0x02-规范性"><a href="#0x02-规范性" class="headerlink" title="0x02 规范性"></a>0x02 规范性</h3><p>每个人的编码习惯和风格都不同，不说那些缺乏良好编码习惯的开发人员，就连那些已经养成良好编码习惯的人员，很多方面都会不同。比如缩进，有的喜欢4个空格，有的喜欢两个空格；比如变量名，有的喜欢m开头，例如mValue，有的喜欢直接就命名为value。如果不设定好规范，让每个人都按照自己的习惯和风格去编码，久了肯定乱，尤其当团队中存在还没养成良好编码习惯的人员时，更容易乱。所谓无规矩不成方圆，若无规范，久必乱。定义好规范，才能统一风格，才可提高代码可读性，同时也提高了维护性，还减低了引入bug的机会。</p>
<p>开发规范并没有统一的标准，在这里，我只是根据自己的经验对一些点提供一点建议，仅供参考。</p>
<p><strong>缩进</strong></p>
<p>很多人都习惯用Tab缩进，不管是规范4个空格还是2个空格，统一设置好Tab缩进的size就好了，这样就不用让每个人都去敲空格。</p>
<p><strong>命名</strong></p>
<p>一个好的命名，一眼就可以从名字中看到它是干嘛的，做什么用，什么类型等等。举个id命名的例子，看到有些团队喜欢将一些控件缩写，比如TextView缩写为tv，ListView缩写为lv，这种缩写倒是挺简洁的，但是并不能一眼就能看出它是什么，对于不熟悉的人来说，谁知道tv和lv是什么啊，还不如用text和list更明确些。我喜欢的id命名结构为：控件<em>范围</em>功能，例如：edit_login_password，这是一个登录页的密码输入框。</p>
<p><strong>单位</strong></p>
<p>文字大小的单位应该统一用sp，其他元素用dp。因为这两个单位是与设备分辨率无关的，能够解决在不同分辨率设备上显示效果不同的问题。另外，SDK里面，对文字大小系统默认是用sp单位的，但其他元素单位默认却不是dp，而是px的，同时也没有提供dp的设置接口，所以，自己写两个dp和px转换的方法是很有必要的。</p>
<p>最重要的并不在于规范怎么定义，而是在于规范的严格执行。如果规范定义好了，但却不遵守，那规范就等于形同虚设，因此，规范一旦设定，就要严格执行。</p>
<h3 id="0x03-单一性"><a href="#0x03-单一性" class="headerlink" title="0x03 单一性"></a>0x03 单一性</h3><p>我们都知道，面向对象设计中，有一个基本原则就是单一职责原则，它规定一个类应该只有一个发生变化的原因。而这里说的单一性，不只是规定类，也规定了方法、包，甚至到最大层面的分层架构。保持单一性是减低耦合度的关键标准，其目的就是各方面的解耦。架构上的分层就是最大层面的解耦，而方法上的单一就是最小层面的解耦了。</p>
<p><strong>界面的单一</strong></p>
<p>界面上的单一，首先是界面的布局和界面的数据应该分离。这一点，Android已经用layout和Activity做好解耦了，我们只要确保用layout文件排好布局，在Activity展示数据就好了。另外，界面数据的获取和展示也应该分离。很多开发团队习惯将数据的获取和展示都放在Activity或Fragment里完成的，架构篇的读者里也有人反映了这个情况，请求接口、获取数据、检查数据、显示数据更新UI，全都在界面上完成的。这样子的话，当数据的获取发生改变时，比如要添加缓存，这时候界面就需要改动了，当数据的展示也需要修改时，比如某个控件要展示其他数据，界面也一样需要改动，也就是说，界面上已经有两个发生变化的原因，这就违反了单一职责原则。<br>界面上的单一，就是要保持界面上每个维度都做好分离，从界面的布局，到数据的获取，数据的检查，数据的展示。</p>
<p><strong>包和类的单一</strong></p>
<p>定义包之前，需要先想好它的职责是什么，明确定义并确保它只有一个职责。例如，com.keegan.activity，就是activity类的包，不会有其他组件；com.keegan.adapter，就是存放各种适配器的包；com.keegan.util就是工具包了。同样，类的定义，也是需要明确它的单一职责。有些人习惯将adapter写在Activity里，因为觉得这个adapter只在这个Activity里用到，没必要再把它独立出来。以前的我也是这么干的，这么做了一段时间之后，觉得实在糟糕透了，重复的代码无法复用，界面上的一点小需求调整时，很多代码需要跟着调整。后来，进行了一番重构，将所有adapter独立了出来，并抽象出了一个adapter的基类，自此，当需要再添加adapter时，编写的代码量大大减少了，当界面需求调整时，修改的地方也大大减少了。所以，不要让一个类做太多事情，要分离好各种元素，每个元素只做一件简单的事。</p>
<p><strong>方法的单一</strong></p>
<p>方法的单一，表现为一个方法是对一个行为的封装。然而，一个行为又可以拆分为多个步骤，每个步骤其实也是一个更细的行为，又可以封装成一个新的方法。因此，方法嵌套方法是一种常态。那么，保持方法的单一性，关键并不在于怎么定义这个方法的行为，而在于这个行为要怎么拆分成更细的行为。举个例子，通常在Activity的onCreate方法，做数据的初始化，细分出来就分为了：控件的初始化、逻辑变量的初始化、数据的加载和展示。数据的加载和展示可以再细分：从缓存加载数据、从网络加载数据、展示数据。每个细化的行为都应该封装为一个独立的方法，这样，才真正符合方法的单一性(在编写“道听途说”的时候，就是在Fragment基类中定义好逻辑，子类只需要复写其相关方法就行)。</p>
<p><strong>资源文件的单一</strong></p>
<p>Android提供了各种资源文件，strings.xml用来存储字符串，arrays.xml用来存储字符串数组，colors.xml用来存储颜色值，dimens.xml用来存储尺寸值，等等。资源文件的单一，是说所有相关的资源信息要在资源文件里定义并引用到代码或布局文件里，而不是在代码或布局文件里直接定义。很多开发人员，为了图方便，应用界面中出现的字符串经常在代码或布局文件里直接定义的，尺寸值也是，这样造成的结果就是，当某些字符串需要修改时，比如要支持国际化，或一些尺寸值需要修改时，通常是很多地方都要修改。因此，就必须规范好，应用界面中的字符串统一在strings.xml中定义，颜色值统一在colors.xml中定义，尺寸值统一在dimens.xml中定义，代码或布局里需要用到的都去引用资源文件相应的字段。</p>
<p>要保持单一性，必定伴随着重构。需求总会变动，代码总会扩展，扩展了慢慢就会破坏原有的单一性，因此就需要重构，再次保持单一性。<code>不断扩展，不断重构</code>，这样才能不断保持良好的单一性。</p>
<h3 id="0x04-简洁性"><a href="#0x04-简洁性" class="headerlink" title="0x04 简洁性"></a>0x04 简洁性</h3><p>代码最怕的就是臃肿，臃肿的代码可读性差，维护麻烦，扩展更不用说了。没有人会喜欢看臃肿的代码，去维护更痛苦。我看到臃肿的代码，都恨不得即刻进行重构。让代码保持简洁，会让人看得舒服，一目了然，维护和扩展起来也都非常方便。简洁的代码，甚至不需要写注释，只从代码就能让人一眼看懂其做了什么。简洁也并不只表现在代码上，类、包、资源文件等的命名和组织结构等也同样需要保持简洁。</p>
<p>如何保持简洁？这个问题并没有一个标准的答案，但有一个判断是否简洁的简单标准，那就是：<code>直接阅读代码就能够理解代码的意图</code>，如果意图不够明显，那就说明这段代码还不够简洁。类、包、资源文件等等，也是同样的评判标准。下面是我觉得对保持简洁有一定作用的一些操作方法。</p>
<p><strong>包的组织</strong></p>
<p><code>按照组件类型来分包，而不是按业务模块来分包。业务有可能会变</code>，但组件类型是基本不变的。另外，新加入的开发人员，对业务不熟悉，但对组件是很清楚的，理解快，入手也快。</p>
<p><strong>类和接口的命名</strong></p>
<p>组件类的命名添加该组件的后缀，例如：Activity类命名添加Activity后缀，Fragment类命令添加Fragment后缀，适配器添加Adapter后缀，等等。实体类则可添加BO的后缀名称，工具类添加util后缀，接口的实现类添加Impl的后缀。接口的命名也一样，比如，我的项目中，接口层的接口后缀都带上了Api，核心层的接口后缀都带Action。</p>
<p><strong>资源文件的分类</strong></p>
<p>strings.xml文件用来存储应用中的所有字符串，包括页面标题，按钮文字，标签文字，提示文字等等，应该做好分类并统一存放。下面是我推荐的分类方法，如果某个分类的字符串数量太多了，还可以拆分出来放到一个独立的文件，比如页面标题，可以拆分到strings_title.xml文件里，其他资源文件也可以用类似的方式进行处理：</p>
<ul>
<li>页面标题，命名格式为：title_{页面}</li>
<li>按钮文字，命名格式为：btn_{按钮事件}</li>
<li>标签文字，命名格式为：label_{标签文字}</li>
<li>选项卡文字，命名格式为：tab_{选项卡文字}</li>
<li>消息框文字，命名格式为：toast_{消息}</li>
<li>编辑框的提示文字，命名格式为：hint_{提示信息}</li>
<li>图片的描述文字，命名格式为：desc_{图片文字}</li>
<li>对话框的文字，命名格式为：dialog_{文字}</li>
</ul>
<h3 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h3><p>规范性、单一性、简洁性，这三个基本原则是相辅相成的。单一性和简洁性是规范定义的标准，不能脱离这两个原则去定义规范。而对规范的严格执行，则保证了后两个原则的有效性。</p>
<hr>
<p>参考链接：<a href="http://android.jobbole.com/82080/" target="_blank" rel="external">引用</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android项目重构的整理-架构篇]]></title>
      <url>http://dalufan.com/2015/11/21/android-reconstruction-architecture/</url>
      <content type="html"><![CDATA[<h3 id="0x01-四层模型"><a href="#0x01-四层模型" class="headerlink" title="0x01 四层模型"></a>0x01 四层模型</h3><p>我将项目分为了四个层级：模型层、接口层、核心层、界面层。模型层定义了所有的模型；接口层封装了服务器提供的API；核心层处理所有业务逻辑；界面层就处理界面的展示。几个层级之间的关系如下图所示：</p>
<p><img src="/article_images/android-reconstruction-architecture01.jpg" alt="alt"></p>
<a id="more"></a> 
<h3 id="0x02-接口层"><a href="#0x02-接口层" class="headerlink" title="0x02 接口层"></a>0x02 接口层</h3><p>接口层封装了网络底层的API，并提供给核心层调用。刚开始，为了简单，该层的核心类我只定义了4个：</p>
<p><code>PostEngine</code>，请求引擎类，对请求的发送和响应结果进行处理；<br><code>Response</code>，响应类，封装了Http请求返回的数据结构；<br><code>Api</code>，接口类，定义了所有接口方法；<br><code>ApiImpl</code>，接口实现类，实现所有接口方法。</p>
<p>PostEngine将请求封装好发送到服务器，并对响应结果的json数据转化为Response对象返回。Response其实就是响应结果的json数据实体类，json数据是有固定结构的，分为三类，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"event"</span>: <span class="string">"0"</span>, <span class="string">"msg"</span>: <span class="string">"success"</span>&#125;</div><div class="line">&#123;<span class="string">"event"</span>: <span class="string">"0"</span>, <span class="string">"msg"</span>: <span class="string">"success"</span>, <span class="string">"obj"</span>:&#123;...&#125;&#125;</div><div class="line">&#123;<span class="string">"event"</span>: <span class="string">"0"</span>, <span class="string">"msg"</span>: <span class="string">"success"</span>, <span class="string">"objList"</span>:[&#123;...&#125;, &#123;...&#125;], <span class="string">"currentPage"</span>: <span class="number">1</span>, <span class="string">"pageSize"</span>: <span class="number">20</span>, <span class="string">"maxCount"</span>: <span class="number">2</span>, <span class="string">"maxPage"</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure>
<p>event为返回码，0表示成功，msg则是返回的信息，obj是返回的单个数据对象，objList是返回的数据对象数组，currentPage表示当前页，pageSize则表示当前页最多对象数量，maxCount表示对象数据总量，maxPage表示总共有多少页。根据此结构，Response基本的定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> String event;</div><div class="line">    <span class="keyword">private</span> String msg;</div><div class="line">    <span class="keyword">private</span> T obj;</div><div class="line">    <span class="keyword">private</span> T objList;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentPage;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxCount;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPage;</div><div class="line"> </div><div class="line">    <span class="comment">//getter和setter方法</span></div><div class="line">    ...    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个属性名称都要与json数据对应的名称相一致，否则无法转化。obj和objList用泛型则可以转化为相应的具体对象了。</p>
<p>Api接口类定义了所有的接口方法，方法定义类似如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Response&lt;Void&gt; <span class="title">login</span><span class="params">(String loginName, String password)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> Response&lt;VersionInfo&gt; <span class="title">getLastVersion</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> Response&lt;ListCoupon&gt; <span class="title">listNewCoupon</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize)</span></span>;</div></pre></td></tr></table></figure>
<p>ApiImpl则实现所有Api接口了，实现代码类似如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Response&lt;Void&gt; <span class="title">login</span><span class="params">(String loginName, String password)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        String method = Api.LOGIN;</div><div class="line">        List&lt;NameValuePair&gt; params = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</div><div class="line">        params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"loginName"</span>, loginName));</div><div class="line">        params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"password"</span>, EncryptUtil.makeMD5(password)));</div><div class="line">        TypeTokenResponse&lt;Void&gt; typeToken = <span class="keyword">new</span> TypeTokenResponse&lt;Void&gt;()&#123;&#125;;</div><div class="line">        <span class="keyword">return</span> postEngine.specialHandle(method, params, typeToken);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="comment">//异常处理</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现中将请求参数和返回的类型定义好，调用PostEngine对象进行处理。<br>接口层的核心基本上就是这些了。</p>
<h3 id="0x03-核心层"><a href="#0x03-核心层" class="headerlink" title="0x03 核心层"></a>0x03 核心层</h3><p>核心层介于接口层和界面层之间，主要处理业务逻辑，集中做数据处理。向上，给界面层提供数据处理的接口，称为Action；向下，调用接口层向服务器请求数据。向上的Action中定义的方法类似如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCustomer</span><span class="params">(String loginName, CallbackListener&lt;Customer&gt; callbackListener)</span></span>;</div></pre></td></tr></table></figure>
<p>这是一个获取用户信息的方法，因为需要向接口层请求服务器Api数据，所以添加了callback监听器，在callback里对返回的数据结果进行操作。CallbackListener就定义了一个成功和一个失败的方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallbackListener</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 请求的响应结果为成功时调用</div><div class="line">     * <span class="doctag">@param</span> data  返回的数据</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(T data)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 请求的响应结果为失败时调用</div><div class="line">     * <span class="doctag">@param</span> errorEvent 错误码</div><div class="line">     * <span class="doctag">@param</span> message    错误信息</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String errorEvent, String message)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接口的实现基本分为两步：</p>
<ol>
<li>参数检查，检查参数的合法性，包括非空检查、边界检查、有效性检查等；</li>
<li>使用异步任务调用接口层的Api，返回响应结果。</li>
</ol>
<p>需要注意的是，Action是面向界面的，界面上的数据可能需要根据不同情况调用不同的Api。<br>后续扩展可以在这里添加缓存，但也要视不同情况而定，比如有些变化太快的数据，添加缓存就不太适合了。</p>
<h3 id="0x04-界面层"><a href="#0x04-界面层" class="headerlink" title="0x04 界面层"></a>0x04 界面层</h3><p>界面层处于最上层，其核心就是负责界面的展示。</p>
<p>因为公司有为不同商户定制不同app的需求，因此，这里就需要建立多个app的界面，这是一个很麻烦的事情，还好，Android Studio提供了很方便的方法可以大大减少工作量，主要通过设置Gradle，不同app可以添加不同的productFlavors。</p>
<p>界面层package的定义我也并不按照旧版的功能模块划分，而根据不同类型划分，主要分为以下几个包：</p>
<p><img src="/article_images/android-reconstruction-architecture02.jpg" alt="alt"></p>
<p>其中，activity、adapter、fragment各自都有一个基类，做统一的处理，比如定义了一些共用的常量、对象和方法等。</p>
<p>界面层是最复杂，最容易变得混乱不堪，最容易出问题的层级。所以，从架构到代码，很多东西都需要设计好，以及规范好，才能保证程序易维护、易扩展。后续的文章里将会详细分享下我在这方面的经验。</p>
<h3 id="0x05-模型层"><a href="#0x05-模型层" class="headerlink" title="0x05 模型层"></a>0x05 模型层</h3><p>模型层横跨所有层级，封装了所有数据实体类，基本上也是跟json的obj数据一致的，在接口层会将obj转化为相应的实体类，再通过Action传到界面层。另外，模型层还定义了一些常量，比如用户状态、支付状态等。在Api里返回的是用1、2、3这样定义的，而我则用枚举类定义了这些状态。用枚举类定义，就可以避免了边界的检查，同时也更明了，谁会记得那么多1、2、3都代表什么状态呢。然而用枚举类定义的话，就必须能将1、2、3转化为相应的枚举常量。这里，我提供两种实现方式：</p>
<p><strong>1.</strong> 使用gson的@SerializedName标签，比如0为FALSE，1为TRUE，则可以如下定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> BooleanType &#123;</div><div class="line">    <span class="meta">@SerializedName</span>(<span class="string">"0"</span>)</div><div class="line">    FALSE,</div><div class="line">    <span class="meta">@SerializedName</span>(<span class="string">"1"</span>)</div><div class="line">    TRUE</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2.</strong>通过定义一个value，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> BooleanType &#123;</div><div class="line">    FALSE(<span class="string">"0"</span>),</div><div class="line">    TRUE(<span class="string">"1"</span>);</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> String value;</div><div class="line"> </div><div class="line">    BooleanType(String value) &#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过gson的方式，直接访问TRUE或FALSE就会自动序列化为1或0；如果通过第二种方式，因为没有序列化，则需要通过getValue方式获取1或0。</p>
<hr>
<p>参考链接：<a href="http://android.jobbole.com/82076/" target="_blank" rel="external">引用</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Webview与Js之间的另一种交互]]></title>
      <url>http://dalufan.com/2015/11/20/android-webview-js-safe-message/</url>
      <content type="html"><![CDATA[<h3 id="0x01-写在前面"><a href="#0x01-写在前面" class="headerlink" title="0x01 写在前面"></a>0x01 写在前面</h3><p>最近要对一个网页的源代码进行检测，Android Webview中没有直接获取网页源代码的接口，传统的addJavascriptInterface方法存在安全隐患，所以研究了一下Java和Javascript的安全交互。</p>
<h3 id="0x02-Android-Webview漏洞"><a href="#0x02-Android-Webview漏洞" class="headerlink" title="0x02 Android Webview漏洞"></a>0x02 Android Webview漏洞</h3><p>Android Webview有两个非常知名的漏洞:</p>
<p>最近爆出来的UXSS漏洞，可以越过同源策略，获得任意网页的Cookie等信息，Android 4.4以下都有此问题，基本无解，只能重新编译浏览器内核解决，详情可以参考最近移动安全三两事，感兴趣的可以去看一下@RAyH4c劫持微博、QQ空间的视频。<br>成名已久的任意命令执行漏洞，通过<code>addJavascriptInterface</code>方法，Js可以调用Java对象方法，通过反射机制，Js可以直接获取Runtime，从而执行任意命令。Android 4.2以上，可以通过声明@JavascriptInterface保证安全性，4.2以下不能用addJavascriptInterface，需要另谋他法。</p>
<a id="more"></a> 
<h3 id="0x03-Java和Javascript安全交互"><a href="#0x03-Java和Javascript安全交互" class="headerlink" title="0x03 Java和Javascript安全交互"></a>0x03 Java和Javascript安全交互</h3><p>首先要说明几点：</p>
<p><strong>1.</strong> Android Webview中Java调用Js方法很容易，<code>loadUrl(&quot;javascript:isOk()&quot;)</code>就可以调用isOk这个Js方法，但不能直接获取Js方法的返回结果。<br><strong>2.</strong> 传统的方法中，Js获取Java信息可以采用如下方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsObject</span> </span>&#123;</div><div class="line">      <span class="meta">@JavascriptInterface</span></div><div class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"injectedObject"</span>; &#125;</div><div class="line">   &#125;</div><div class="line">   webView.addJavascriptInterface(<span class="keyword">new</span> JsObject(), <span class="string">"injectedObject"</span>);</div><div class="line">   webView.loadData(<span class="string">""</span>, <span class="string">"text/html"</span>, <span class="keyword">null</span>);</div><div class="line">   webView.loadUrl(<span class="string">"javascript:alert(injectedObject.toString())"</span>);</div></pre></td></tr></table></figure>
<p>Java获取Js信息（如通过Js获取网页源代码）可以这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.webkit.WebView;</div><div class="line"><span class="keyword">import</span> android.webkit.WebViewClient;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlSource</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> WebView webView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">        webView = (WebView)findViewById(R.id.webview);</div><div class="line">        webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">        webView.addJavascriptInterface(<span class="keyword">new</span> InJavaScriptLocalObj(), <span class="string">"local_obj"</span>);</div><div class="line">        webView.setWebViewClient(<span class="keyword">new</span> MyWebViewClient());</div><div class="line">        webView.loadUrl(<span class="string">"http://www.cnblogs.com/hibraincol/"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">   <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebViewClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span></span>&#123;  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;   </div><div class="line">            view.loadUrl(url);   </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;   </div><div class="line">        &#125;  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class="line">            Log.d(<span class="string">"WebView"</span>,<span class="string">"onPageStarted"</span>);</div><div class="line">            <span class="keyword">super</span>.onPageStarted(view, url, favicon);</div><div class="line">        &#125;    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">            Log.d(<span class="string">"WebView"</span>,<span class="string">"onPageFinished "</span>);</div><div class="line">            view.loadUrl(<span class="string">"javascript:window.local_obj.showSource('&lt;head&gt;'+"</span> +</div><div class="line">                <span class="string">"document.getElementsByTagName('html')[0].innerHTML+'&lt;/head&gt;');"</span>);</div><div class="line">            <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InJavaScriptLocalObj</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSource</span><span class="params">(String html)</span> </span>&#123;</div><div class="line">            Log.d(<span class="string">"HTML"</span>, html);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3.</strong> 当网页中有超链接跳转时，将会调用WebClient的shouldOverrideUrlLoading方法，若设置 WebViewClient 且该方法返回 true，则说明由应用的代码处理该 url，WebView 不处理，就可以达到拦截跳转的效果。</p>
<p>明白了上面几点，我们可以总结出一个比较安全的Java和Js交互方式：</p>
<blockquote>
<p>可以借鉴Android Intent的思路，Java和Js定义一个url格式如js://<em>,Java调用Js方法，在Js方法中通过window.location.href=’js://</em>?key=value#key1=value1’模拟跳转，被Java的shouldOverrideUrlLoading捕获，函数的返回值可以放在url的参数中。（Js调用Java方法原理相同）<br>这样的交互方式是异步的，如果你想知道调用一个Js方法是否返回了值怎么办？一般Java调用Js方法是在onPageFinished方法中，获得Js返回值是在shouldOverrideUrlLoading方法中，两个方法有个共同的参数webview,所以可以首先webview.setTag(false)，如果捕获到返回结果，则webview.setTag(true),postDelayed在很短时间比如300毫秒后，webview.getTag()检查是否有变化即可。</p>
</blockquote>
<hr>
<p>参考链接：<a href="http://jiajixin.cn/2014/09/16/webview-js-safety/" target="_blank" rel="external">引用</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中处理崩溃的一般方法]]></title>
      <url>http://dalufan.com/2015/11/20/android-error-UncaughtExceptionHandler/</url>
      <content type="html"><![CDATA[<p>对于任何程序来说，崩溃都是一件很难避免的事情，当然Android程序也不例外。在Android程序中，引起崩溃的多属于运行时异常或者错误，对于这些异常我们很难做到类似Checked Exception那样显式捕获，因而最终导致了程序崩溃。本文讲介绍一些如何处理崩溃的实践，比如收集崩溃的stacktrace，甚至如何避免出现程序已停止的对话框。</p>
<a id="more"></a> 
<h3 id="如何收集崩溃信息"><a href="#如何收集崩溃信息" class="headerlink" title="如何收集崩溃信息"></a>如何收集崩溃信息</h3><p>收集崩溃信息，可以更好的修复问题，增强程序的稳定性。Android中的崩溃收集沿用了Java的收集机制，实现起来比较简单。</p>
<h4 id="实现UncaughtExceptionHandler"><a href="#实现UncaughtExceptionHandler" class="headerlink" title="实现UncaughtExceptionHandler"></a>实现UncaughtExceptionHandler</h4><p>我们需要实现UncaughtExceptionHandler接口中的uncaughtException方法。该方法体中最常见的操作就是读取崩溃的stacktrace信息，然后上报到服务器数据便于开发者分析。实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleUncaughtExceptionHandler</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGTAG = <span class="string">"SimpleUncaughtExceptionHandler"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread thread, Throwable ex)</span> </span>&#123;</div><div class="line">      <span class="comment">//读取stacktrace信息</span></div><div class="line">        <span class="keyword">final</span> Writer result = <span class="keyword">new</span> StringWriter();</div><div class="line">        <span class="keyword">final</span> PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(result);</div><div class="line">        ex.printStackTrace(printWriter);</div><div class="line">        String errorReport = result.toString();</div><div class="line">        Log.i(LOGTAG, <span class="string">"uncaughtException errorReport="</span> + errorReport);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除此之外，还建议携带以下信息发送到服务器，帮助更快定位和重现问题。</p>
<ul>
<li>设备唯一ID（基于IMEI或者Android ID等），方便根据用户提供的id，查找崩溃的stacktrace</li>
<li>设备语言与区域 方便重现</li>
<li>应用的版本号</li>
<li>设备的系统版本</li>
<li>设备类型，如平板，手机，TV等</li>
<li>崩溃发生的时间等</li>
<li>注册默认的异常处理</li>
</ul>
<h4 id="注册默认的异常处理"><a href="#注册默认的异常处理" class="headerlink" title="注册默认的异常处理"></a>注册默认的异常处理</h4><p>注册默认的异常处理就是最后的一步，很简单，通常建议放在Application的onCreate方法中进行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroidApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGTAG = <span class="string">"DroidApplication"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        Log.i(LOGTAG, <span class="string">"onCreate"</span>);</div><div class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> SimpleUncaughtExceptionHandler());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>当我们刻意触发一个NullPointerException时，过滤日志<code>adb logcat | grep SimpleUncaughtExceptionHandler</code>类似如下信息，则说明成功了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>): uncaughtException errorReport=java.lang.NullPointerException</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at com.droidyue.avoidforceclosedemo.MainActivity.causeNPE(MainActivity.java:<span class="number">22</span>)</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at com.droidyue.avoidforceclosedemo.MainActivity.onClick(MainActivity.java:<span class="number">29</span>)</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at android.view.View.performClick(View.java:<span class="number">4470</span>)</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at android.view.View$PerformClick.run(View.java:<span class="number">18593</span>)</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at android.os.Handler.handleCallback(Handler.java:<span class="number">733</span>)</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at android.os.Handler.dispatchMessage(Handler.java:<span class="number">95</span>)</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at android.os.Looper.loop(Looper.java:<span class="number">157</span>)</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at android.app.ActivityThread.main(ActivityThread.java:<span class="number">5867</span>)</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at java.lang.reflect.Method.invokeNative(Native Method)</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at java.lang.reflect.Method.invoke(Method.java:<span class="number">515</span>)</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">858</span>)</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">674</span>)</div><div class="line">I/SimpleUncaughtExceptionHandler(<span class="number">22469</span>):  at dalvik.system.NativeStart.main(Native Method)</div></pre></td></tr></table></figure>
<h3 id="不出现应用崩溃对话框"><a href="#不出现应用崩溃对话框" class="headerlink" title="不出现应用崩溃对话框"></a>不出现应用崩溃对话框</h3><p>在Android崩溃的时候，我们都会看到”很抱歉，XXX已停止运行”类似这样的对话框</p>
<p>然而，实际上有些情况下是不需要展示这个对话框的，一个常用的例子，我的程序中一个不太重要的推送服务采用了单独的进程，当这个进程崩溃时，实际上是可以允许不让用户感知的。</p>
<p>如果我们采取主进程仍弹出对话框，其他进程不弹出的策略，那么我们的问题，可以总结成如下三个</p>
<ol>
<li>如何判断进程为主进程还是其他进程，或者某个进程</li>
<li>如何在某些进程不弹出应用崩溃对话框</li>
<li>如何在主进程弹出崩溃对话框</li>
</ol>
<p>既然问题来了，我们就开动挖掘机深挖吧。</p>
<h4 id="进程判定"><a href="#进程判定" class="headerlink" title="进程判定"></a>进程判定</h4><p>进行进程判定也比较容易，首先我们需要获得进程名</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getProcessName</span><span class="params">(Context appContext)</span> </span>&#123;</div><div class="line">    String currentProcessName = <span class="string">""</span>;</div><div class="line">    <span class="keyword">int</span> pid = android.os.Process.myPid();</div><div class="line">    ActivityManager manager = (ActivityManager) appContext.getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line">    <span class="keyword">for</span> (ActivityManager.RunningAppProcessInfo processInfo : manager.getRunningAppProcesses()) &#123;</div><div class="line">        <span class="keyword">if</span> (processInfo.pid == pid) &#123;</div><div class="line">            currentProcessName = processInfo.processName;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> currentProcessName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>判断主进程，则对比进程名是否和包名相同即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mAppContext.getPackageName().equals(processName)</div></pre></td></tr></table></figure>
<p>判断为某个进程，在mainifest这样这样声明</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".DroidService"</span> <span class="attr">android:process</span>=<span class="string">":service"</span>&gt;</span><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其对应的完整进程名为<code>com.droidyue.avoidforceclosedemo:service</code>，我们判断可以使用如下代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"com.droidyue.avoidforceclosedemo:service"</span>.equals(processName);</div></pre></td></tr></table></figure>
<h4 id="不弹框的处理"><a href="#不弹框的处理" class="headerlink" title="不弹框的处理"></a>不弹框的处理</h4><p>不弹框的需要做的就是不调用Android默认的异常处理，当异常出现时，收集完信息，执行进程kill即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.os.Process.killProcess(android.os.Process.myPid());</div></pre></td></tr></table></figure>
<h4 id="主进程保持弹窗的处理"><a href="#主进程保持弹窗的处理" class="headerlink" title="主进程保持弹窗的处理"></a>主进程保持弹窗的处理</h4><p>想要保持弹窗也比较容易，就是调用Android默认的异常处理。</p>
<p>首先需要获得Android默认的异常处理，在设置自定的异常处理之前，将Android默认处理保存起来。如下是在自定义异常处理的构造方法中获取Android默认处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DroidUncaughtExceptionHandler</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    mAppContext = context.getApplicationContext();</div><div class="line">    mDefaultExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在异常处理方法uncaughtException中调用如下方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DefaultExceptionHandler.uncaughtException(thread, ex);</div></pre></td></tr></table></figure>
<p>注意，如果你的应用崩溃后，不调用Android默认的异常处理，也不进行杀死进程，则进程处于不可交互，即UI点击无响应状态。</p>
<h3 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroidApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGTAG = <span class="string">"DroidApplication"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        Log.i(LOGTAG, <span class="string">"onCreate"</span>);</div><div class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> DroidUncaughtExceptionHandler(<span class="keyword">this</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleUncaughtExceptionHandler</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGTAG = <span class="string">"SimpleUncaughtExceptionHandler"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread thread, Throwable ex)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Writer result = <span class="keyword">new</span> StringWriter();</div><div class="line">        <span class="keyword">final</span> PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(result);</div><div class="line">        ex.printStackTrace(printWriter);</div><div class="line">        String errorReport = result.toString();</div><div class="line">        Log.i(LOGTAG, <span class="string">"uncaughtException errorReport="</span> + errorReport);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroidUncaughtExceptionHandler</span>  <span class="keyword">implements</span>  <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGTAG = <span class="string">"DroidUncaughtExceptionHandler"</span>;</div><div class="line">    <span class="keyword">private</span> Thread.UncaughtExceptionHandler mDefaultExceptionHandler;</div><div class="line">    <span class="keyword">private</span> Context mAppContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DroidUncaughtExceptionHandler</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mAppContext = context.getApplicationContext();</div><div class="line">        mDefaultExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getProcessName</span><span class="params">(Context appContext)</span> </span>&#123;</div><div class="line">        String currentProcessName = <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> pid = android.os.Process.myPid();</div><div class="line">        ActivityManager manager = (ActivityManager) appContext.getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line">        <span class="keyword">for</span> (ActivityManager.RunningAppProcessInfo processInfo : manager.getRunningAppProcesses()) &#123;</div><div class="line">            <span class="keyword">if</span> (processInfo.pid == pid) &#123;</div><div class="line">                currentProcessName = processInfo.processName;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> currentProcessName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread thread, Throwable ex)</span> </span>&#123;</div><div class="line">          ex.printStackTrace();</div><div class="line">          <span class="keyword">new</span> Thread() &#123;</div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    Looper.prepare();</div><div class="line">                    Toast.makeText(mContext, <span class="string">"程序出现异常，即将退出"</span>, Toast.LENGTH_LONG)</div><div class="line">                              .show();</div><div class="line">                    Looper.loop();</div><div class="line">               &#125;</div><div class="line">          &#125;.start();</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">               Thread.sleep(<span class="number">2200</span>);</div><div class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">               e.printStackTrace();</div><div class="line">          &#125; <span class="keyword">finally</span> &#123;</div><div class="line">               DroidApplication.getInstance().AppExit();</div><div class="line">          &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread thread, Throwable ex)</span> </span>&#123;</div><div class="line">        String processName =  getProcessName(mAppContext);</div><div class="line">        <span class="keyword">if</span> (mAppContext.getPackageName().equals(processName)) &#123;</div><div class="line">            Log.i(LOGTAG, <span class="string">"uncaughtException main process"</span>);</div><div class="line">            mDefaultExceptionHandler.uncaughtException(thread, ex);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Log.i(LOGTAG, <span class="string">"uncaughtException process name="</span> + processName);</div><div class="line">            android.os.Process.killProcess(android.os.Process.myPid());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/androidyue/AvoidForceCloseDemo" target="_blank" rel="external">demo地址</a></p>
<hr>
<p>参考链接：<a href="http://droidyue.com/blog/2015/12/06/practise-about-crash-in-android/" target="_blank" rel="external">方案</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MAT的一般使用]]></title>
      <url>http://dalufan.com/2015/11/18/android-mat-usage/</url>
      <content type="html"><![CDATA[<h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>Heap工具的使用介绍 </p>
<p><img src="/article_images/android_mat_usage_01.png" alt="alt"></p>
<a id="more"></a> 
<h3 id="0x01-说明"><a href="#0x01-说明" class="headerlink" title="0x01 说明"></a>0x01 说明</h3><p>在Dump之前 应该手动 GC一下。</p>
<p><a href="http://www.eclipse.org/mat/downloads.php" target="_blank" rel="external">Memory Analyzer（MAT）独立版本下载地址</a></p>
<p>直接打开Android studio生成的hprof文件会遇到<code>Unknown HPROF Version (JAVA PROFILE 1.0.3)</code>这个问题。</p>
<p>原因是: android的虚拟机导出的内存文件hprof文件格式与标准的 java hprof文件格式标准不一样，根本原因两者的虚拟机不一致导致的。</p>
<p>只需要使用SDK中自带的转换工具转换就可以了，工具位于<code>android-sdk\platform-tools</code>目录下，使用方法<code>hprof-conv.exe input.hprof out.hprof</code>。</p>
<h3 id="0x02-比较"><a href="#0x02-比较" class="headerlink" title="0x02 比较"></a>0x02 比较</h3><ol>
<li>第一个HPROF 文件(usingFile &gt; Open Heap Dump ).</li>
<li>打开Histogram view.</li>
<li>在NavigationHistory view里 (如果看不到就从Window &gt; Navigation History找 ), 右击histogram然后选择Add to Compare Basket .</li>
<li>打开第二个HPROF文件（不用管第一个打开的HPROF文件），然后重做步骤2和3.</li>
<li>切换到Compare Basket view, 然后点击Compare the Results (视图右上角的红色”!”图标)。</li>
</ol>
<hr>
<p>参考链接：<a href="hhttp://www.jianshu.com/p/c49f778e7acf" target="_blank" rel="external">使用Android studio分析内存泄露</a>&lt;-&gt;<a href="http://blog.csdn.net/sodino/article/details/38513067" target="_blank" rel="external">比较多个heap dump</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android 内存泄露以及GC的相关知识]]></title>
      <url>http://dalufan.com/2015/11/17/android-gc-leak/</url>
      <content type="html"><![CDATA[<h3 id="0x01-写在前面"><a href="#0x01-写在前面" class="headerlink" title="0x01 写在前面"></a>0x01 写在前面</h3><p>也是在昨天才想着好好解决这个问题，因为APP基本功能已经完成了（<a href="http://hearsay.bmob.cn/" target="_blank" rel="external">地址1</a>，<a href="http://fir.im/hearsay" target="_blank" rel="external">地址2</a>），但是内存占用很高，在我4.3的系统上内存居然占用了50mb，经过一天的优化，终于降到了20mb以内。主要是之前的代码没注重细节，积少成多。趁着有时间赶紧把这块补充下。</p>
<p><strong>内存泄露</strong>：程序在向系统申请分配内存空间后(new)，在使用完毕后未释放。结果导致一直占据该内存单元，我们和程序都无法再使用该内存单元，直到程序结束，这是内存泄露。</p>
<p><strong>内存溢出</strong>：程序向系统申请的内存空间超出了系统能给的。比如内存只能分配一个int类型，我却要塞给他一个long类型，系统就出现oom。又比如一车最多能坐5个人，你却非要塞下10个，车就挤爆了。</p>
<p>大量的内存泄露会导致内存溢出(oom)。</p>
<a id="more"></a> 
<h3 id="0x02-成因"><a href="#0x02-成因" class="headerlink" title="0x02 成因"></a>0x02 成因</h3><p>JAVA是在JVM所虚拟出的内存环境中运行的，JVM的内存可分为三个区：堆(heap)、栈(stack)和方法区(method)。</p>
<ul>
<li><strong>栈(stack)</strong>：是简单的数据结构，但在计算机中使用广泛。栈最显著的特征是：LIFO(Last In, First Out, 后进先出)。比如我们往箱子里面放衣服，先放入的在最下方，只有拿出后来放入的才能拿到下方的衣服。栈中只存放基本类型和对象的引用(不是对象)。</li>
<li><strong>堆(heap)</strong>：堆内存用于存放由new创建的对象和数组。在堆中分配的内存，由java虚拟机自动垃圾回收器来管理。JVM只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身。</li>
<li><strong>方法区(method)</strong>：又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的class和static变量。</li>
</ul>
<p>在JAVA中JVM的栈记录了方法的调用，每个线程拥有一个栈。在线程的运行过程当中，执行到一个新的方法调用，就在栈中增加一个内存单元，即帧(frame)。在frame中，保存有该方法调用的参数、局部变量和返回地址。然而JAVA中的局部变量只能是基本类型变量(int)，或者对象的引用。所以在栈中只存放基本类型变量和对象的引用。引用的对象保存在堆中。</p>
<blockquote>
<p>当某方法运行结束时，该方法对应的frame将会从栈中删除，frame中所有局部变量和参数所占有的空间也随之释放。线程回到原方法继续执行，当所有的栈都清空的时候，程序也就随之运行结束。</p>
</blockquote>
<p>而对于堆内存，堆存放着普通变量。在JAVA中堆内存不会随着方法的结束而清空，所以在方法中定义了局部变量，在方法结束后变量依然存活在堆中。</p>
<p>综上所述，栈(stack)可以自行清除不用的内存空间。但是如果我们不停的创建新对象，堆(heap)的内存空间就会被消耗尽。所以JAVA引入了垃圾回收(garbage collection，简称GC)去处理堆内存的回收，但如果对象一直被引用无法被回收，造成内存的浪费，无法再被使用。所以<code>对象无法被GC回收</code>就是造成内存泄露的原因！</p>
<p>Android虚拟机的垃圾回收采用的是根搜索算法（详细搜索算法参考第四节）。<code>GC会从根节点（GC Roots）开始对heap进行遍历</code>。到最后，部分没有直接或者间接引用到GC Roots的就是需要回收的垃圾，会被GC回收掉。<strong>实现思想如下</strong>：我们将栈定义为root，遍历栈中所有的对象的引用，再遍历一遍堆中的对象。因为栈中的对象的引用执行完毕就删除，所以我们就可以通过栈中的对象的引用，查找到堆中没有被指向的对象，这些对象即为不可到达对象，对其进行垃圾回收。</p>
<p><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f68polgal3j209l07a3z2.jpg" alt="垃圾回收实现思想"></p>
<p>根搜索算法相比引用计数法很好的解决了循环引用的问题。举个例子，Activity有View的引用，View也有Activity的引用，之前我还尝试去源代码里找Activity何时和View断开连接是大错特错了。当Activity finish掉之后，Activity和View的循环引用已成孤岛，不再引用到GC Roots，无需断开也会被回收掉。因为，Java使用有向图机制，通过GC自动检查内存中的对象（什么时候检查由虚拟机决定），如果GC发现一个或一组对象为不可到达状态，则将该对象从内存中回收。也就是说，一个对象不被任何引用所指向，则该对象会在被GC发现的时候被回收；另外，如果一组对象中只包含互相的引用，而没有来自它们外部的引用（例如有两个对象A和B互相持有引用，但没有任何外部对象持有指向A或B的引用），这仍然属于不可到达，同样会被GC回收。</p>
<h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><p><code>Android内存泄漏</code>指的是进程中某些对象（垃圾对象）已经没有使用价值了，但是它们却可以直接或间接地引用到gc roots导致无法被GC回收。无用的对象占据着内存空间，使得实际可使用内存变小，形象地说法就是内存泄漏了。</p>
<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p><a href="http://www.jianshu.com/p/ac00e370f83d?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">内存泄露的八种可能</a></p>
<ul>
<li>类的静态变量持有大数据对象<br>  静态变量长期维持到大数据对象的引用，阻止垃圾回收。</li>
<li>非静态内部类的静态实例<br>  任何情况下你在class中创建非静态内部类，内部类会（自动）拥有对当前类的一个强引用。如果非静态内部类的实例是静态的，就会间接长期维持着外部类的引用，阻止被回收掉。</li>
<li>资源对象未关闭<br>  资源性对象如Cursor、File、Socket，应该在使用后及时关闭。未在finally中关闭，会导致异常情况下资源对象未被释放的隐患。</li>
<li>注册对象未反注册<br>  未反注册会导致观察者列表里维持着对象的引用，阻止垃圾回收。</li>
<li>Handler临时性内存泄露<a href="../../../../../2015/08/28/android-handler-gc/">地址</a><ul>
<li>Handler通过发送Message与主线程交互，Message发出之后是存储在MessageQueue中的，有些Message也不是马上就被处理的。在Message中存在一个 target，是Handler的一个引用，如果Message在Queue中存在的时间越长，就会导致Handler无法被回收。如果Handler是非静态的，则会导致Activity或者Service不会被回收。</li>
<li>由于AsyncTask内部也是Handler机制，同样存在内存泄漏的风险。 此种内存泄露，一般是临时性的。</li>
</ul>
</li>
</ul>
<h3 id="0x03-预防"><a href="#0x03-预防" class="headerlink" title="0x03 预防"></a>0x03 预防</h3><ol>
<li>不要维持到Activity的长久引用，对activity的引用应该和activity本身有相同的生命周期。</li>
<li>尽量使用context-application代替context-activity</li>
<li>Activity中尽量不要使用非静态内部类，可以使用静态内部类和WeakReference代替。</li>
</ol>
<h3 id="0x04-JVM内存回收机制"><a href="#0x04-JVM内存回收机制" class="headerlink" title="0x04 JVM内存回收机制"></a>0x04 JVM内存回收机制</h3><h4 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h4><ul>
<li>标记回收算法（Mark and Sweep GC）<br>  从”GC Roots”集合开始，将内存整个遍历一次，保留所有可以被GC Roots直接或间接引用到的对象，而剩下的对象都当作垃圾对待并回收，这个算法需要中断进程内其它组件的执行并且可能产生内存碎片。</li>
<li>复制算法 (Copying）<br>  将现有的内存空间分为两快，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。</li>
<li>标记-压缩算法 (Mark-Compact)<br>  先需要从根节点开始对所有可达对象做一次标记，但之后，它并不简单地清理未标记的对象，而是将所有的存活对象压缩到内存的一端。之后，清理边界外所有的空间。这种方法既避免了碎片的产生，又不需要两块相同的内存空间，因此，其性价比比较高。</li>
<li>分代<br>  将所有的新建对象都放入称为年轻代的内存区域，年轻代的特点是对象会很快回收，因此，在年轻代就选择效率较高的复制算法。当一个对象经过几次回收后依然存活，对象就会被放入称为老生代的内存空间。对于新生代适用于复制算法，而对于老年代则采取标记-压缩算法。</li>
</ul>
<h4 id="复制和标记-压缩算法的区别"><a href="#复制和标记-压缩算法的区别" class="headerlink" title="复制和标记-压缩算法的区别"></a>复制和标记-压缩算法的区别</h4><p>乍一看这两个算法似乎并没有多大的区别，都是标记了然后挪到另外的内存地址进行回收，那为什么不同的分代要使用不同的回收算法呢？</p>
<p>其实2者最大的区别在于前者是用空间换时间后者则是用时间换空间。</p>
<p>前者的在工作的时候是不没有独立的“Mark”与“Copy”阶段的，而是合在一起做一个动作，就叫Scavenge（或Evacuate，或者就叫Copy）。也就是说，每发现一个这次收集中尚未访问过的活对象就直接Copy到新地方，同时设置Forwarding Pointer，这样的工作方式就需要多一份空间。</p>
<p>后者在工作的时候则需要分别的Mark与Compact阶段，Mark阶段用来发现并标记所有活的对象，然后compact阶段才移动对象来达到Compact的目的。如果Compact方式是Sliding Compaction，则在Mark之后就可以按顺序一个个对象“滑动”到空间的某一侧。因为已经先遍历了整个空间里的对象图，知道所有的活对象了，所以移动的时候就可以在同一个空间内而不需要多一份空间。</p>
<p>所以新生代的回收会更快一点，老年代的回收则会需要更长时间，同时压缩阶段是会暂停应用的，所以给我们应该尽量避免对象出现在老年代。</p>
<hr>
<p>参考链接：<a href="http://www.jianshu.com/p/bf159a9c391a" target="_blank" rel="external">内存泄露</a>,<a href="http://jiajixin.cn/2015/01/06/memory_leak/" target="_blank" rel="external">jason</a>,<a href="http://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400021278&amp;idx=1&amp;sn=0e971807eb0e9dcc1a81853189a092f3&amp;scene=0#rd" target="_blank" rel="external">QQ空间</a>,<a href="http://blog.csdn.net/luoshengyang/article/details/41822747" target="_blank" rel="external">老罗</a>,<a href="http://droidyue.com/blog/2014/11/02/note-for-google-io-memory-management-for-android-chinese-edition/" target="_blank" rel="external">Google IO</a>,<a href="https://realm.io/cn/news/droidcon-farber-improving-android-app-performance/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">10 条提升 Android 性能的建议</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Activity和Fragement中onSaveInstanceState()的使用详解]]></title>
      <url>http://dalufan.com/2015/11/12/android-onSaveInstanceState-learn/</url>
      <content type="html"><![CDATA[<p>在activity(或者是fragement)被杀掉之前调用保存每个实例的状态,以保证该状态可以在<code>onCreate(Bundle)或者onRestoreInstanceState(Bundle)</code>(传入的Bundle参数是由onSaveInstanceState封装好的)中恢复。这个方法在一个activity被杀死前调用，当该activity在将来某个时刻回来时，可以恢复其先前状态。例如，如果activity B启用后位于activity A的前端，在某个时刻activity A因为系统回收资源的问题要被杀掉，A通过onSaveInstanceState将有机会保存其用户界面状态，使得将来用户返回到activity A时能通过onCreate(Bundle)或者onRestoreInstanceState(Bundle)恢复界面的状态，<code>可以理解为系统对activity A的补偿行为</code>。</p>
<a id="more"></a> 
<p>不要将这个方法和activity生命周期回调如onPause()或onStop()搞混淆了，onPause()在activtiy被放置到后台或者自行销毁时总会被调用，onStop()在activity被销毁时被调用。</p>
<ol>
<li>一个会调用onPause()和onStop()，但不触发onSaveInstanceState的例子是：当用户从activity B返回到activity A时，没有必要调用B的onSaveInstanceState(Bundle)，此时的B实例永远不会被恢复，因此系统会避免调用它。</li>
<li>一个调用onPause()但不调用onSaveInstanceState的例子是：当activity B启动并处在activity A的前端，如果在B的整个生命周期里A的用户界面状态都没有被破坏的话，系统是不会调用activity A的onSaveInstanceState(Bundle)的。</li>
</ol>
<p>系统默认的实现负责了大部分UI实例状态的保存，采用的方式是调用UI层上每个拥有id的view的onSaveInstanceState() ，并且保存当前获得焦点的view的id(所有保存的状态信息都会在默认的onRestoreInstanceState(Bundle)实现中恢复。如果你覆写这个方法来保存额外的没有被各个view保存的信息，你可能想要在默认实现过程中调用或者自己保存每个视图的所有状态。如果被调用，这个方法会在onStop()前被触发，但系统并不保证是否在onPause()之前或者之后触发。</p>
<p>以上是API文档中的解释，我们在项目中一般在onSaveInstanceState()方法中保存数据，然后再onCreate()或者是onRestoreInstanceState(Bundle)中对界面进行恢复。<br>一个项目中的使用情景是，在onSaveInstanceState()中记录当前的可见的第一条listview的item的position信息，然后在onRestoreInstanceState(Bundle)中对listview调用setSelection()方法对位置进行定位，这样对用户体验更加友好<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);  </div><div class="line">        <span class="comment">//这是用SharedPreference实现的一个类，用于对目前的数据进行存储，在调用之前，先把里面的数据清空  </span></div><div class="line">        stateSaver.remove(<span class="keyword">this</span>.toString());  </div><div class="line">        <span class="comment">// 记录可见的第一条记录  </span></div><div class="line">        <span class="keyword">int</span> firstVisiblePosition = listview.getFirstVisiblePosition();  </div><div class="line">        <span class="keyword">if</span> (mInfoAdapter.getList().size() &gt; <span class="number">0</span>) &#123;  </div><div class="line">            <span class="comment">//将现在的数据存储在SharedPreference中，便于恢复  </span></div><div class="line">            stateSaver.put(<span class="keyword">this</span>.toString(), mInfoAdapter.getList());  </div><div class="line">            <span class="comment">//将位置信息保存在Bundle对象中  </span></div><div class="line">            outState.putInt(<span class="string">"firstVisiblePosition"</span>, firstVisiblePosition);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line"><span class="comment">//在onViewStateRestored()方法中进行数据的恢复</span></div><div class="line"><span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewStateRestored</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onViewStateRestored(savedInstanceState);  </div><div class="line">        <span class="comment">//初始化显示位置  </span></div><div class="line">        <span class="keyword">int</span> firstVisiblePosition = <span class="number">0</span>;  </div><div class="line">        <span class="comment">//获得保存的位置信息  </span></div><div class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;  </div><div class="line">            firstVisiblePosition = savedInstanceState.getInt(<span class="string">"firstVisiblePosition"</span>);  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">if</span> (stateSaver.get(<span class="keyword">this</span>.toString()) != <span class="keyword">null</span>) &#123;  </div><div class="line">            List&lt;EngineeringInfo&gt; list = stateSaver.get(<span class="keyword">this</span>.toString());  </div><div class="line">            <span class="keyword">if</span> (list.size() &gt; <span class="number">0</span>) &#123;  </div><div class="line">                mInfoAdapter.setList(list);  </div><div class="line">                <span class="comment">//恢复到上次看到的位置  </span></div><div class="line">                listview.setSelection(firstVisiblePosition);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/zhaokaiqiang1992/article/details/19481197" target="_blank" rel="external">引用</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[道听途说]]></title>
      <url>http://dalufan.com/2015/11/07/app-hearsay/</url>
      <content type="html"><![CDATA[<p>距离上次更新应该有一个多月了，这期间我干嘛去了啊？扫一扫就知道啦。</p>
<p><img src="/article_images/app_hearsay.png" alt="alt"></p>
<a id="more"></a> 
<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>在高速公路上，被安全带束紧的我，带着迷离的眼神，感受着擦肩而逝的无奈，我特别想把这些时间用在一些有意义的事情上，即使是假装的也好。<br>如果你觉得这个应用有些熟悉，哈哈，很明显，这是我“借鉴”了【天真无谐】，当然，我并没有告诉原作者这些。<br>带有独立思维的【大象工会】是我第一个加进来的功能；<br>接着遇见了【开发者头条】，当然，我拿接口的时候它还没升级；<br>【知乎】是最早想加进来的，只是开始没有好的姿势；<br>我不会说是为了凑股5个数才把【Freebuf】和【Wooyun】的两个RSS加进来的；<br>最后的【V电影】是我的茶余饭后。</p>
<p>时间回到2014年的某天，我需要个【记事本】，【印象笔记】挺好的，用着用着手机里面就找不到了，难得有时间，这会就加个吧，一不留神，也支持了Markdown。不知道是哪里看到了一个开源项目，于是乎又有了提醒的功能，简直是一气呵成，我不禁要喝口西北风冷静下，很明显这是杂糅的东西，这个会有人用吗，答案是肯定的，我就在用，也不见得想用就能用的了，毕竟我手边测试机不多，希望不要骂我。</p>
<h3 id="应用截图"><a href="#应用截图" class="headerlink" title="应用截图"></a>应用截图</h3><p><img src="/article_images/app_hearsay_01.png" alt="alt"></p>
<p><img src="/article_images/app_hearsay_02.png" alt="alt"></p>
<p><img src="/article_images/app_hearsay_03.png" alt="alt"></p>
<p><img src="/article_images/app_hearsay_04.png" alt="alt"></p>
<p><img src="/article_images/app_hearsay_05.png" alt="alt"></p>
<p><img src="/article_images/app_hearsay_06.png" alt="alt"></p>
<p><img src="/article_images/app_hearsay_07.png" alt="alt"></p>
<p><img src="/article_images/app_hearsay_08.png" alt="alt"></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android运行提示java.lang.RuntimeException: Can't create handler inside thread that has not]]></title>
      <url>http://dalufan.com/2015/10/20/android-error-cannot-create-handler-inside/</url>
      <content type="html"><![CDATA[<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">               </div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                    </div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                         Thread.sleep(<span class="number">1000</span>);</div><div class="line">                         Toast.makeText(getApplicationContext(), <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>, <span class="number">0</span>).show();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                         <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                         e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">               &#125;</div><div class="line">          &#125;).start();</div></pre></td></tr></table></figure>
<h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>在Android中不允许Activity里新启动的线程访问该Activity里的UI组件，这样会导致新启动的线程无法改变UI组件的属性值。所以才会出现java.lang.RuntimeException: Can’t create handler inside thread that has not called Looper.prepare()异常。</p>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>然而，我们实际需要，在很多时候都需要异步获取数据刷新UI控件，这时候采取的方法就是Handler消息机制和AsyncTask异步任务两种解决方法。</p>
<a id="more"></a> 
<h4 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">               </div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                    </div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                         Thread.sleep(<span class="number">1000</span>);</div><div class="line">                         handler.sendEmptyMessage(<span class="number">0</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                         <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                         e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">               &#125;</div><div class="line">          &#125;).start();</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">               <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">               </div><div class="line">               Toast.makeText(getApplicationContext(), <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>, <span class="number">0</span>).show();</div><div class="line">               </div><div class="line">          &#125;</div><div class="line">          </div><div class="line">     &#125;;</div></pre></td></tr></table></figure>
<p>重写Handler对象中的handlerMessage方法进行你需要的处理。</p>
<p>当然不是只有这一种方法可以实现我们的需要：</p>
<p>runOnUiThread(Runnable action)是Activity中带有的方法，运行指定的action在UI线程中，如果当前线程是UI线程，那么action立即执行。如果当前线程不是UI线程，那么action将发送事件到UI的消息队列中。</p>
<p>View.post(Runnable aciton);</p>
<p>View.postDelayed(Runnable action, long delayMillis);</p>
<p>这两个方法也是同样的道理。</p>
<h4 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">               <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">               publishProgress();</div><div class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">          &#125;</div><div class="line">          </div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Void... values)</span> </span>&#123;</div><div class="line">               <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">               <span class="keyword">super</span>.onProgressUpdate(values);</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"doInBackground"</span>, <span class="number">0</span>).show();</div><div class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                    e.printStackTrace();</div><div class="line">               &#125;</div><div class="line">          &#125;</div><div class="line">          </div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void result)</span> </span>&#123;</div><div class="line">               <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">               Toast.makeText(getApplicationContext(), <span class="string">"onPostExecute"</span>, <span class="number">0</span>).show();</div><div class="line">               <span class="keyword">super</span>.onPostExecute(result);</div><div class="line">          &#125;</div><div class="line">          </div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>onProgressUpdate方法的执行在收到publishProgress方法调用后，运行于UI线程中，对UI控件进行处理，例如，我们做的下载，需要显示下载到了百分之多少时，可以不停的publishProgress（Value value)，然后在进度条中更新。</p>
<p>onPostExecute()是在doInBackground(）方法结束后运行在UI线程，对result进行处理的方法。</p>
<p>doInBackground()方法中，就是在后台线程中处理我们的异步任务，不能做类似Toast的操作，同样会出java.lang.RuntimeException: Can’t create handler inside thread that has not called Looper.prepare()异常。</p>
<hr>
<p>参考链接：<a href="http://www.aichengxu.com/view/8850" target="_blank" rel="external">方案</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中view相关的问题及解决]]></title>
      <url>http://dalufan.com/2015/10/20/android-view-issues/</url>
      <content type="html"><![CDATA[<h3 id="ListView-在初始化时多次调用getView"><a href="#ListView-在初始化时多次调用getView" class="headerlink" title="ListView 在初始化时多次调用getView()"></a>ListView 在初始化时多次调用getView()</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>ListView的显示机制，listview的机制是这样子的：</p>
<p>假如你有1000条数据，但是屏幕只能显示10条，那么当你第一次加载显示的时候，会先创建10个View，1-10，当你拖动Listview，使1隐藏而11显示的时候，系统会自动把填充1的View传递过来，注意看代码Adapter的getView方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position, View convertView, ViewGroup parent)</span></span></div></pre></td></tr></table></figure>
<p>这里的converView就是1的view，一般的做法会把这个view拿来复用，作为11的view。</p>
<p>当我们固定listview的高度时(<code>match_parent或直接固定高度</code>)，那么listview很容易就能计算出容器内可以显示多少行。但如果我们使用了”wrap_content”，只有在屏幕内控件完全加载后才知道到底能显示多少行数据时，ListView自身便会做一些尝试性计算。在源码中可以发现一些叫做onMeasure的方法，目测是做此用处(源码略显复杂，没读透)。</p>
<p>当listview计算出屏幕一共需要多少行后，如果listview自身高度不变，那么它的容纳的行数就不会变，使用getChildCount()可以得到它的最大行数。</p>
<p><a href="http://www.cnblogs.com/linjzong/p/3494090.html" target="_blank" rel="external">链接</a></p>
<a id="more"></a> 
<h3 id="setBackgroundResource设置背景导致padding错误"><a href="#setBackgroundResource设置背景导致padding错误" class="headerlink" title="setBackgroundResource设置背景导致padding错误"></a>setBackgroundResource设置背景导致padding错误</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:gravity</span>=<span class="string">"right"</span></div><div class="line">        &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"12dp"</span></div><div class="line">            <span class="attr">android:paddingRight</span>=<span class="string">"12dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Hello World, MyActivity"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@drawable/tip_left"</span></div><div class="line">            /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TextView textView = (TextView)findViewById(R.id.text);</div><div class="line">textView.setBackgroundResource(R.drawable.tip_right);</div></pre></td></tr></table></figure>
<p>修改后padding没了。</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>在Layout中指定好background和padding以后，程序里面动态修改background之后padding就失效了，我们需要在修改background之后重新设置一下padding。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">TextView textView = (TextView)findViewById(R.id.text);</div><div class="line"><span class="keyword">int</span> left = textView.getPaddingLeft();</div><div class="line"><span class="keyword">int</span> top = textView.getPaddingTop();</div><div class="line"><span class="keyword">int</span> right = textView.getPaddingRight();</div><div class="line"><span class="keyword">int</span> bottom = textView.getPaddingBottom();</div><div class="line">textView.setBackgroundResource(R.drawable.tip_right);</div><div class="line">textView.setPadding(left, top, right, bottom);</div></pre></td></tr></table></figure>
<p>经过上面的重新设置padding以后，发现textView中的padding恢复正常。</p>
<ol>
<li>setPadding()要在setBackgroundResource()之后调用，否则你会发现padding还是失效的。</li>
<li>setPadding()中需要重新设置左上右下四个值，否则你会发现只有你设置的值的对的，其他未设置的值还是错的。</li>
</ol>
<p><a href="http://m.blog.csdn.net/blog/ifangler/41146987" target="_blank" rel="external">http://m.blog.csdn.net/blog/ifangler/41146987</a></p>
<h3 id="android-windowSoftInputMode-”adjustResize”无效"><a href="#android-windowSoftInputMode-”adjustResize”无效" class="headerlink" title="android:windowSoftInputMode=”adjustResize”无效"></a>android:windowSoftInputMode=”adjustResize”无效</h3><p>如果你有在 manifest 中为某一个 Activity 设置 android:windowSoftInputMode=”adjustResize”，那么 ScrollView（或其他可以滚动的 ViewGroup）会收缩以显示软键盘。但如果你在 Activity 的 Theme 中设置了 android:windowFullscreen=”true”，ScrollView 就不会这样了，因为此时 ScrollView 已经被甚至为填充满整个屏幕。此外，在 Theme 中设置 android:fitsSystemWindows=”false” 也会使 adjustResize 失效。</p>
<p><a href="http://www.devtf.cn/?p=1189" target="_blank" rel="external">http://www.devtf.cn/?p=1189</a></p>
<h3 id="getChildLayoutPosition获取到了已经删除的Item值"><a href="#getChildLayoutPosition获取到了已经删除的Item值" class="headerlink" title="getChildLayoutPosition获取到了已经删除的Item值"></a>getChildLayoutPosition获取到了已经删除的Item值</h3><p>即使你已经在 Adapter 里将 List 中的某一项 Item 移除，getChildLayoutPosition 还是会返回 position 值，这是因为被移除的 View 可能还处于显示移除动画的状态，因此还存在于 RecyclerView 之中。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android dex注入实现详解]]></title>
      <url>http://dalufan.com/2015/09/18/android-dex-inject-learn/</url>
      <content type="html"><![CDATA[<p>用了大半天的时间，终于把这个例子跑通了，这里做下记录。</p>
<h3 id="0x00-目标"><a href="#0x00-目标" class="headerlink" title="0x00 目标"></a>0x00 目标</h3><p>系统：Android 4.3 平板<br>功能：将一段dex代码注入到HelloWord APP中，dex对应的java代码要求能够拦截目标APP中的onPause与onResume 回调，输出打印。</p>
<h3 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h3><p>其实原理在各路大牛的文章里面已经解释的很清楚了，这里再不厌其烦的絮叨絮叨，主要是捋一捋思路，别整乱喽。</p>
<p>1.获得root权限后，通过ptrace()注入到指定pid的进程中；</p>
<p>Android下的注入都是从Linux下ptrace()函数继承下来的，具体原理不便深入。网上大牛已有相关的开源工具，这里采用【引用3】篇幅中博主开源出的代码，注意修改对应参数即可。【引用3】中是以注入系统进程/system/bin/surfaceflinger为例的，我们这里需要修改成目标APP的包名。这部分拿到开源代码之后使用ndk编译生成注入工具文件inject；</p>
<p>2.注入代码调用功能库.</p>
<p>so中的接口，它的作用是利用反射注入dex文件、并调用相应的java代码；<br>这里对应的就是【引用3】中hello.c部分了，作为注入的功能代码关键部分，这部分不能打印两句草草了事。这里采用【引用1】中对金山毒霸分析结果得出的代码拿出来来实现dex注入与java层代码调用，具体实现与分析见后文。这里也是C代码通过ndk编译生成注入功能库，呃，libhelloTool.so；</p>
<p>3.生成dex的java源码通过反射置换 ActivityThread中mH属性中的的mCallback回调，来实现拦截Activity生命周期回调的HOOK功能；</p>
<a id="more"></a> 
<p>通过上一步程序会执行到java层中，既然要下钩子，就要弄清楚我们要钩在哪里才有效。很明显的，既然要拦截界面的onPause、onResume消息，那就必须要了解Activity的生命周期回调在底层是如何实现消息分发的，知其所以然之后才好下手。有了前面提到的几篇大牛博客的文章，我们可以很清晰的定位到android.app.ActivityThread 类中的mH变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityThread</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">final</span> H mH = <span class="keyword">new</span> H();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queueOrSendMessage</span><span class="params">(<span class="keyword">int</span> what, Object obj, <span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(</div><div class="line">            TAG, <span class="string">"SCHEDULE "</span> + what + <span class="string">" "</span> + mH.codeToString(what)</div><div class="line">            + <span class="string">": "</span> + arg1 + <span class="string">" / "</span> + obj);</div><div class="line">        Message msg = Message.obtain();</div><div class="line">        msg.what = what;</div><div class="line">        msg.obj = obj;</div><div class="line">        msg.arg1 = arg1;</div><div class="line">        msg.arg2 = arg2;</div><div class="line">        mH.sendMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">H</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAUNCH_ACTIVITY         = <span class="number">100</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAUSE_ACTIVITY          = <span class="number">101</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAUSE_ACTIVITY_FINISHING= <span class="number">102</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP_ACTIVITY_SHOW      = <span class="number">103</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP_ACTIVITY_HIDE      = <span class="number">104</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHOW_WINDOW             = <span class="number">105</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HIDE_WINDOW             = <span class="number">106</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESUME_ACTIVITY         = <span class="number">107</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SEND_RESULT             = <span class="number">108</span>;</div><div class="line">               …</div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">"&gt;&gt;&gt; handling: "</span> + codeToString(msg.what));</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</div><div class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</div><div class="line">                ActivityClientRecord r = (ActivityClientRecord)msg.obj;</div><div class="line"></div><div class="line"></div><div class="line">                r.packageInfo = getPackageInfoNoCheck(</div><div class="line">                        r.activityInfo.applicationInfo, r.compatInfo);</div><div class="line">                handleLaunchActivity(r, <span class="keyword">null</span>);</div><div class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">            &#125; <span class="keyword">break</span>;</div><div class="line">                                 …</div><div class="line">        ｝</div><div class="line">     ｝</div><div class="line"></div><div class="line">｝</div></pre></td></tr></table></figure>
<p>从源码上就能看出来，底层消息派发都在内部类H中实现，而H实际上是Handler的子类。对应的H本身是个final类型的内部私有类，做手脚不甚方便，考虑到要拦截的实际情况，伸手到其父类中的属性的mCallback回调就是个很好的选择了。从前面所引博客中对金山毒霸的反编译情况来看即是这个思路。引用【引用2】中的一句话即：</p>
<blockquote>
<p>替换当前ActivityThread中的mH(Handler类型)的mCallback，用金山自定义的一个callback对象来包裹过原callback并且替换原callback，从而起到hook作用。</p>
</blockquote>
<h3 id="0x02-代码"><a href="#0x02-代码" class="headerlink" title="0x02 代码"></a>0x02 代码</h3><p><a href="/article_files/android_dex_inject.rar">下载地址</a></p>
<h3 id="0x03-运行"><a href="#0x03-运行" class="headerlink" title="0x03 运行"></a>0x03 运行</h3><ul>
<li><p>测试机器上点击目标APP HelloWord；</p>
<p>   需要先运行，否则会提示<code>Can&#39;t find the process</code></p>
</li>
<li><p>Push各路工具和数据到测试机器：</p>
<p>   adb push DexInject.apk /data/injects/<br>   adb push inject /data/<br>   adb push libhelloTool.so /data/</p>
</li>
<li><p>运行代码</p>
<p>   chomod 777 /data/inject<br>   ./data/inject</p>
</li>
</ul>
<blockquote>
<p>root@q7lte:/ # ./data/inject<br>library path = /data/libhelloTool.s<br>Press enter to dlclose and detach</p>
</blockquote>
<p><img src="/article_images/android_dex_inject_01.png" alt="alt"></p>
<p>通过下面命令，可以查看so是否注入</p>
<p><img src="/article_images/android_dex_inject_00.png" alt="alt"></p>
<p><img src="/article_images/android_dex_inject_03.png" alt="alt"></p>
<p>这是按home退出APP再进入后，在终端点击【回车】，通过日志过滤器可以得到：</p>
<p><img src="/article_images/android_dex_inject_02.png" alt="alt"></p>
<h3 id="0x04-遇到的问题"><a href="#0x04-遇到的问题" class="headerlink" title="0x04 遇到的问题"></a>0x04 遇到的问题</h3><blockquote>
<p>ADB Push – Permission Denied</p>
</blockquote>
<p>在<code>adb push DexInject.apk /data/injects/</code>遇到上面问题，在虚拟机上没问题，在手机上报错，之后<code>chmod 777 /data</code>解决问题</p>
<blockquote>
<p>not executable:magic 7F45</p>
</blockquote>
<p>在执行 <code>./data/inject</code>时候出现这个错误，原因是把x86（因为刚开始用的是Genymotion，它是x86的，后来切换平台的时候 没有更换）的放到arm平台了</p>
<blockquote>
<p>Didn’t find class “com/inject/dexinject/HookTool” on path: DexPathList[[],nativeLibraryDirectories=[</p>
</blockquote>
<p>最后软件运行时候出现这个问题，发现adb push DexInject.apk /data/injects，这句出错，应该是<code>adb push DexInject.apk /data/injects/</code>，没injects这个文件夹要先创建</p>
<p>另外在编译inject.c的时候有很多警告，原因不详</p>
<hr>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/yanzhibo/article/details/7726997" target="_blank" rel="external">eclipse里配置Android ndk环境，用eclipse编译.so文件</a></p>
<p><a href="http://taoyuanxiaoqi.com/2015/03/16/dexinject/" target="_blank" rel="external">dex注入实现详解</a></p>
<p><a href="http://blog.csdn.net/jinzhuojun/article/details/9900105" target="_blank" rel="external">Android中的so注入(inject)和挂钩(hook) - For both x86 and arm</a></p>
<p><a href="http://blog.csdn.net/liao0000/article/details/45482453" target="_blank" rel="external">Android arm64(aarch64)中的so注入(inject) - 兼容x86 and arm</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中canvas的一些属性和用法]]></title>
      <url>http://dalufan.com/2015/09/17/android-canvas-draw/</url>
      <content type="html"><![CDATA[<h3 id="0x00-clipRect"><a href="#0x00-clipRect" class="headerlink" title="0x00 clipRect"></a>0x00 clipRect</h3><blockquote>
<p>clipRect(float left, float top, float right, float bottom)<br>Intersect the current clip with the specified rectangle, which is expressed in local coordinates.</p>
</blockquote>
<p><code>只有在这个区域内的才显示，其他所有内容好像被裁剪掉了一样，不显示。</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">super</span>.onDraw(canvas);</div><div class="line"><span class="comment">/* 设置画布的颜色 */</span></div><div class="line">canvas.drawColor(Color.BLACK);</div><div class="line"><span class="comment">/* 设置取消锯齿效果 */</span></div><div class="line">mPaint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line"><span class="comment">//mPaint.setStyle(Paint.Style.STROKE);</span></div><div class="line">mPaint.setColor(Color.RED);</div><div class="line"><span class="comment">//canvas.save();</span></div><div class="line"><span class="comment">// 设置裁剪区域</span></div><div class="line"><span class="comment">//canvas.drawRect(new Rect(1, 1, 320, 400),mPaint);</span></div><div class="line">canvas.clipRect(<span class="number">40</span>, <span class="number">40</span>, <span class="number">280</span>, <span class="number">260</span>);</div><div class="line">canvas.drawColor(Color.GRAY);</div><div class="line"><span class="comment">/* 线锁定画布 */</span></div><div class="line">canvas.save();</div><div class="line"><span class="comment">/* 旋转画布,顺时针旋转“画布”，以左上角为圆心 */</span></div><div class="line">canvas.rotate(<span class="number">45.0f</span>);</div><div class="line"><span class="comment">//canvas.drawRect(new Rect(40, 40, 280, 260),mPaint);</span></div><div class="line"><span class="comment">/* 设置颜色及绘制矩形 */</span></div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">canvas.drawRect(<span class="keyword">new</span> Rect(<span class="number">45</span>,<span class="number">45</span>,<span class="number">140</span>,<span class="number">100</span>), mPaint);</div><div class="line"><span class="comment">/* 解除画布的锁定 */</span></div><div class="line">canvas.restore();</div><div class="line"><span class="comment">/* 设置颜色及绘制另一个矩形 */</span></div><div class="line">mPaint.setColor(Color.GREEN);</div><div class="line">canvas.drawRect(<span class="keyword">new</span> Rect(<span class="number">150</span>,<span class="number">75</span>,<span class="number">260</span>,<span class="number">120</span>), mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/article_images/android_canvas_draw01.jpg" alt="alt"></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">    <span class="comment">/* 设置画布的颜色 */</span></div><div class="line">    canvas.drawColor(Color.BLACK);</div><div class="line"></div><div class="line">    <span class="comment">/* 设置取消锯齿效果 */</span></div><div class="line">    mPaint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">    mPaint.setStyle(Paint.Style.STROKE);<span class="comment">//空心，不填充</span></div><div class="line">    mPaint.setColor(Color.RED);</div><div class="line">    <span class="comment">/* 线锁定画布 */</span></div><div class="line">    canvas.save();</div><div class="line">    <span class="comment">//整个屏幕加个边框</span></div><div class="line">    canvas.drawRect(<span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>, <span class="number">320</span>, <span class="number">400</span>),mPaint);</div><div class="line">    <span class="comment">//这里不用clipRect，而改为drawRect，仅模拟裁剪的区域，而不真正裁剪</span></div><div class="line">    canvas.drawRect(<span class="keyword">new</span> Rect(<span class="number">40</span>, <span class="number">40</span>, <span class="number">280</span>, <span class="number">260</span>),mPaint);</div><div class="line"></div><div class="line">    <span class="comment">/* 旋转画布 */</span></div><div class="line">    canvas.rotate(<span class="number">45.0f</span>);</div><div class="line">    <span class="comment">//旋转后的屏幕边框</span></div><div class="line">    canvas.drawRect(<span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>, <span class="number">320</span>, <span class="number">400</span>),mPaint);</div><div class="line">    <span class="comment">//裁剪框旋转后的weizhi</span></div><div class="line">    canvas.drawRect(<span class="keyword">new</span> Rect(<span class="number">40</span>, <span class="number">40</span>, <span class="number">280</span>, <span class="number">260</span>),mPaint);</div><div class="line"></div><div class="line">    <span class="comment">/* 设置颜色及绘制矩形 */</span></div><div class="line">    mPaint.setColor(Color.RED);</div><div class="line">    canvas.drawRect(<span class="keyword">new</span> Rect(<span class="number">45</span>,<span class="number">45</span>,<span class="number">140</span>,<span class="number">100</span>), mPaint);</div><div class="line"></div><div class="line">    <span class="comment">/* 解除画布的锁定 */</span></div><div class="line">    canvas.restore();</div><div class="line"></div><div class="line">    <span class="comment">/* 设置颜色及绘制另一个矩形 */</span></div><div class="line">    mPaint.setColor(Color.GREEN);</div><div class="line">    canvas.drawRect(<span class="keyword">new</span> Rect(<span class="number">150</span>,<span class="number">75</span>,<span class="number">260</span>,<span class="number">120</span>), mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/article_images/android_canvas_draw02.jpg" alt="alt"></p>
<h3 id="0x01-drawText"><a href="#0x01-drawText" class="headerlink" title="0x01 drawText"></a>0x01 drawText</h3><p>我们看下这个方法参数的含义：<code>canvas.drawText(text, x, y, paint)</code>，第一个参数是我们需要绘制的文本，第四个参数是我们的画笔，这两个不用多说，主要是第二和第三个参数的含义，这两个参数在不同的情况下的值还是不一样的，Paint的TextAlign属性默认值为Paint.Align.LEFT，<code>x默认是这个字符串的左边在屏幕的位置</code>，如果设置了<code>paint.setTextAlign(Paint.Align.CENTER)</code>;那就是字符的中心，y是指定这个字符baseline在屏幕上的位置，大家记住了，不要混淆，y不是这个字符中心在屏幕上的位置，而是baseline在屏幕上的位置。关于什么是baseline，后面会有解释。</p>
<p><img src="/article_images/android_canvas_draw03.jpeg" alt="alt"></p>
<p>Paint.getTextBounds: 当你通过这个方法来获取尺寸的时候，你可以得到能够包裹文字的最小矩形，就是图中红色边框的那部分，你可以得到一个Rect对象，包含这个最小尺寸的几个值。坑其实就在这里：这里的Rect对象坐标并不是以左上角为准的，而是相对于左边中间靠下位置的一个点，就是图中的黄色五角星。而这里水平的Baseline指的是字符串对齐的一条线。既然这样，r.top就是一个负值了，r.bottom会是一个小一点的正值，r.left和r.right在图中画的都很清楚。通过r.width()和r.height()来获取尺寸。</p>
<p>那么文字的偏移就好说了，比如说你要把文字画在Canvas的左上角，坐标是(0,0)，但是当你通过：</p>
<blockquote>
<p>canvas.drawText(“dangwen”,0,0,paint);</p>
</blockquote>
<p>来画文字的时候，发现只有文字的下半部分画出来了，因为你传递进去的参数应该是以Baseline为标准的，正确的方法是：</p>
<blockquote>
<p>canvas.drawText(“dangwen”,-r.left,-r.top,paint);</p>
</blockquote>
<p>Paint.getFontMetricsInt(): 当你通过这里方法来获取尺寸的时候，你获取的只是一个垂直方向上的尺寸，这里的ascent代表的是字体的上部，descent代表的是字体的下部，这里需要注意的是这和上面获得的Rect的top和bottom不太一样，他们比比ascent和descent距离稍微小一些，这些具体的高度可能和不同的字体和渲染方式有关系，这里就不深入了 #我是不懂#。</p>
<p>然后如果把文字写入TextView（图中蓝色部分）并且设置TextView的高度和宽度设为wrap_content，那么TextView的高度就正好是FontMetricsInt.top – FontMetricsInt.bottom, 那宽度呢？ Paint.measureText()。</p>
<hr>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/lvxiangan/article/details/8540774" target="_blank" rel="external">关于Canvas.drawText中xy位置问题</a></p>
<p><a href="http://www.tuicool.com/articles/EJzAbyF" target="_blank" rel="external">如何“任性”使用Android的drawText()</a></p>
<p><a href="http://blog.csdn.net/lovexieyuan520/article/details/43153275" target="_blank" rel="external">canvas.drawText</a></p>
<p><a href="http://blog.csdn.net/linghu_java/article/details/46404081" target="_blank" rel="external">Android的DrawText详解</a></p>
<p><a href="http://blog.csdn.net/xajax/article/details/6862802" target="_blank" rel="external">canvas.clipRect</a></p>
<p><a href="http://ipjmc.iteye.com/blog/1299476" target="_blank" rel="external">Canvas的裁剪功能</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android触摸事件的响应机制]]></title>
      <url>http://dalufan.com/2015/09/11/android-onTouchEvent/</url>
      <content type="html"><![CDATA[<h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>关于Android的事件响应机制，一直都有点糊里糊涂的，只记得自己要处理的话，就<code>return true</code>，无意中看到了有文章分析了这个过程，还有插图，甚是happy。</p>
<p>用户触摸屏幕所产生的Touch Event在Android里是用一个MotionEvent对象来传递和处理的，我们最关注的是MotionEvent里的action，可以看到有ACTION_DOWN， ACTION_UP，ACTION_MOVE，ACTION_CANCEL，ACTION_POINTER_DOWN，ACTION_POINTER_UP等等很多种，在这里面最需要关注的是ACTION_DOWN和ACTION_UP，它们一个代表了用户按压动作的开始，一个代表了用户按压动作的结束，其他的一些ACTION基本都是发生在这2个ACTION之间的（ACTION_CANCEL等特殊的暂不讨论）。</p>
<p>在用户的一次单手指触摸屏幕过程中，简单的讲，会按顺序产生一个ACTION_DOWN，若干个ACTION_MOVE，和一个ACTION_UP，我们下面的讨论也会基于这个简单case。</p>
<a id="more"></a>
<p>先看运行过程</p>
<p><img src="/article_images/android-ontouchevent.png" alt="alt"></p>
<h3 id="0x01-分发和处理的细节流程"><a href="#0x01-分发和处理的细节流程" class="headerlink" title="0x01 分发和处理的细节流程"></a>0x01 分发和处理的细节流程</h3><p>ACTION_DOWN是一个触摸动作的起始，所以对ACTION_DOWN的处理和对其他事件的处理在细节上是有不同的，各个UI组件对于ACTION_DOWN事件的处理流程可以看到如下：(注意这里 view 表示一个视图组件，它可以是一个 View 也可以是一个 ViewGroup)</p>
<p><code>Activity -&gt; dispatchTouchEvent:</code></p>
<ol>
<li>通过getWindow().superDispatchTouchEvent(event)把事件分发到当前活动窗口 (PhoneWindow)，之后是 窗口的Top-Level View(DecorView)，调用了DecorView的dispatchTouchEvent，DecorView继承自ViewGroup，所以这里实际上就进入了ViewGroup层面的dispatchTouchEvent</li>
<li>如果superDispatchTouchEvent最终返回true（即下层的某个ViewGroup或者View消化处理了该函数，dispatchTouchEvent返回true），则直接返回</li>
<li>如果返回值为false，则调用Activity的onTouchEvent对事件进行处理</li>
</ol>
<p><code>ViewGroup -&gt; dispatchTouchEvent：</code></p>
<ol>
<li>首先是检查本view里是否保存了一个motion target（步骤4提到了怎么设置motion target），如果有则清除它</li>
<li>然后是调用onInterceptTouchEvent看这个事件是否需要被自己拦截，如果返回true，则直接进入步骤7开始自己处理事件的流程</li>
<li>如果返回false，则需要遍历所有的子view，遍历的顺序是：   <ul>
<li>首先按照Z-order</li>
<li>在同一Z值下如果可以的话按照子view的drawing order，这里的drawing order需要ViewGroup的子类override了getChildDrawingOrder才会实际生效</li>
</ul>
</li>
<li>遍历子view的时候，如果这个触摸事件发生的位置在这个view的视觉范围以内，那么就调用 child.dispatchTouchEvent将事件分发给这个子view，如果这个子view消化处理了这个事件（即 dispatchTouchEvent返回true），本view会将该子view赋值给一个表明<code>motion target</code>的变量，且此时跳出循环。</li>
<li>循环遍历结束后，如果有子view处理了该事件（即motion target不为空），则返回true表明此事件已经被处理。</li>
<li>如果没有任何一个子view处理了该事件（即motion target为空），则本view需要进行处理，进入步骤7</li>
<li>查看当前view是否注册了OnTouchListener，如果有，则调用该listener的onTouch函数来处理事件，如果onTouch返回true表示消化处理了该事件，则直接返回true。</li>
<li>如果onTouch返回false表示没有处理，则继续调用本view的onTouchEvent函数来处理事件，这里会返回onTouchEvent的返回值</li>
</ol>
<p><code>View -&gt; dispatchTouchEvent：</code></p>
<ol>
<li>查看当前view是否注册了OnTouchListener，如果有，则调用该listener的onTouch函数来处理事件，如果onTouch返回true表示消化处理了该事件，则直接返回true</li>
<li>如果onTouch返回false表示没有处理，则继续调用本view的onTouchEvent函数来处理事件，这里会返回onTouchEvent的返回值</li>
</ol>
<h4 id="其他ACTION的处理"><a href="#其他ACTION的处理" class="headerlink" title="其他ACTION的处理"></a>其他ACTION的处理</h4><p>上面说了ACTION_DOWN的处理，那ACTION_DOWN后续的ACTION_MOVE，ACTION_UP之类的事件又是怎么处理的呢？它们的处理方式略有不同：</p>
<p>在Activity层面来看，它们的处理和ACTION_DOWN没有区别。</p>
<p>在ViewGroup层面来看，处理开始有了差异：</p>
<p><code>ViewGroup -&gt; dispatchTouchEvent：</code></p>
<ol>
<li>检查当前view在之前处理ACTION_DOWN（ACTION_MOVE，ACTION_UP之类的事件一定是有一个配对的ACTION_DOWN事件在前面发生）的时候是否已经设置了一个<code>motion target</code></li>
<li>如果有这个target，那么表明之前的ACTION_DOWN事件就是由该子view处理的，此时直接调用motion_target.dispatchTouchEvent</li>
<li>如果没有这个target，那么表明之前的ACTION_DOWN没有任何一个子view处理，那么后续这些事件也不要发给子view了，直接自己处理，进入步骤4</li>
<li>查看当前view是否注册了OnTouchListener，如果有，则调用该listener的onTouch函数来处理事件，如果onTouch返回true表示消化处理了该事件，则直接返回true</li>
<li>如果onTouch返回false表示没有处理，则继续调用本view的onTouchEvent函数来处理事件，这里会返回onTouchEvent的返回值</li>
<li>注意整个流程中都<code>跳过了onInterceptTouchEvent的拦截</code></li>
</ol>
<p>在View层面来看，处理方式也是一样的。所以这里可以看到的现象就是：ACTION_DOWN被谁处理了，后续的ACTION_MOVE，ACTION_UP等事件最终也会交由谁处理。</p>
<h3 id="0x02-触摸事件的传递处理顺序"><a href="#0x02-触摸事件的传递处理顺序" class="headerlink" title="0x02 触摸事件的传递处理顺序"></a>0x02 触摸事件的传递处理顺序</h3><p>一个触摸事件首先是在硬件层面触发，然后逐层传递到软件直至我们的app，前面的细节一般来说不用了解，我们讨论的事件入口从Activity开始。</p>
<p>笼统的说（实际上细节有所不同，下面会提到）</p>
<p>触摸事件的传递顺序是：</p>
<p>Activity -&gt; 当前活动窗口(PhoneWindow) -&gt; 窗口的Top-Level View(DecorView) -&gt; 各级ViewGroup （如各种Layout） -&gt; … -&gt; 各级ViewGroup -&gt; 叶子节点 View</p>
<p>而触摸事件的处理顺序则刚好相反：</p>
<p>叶子节点 View -&gt; 各级ViewGroup -&gt; … -&gt; 各级ViewGroup -&gt; (Window和DecorView只有分发没有处理) -&gt; Activity</p>
<p>当叶子节点View接受到事件之后，会试图做出处理，如果它处理了，则上面各层不再处理，如果它没有处理则往上由它的父ViewGroup处理，这样逐层向上按顺序试图处理，直到Activity。</p>
<h3 id="0x03-分发和处理的关键函数"><a href="#0x03-分发和处理的关键函数" class="headerlink" title="0x03 分发和处理的关键函数"></a>0x03 分发和处理的关键函数</h3><p>从上面笼统提到的事件分发处理顺序可以看到，关键的分发处理集中在Activity，ViewGroup和View中，那么对于它们来说，有如下几个分发和处理的关键函数，这里先做一个简单介绍，后续再做详细说明。</p>
<p><code>boolean dispatchTouchEvent(MotionEvent event)</code></p>
<p>这个函数是最关键的分发处理函数，里面既包含了分发的逻辑，又包含了对处理的逻辑调用</p>
<ul>
<li>分发逻辑：这个函数会先调用子view的dispatchTouchEvent进行分发</li>
<li>处理逻辑：如果子view没有对事件进行消化处理的话，这个函数就会调用本UI组件的处理函数如onTouchEvent</li>
</ul>
<p>函数返回值表示这个触摸事件是否被当前这个UI组件（Activity/ViewGroup/View）消化处理了</p>
<p><code>View.OnTouchListener: boolean onTouch(View v, MotionEvent event)</code></p>
<ul>
<li>这个函数不是Activity/ViewGroup/View本身的响应处理函数，而是一个Listener的响应处理函数</li>
<li>需要给View通过setOnTouchListener来设置Listener以使得这个onTouch函数能够起作用</li>
<li>Activity没有setOnTouchListener</li>
<li>函数返回值表示这个触摸事件是否被当前这个UI组件（Activity/ViewGroup/View）消化处理了</li>
</ul>
<p><code>boolean onTouchEvent(MotionEvent event)</code></p>
<ul>
<li>这个函数是UI组件自己实现用来响应处理触摸事件的</li>
<li>函数返回值表示这个触摸事件是否被当前这个UI组件（Activity/ViewGroup/View）消化处理了</li>
</ul>
<p><code>ViewGroup: boolean onInterceptTouchEvent(MotionEvent event)</code></p>
<ul>
<li>这个函数表明是否要拦截这个事件，前面提到过事件的分发顺序是在View tress里从根到叶子逐层分发，处理则是反向的从叶子到根逐层处理，onInterceptTouchEvent如果返回true，则表示我这一层要拦截这个事件自己进行处理了，不要把它分发到子View里</li>
<li>这个函数只有ViewGroup含有，View没有，因为View已经是叶子节点了，没有子View了</li>
<li>这个函数默认是返回false的，一般不要轻易override它，因为常规来讲是应该由子View先响应处理的</li>
</ul>
<h3 id="0x04-onTouchEvent-or-OnTouchListener-onTouch"><a href="#0x04-onTouchEvent-or-OnTouchListener-onTouch" class="headerlink" title="0x04 onTouchEvent() or OnTouchListener.onTouch()"></a>0x04 onTouchEvent() or OnTouchListener.onTouch()</h3><p>从上面的内容可以看出来，我们要想对一个触摸事件进行响应，可以在view的onTouchEvent()函数里处理，也可以给view设置一个OnTouchListener然后在listener的onTouch()函数里处理，那么它们有些什么区别？我们应该怎么选择呢？</p>
<p>首先看区别：</p>
<ul>
<li>onTouchEvent()是View自己的函数，对于我们来说无法override 各种View或者ViewGroup的onTouchEvent()函数，只能是在自己自定义的view里面实现override；而 OnTouchListener的onTouch()是可以对任何View/ViewGroup起作用的，我们只需要在代码里为该View /ViewGroup加一个listener就行</li>
<li>OnTouchListener的onTouch()的执行顺序在view的onTouchEvent()之前，如果在onTouch()函数里面响应完了触摸事件并返回true之后，onTouchEvent()是不会被调用的</li>
</ul>
<p>知道了区别，那么我们就可以轻易的做出选择了（只是一家之言，欢迎各种不同意见）：</p>
<ul>
<li>OnTouchListener的onTouch()基本上是万能的，任何时候都可以用它，所以大部分时候直接用它就行了</li>
<li>在自定义view里面，如果出于代码结构和功能清晰的目的，可以使用onTouchEvent()</li>
</ul>
<h3 id="0x05-其他"><a href="#0x05-其他" class="headerlink" title="0x05 其他"></a>0x05 其他</h3><p>这个总结其实把整个响应机制给简化了，实际的处理过程要比这个麻烦很多，比如还涉及到onClick的产生及响应，以及其他一些复杂情况的处理，所以如果想要彻底搞清楚每一点，最好的办法还是去看Android源码！</p>
<hr>
<p>参考链接：</p>
<p><a href="http://hunankeda110.iteye.com/blog/1944311" target="_blank" rel="external">ITEYE</a></p>
<p><a href="http://test.taobao.com/view_blog.htm?spm=0.0.0.0.A49Few&amp;id=2561" target="_blank" rel="external">TAOBAO</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mailinator 免费邮箱的使用说明]]></title>
      <url>http://dalufan.com/2015/09/10/free-mail-mailinator/</url>
      <content type="html"><![CDATA[<h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>前几天看到一篇文章，使用免费邮箱提升排名抢一加手机的故事，我对抢手机不感兴趣，反正买不起，那个免费邮箱让我很惊喜啊，<a href="https://mailinator.com/index.jsp" target="_blank" rel="external">mailinator</a>,看了一会才知道怎用，现在记录下。</p>
<a id="more"></a>
<h3 id="0x01-使用方法"><a href="#0x01-使用方法" class="headerlink" title="0x01 使用方法"></a>0x01 使用方法</h3><p>该邮箱使用token来标识用户，免费用户一天有10次接收邮件的机会，token只有在用户登录注册后才有，官网提示要使用Gmail邮箱授权登录，然后可以在设置里面修改登录帐号和密码。</p>
<p>登录后点击右上角的settings，就可以在打开的页面中单独设置以后用户登录的帐号和密码，当然还有用户的token值。</p>
<blockquote>
<p>Your API Token: 123456f6wefewfwfwfwfwfwfgewfw</p>
</blockquote>
<p>下面是获取邮件的API，具体可以参考<a href="http://www.mailinator.com/apidocs.jsp" target="_blank" rel="external">官方API</a></p>
<h4 id="Fetch-Mailinator-Inbox"><a href="#Fetch-Mailinator-Inbox" class="headerlink" title="Fetch Mailinator Inbox:"></a>Fetch Mailinator Inbox:</h4><blockquote>
<p><a href="https://api.mailinator.com/api/inbox?to=" target="_blank" rel="external">https://api.mailinator.com/api/inbox?to=</a><inbox>&amp;token=123456f6wefewfwfwfwfwfwfgewfw </inbox></p>
</blockquote>
<h4 id="Fetch-Private-Inbox"><a href="#Fetch-Private-Inbox" class="headerlink" title="Fetch Private Inbox:"></a>Fetch Private Inbox:</h4><blockquote>
<p><a href="https://api.mailinator.com/api/inbox?token=123456f6wefewfwfwfwfwfwfgewfw" target="_blank" rel="external">https://api.mailinator.com/api/inbox?token=123456f6wefewfwfwfwfwfwfgewfw</a> </p>
</blockquote>
<h4 id="Fetch-Email"><a href="#Fetch-Email" class="headerlink" title="Fetch Email:"></a>Fetch Email:</h4><blockquote>
<p><a href="https://api.mailinator.com/api/email?msgid=" target="_blank" rel="external">https://api.mailinator.com/api/email?msgid=</a> <msgid>&amp;token=123456f6wefewfwfwfwfwfwfgewfw</msgid></p>
</blockquote>
<p>邮件可以用Json来解析，很方便。</p>
<hr>
<p>参考链接：</p>
<p><a href="https://medium.com/@JakeCooper/how-i-hacked-the-oneplus-reservation-system-120ea1a7ad82" target="_blank" rel="external">BLOG</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ViewPager的setOnPageChangeListener方法详解 ]]></title>
      <url>http://dalufan.com/2015/09/08/android-setOnPageChangeListener/</url>
      <content type="html"><![CDATA[<p>今天使用ViewPager发现setOnPageChangeListener的方法居然过期了，而且AS编译不通过了，最后查了一下原来把set换成add了，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mViewPager.addOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    selectedTab(position);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>ViewPage使用时，最关键的代码就是setOnPageChangeListener，传入一个ViewPager.SimpleOnPageChangeListener对象。ViewPager.SimpleOnPageChangeListener是个接口，有三个方法，下面做介绍。</p>
<p>注：ViewPager有两个操作，一个是用手指滑动翻页，一个是直接setCurrentItem（一般用于点击上面的tab直接setCurrentItem）。下面的方法介绍也会针对这两种情况分别介绍。<br>最后还会讨论这三个方法相对执行顺序的问题。</p>
<p>1、<strong>onPageSelected(int position)</strong>：这个方法有一个参数position，代表哪个页面被选中。当用手指滑动翻页的时候，如果翻动成功了（滑动的距离够长），手指抬起来就会立即执行这个方法，position就是当前滑动到的页面。如果直接setCurrentItem翻页，那position就和setCurrentItem的参数一致，这种情况在onPageScrolled执行方法前就会立即执行。</p>
<p>2、<strong>onPageScrolled(int position,float positionOffset, int positionOffsetPixels)</strong>：这个方法会在屏幕滚动过程中不断被调用，其有三个参数：</p>
<ul>
<li><p>position，这个参数要特别注意一下。当用手指滑动时，如果手指按在页面上不动，position和当前页面index是一致的；如果手指向左拖动（相应页面向右翻动），这时候position大部分时间和当前页面是一致的，只有翻页成功的情况下最后一次调用才会变为目标页面；如果手指向右拖动（相应页面向左翻动），这时候position大部分时间和目标页面是一致的，只有翻页不成功的情况下最后一次调用才会变为原页面。当直接设置setCurrentItem翻页时，如果是相邻的情况（比如现在是第二个页面，跳到第一或者第三个页面），如果页面向右翻动，大部分时间是和当前页面是一致的，只有最后才变成目标页面；如果向左翻动，position和目标页面是一致的。这和用手指拖动页面翻动是基本一致的。如果不是相邻的情况，比如我从第一个页面跳到第三个页面，position先是0，然后逐步变成1，然后逐步变成2；我从第三个页面跳到第一个页面，position先是1，然后逐步变成0，并没有出现为2的情况。</p>
</li>
<li><p>positionOffset是当前页面滑动比例，如果页面向右翻动，这个值不断变大，最后在趋近1的情况后突变为0。如果页面向左翻动，这个值不断变小，最后变为0。</p>
</li>
<li><p>positionOffsetPixels是当前页面滑动像素，变化情况和positionOffset一致。</p>
</li>
</ul>
<p>3、<strong>onPageScrollStateChanged(int state)</strong>：这个方法在手指操作屏幕的时候发生变化。有三个值：0（END）,1(PRESS) , 2(UP) 。</p>
<p>当用手指滑动翻页时，手指按下去的时候会触发这个方法，state值为1，手指抬起时，如果发生了滑动（即使很小），这个值会变为2，然后最后变为0 。总共执行这个方法三次。一种特殊情况是手指按下去以后一点滑动也没有发生，这个时候只会调用这个方法两次，state值分别是1,0 。当setCurrentItem翻页时，会执行这个方法两次，state值分别为2 , 0 。三个方法的执行顺序为：用手指拖动翻页时，最先执行一遍onPageScrollStateChanged（1），然后不断执行onPageScrolled，放手指的时候，直接立即执行一次onPageScrollStateChanged（2），然后立即执行一次onPageSelected，然后再不断执行onPageScrollStateChanged，最后执行一次onPageScrollStateChanged（0）。其它的情况由这个可以推出来，不再赘述。</p>
<hr>
<p>参考链接：</p>
<p><a href="http://www.eoeandroid.com/forum.php?mod=viewthread&amp;tid=548173" target="_blank" rel="external">EOE</a></p>
<p><a href="http://blog.csdn.net/onlyonecoder/article/details/8518148" target="_blank" rel="external">CSDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中关于Activity/ActionBarActivity/AppCompatActivity的区分与理解]]></title>
      <url>http://dalufan.com/2015/09/08/android-Activity-ActionBarActivity-AppCompatActivity/</url>
      <content type="html"><![CDATA[<h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>之前一直用Eclipse写android，最近换到了android Studio，因为毕竟是Google推荐的，也是未来的大势所趋，在使用过程中，遇到一些关于Activity的问题，下面来讨论下。</p>
<a id="more"></a>
<h3 id="0x01-Eclipse"><a href="#0x01-Eclipse" class="headerlink" title="0x01 Eclipse"></a>0x01 Eclipse</h3><p>先说Eclipse。先新建项目，其中Minimum Required  SDK 选择API14 :android 4.0,(Icecream Sandwich)，Target SDK和Compile With选择API19：android 4.4(KitKat)，新建完成后，MainActivity 自动继承自Activity。以下是程序运行后的截图：</p>
<p><img src="/article_images/android_activity_actionbar01.png" alt="alt"></p>
<p>可以发现，在主界面顶端会出现ActionBar，显示当前Activity的名称androidTest。这是Eclipse的情况，下面看一下android Studio中的情况。</p>
<h3 id="0x02-android-Studio"><a href="#0x02-android-Studio" class="headerlink" title="0x02 android Studio"></a>0x02 android Studio</h3><p>在android Studio中先新建一个Project，Application name为androidTest，然后在platform和SDK中选择Phone And Tablet.Minimum SDK选择API 14：android 4.0(IceCreamSandwich),新建完成后，自动会在Project中新建一个Module,名称为app.此时可以发现MainActivity是默认继承自ActionBarActivity.并且在ActionBarActivity上有一条删除线，表现该ActionBarActivity已经禁用了，查看提示会发现：“android.support.v7.app.ActionBarActivity is deprecated”.表示已经被禁用。以下是程序运行后的截图：</p>
<p><img src="/article_images/android_activity_actionbar02.png" alt="alt"></p>
<p>可以发现在顶端还是会出现ActionBar，默认显示项目名称androidTest.与Eclipse中的项目没有任何区别，只是MainActivity继承的父类分别是Activity和ActionBarActivity而已。由于android开发中一个Class的禁用总会让人不爽，下面将AS中继承的ActionBarActivity手动改成Activity.并导入对应的包，程序运行后的截图如下所示：</p>
<p><img src="/article_images/android_activity_actionbar03.png" alt="alt"></p>
<p>可以发现顶端的ActionBar不见了。这就和Eclipse中完全不同了。同样是继承自Activity，界面UI却不同。这也是Eclipse和AS开发android项目的区别之一。如果要在AS中也使用ActionBar，并且不使用已经的禁用的ActionBarActivity，有什么办法呢？就是使用AppCompatActivity.在AS中把MainActivity继承自AppCompatActivity，并导入对应的包，程序运行后截图：</p>
<p><img src="/article_images/android_activity_actionbar04.png" alt="alt"></p>
<p>可以发现我们可爱的ActionBar又出现了。并且AppCompatActivity并没有禁用。以后在我们的项目中，可以通过手动修改Activity的继承父类，来决定是否显示ActionBar。并且对程序没有其他影响。同样的代码在Eclipseh和android Studio中会出现较大差异，需要区别对待。</p>
<hr>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/chenyufeng1991/article/details/46858249" target="_blank" rel="external">CSDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android BitmapFactory的OutOfMemoryError的解决方案 ]]></title>
      <url>http://dalufan.com/2015/09/07/android-BitmapFactory-OutOfMemoryError/</url>
      <content type="html"><![CDATA[<p>使用android提供的BitmapFactory解码一张图片时，有时会遇到该错误，即：java.lang.OutOfMemoryError: bitmap size exceeds VM budget。这往往是由于图片过大造成的。要想正常使用，一种方式是分配更少的内存空间来存储，即在载入图片的时候以牺牲图片质量为代价，将图片进行放缩，这也是不少人现在为避免以上的OOM所采用的解决方法。但是，这种方法是得不偿失的，当我们使用图片作为缩略图查看时候倒是没有说什么，但是，当需要提供图片质量的时候，该怎么办呢？java.lang.OutOfMemoryError: bitmap size exceeds VM budget着实让不少人欲哭无泪呀！前几天刚好有个需求需要载入SD卡上面的图片。</p>
<a id="more"></a> 
<p>首先是使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bitmap bmp = BitmapFactory.decodeFile(pePicFile.getAbsolutePath() + <span class="string">"/"</span>+info.getImage());</div></pre></td></tr></table></figure>
<p>上面参数是我将要读取的图片文件及路径，当文件较小时，程序能够正常运行，但是当我选择一张大图时，程序立刻蹦出了java.lang.OutOfMemoryError: bitmap size exceeds VM budget的OOM错误！</p>
<p>在android设备上（where you have only 16MB memory available），如果使用BitmapFactory解码一个较大文件，很大的情况下会出现上述情况。那么，怎么解决？！</p>
<p>先说之前提到过的一种方法：即将载入的图片缩小，这种方式以牺牲图片的质量为代价。在BitmapFactory中有一个内部类BitmapFactory.Options，其中当options.inSampleSize值&gt;1时，根据文档：</p>
<blockquote>
<p>If set to a value &gt; 1, requests the decoder to subsample the original image, returning a smaller image to save memory. (1 -&gt; decodes full size; 2 -&gt; decodes 1/4th size; 4 -&gt; decode 1/16th size). Because you rarely need to show and have full size bitmap images on your phone. For manipulations smaller sizes are usually enough.</p>
</blockquote>
<p>也就是说，<code>options.inSampleSize</code>是以2的指数的倒数被进行放缩。这样，我们可以依靠inSampleSize的值的设定将图片放缩载入，这样一般情况也就不会出现上述的OOM问题了。现在问题是怎么确定inSampleSize的值？每张图片的放缩大小的比例应该是不一样的！这样的话就要运行时动态确定。在BitmapFactory.Options中提供了另一个成员inJustDecodeBounds。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options opts = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">opts.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">Bitmap bitmap = BitmapFactory.decodeFile(imageFile, opts);</div></pre></td></tr></table></figure>
<p>设置inJustDecodeBounds为true后，decodeFile并不分配空间，但可计算出原始图片的长度和宽度，即opts.width和opts.height。有了这两个参数，再通过一定的算法，即可得到一个恰当的inSampleSize。android提供了一种动态计算的方法。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">computeSampleSize</span><span class="params">(BitmapFactory.Options options,</span></span></div><div class="line">        <span class="keyword">int</span> minSideLength, <span class="keyword">int</span> maxNumOfPixels) &#123;</div><div class="line">    <span class="keyword">int</span> initialSize = computeInitialSampleSize(options, minSideLength,</div><div class="line">            maxNumOfPixels);</div><div class="line"> </div><div class="line">    <span class="keyword">int</span> roundedSize;</div><div class="line">    <span class="keyword">if</span> (initialSize &lt;= <span class="number">8</span>) &#123;</div><div class="line">        roundedSize = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (roundedSize &lt; initialSize) &#123;</div><div class="line">            roundedSize &lt;&lt;= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        roundedSize = (initialSize + <span class="number">7</span>) / <span class="number">8</span> * <span class="number">8</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> roundedSize;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">computeInitialSampleSize</span><span class="params">(BitmapFactory.Options options,</span></span></div><div class="line">        <span class="keyword">int</span> minSideLength, <span class="keyword">int</span> maxNumOfPixels) &#123;</div><div class="line">    <span class="keyword">double</span> w = options.outWidth;</div><div class="line">    <span class="keyword">double</span> h = options.outHeight;</div><div class="line"> </div><div class="line">    <span class="keyword">int</span> lowerBound = (maxNumOfPixels == -<span class="number">1</span>) ? <span class="number">1</span> :</div><div class="line">            (<span class="keyword">int</span>) Math.ceil(Math.sqrt(w * h / maxNumOfPixels));</div><div class="line">    <span class="keyword">int</span> upperBound = (minSideLength == -<span class="number">1</span>) ? <span class="number">128</span> :</div><div class="line">            (<span class="keyword">int</span>) Math.min(Math.floor(w / minSideLength),</div><div class="line">            Math.floor(h / minSideLength));</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (upperBound &lt; lowerBound) &#123;</div><div class="line">        <span class="keyword">return</span> lowerBound;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> ((maxNumOfPixels == -<span class="number">1</span>) &amp;&amp;</div><div class="line">            (minSideLength == -<span class="number">1</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (minSideLength == -<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> lowerBound;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> upperBound;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上参考一下，我们只需要使用此函数就行了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options opts = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">opts.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">BitmapFactory.decodeFile(imageFile, opts);</div><div class="line">             </div><div class="line">opts.inSampleSize = computeSampleSize(opts, -<span class="number">1</span>, <span class="number">128</span>*<span class="number">128</span>);</div><div class="line"><span class="comment">//这里一定要将其设置回false，因为之前我们将其设置成了true      </span></div><div class="line">opts.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Bitmap bmp = BitmapFactory.decodeFile(imageFile, opts);</div><div class="line">    imageView.setImageBitmap(bmp);</div><div class="line">    &#125; </div><div class="line"><span class="keyword">catch</span> (OutOfMemoryError err) &#123;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这样，在BitmapFactory.decodeFile执行处，也就不会报出上面的OOM Error了。完美解决？如前面提到的，这种方式在一定程度上是以牺牲图片质量为代价的。如何才能更加优化的实现需求？</p>
<p>当在android设备中载入较大图片资源时，可以创建一些临时空间，将载入的资源载入到临时空间中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options bfOptions=<span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">bfOptions.inTempStorage=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">12</span> * <span class="number">1024</span>];</div></pre></td></tr></table></figure>
<p>以上创建了一个12kb的临时空间。然后使用Bitmap bitmapImage = BitmapFactory.decodeFile(path,bfOptions);但是我在程序中却还是出现以上问题！以下使用BitmapFactory.decodeFileDescriptor解决了以上问题：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options bfOptions=<span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">             bfOptions.inDither=<span class="keyword">false</span>;                   </div><div class="line">             bfOptions.inPurgeable=<span class="keyword">true</span>;             </div><div class="line">             bfOptions.inTempStorage=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">12</span> * <span class="number">1024</span>];</div><div class="line">            <span class="comment">// bfOptions.inJustDecodeBounds = true;</span></div><div class="line">             File file = <span class="keyword">new</span> File(pePicFile.getAbsolutePath() + <span class="string">"/"</span>+info.getImage());</div><div class="line">             FileInputStream fs=<span class="keyword">null</span>;</div><div class="line">             <span class="keyword">try</span> &#123;</div><div class="line">                fs = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">             Bitmap bmp = <span class="keyword">null</span>;</div><div class="line">             <span class="keyword">if</span>(fs != <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    bmp = BitmapFactory.decodeFileDescriptor(fs.getFD(), <span class="keyword">null</span>, bfOptions);</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;<span class="keyword">finally</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(fs!=<span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            fs.close();</div><div class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div></pre></td></tr></table></figure>
<p>当然要将取得图片进行放缩显示等处理也可以在以上得到的bmp进行。</p>
<p>PS：请图片处理后进行内存回收。 bmp.recycle();这样将图片占有的内存资源释放。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (bitmap_tmp != <span class="keyword">null</span> &amp;&amp; !bitmap_tmp.isRecycled())</div><div class="line">    bitmap_tmp.recycle();</div><div class="line">bitmap_tmp = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<p><strong>通过限制加载像素大小的完整代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromFile</span><span class="params">(File dst, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != dst &amp;&amp; dst.exists()) &#123;</div><div class="line">        BitmapFactory.Options opts = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (width &gt; <span class="number">0</span> &amp;&amp; height &gt; <span class="number">0</span>) &#123;</div><div class="line">            opts = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">            opts.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">            BitmapFactory.decodeFile(dst.getPath(), opts);</div><div class="line">            <span class="comment">// 计算图片缩放比例</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> minSideLength = Math.min(width, height);</div><div class="line">            opts.inSampleSize = computeSampleSize(opts, minSideLength,</div><div class="line">                    width * height);</div><div class="line">            opts.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line">            opts.inInputShareable = <span class="keyword">true</span>;</div><div class="line">            opts.inPurgeable = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> BitmapFactory.decodeFile(dst.getPath(), opts);</div><div class="line">        &#125; <span class="keyword">catch</span> (OutOfMemoryError e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">computeSampleSize</span><span class="params">(BitmapFactory.Options options,</span></span></div><div class="line">        <span class="keyword">int</span> minSideLength, <span class="keyword">int</span> maxNumOfPixels) &#123;</div><div class="line">    <span class="keyword">int</span> initialSize = computeInitialSampleSize(options, minSideLength,</div><div class="line">            maxNumOfPixels);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> roundedSize;</div><div class="line">    <span class="keyword">if</span> (initialSize &lt;= <span class="number">8</span>) &#123;</div><div class="line">        roundedSize = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (roundedSize &lt; initialSize) &#123;</div><div class="line">            roundedSize &lt;&lt;= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        roundedSize = (initialSize + <span class="number">7</span>) / <span class="number">8</span> * <span class="number">8</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> roundedSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">computeInitialSampleSize</span><span class="params">(BitmapFactory.Options options,</span></span></div><div class="line">        <span class="keyword">int</span> minSideLength, <span class="keyword">int</span> maxNumOfPixels) &#123;</div><div class="line">    <span class="keyword">double</span> w = options.outWidth;</div><div class="line">    <span class="keyword">double</span> h = options.outHeight;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> lowerBound = (maxNumOfPixels == -<span class="number">1</span>) ? <span class="number">1</span> : (<span class="keyword">int</span>) Math.ceil(Math</div><div class="line">            .sqrt(w * h / maxNumOfPixels));</div><div class="line">    <span class="keyword">int</span> upperBound = (minSideLength == -<span class="number">1</span>) ? <span class="number">128</span> : (<span class="keyword">int</span>) Math.min(Math</div><div class="line">            .floor(w / minSideLength), Math.floor(h / minSideLength));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (upperBound &lt; lowerBound) &#123;</div><div class="line">        <span class="comment">// return the larger one when there is no overlapping zone.</span></div><div class="line">        <span class="keyword">return</span> lowerBound;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((maxNumOfPixels == -<span class="number">1</span>) &amp;&amp; (minSideLength == -<span class="number">1</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (minSideLength == -<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> lowerBound;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> upperBound;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>尽量不要使用setImageBitmap或setImageResource 或BitmapFactory.decodeResource来设置一张大图， 因为这些函数在完成decode后，最终都是通过java层的createBitmap来完成的， 需要消耗更多内存。因此，改用先通过BitmapFactory.decodeStream方法，创建出一个bitmap，再将其设为ImageView的 source，decodeStream最大的秘密在于其直接调用 JNI &gt;&gt; nativeDecodeAsset() 来完成decode，无需再使用java层的createBitmap，从而节省了java层的空间。  </p>
<p>如果在读取时加上图片的Config参数，可以更有效减少加载的内存，从而有效阻止抛出out of Memory异常.另外，decodeStream直接拿的图片来读取字节码了，不会根据机器的各种分辨率来自动适应，使用了decodeStream之后，需要在hdpi和mdpi，ldpi中配置相应的图片资源， 否则在不同分辨率机器上都是同样大小（像素点数量），显示出来的大小就不对了。  </p>
<p>下面给出一段读取Bitmap的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * BitmapFactory.Options.inPreferredConfig</div><div class="line">     * ALPHA_8:数字为8，图形参数应该由一个字节来表示,应该是一种8位的位图 </div><div class="line">     * ARGB_4444:4+4+4+4=16，图形的参数应该由两个字节来表示,应该是一种16位的位图. </div><div class="line">     * ARGB_8888:8+8+8+8=32，图形的参数应该由四个字节来表示,应该是一种32位的位图. </div><div class="line">     * RGB_565:5+6+5=16，图形的参数应该由两个字节来表示,应该是一种16位的位图. </div><div class="line">     *  </div><div class="line">     * ALPHA_8，ARGB_4444，ARGB_8888都是透明的位图，也就是所字母A代表透明。 </div><div class="line">     * ARGB_4444:意味着有四个参数,即A,R,G,B,每一个参数由4bit表示. </div><div class="line">     * ARGB_8888:意味着有四个参数,即A,R,G,B,每一个参数由8bit来表示. </div><div class="line">     * RGB_565:意味着有三个参数,R,G,B,三个参数分别占5bit,6bit,5bit. </div><div class="line">     *  </div><div class="line">     *  </div><div class="line">     * BitmapFactory.Options.inPurgeable; </div><div class="line">     *  </div><div class="line">     * 如果 inPurgeable 设为True的话表示使用BitmapFactory创建的Bitmap </div><div class="line">     * 用于存储Pixel的内存空间在系统内存不足时可以被回收， </div><div class="line">     * 在应用需要再次访问Bitmap的Pixel时（如绘制Bitmap或是调用getPixel）， </div><div class="line">     * 系统会再次调用BitmapFactory decoder重新生成Bitmap的Pixel数组。  </div><div class="line">     * 为了能够重新解码图像，bitmap要能够访问存储Bitmap的原始数据。 </div><div class="line">     *  </div><div class="line">     * 在inPurgeable为false时表示创建的Bitmap的Pixel内存空间不能被回收， </div><div class="line">     * 这样BitmapFactory在不停decodeByteArray创建新的Bitmap对象， </div><div class="line">     * 不同设备的内存不同，因此能够同时创建的Bitmap个数可能有所不同， </div><div class="line">     * 200个bitmap足以使大部分的设备重新OutOfMemory错误。 </div><div class="line">     * 当isPurgable设为true时，系统中内存不足时， </div><div class="line">     * 可以回收部分Bitmap占据的内存空间，这时一般不会出现OutOfMemory 错误。 </div><div class="line">     */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">readBitmap</span><span class="params">(Context context, <span class="keyword">int</span> resId)</span> </span>&#123;    </div><div class="line">       BitmapFactory.Options opts = <span class="keyword">new</span> BitmapFactory.Options();    </div><div class="line">       opts.inPreferredConfig = Config.RGB_565;    </div><div class="line">       opts.inPurgeable = <span class="keyword">true</span>;    </div><div class="line">       opts.inInputShareable = <span class="keyword">true</span>;    </div><div class="line">       InputStream is = context.getResources().openRawResource(resId);    </div><div class="line">       <span class="keyword">return</span> BitmapFactory.decodeStream(is, <span class="keyword">null</span>, opts);    </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/bigconvience/article/details/27054639" target="_blank" rel="external">CSDN</a></p>
<p><a href="http://www.cnblogs.com/hellope/archive/2011/08/23/2150400.html" target="_blank" rel="external">CNBLOG</a></p>
<p><a href="http://orgcent.com/android-outofmemoryerror-load-big-image/" target="_blank" rel="external">OTT</a></p>
<p><a href="http://lichen.blog.51cto.com/697816/1559593" target="_blank" rel="external">OTT</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在android Studio 和 Eclipse 的 git 插件操作'代码提交'以及'代码冲突' ]]></title>
      <url>http://dalufan.com/2015/09/03/git-android-as/</url>
      <content type="html"><![CDATA[<h3 id="0x00-代码更新"><a href="#0x00-代码更新" class="headerlink" title="0x00 代码更新"></a>0x00 代码更新</h3><p>先更新 “远程服务器 –&gt; 本地服务器”，再进行 更新 “ 本地服务器 –&gt; 本地代码”。</p>
<p>Eclipse的操作就是:</p>
<p><img src="/article_images/git_android_as01.png" alt="alt"></p>
<a id="more"></a>
<p>1.指向代表的意思是只更新 “远程服务器 –&gt; 本地服务器” 简称(Fetch)</p>
<p><img src="/article_images/git_android_as02.png" alt="alt"></p>
<p>当你更新后，你当前更新的项目与Git Repositories都会有类似一个向下的箭头，这代表“远程服务器”有东西更新到你的“本地服务器 ”，具体数量就是箭头隔壁的数字</p>
<p>2.指向代表的意思是 “远程服务器 –&gt; 本地服务器” 与 “ 本地服务器 –&gt; 本地代码” 都执行  简称(Pull)</p>
<p>(当然有先后顺序的，先 “远程服务器 –&gt; 本地服务器” 后 “ 本地服务器 –&gt; 本地代码”)</p>
<p>这个操作其实是面向懒人把Git当成SVN使用，一步更新，官方也是不推荐这样做，因为这样，你本地代码，可能一下子代码冲突很多，给开发人员带来很多不便。</p>
<p>所以还是老实点，一步步来更新吧。</p>
<p>而在android Studio的操作就是：</p>
<p><img src="/article_images/git_android_as03.png" alt="alt"></p>
<p>1.不知道怎么回事，在android Studio就没有两步更新的操作，只有上面两个箭头的操作，都是直接把”远程服务器 –&gt; 本地服务器” 与 “ 本地服务器 –&gt; 本地代码”  都执行了，</p>
<p>所以一更新完，你就等着去解决冲突吧。</p>
<h3 id="0x01-提交代码"><a href="#0x01-提交代码" class="headerlink" title="0x01 提交代码"></a>0x01 提交代码</h3><p>其实经过刚才的更新讲解后，小伙伴们都知道”远程服务器 –&gt; 本地服务器” 与 “ 本地服务器 –&gt; 本地代码” 的关系了，<br>所以提交代码实质上都要走这样的操作 “ 本地代码 –&gt; 本地服务器”  “本地服务器 –&gt; 远程服务器” 还是上图吧！</p>
<p>其实小伙伴就记住两个词就好了。</p>
<ul>
<li><p>Commit : “ 本地代码 –&gt; 本地服务器”</p>
</li>
<li><p>Push :  “本地服务器 –&gt; 远程服务器” </p>
</li>
</ul>
<p>Eclipse的操作就是:</p>
<p><img src="/article_images/git_android_as04.png" alt="alt"></p>
<p>1.从上面的图中看到，在Git的作出修改，会有一个箭头指向。然后你右键项目又好，右键箭头文件也好。都是执行commit操作。去到commit界面</p>
<p><img src="/article_images/git_android_as05.png" alt="alt"></p>
<p>Git 的Commit有种强迫症，一定要你打注释，不然不给你提交。</p>
<p>当你敲入 Commit Message后，Commit 与 Commit and Push 就会可点击了</p>
<p>Commit只是提交到 “本地服务器” </p>
<p>Commit and Push 就两步都会做( “ 本地代码 –&gt; 本地服务器”  “本地服务器 –&gt; 远程服务器” 有先后顺序，我下次不说了)</p>
<p>后面我就不写了。因为后面的都是敲账号和密码，如果你第一次 Push 代码 的话，才需要敲。</p>
<p>通常 Push  不了，无非就两个问题。</p>
<p>第一。你代码冲突还没有解决，一会 “代码冲突” 说具体讲解</p>
<p>第二。就是可恶的网络问题。(同学。这个我可帮不了你了)</p>
<p>其他的，我暂时没有遇到</p>
<p>而在android Studio的操作与Eclipse的一样差不多，就是Git  Repositories 变成</p>
<p><img src="/article_images/git_android_as06.png" alt="alt"></p>
<p>通过这里你可以知道你的修改的代码Push 了没有</p>
<p><img src="/article_images/git_android_as07.png" alt="alt"></p>
<p>然后。</p>
<p><img src="/article_images/git_android_as08.png" alt="alt"></p>
<p>接着还是那些填账号密码的操作，就不说了。</p>
<h3 id="0x02-代码冲突"><a href="#0x02-代码冲突" class="headerlink" title="0x02 代码冲突"></a>0x02 代码冲突</h3><p>1.先说Eclipse吧：</p>
<p>如果你是先修改完代码还没有commit，在执行Fetch,那你还没有feel到代码冲突。</p>
<p>I.只要你commit到本地服务器，IDE编译器就自动告诉你，已经冲突，要求你立刻解决。</p>
<p>II.如果你比较任性的话。直接想Commit And Push, IDE编译器也会很任性的回复你这样的图</p>
<p><img src="/article_images/git_android_as09.png" alt="alt"></p>
<p>拒绝你Push，说你还有问题没有解决。</p>
<p>但是你已经Commit了，但是又无法Push，</p>
<p>这是你应该要执行一下 Pull ，把 刚才Fetch 的代码植入”本地代码”,这时IDE编译器才自动告诉你，已经冲突，要求你立刻解决。</p>
<p>并且把冲突文件标记为一个双向箭头</p>
<p>如图</p>
<p><img src="/article_images/git_android_as10.png" alt="alt"></p>
<p>如果你现在还想执意Push代码，得到的就是下图:</p>
<p>Repository state ： Conflicts（简单意思就说：大哥，代码冲突啊，解决后，再提交吧）</p>
<p><img src="/article_images/git_android_as11.png" alt="alt"></p>
<p>然后，你解决后，保存，发现，那个文件还是像下图的那样，无法提交。</p>
<p><img src="/article_images/git_android_as12.png" alt="alt"></p>
<p>这时，应该</p>
<p><img src="/article_images/git_android_as13.png" alt="alt"></p>
<p>执行这样“Add to Index ”的操作，告诉IDE编译器你已经解决冲突了，如下图：</p>
<p><img src="/article_images/git_android_as14.png" alt="alt"></p>
<p>现在你就可以去Commit 也好，Commit And Push 也好，IDE编译器都会通过的（其实告诉你。去吧，骚年！）</p>
<p>2.android Studio在 在更新代码时，</p>
<p>如果按工具栏的更新图标的话，如果有冲突时 就强制性让你去解决冲突。出现下图</p>
<p><img src="/article_images/git_android_as15.png" alt="alt"></p>
<p>通过点击Merge能清楚知道，你的代码，解决后冲突的代码，服务器的代码</p>
<p>解决后冲突的代码直接覆盖你的本地代码。(或者你点击Close，然后冲突的代码直接跳在你的本地代码，让你在本地代码修改。)</p>
<p>解决完冲突后，就可以Commit和Push了。比Eclipse方便一点点。</p>
<hr>
<p>参考链接：</p>
<p><a href="http://www.cnblogs.com/shortboy/p/4429368.html" target="_blank" rel="external">CNBLOG</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Zxing二维码扫描框大小修改]]></title>
      <url>http://dalufan.com/2015/09/01/android-QR-changesize/</url>
      <content type="html"><![CDATA[<p>二维码扫描开源代码中，定义的扫描框大小不能适配不同分辨率手机，特别是2K屏，修改如下：</p>
<p>修改CameraManager的getFramingRect()方法中对width和height的定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DisplayMetrics metrics = context.getResources().getDisplayMetrics();</div><div class="line"><span class="keyword">int</span> width = (<span class="keyword">int</span>) (metrics.widthPixels * <span class="number">0.6</span>);</div><div class="line"><span class="keyword">int</span> height = (<span class="keyword">int</span>) (width * <span class="number">0.9</span>);</div></pre></td></tr></table></figure>
<p>也可根据自己的需求修改。</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ScrollView中RelativeLayout设置match_parent无法填充满屏幕]]></title>
      <url>http://dalufan.com/2015/08/28/android-Scrollview-RelativeLayout/</url>
      <content type="html"><![CDATA[<p>ScrollView滚动视图是指当拥有很多内容、屏幕显示不完时、需要通过滚动跳来显示的视图、Scrollview的一般用法如下、以下代码在Scrollview里面放了一个RelativeLayout、并且是设置为android:layout_height=”match_parent”填充全屏的、RelativeLayout里面放置了一个TextView背景设为了一张图片、按照代码理解、图片应该是居于屏幕的最下方的。</p>
<a id="more"></a> 
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ScrollView</span></span></div><div class="line">	<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">	<span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">		<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">		<span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">		<span class="attr">android:background</span>=<span class="string">"@color/common_background"</span> &gt;</div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">			<span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">			<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">			<span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">			<span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">			<span class="attr">android:background</span>=<span class="string">"@drawable/bottom_bg"</span> /&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div></pre></td></tr></table></figure>
<p>但是最后运行的效果是这样的、你会发现图片并没有局到整个屏幕的下边、而是在上面，那么要怎么解决这个问题呢、最后我在查看文档的时候发现了这样一个属性、设置了就可以解决这个问题了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ScrollView</span></span></div><div class="line">	<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">	<span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">	<span class="attr">android:fillViewport</span>=<span class="string">"true"</span> &gt;</div><div class="line">	...</div><div class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div></pre></td></tr></table></figure>
<p>也就是说设置ScrollView的android:fillViewport为true即可</p>
<hr>
<p>参考链接：</p>
<p><a href="http://dwtedx.com/itshare_291.html" target="_blank" rel="external">DWTEDX</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Retrofit 中文文档]]></title>
      <url>http://dalufan.com/2015/08/28/retrofit-usage/</url>
      <content type="html"><![CDATA[<h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>现在，android应用程序中集成第三方API已十分流行。应用程序都有自己的网络操作和缓存处理机制，但是大部分比较脆弱，没有针对网络糟糕情况进行优化。感谢Square lnc 这家有创新精神的公司，将信用卡商业交易带到手机上。现在有了一系列高质量开源库，支持在android应用程序中集成。</p>
<p>现在，我们要依次学习使用Retrofit、OKHttp和GSON，简单快速的集成REST API。使用这个组合，我们需要从Twitch.tv下载并解析一些数据。跟着下面的步骤可以在几分钟内，不用写繁琐的模板代码，完成大部分的REST API集成。</p>
<a id="more"></a> 
<h3 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h3><h4 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h4><p>Retrofit简化了从Web API下载数据，解析成普通的Java对象（POJO）。例如，要从Github 上下载用户仓库的信息，你只需要编写下面的几行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;/repos"</span>)</div><div class="line"><span class="function">List <span class="title">listRepos</span><span class="params">(@Path(<span class="string">"user"</span>)</span> String user)</span>;</div></pre></td></tr></table></figure>
<p>另外，你需要创建仓库信息类和数据类型。这些代码也可以自动生成，下面会介绍如何自动生成。</p>
<p>整个过程很简单，类似发送一次有参数的请求或发送POST或HEAD。如何连接不同类型的API，请查看文末链接。</p>
<p>Retrofit的特性之一可以将处理逻辑添加到请求和响应中。你可以添加数据到http请求头部，也可以拦截验证失败的响应重定向到登录界面。</p>
<h4 id="OKHttp"><a href="#OKHttp" class="headerlink" title="OKHttp"></a>OKHttp</h4><p>OKHttp是android版Http客户端。非常高效，支持SPDY、连接池、GZIP和 HTTP 缓存。默认情况下，OKHttp会自动处理常见的网络问题，像二次连接、SSL的握手问题。如果你的应用程序中集成了OKHttp，Retrofit默认会使用OKHttp处理其他网络层请求。</p>
<h4 id="GSON"><a href="#GSON" class="headerlink" title="GSON"></a>GSON</h4><p>GSON是将JSON解析成POJO的Java库。GSON也可以将POJO解析成JSON。在android中，数据对象存储在SharePreference更加方便。</p>
<p>要使用GSON，首先需要创建相应的POJO数据，再用GSON解析为POJO对象。解析过程简单且非常高效。需要了解如何创建可以被GSON解析的POJO对象，请查看说明文档。Retrofit使用GSON解析JSON数据。</p>
<p><code>仅仅导入Retrofit包是不够的，必须导入Gson包，因为在Retrofit里面已经使用Gson。</code></p>
<h3 id="0x02-使用"><a href="#0x02-使用" class="headerlink" title="0x02 使用"></a>0x02 使用</h3><h4 id="添加库文件到工程"><a href="#添加库文件到工程" class="headerlink" title="添加库文件到工程"></a>添加库文件到工程</h4><ul>
<li>下载<a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit</a>、<a href="https://github.com/square/okhttp" target="_blank" rel="external">OKHttp</a>、<a href="https://code.google.com/p/google-gson/" target="_blank" rel="external">GSON</a>库文件。</li>
<li>逐个添加jar文件到你的工程中。</li>
<li>如果使用android Studio，可以使用gradle同步这个工程。</li>
</ul>
<h4 id="展示输出"><a href="#展示输出" class="headerlink" title="展示输出"></a>展示输出</h4><p>展示一些API返回的数据，下面的示例是由于是一个GET请求，只能在浏览器中运行，返回数据如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"body"</span>: &#123;</div><div class="line">        <span class="attr">"ad"</span>: &#123;</div><div class="line">            <span class="attr">"welcome_ad"</span>: <span class="string">"0"</span>,</div><div class="line">            <span class="attr">"article_ad"</span>: <span class="string">"0"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"article"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"id"</span>: <span class="string">"522"</span>,</div><div class="line">                <span class="attr">"title"</span>: <span class="string">"真问真答：古诗中“斜”读“xia”正确吗"</span>,</div><div class="line">                <span class="attr">"headpic"</span>: <span class="string">"http://static.idaxiang.org/b80772173889d23c5ff2c69ac6fd7e78_thumb.jpeg"</span>,</div><div class="line">                <span class="attr">"raw_headpic"</span>: <span class="string">"http://static.idaxiang.org/b80772173889d23c5ff2c69ac6fd7e78.jpeg"</span>,</div><div class="line">                <span class="attr">"author"</span>: <span class="string">"郑子宁 张稆元"</span>,</div><div class="line">                <span class="attr">"brief"</span>: <span class="string">"为什么欧洲君主名称总是查理、威廉、乔治等加上N世后缀的形式？ | 古诗中“斜”读“xia”正确吗？ | 为什么高空跳伞时可以翻跟头和做很多动作？"</span>,</div><div class="line">                <span class="attr">"read_num"</span>: <span class="string">"10299"</span>,</div><div class="line">                <span class="attr">"wechat_url"</span>: <span class="string">"http://mp.weixin.qq.com/s?__biz=MjM5NzQwNjcyMQ==&amp;mid=217617633&amp;idx=1&amp;sn=203336ecb089279758ed6a03c5daa50c#rd"</span>,</div><div class="line">                <span class="attr">"url"</span>: <span class="string">""</span>,</div><div class="line">                <span class="attr">"create_time"</span>: <span class="string">"1440691200"</span>,</div><div class="line">                <span class="attr">"update_time"</span>: <span class="string">"1440990566"</span></div><div class="line">            &#125;,</div><div class="line"></div><div class="line">            ...</div><div class="line">            </div><div class="line">            &#123;</div><div class="line">                <span class="attr">"id"</span>: <span class="string">"521"</span>,</div><div class="line">                <span class="attr">"title"</span>: <span class="string">"为什么中国人用算盘，西方人用计算机"</span>,</div><div class="line">                <span class="attr">"headpic"</span>: <span class="string">"http://static.idaxiang.org/452fd8abedf0eea7e10155e19c46b52c_thumb.jpeg"</span>,</div><div class="line">                <span class="attr">"raw_headpic"</span>: <span class="string">"http://static.idaxiang.org/452fd8abedf0eea7e10155e19c46b52c.jpeg"</span>,</div><div class="line">                <span class="attr">"author"</span>: <span class="string">"刘大可"</span>,</div><div class="line">                <span class="attr">"brief"</span>: <span class="string">"欧亚大陆的东西两端是人类文明史上最好的对比材料，仅就计算工具而言，中国人善用算盘，手熟者常常自诩赛过计算器；西方世界却厚积薄发，在20世纪中叶发明了通用电子计算机。让人难免好奇，是什么样的力量，主导了这大相径庭的技术史？"</span>,</div><div class="line">                <span class="attr">"read_num"</span>: <span class="string">"19660"</span>,</div><div class="line">                <span class="attr">"wechat_url"</span>: <span class="string">"http://mp.weixin.qq.com/s?__biz=MjM5NzQwNjcyMQ==&amp;mid=217578493&amp;idx=1&amp;sn=e35775fbaf3b6d8eb35f46fce9f566e6#rd"</span>,</div><div class="line">                <span class="attr">"url"</span>: <span class="string">""</span>,</div><div class="line">                <span class="attr">"create_time"</span>: <span class="string">"1440604800"</span>,</div><div class="line">                <span class="attr">"update_time"</span>: <span class="string">"1440681291"</span></div><div class="line">            &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"head"</span>: &#123;</div><div class="line">        <span class="attr">"code"</span>: <span class="number">0</span>,</div><div class="line">        <span class="attr">"message"</span>: <span class="string">""</span>,</div><div class="line">        <span class="attr">"has_more"</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="创建POJO"><a href="#创建POJO" class="headerlink" title="创建POJO"></a>创建POJO</h4><p>这部分很有趣，用我们获取到的数据自动创建对应的POJO。使用<a href="http://www.jsonschema2pojo.org/" target="_blank" rel="external">jsonschema2pojo</a>，导入包名、类名和JSON数据，保存为私有类型。选择源代码类型为Json，注解类型是Gson,然后点击preview。</p>
<p>对于上面这样的一个json，直接使用Retrofit返回list的话，需要重新定义实体类</p>
<p>该实体类依赖于Gson包，对于不需要的参数可以不在实体类中声明</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.gson.annotations.Expose;</div><div class="line"><span class="keyword">import</span> com.google.gson.annotations.SerializedName;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 大象工会实体类</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DXArticleItem</span>  </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Expose</span></div><div class="line">	<span class="keyword">private</span> Body body;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Body <span class="title">getBody</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> body;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBody</span><span class="params">(Body body)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.body = body;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123;</div><div class="line">		<span class="meta">@Expose</span></div><div class="line">		<span class="keyword">private</span> List&lt;DXArticle&gt; article = <span class="keyword">new</span> ArrayList&lt;DXArticle&gt;();</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> List&lt;DXArticle&gt; <span class="title">getArticle</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> article;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArticle</span><span class="params">(List&lt;DXArticle&gt; article)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.article = article;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DXArticle</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span></span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Expose</span></div><div class="line">		<span class="keyword">private</span> String id;</div><div class="line">		<span class="meta">@Expose</span></div><div class="line">		<span class="keyword">private</span> String title;</div><div class="line">		<span class="meta">@Expose</span></div><div class="line">		<span class="keyword">private</span> String headpic;</div><div class="line">		<span class="meta">@SerializedName</span>(<span class="string">"raw_headpic"</span>)</div><div class="line">		<span class="meta">@Expose</span></div><div class="line">		<span class="keyword">private</span> String rawHeadpic;</div><div class="line">		<span class="meta">@Expose</span></div><div class="line">		<span class="keyword">private</span> String author;</div><div class="line">		<span class="meta">@Expose</span></div><div class="line">		<span class="keyword">private</span> String brief;</div><div class="line">		<span class="meta">@SerializedName</span>(<span class="string">"read_num"</span>)</div><div class="line">		<span class="meta">@Expose</span></div><div class="line">		<span class="keyword">private</span> String readNum;</div><div class="line">		<span class="meta">@SerializedName</span>(<span class="string">"wechat_url"</span>)</div><div class="line">		<span class="meta">@Expose</span></div><div class="line">		<span class="keyword">private</span> String wechatUrl;</div><div class="line">		<span class="meta">@Expose</span></div><div class="line">		<span class="keyword">private</span> String url;</div><div class="line">		<span class="meta">@SerializedName</span>(<span class="string">"create_time"</span>)</div><div class="line">		<span class="meta">@Expose</span></div><div class="line">		<span class="keyword">private</span> String createTime;</div><div class="line">		<span class="meta">@SerializedName</span>(<span class="string">"update_time"</span>)</div><div class="line">		<span class="meta">@Expose</span></div><div class="line">		<span class="keyword">private</span> String updateTime;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> id;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.id = id;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> title;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.title = title;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getHeadpic</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> headpic;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeadpic</span><span class="params">(String headpic)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.headpic = headpic;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getRawHeadpic</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> rawHeadpic;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRawHeadpic</span><span class="params">(String rawHeadpic)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.rawHeadpic = rawHeadpic;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> author;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.author = author;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getBrief</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> brief;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrief</span><span class="params">(String brief)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.brief = brief;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getReadNum</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> readNum;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadNum</span><span class="params">(String readNum)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.readNum = readNum;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getWechatUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> wechatUrl;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWechatUrl</span><span class="params">(String wechatUrl)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.wechatUrl = wechatUrl;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> url;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.url = url;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> createTime;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(String createTime)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.createTime = createTime;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> updateTime;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(String updateTime)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.updateTime = updateTime;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/dalufine/TwitchTvClient" target="_blank" rel="external">代码地址</a></p>
<hr>
<p>参考链接：</p>
<p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南</a></p>
<p><a href="http://www.ibm.com/developerworks/cn/web/1103_chenyan_restapi/" target="_blank" rel="external">IBM 最佳实践</a></p>
<p><a href="http://blog.jobbole.com/65170/" target="_blank" rel="external">使用android API最佳实践</a></p>
<p><a href="http://blog.jobbole.com/88551/" target="_blank" rel="external">REST简介</a></p>
<p><a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit</a></p>
<p><a href="http://www.open-open.com/lib/view/open1429672286823.html" target="_blank" rel="external">Demo</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Handler的内存泄露及解决方法]]></title>
      <url>http://dalufan.com/2015/08/28/android-handler-gc/</url>
      <content type="html"><![CDATA[<h3 id="0x01-写在前面"><a href="#0x01-写在前面" class="headerlink" title="0x01 写在前面"></a>0x01 写在前面</h3><p>常见的Handler的用法但是可能导致内存泄露,比如在旋转屏幕时该Activity重新绘制. 但是因为mHandler发送了一个延迟消息,所以消息队列持有mHandler对象,又由于new Runnable(){}持有外部类MainActivity的引用,以Activity所占内存并不能向期望的那样被回收,这样就可能会造成内存泄漏。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        mImageView.setImageBitmap(mBitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>上面是一段简单的Handler的使用。当使用内部类（包括匿名类）来创建Handler的时候，Handler对象会隐式地持有一个外部类对象（通常是一个Activity）的引用（不然你怎么可能通过Handler来操作Activity中的View？）。而Handler通常会伴随着一个耗时的后台线程（例如从网络拉取图片）一起出现，这个后台线程在任务执行完毕（例如图片下载完毕）之后，通过消息机制通知Handler，然后Handler把图片更新到界面。然而，如果用户在网络请求过程中关闭了Activity，正常情况下，Activity不再被使用，它就有可能在GC检查时被回收掉，但由于这时线程尚未执行完，而该线程持有Handler的引用（不然它怎么发消息给Handler？），这个Handler又持有Activity的引用，就导致该Activity无法被回收（即内存泄露），直到网络请求结束（例如图片下载完毕）。另外，如果你执行了Handler的postDelayed()方法，该方法会将你的Handler装入一个Message，并把这条Message推到MessageQueue中，那么在你设定的delay到达之前，会有一条MessageQueue -&gt; Message -&gt; Handler -&gt; Activity的链，导致你的Activity被持有引用而无法被回收。</p>
<h3 id="0x02-解决方法"><a href="#0x02-解决方法" class="headerlink" title="0x02 解决方法"></a>0x02 解决方法</h3><h4 id="方法一：通过程序逻辑来进行保护。"><a href="#方法一：通过程序逻辑来进行保护。" class="headerlink" title="方法一：通过程序逻辑来进行保护。"></a>方法一：通过程序逻辑来进行保护。</h4><p>1.在关闭Activity的时候停掉你的后台线程。线程停掉了，就相当于切断了Handler和外部连接的线，Activity自然会在合适的时候被回收。</p>
<p>2.如果你的Handler是被delay的Message持有了引用，那么使用相应的Handler的removeCallbacks()方法，把消息对象从消息队列移除就行了。</p>
<h4 id="方法二：将Handler声明为静态类。"><a href="#方法二：将Handler声明为静态类。" class="headerlink" title="方法二：将Handler声明为静态类。"></a>方法二：将Handler声明为静态类。</h4><p><code>静态类不持有外部类的对象</code>，所以你的Activity可以随意被回收。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        mImageView.setImageBitmap(mBitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但其实没这么简单。使用了以上代码之后，你会发现，由于Handler不再持有外部类对象的引用，导致程序不允许你在Handler中操作Activity中的对象了。所以你需要在Handler中增加一个对Activity的弱引用（WeakReference）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    WeakReference&lt;Activity &gt; mActivityReference;</div><div class="line"></div><div class="line">    MyHandler(Activity activity) &#123;</div><div class="line">        mActivityReference= <span class="keyword">new</span> WeakReference&lt;Activity&gt;(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Activity activity = mActivityReference.get();</div><div class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">            mImageView.setImageBitmap(mBitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将代码改为以上形式之后，就算完成了。</p>
<h4 id="方法三：onDestroy中手动控制声明周期"><a href="#方法三：onDestroy中手动控制声明周期" class="headerlink" title="方法三：onDestroy中手动控制声明周期"></a>方法三：onDestroy中手动控制声明周期</h4><p>Handler可以使用removeCallbacksAndMessages(null)，它将移除这个Handler所拥有的Runnable与Message。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Fixed by manually control lifecycle</span></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    myHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="0x03-延伸：什么是WeakReference？"><a href="#0x03-延伸：什么是WeakReference？" class="headerlink" title="0x03 延伸：什么是WeakReference？"></a>0x03 延伸：什么是WeakReference？</h3><p>WeakReference弱引用，与强引用（即我们常说的引用）相对，它的特点是，GC在回收时会忽略掉弱引用，即就算有弱引用指向某对象，但只要该对象没有被强引用指向（实际上多数时候还要求没有软引用，但此处软引用的概念可以忽略），该对象就会在被GC检查到时回收掉。对于上面的代码，用户在关闭Activity之后，就算后台线程还没结束，但由于仅有一条来自Handler的弱引用指向Activity，所以GC仍然会在检查的时候把Activity回收掉。这样，内存泄露的问题就不会出现了。</p>
<p>下面是一个完整的例子。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.os.Handler;  </div><div class="line"><span class="keyword">import</span> android.os.Message;  </div><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> Handler mHandler;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.main);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">      </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 这个例子中Handler的延迟时间比较久有20S,有点极端了,一般不会这么干; </div><div class="line">     * 这里只是为了更好地说明这个问题就这么写代码了。 </div><div class="line">     *  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandler</span><span class="params">()</span> </span>&#123;  </div><div class="line">        mHandler = <span class="keyword">new</span> Handler() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;  </div><div class="line">                <span class="keyword">super</span>.handleMessage(msg);  </div><div class="line">            &#125;  </div><div class="line">        &#125;;  </div><div class="line">  </div><div class="line">        <span class="comment">// ......doing something  </span></div><div class="line">        <span class="comment">// ......doing something  </span></div><div class="line">        <span class="comment">// ......doing something  </span></div><div class="line">  </div><div class="line">        <span class="comment">// 发送延迟消息  </span></div><div class="line">        mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">  </div><div class="line">            &#125;  </div><div class="line">        &#125;, <span class="number">1000</span> * <span class="number">20</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">      </div><div class="line">      </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 以下为优化方式 </div><div class="line">     * 1 在此处把BetterHandler和BetterRunnable都设计为静态类, </div><div class="line">     *  这样它们就不会持有外部类的引用了. </div><div class="line">     * 2 在BetterHandler中利用WeakReference持有Activity. </div><div class="line">     *  常听说:"如果一个对象【只】具有弱引用，那么当GC线程扫描的过程中，</div><div class="line">     *  一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存"，</div><div class="line">     *  即仅有弱引用而不存在对其的强引用才会将其回收. </div><div class="line">     *  那么此处对Activity采用了弱引用,会不会导致该Activity被回收呢? </div><div class="line">     *  答案是否定的。因为此处的Activity还在显示界面，当然存在其他对象对它的强引用。所以不会对其回收。 </div><div class="line">     *   </div><div class="line">     * 经过这样的优化,当旋转屏幕时需要销毁原Activity时;消息队列持有Handler对象.但此时Handler对象不再持有Activity的引用. </div><div class="line">     * 所以系统会回收该Activity所占内存.所以在handleMessage()中处理消息时需要判断Activity是否为空. </div><div class="line">     * 比如此处20秒后才处理消息 这个时候Activity为空. </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BetterHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;Activity&gt; activityWeakReference;  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BetterHandler</span><span class="params">(Activity activity)</span></span>&#123;  </div><div class="line">            activityWeakReference=<span class="keyword">new</span> WeakReference&lt;Activity&gt;(activity);  </div><div class="line">        &#125;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;  </div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);  </div><div class="line">            <span class="keyword">if</span> (activityWeakReference.get()!=<span class="keyword">null</span>) &#123;  </div><div class="line">                <span class="comment">//.....handle message  </span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                System.out.println(<span class="string">"Activity==null"</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="comment">//同样采用静态内部类  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BetterRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">            <span class="comment">// ......doing something  </span></div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="comment">//发送延迟消息  </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;  </div><div class="line">        BetterHandler betterHandler=<span class="keyword">new</span> BetterHandler(MainActivity.<span class="keyword">this</span>);  </div><div class="line">        betterHandler.postDelayed(<span class="keyword">new</span> BetterRunnable(), <span class="number">1000</span> * <span class="number">20</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="0x04-WeakHander"><a href="#0x04-WeakHander" class="headerlink" title="0x04 WeakHander"></a>0x04 WeakHander</h3><p>WeakHandler不能与外部的强引用共同使用</p>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> WeakHandler mHandler; <span class="comment">// We still need at least one hard reference to WeakHandler</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        mHandler = <span class="keyword">new</span> WeakHandler();</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            view.setVisibility(View.INVISIBLE);</div><div class="line">        &#125;, <span class="number">5000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.os.Looper;</div><div class="line"><span class="keyword">import</span> android.os.Message;</div><div class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</div><div class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</div><div class="line"><span class="keyword">import</span> android.support.annotation.VisibleForTesting;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Memory safer implementation of android.os.Handler</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * Original implementation of Handlers always keeps hard reference to handler in queue of execution.</div><div class="line"> * If you create anonymous handler and post delayed message into it, it will keep all parent class</div><div class="line"> * for that time in memory even if it could be cleaned.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * This implementation is trickier, it will keep WeakReferences to runnables and messages,</div><div class="line"> * and GC could collect them once WeakHandler instance is not referenced any more</div><div class="line"> * &lt;p/&gt;</div><div class="line"> *</div><div class="line"> * <span class="doctag">@see</span> android.os.Handler</div><div class="line"> *</div><div class="line"> * Created by Dmytro Voronkevych on 17/06/2014.</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Handler.Callback mCallback; <span class="comment">// hard reference to Callback. We need to keep callback in memory</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecHandler mExec;</div><div class="line">    <span class="keyword">private</span> Lock mLock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"ConstantConditions"</span>)</div><div class="line">    <span class="meta">@VisibleForTesting</span></div><div class="line">    <span class="keyword">final</span> ChainedRef mRunnables = <span class="keyword">new</span> ChainedRef(mLock, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Default constructor associates this handler with the &#123;<span class="doctag">@link</span> Looper&#125; for the</div><div class="line">     * current thread.</div><div class="line">     *</div><div class="line">     * If this thread does not have a looper, this handler won't be able to receive messages</div><div class="line">     * so an exception is thrown.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        mCallback = <span class="keyword">null</span>;</div><div class="line">        mExec = <span class="keyword">new</span> ExecHandler();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructor associates this handler with the &#123;<span class="doctag">@link</span> Looper&#125; for the</div><div class="line">     * current thread and takes a callback interface in which you can handle</div><div class="line">     * messages.</div><div class="line">     *</div><div class="line">     * If this thread does not have a looper, this handler won't be able to receive messages</div><div class="line">     * so an exception is thrown.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> callback The callback interface in which to handle messages, or null.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakHandler</span><span class="params">(@Nullable Handler.Callback callback)</span> </span>&#123;</div><div class="line">        mCallback = callback; <span class="comment">// Hard referencing body</span></div><div class="line">        mExec = <span class="keyword">new</span> ExecHandler(<span class="keyword">new</span> WeakReference&lt;&gt;(callback)); <span class="comment">// Weak referencing inside ExecHandler</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Use the provided &#123;<span class="doctag">@link</span> Looper&#125; instead of the default one.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> looper The looper, must not be null.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakHandler</span><span class="params">(@NonNull Looper looper)</span> </span>&#123;</div><div class="line">        mCallback = <span class="keyword">null</span>;</div><div class="line">        mExec = <span class="keyword">new</span> ExecHandler(looper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Use the provided &#123;<span class="doctag">@link</span> Looper&#125; instead of the default one and take a callback</div><div class="line">     * interface in which to handle messages.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> looper The looper, must not be null.</div><div class="line">     * <span class="doctag">@param</span> callback The callback interface in which to handle messages, or null.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakHandler</span><span class="params">(@NonNull Looper looper, @NonNull Handler.Callback callback)</span> </span>&#123;</div><div class="line">        mCallback = callback;</div><div class="line">        mExec = <span class="keyword">new</span> ExecHandler(looper, <span class="keyword">new</span> WeakReference&lt;&gt;(callback));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Causes the Runnable r to be added to the message queue.</div><div class="line">     * The runnable will be run on the thread to which this handler is</div><div class="line">     * attached.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> r The Runnable that will be executed.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Returns true if the Runnable was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(@NonNull Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.post(wrapRunnable(r));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Causes the Runnable r to be added to the message queue, to be run</div><div class="line">     * at a specific time given by &lt;var&gt;uptimeMillis&lt;/var&gt;.</div><div class="line">     * &lt;b&gt;The time-base is &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125;.&lt;/b&gt;</div><div class="line">     * The runnable will be run on the thread to which this handler is attached.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> r The Runnable that will be executed.</div><div class="line">     * <span class="doctag">@param</span> uptimeMillis The absolute time at which the callback should run,</div><div class="line">     *         using the &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125; time-base.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Returns true if the Runnable was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.  Note that a</div><div class="line">     *         result of true does not mean the Runnable will be processed -- if</div><div class="line">     *         the looper is quit before the delivery time of the message</div><div class="line">     *         occurs then the message will be dropped.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtTime</span><span class="params">(@NonNull Runnable r, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.postAtTime(wrapRunnable(r), uptimeMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Causes the Runnable r to be added to the message queue, to be run</div><div class="line">     * at a specific time given by &lt;var&gt;uptimeMillis&lt;/var&gt;.</div><div class="line">     * &lt;b&gt;The time-base is &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125;.&lt;/b&gt;</div><div class="line">     * The runnable will be run on the thread to which this handler is attached.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> r The Runnable that will be executed.</div><div class="line">     * <span class="doctag">@param</span> uptimeMillis The absolute time at which the callback should run,</div><div class="line">     *         using the &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125; time-base.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Returns true if the Runnable was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.  Note that a</div><div class="line">     *         result of true does not mean the Runnable will be processed -- if</div><div class="line">     *         the looper is quit before the delivery time of the message</div><div class="line">     *         occurs then the message will be dropped.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> android.os.SystemClock#uptimeMillis</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtTime</span><span class="params">(Runnable r, Object token, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.postAtTime(wrapRunnable(r), token, uptimeMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Causes the Runnable r to be added to the message queue, to be run</div><div class="line">     * after the specified amount of time elapses.</div><div class="line">     * The runnable will be run on the thread to which this handler</div><div class="line">     * is attached.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> r The Runnable that will be executed.</div><div class="line">     * <span class="doctag">@param</span> delayMillis The delay (in milliseconds) until the Runnable</div><div class="line">     *        will be executed.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Returns true if the Runnable was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.  Note that a</div><div class="line">     *         result of true does not mean the Runnable will be processed --</div><div class="line">     *         if the looper is quit before the delivery time of the message</div><div class="line">     *         occurs then the message will be dropped.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postDelayed</span><span class="params">(Runnable r, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.postDelayed(wrapRunnable(r), delayMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Posts a message to an object that implements Runnable.</div><div class="line">     * Causes the Runnable r to executed on the next iteration through the</div><div class="line">     * message queue. The runnable will be run on the thread to which this</div><div class="line">     * handler is attached.</div><div class="line">     * &lt;b&gt;This method is only for use in very special circumstances -- it</div><div class="line">     * can easily starve the message queue, cause ordering problems, or have</div><div class="line">     * other unexpected side-effects.&lt;/b&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> r The Runnable that will be executed.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtFrontOfQueue</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.postAtFrontOfQueue(wrapRunnable(r));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Remove any pending posts of Runnable r that are in the message queue.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeCallbacks</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> WeakRunnable runnable = mRunnables.remove(r);</div><div class="line">        <span class="keyword">if</span> (runnable != <span class="keyword">null</span>) &#123;</div><div class="line">            mExec.removeCallbacks(runnable);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Remove any pending posts of Runnable &lt;var&gt;r&lt;/var&gt; with Object</div><div class="line">     * &lt;var&gt;token&lt;/var&gt; that are in the message queue.  If &lt;var&gt;token&lt;/var&gt; is null,</div><div class="line">     * all callbacks will be removed.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeCallbacks</span><span class="params">(Runnable r, Object token)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> WeakRunnable runnable = mRunnables.remove(r);</div><div class="line">        <span class="keyword">if</span> (runnable != <span class="keyword">null</span>) &#123;</div><div class="line">            mExec.removeCallbacks(runnable, token);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Pushes a message onto the end of the message queue after all pending messages</div><div class="line">     * before the current time. It will be received in callback,</div><div class="line">     * in the thread attached to this handler.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.sendMessage(msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Sends a Message containing only the what value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessage</span><span class="params">(<span class="keyword">int</span> what)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.sendEmptyMessage(what);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Sends a Message containing only the what value, to be delivered</div><div class="line">     * after the specified amount of time elapses.</div><div class="line">     * <span class="doctag">@see</span> #sendMessageDelayed(android.os.Message, long)</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.sendEmptyMessageDelayed(what, delayMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Sends a Message containing only the what value, to be delivered</div><div class="line">     * at a specific time.</div><div class="line">     * <span class="doctag">@see</span> #sendMessageAtTime(android.os.Message, long)</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageAtTime</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.sendEmptyMessageAtTime(what, uptimeMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Enqueue a message into the message queue after all pending messages</div><div class="line">     * before (current time + delayMillis). You will receive it in</div><div class="line">     * callback, in the thread attached to this handler.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.  Note that a</div><div class="line">     *         result of true does not mean the message will be processed -- if</div><div class="line">     *         the looper is quit before the delivery time of the message</div><div class="line">     *         occurs then the message will be dropped.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.sendMessageDelayed(msg, delayMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Enqueue a message into the message queue after all pending messages</div><div class="line">     * before the absolute time (in milliseconds) &lt;var&gt;uptimeMillis&lt;/var&gt;.</div><div class="line">     * &lt;b&gt;The time-base is &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125;.&lt;/b&gt;</div><div class="line">     * You will receive it in callback, in the thread attached</div><div class="line">     * to this handler.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> uptimeMillis The absolute time at which the message should be</div><div class="line">     *         delivered, using the</div><div class="line">     *         &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125; time-base.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.  Note that a</div><div class="line">     *         result of true does not mean the message will be processed -- if</div><div class="line">     *         the looper is quit before the delivery time of the message</div><div class="line">     *         occurs then the message will be dropped.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.sendMessageAtTime(msg, uptimeMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Enqueue a message at the front of the message queue, to be processed on</div><div class="line">     * the next iteration of the message loop.  You will receive it in</div><div class="line">     * callback, in the thread attached to this handler.</div><div class="line">     * &lt;b&gt;This method is only for use in very special circumstances -- it</div><div class="line">     * can easily starve the message queue, cause ordering problems, or have</div><div class="line">     * other unexpected side-effects.&lt;/b&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtFrontOfQueue</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.sendMessageAtFrontOfQueue(msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Remove any pending posts of messages with code 'what' that are in the</div><div class="line">     * message queue.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeMessages</span><span class="params">(<span class="keyword">int</span> what)</span> </span>&#123;</div><div class="line">        mExec.removeMessages(what);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Remove any pending posts of messages with code 'what' and whose obj is</div><div class="line">     * 'object' that are in the message queue.  If &lt;var&gt;object&lt;/var&gt; is null,</div><div class="line">     * all messages will be removed.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeMessages</span><span class="params">(<span class="keyword">int</span> what, Object object)</span> </span>&#123;</div><div class="line">        mExec.removeMessages(what, object);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Remove any pending posts of callbacks and sent messages whose</div><div class="line">     * &lt;var&gt;obj&lt;/var&gt; is &lt;var&gt;token&lt;/var&gt;.  If &lt;var&gt;token&lt;/var&gt; is null,</div><div class="line">     * all callbacks and messages will be removed.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeCallbacksAndMessages</span><span class="params">(Object token)</span> </span>&#123;</div><div class="line">        mExec.removeCallbacksAndMessages(token);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Check if there are any pending posts of messages with code 'what' in</div><div class="line">     * the message queue.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasMessages</span><span class="params">(<span class="keyword">int</span> what)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.hasMessages(what);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Check if there are any pending posts of messages with code 'what' and</div><div class="line">     * whose obj is 'object' in the message queue.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasMessages</span><span class="params">(<span class="keyword">int</span> what, Object object)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.hasMessages(what, object);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Looper <span class="title">getLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mExec.getLooper();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> WeakRunnable <span class="title">wrapRunnable</span><span class="params">(@NonNull Runnable r)</span> </span>&#123;</div><div class="line">        <span class="comment">//noinspection ConstantConditions</span></div><div class="line">        <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Runnable can't be null"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> ChainedRef hardRef = <span class="keyword">new</span> ChainedRef(mLock, r);</div><div class="line">        mRunnables.insertAfter(hardRef);</div><div class="line">        <span class="keyword">return</span> hardRef.wrapper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;Handler.Callback&gt; mCallback;</div><div class="line"></div><div class="line">        ExecHandler() &#123;</div><div class="line">            mCallback = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ExecHandler(WeakReference&lt;Handler.Callback&gt; callback) &#123;</div><div class="line">            mCallback = callback;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ExecHandler(Looper looper) &#123;</div><div class="line">            <span class="keyword">super</span>(looper);</div><div class="line">            mCallback = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ExecHandler(Looper looper, WeakReference&lt;Handler.Callback&gt; callback) &#123;</div><div class="line">            <span class="keyword">super</span>(looper);</div><div class="line">            mCallback = callback;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(@NonNull Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mCallback == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">final</span> Handler.Callback callback = mCallback.get();</div><div class="line">            <span class="keyword">if</span> (callback == <span class="keyword">null</span>) &#123; <span class="comment">// Already disposed</span></div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            callback.handleMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;Runnable&gt; mDelegate;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;ChainedRef&gt; mReference;</div><div class="line"></div><div class="line">        WeakRunnable(WeakReference&lt;Runnable&gt; delegate, WeakReference&lt;ChainedRef&gt; reference) &#123;</div><div class="line">            mDelegate = delegate;</div><div class="line">            mReference = reference;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">final</span> Runnable delegate = mDelegate.get();</div><div class="line">            <span class="keyword">final</span> ChainedRef reference = mReference.get();</div><div class="line">            <span class="keyword">if</span> (reference != <span class="keyword">null</span>) &#123;</div><div class="line">                reference.remove();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (delegate != <span class="keyword">null</span>) &#123;</div><div class="line">                delegate.run();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedRef</span> </span>&#123;</div><div class="line">        <span class="meta">@Nullable</span></div><div class="line">        ChainedRef next;</div><div class="line">        <span class="meta">@Nullable</span></div><div class="line">        ChainedRef prev;</div><div class="line">        <span class="meta">@NonNull</span></div><div class="line">        <span class="keyword">final</span> Runnable runnable;</div><div class="line">        <span class="meta">@NonNull</span></div><div class="line">        <span class="keyword">final</span> WeakRunnable wrapper;</div><div class="line"></div><div class="line">        <span class="meta">@NonNull</span></div><div class="line">        Lock lock;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ChainedRef</span><span class="params">(@NonNull Lock lock, @NonNull Runnable r)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.runnable = r;</div><div class="line">            <span class="keyword">this</span>.lock = lock;</div><div class="line">            <span class="keyword">this</span>.wrapper = <span class="keyword">new</span> WeakRunnable(<span class="keyword">new</span> WeakReference&lt;&gt;(r), <span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">this</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> WeakRunnable <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</div><div class="line">                    prev.next = next;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</div><div class="line">                    next.prev = prev;</div><div class="line">                &#125;</div><div class="line">                prev = <span class="keyword">null</span>;</div><div class="line">                next = <span class="keyword">null</span>;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> wrapper;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(@NonNull ChainedRef candidate)</span> </span>&#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">this</span>.next.prev = candidate;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                candidate.next = <span class="keyword">this</span>.next;</div><div class="line">                <span class="keyword">this</span>.next = candidate;</div><div class="line">                candidate.prev = <span class="keyword">this</span>;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Nullable</span></div><div class="line">        <span class="function"><span class="keyword">public</span> WeakRunnable <span class="title">remove</span><span class="params">(Runnable obj)</span> </span>&#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ChainedRef curr = <span class="keyword">this</span>.next; <span class="comment">// Skipping head</span></div><div class="line">                <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (curr.runnable == obj) &#123; <span class="comment">// We do comparison exactly how Handler does inside</span></div><div class="line">                        <span class="keyword">return</span> curr.remove();</div><div class="line">                    &#125;</div><div class="line">                    curr = curr.next;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/lfdfhl/article/details/45696135" target="_blank" rel="external">CSDN</a>&lt;-&gt;<a href="http://www.linuxidc.com/Linux/2013-12/94065.htm" target="_blank" rel="external">成因</a>&lt;-&gt;<a href="https://github.com/badoo/android-weak-handler" target="_blank" rel="external">WeakHander</a>&lt;-&gt;<a href="hhttp://www.jianshu.com/p/c49f778e7acf" target="_blank" rel="external">使用Android studio分析内存泄露</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Difference between git reset soft, mixed and hard]]></title>
      <url>http://dalufan.com/2015/08/28/git-reset-soft-mixed-hard/</url>
      <content type="html"><![CDATA[<h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>译注：为了避免丢失本地的修改以及original HEAD，建议在进行reset操作之前，在本地创建一个新的branch，在新的branch上面进行reset，以保证master分支永远处于original HEAD</p>
<a id="more"></a>
<h3 id="0x01-正文"><a href="#0x01-正文" class="headerlink" title="0x01 正文"></a>0x01 正文</h3><p>The reset command. Confusing. Misunderstood. Misused. But it doesn’t need to be that way! It’s really not too confusing once you figure out what’s going on.</p>
<h4 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h4><p>首先，让我们来解释几个定义.<br>First, let’s define a few terms.</p>
<h4 id="HEAD（头）"><a href="#HEAD（头）" class="headerlink" title="HEAD（头）"></a>HEAD（头）</h4><p>指向当前branch最顶端的一个commit，该分支上一次commit后的节点<br>This is an alias for the tip of the current branch, which is the most recent commit you have made to that branch.</p>
<h4 id="Index（索引）"><a href="#Index（索引）" class="headerlink" title="Index（索引）"></a>Index（索引）</h4><p>The index, 也可以被认为是staging area（暂存区）, 是一堆将在下一次commit中提交的文件，提交之后它就是 HEAD的父节点. （译注：git add添加的文件）<br>The index, also known as the staging area, is the set of files that will become the next commit. It is also the commit that will become HEAD’s parent.</p>
<h4 id="Working-Copy（工作副本）"><a href="#Working-Copy（工作副本）" class="headerlink" title="Working Copy（工作副本）"></a>Working Copy（工作副本）</h4><p>当前工作目录下的文件，（译注：一般指，有修改，没有git add，没有git commit的文件）<br>This is the term for the current set of files you’re working on in your file system.</p>
<h4 id="Flow（流程如下）"><a href="#Flow（流程如下）" class="headerlink" title="Flow（流程如下）"></a>Flow（流程如下）</h4><p>当你第一次checkout一个新的分支，HEAD指向该分支上最近一次commit。它和index和working copy是一样一样的。<br>When you first checkout a branch, HEAD points to the most recent commit in the branch. The files in the HEAD (they aren’t technically files, they’re blobs but for the purposes of this discussion we can think of them as straight files) match that of the files in the index, and the files checked out in your working copy match HEAD and the index as well. All 3 are in an equal state, and Git is happy.</p>
<p>当你修改了一个文件，Git注意到了会说“哦，有些东西被改了”，你的working copy不再和index和HEAD相同了，所以当文件有改动，它会标记这些文件。<br>When you perform a modification to a file, Git notices and says “oh, hey, something has changed. Your working copy no longer matches the index and HEAD.” So it marks the file as changed.</p>
<p>然后，你执行<code>git add</code>命令，这条命令会将上面修改的文件缓存在index中，Git又说了“哦，你的working copy和index相同了，而他们俩和HEAD不同了”。<br>Then, when you do a git add, it stages the file in the index, and Git says “oh, okay, now your working copy and index match, but those are both different than HEAD.”</p>
<p>当你执行git commit，Git创建了一个新的commit，HEAD这时指向这个新的commit，此时，HEAD &amp; index &amp; working copy又相同了，Git又开心了一次。<br>When you then perform a git commit, Git creates a new commit that HEAD now points to and the status of the index and working copy match it so Git’s happy once more.</p>
<h4 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h4><p>If you just look at the reset command by itself, all it does is reset HEAD (the tip of the current branch) to another commit. For instance, say we have a branch (the name doesn’t matter, so let’s call this one “super-duper-feature”) and it looks like so:</p>
<p><img src="/article_images/HEADLatest.png" alt="alt"></p>
<p>If we perform:</p>
<blockquote>
<p>git reset HEAD</p>
</blockquote>
<p>… nothing happens. This is because we tell git to reset this branch to HEAD, which is where it already is. But if we do:</p>
<blockquote>
<p>git reset HEAD~1</p>
</blockquote>
<p>(HEAD~1 is shorthand case for “the commit right before HEAD”, or put differently “HEAD’s parent”) our branch now looks like so:</p>
<p><img src="/article_images/HEADParent.png" alt="alt"></p>
<p>If we start at the latest commit again and do:</p>
<blockquote>
<p>git reset HEAD~2</p>
</blockquote>
<p>our branch would look like so:</p>
<p><img src="/article_images/HEADParentParent.png" alt="alt"></p>
<p>Again, all it does on a basic level is move HEAD to another commit.</p>
<h4 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h4><p>reset命令本身很简单，但是它的参数让人迷惑，主要的参数有soft, hard and mixed，它们告诉Git，当执行reset时，要对index和working copy做什么。<br>So the reset command itself is pretty simple, but it’s the parameters that cause confusion. The main parameters are soft, hard and mixed. These tell Git what to do with your index and working copy when performing the reset.</p>
<h4 id="Soft"><a href="#Soft" class="headerlink" title="Soft"></a>Soft</h4><p>The –soft参数只告诉Git将其他的commit重置到HEAD，就仅此而已。index和working copy中的文件都不改变。<br>parameter tells Git to reset HEAD to another commit, but that’s it. If you specify –soft Git will stop there and nothing else will change. What this means is that the index and working copy don’t get touched, so all of the files that changed between the original HEAD and the commit you reset to appear to be staged.<br><img src="/article_images/reset-wc-index-changed-580x136.png" alt="alt"></p>
<h4 id="Mixed-default"><a href="#Mixed-default" class="headerlink" title="Mixed (default)"></a>Mixed (default)</h4><p>The –mixed 改变HEAD和index，指向那个你要reset到的commit上。而working copy文件不被改变。当然会显示工作目录下有修改，但没有缓存到index中。<br>parameter (which is the default if you don’t specify anything) will reset HEAD to another commit, and will reset the index to match it, but will stop there. The working copy will not be touched. So, all of the changes between the original HEAD and the commit you reset to are still in the working copy and appear as modified, but not staged.</p>
<p><img src="/article_images/reset-wc-changed-580x136.png" alt="alt"></p>
<h4 id="Hard"><a href="#Hard" class="headerlink" title="Hard"></a>Hard</h4><p>The –hard HEAD &amp; index &amp; working copy同时改变到你要reset到的那个commit上。这个参数很危险，执行了它，你的本地修改可能就丢失了。<br>parameter will blow out everything – it resets HEAD back to another commit, resets the index to match it, and resets the working copy to match it as well. This is the more dangerous of the commands and is where you can cause damage. Data might get lost here*!</p>
<p><img src="/article_images/reset-all-happy-580x136.png" alt="alt"></p>
<p>可以用git reflog命令查看coomit ID，恢复到reset之前的状态。<br>You can recover it using git reflog but that’s out of scope here.</p>
<hr>
<p>参考链接：</p>
<p><a href="http://blog.sina.com.cn/s/blog_936739790102v3nk.html" target="_blank" rel="external">SINA</a></p>
<p><a href="http://www.cnblogs.com/craftor/archive/2012/11/04/2754140.html" target="_blank" rel="external">CNBLOG</a></p>
<p><a href="http://blog.csdn.net/xsckernel/article/details/9021225" target="_blank" rel="external">CSDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于android的.so文件你所需要知道的]]></title>
      <url>http://dalufan.com/2015/08/27/android-so-usage/</url>
      <content type="html"><![CDATA[<p><a href="http://ph0b.com/android-abis-and-so-files/" target="_blank" rel="external">原文链接</a></p>
<h3 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h3><p>早期的android系统几乎只支持ARMv5的CPU架构，你知道现在它支持多少种吗？7种！</p>
<p>android系统目前支持以下七种不同的CPU架构：ARMv5，ARMv7 (从2010年起)，x86 (从2011年起)，MIPS (从2012年起)，ARMv8，MIPS64和x86_64 (从2014年起)，每一种都关联着一个相应的ABI。</p>
<p>应用程序二进制接口（Application Binary Interface）定义了二进制文件（尤其是.so文件）如何运行在相应的系统平台上，从使用的指令集，内存对齐到可用的系统函数库。在android系统上，每一个CPU架构对应一个ABI：armeabi，armeabi-v7a，x86，mips，arm64-v8a，mips64，x86_64。</p>
<a id="more"></a> 
<h3 id="0x01-为什么你需要重点关注-so文件"><a href="#0x01-为什么你需要重点关注-so文件" class="headerlink" title="0x01 为什么你需要重点关注.so文件"></a>0x01 为什么你需要重点关注.so文件</h3><p>如果项目中使用到了NDK，它将会生成.so文件，因此显然你已经在关注它了。如果只是使用Java语言进行编码，你可能在想不需要关注.so文件了吧，因为Java是跨平台的。但事实上，即使你在项目中只是使用Java语言，很多情况下，你可能并没有意识到项目中依赖的函数库或者引擎库里面已经嵌入了.so文件，并依赖于不同的ABI。</p>
<p>例如，项目中使用RenderScript支持库，OpenCV，Unity，android-gif-drawable，SQLCipher等，你都已经在生成的APK文件中包含.so文件了，而你需要关注.so文件。</p>
<p>android应用支持的ABI取决于APK中位于lib/ABI目录中的.so文件，其中ABI可能是上面说过的七种ABI中的一种。</p>
<p><img src="/article_images/android-so-usage1.png" alt="alt"></p>
<p><a href="https://play.google.com/store/apps/details?id=com.xh.nativelibsmonitor.app" target="_blank" rel="external">Native Libs Monitor</a>这个应用可以帮助我们理解手机上安装的APK用到了哪些.so文件，以及.so文件来源于哪些函数库或者框架。</p>
<blockquote>
<p>当然，我们也可以自己对app反编译来获取这些信息，不过相对麻烦一些。</p>
</blockquote>
<p>很多设备都支持多于一种的ABI。例如ARM64和x86设备也可以同时运行armeabi-v7a和armeabi的二进制包。但最好是针对特定平台提供相应平台的二进制包，这种情况下运行时就少了一个模拟层（例如x86设备上模拟arm的虚拟层），从而得到更好的性能（归功于最近的架构更新，例如硬件fpu，更多的寄存器，更好的向量化等）。</p>
<p>我们可以通过Build.SUPPORTED_ABIS得到根据偏好排序的设备支持的ABI列表。但你不应该从你的应用程序中读取它，因为android包管理器安装APK时，会自动选择APK包中为对应系统ABI预编译好的.so文件，如果在对应的lib／ABI目录中存在.so文件的话。</p>
<h3 id="0x02-App中可能出错的地方"><a href="#0x02-App中可能出错的地方" class="headerlink" title="0x02 App中可能出错的地方"></a>0x02 App中可能出错的地方</h3><p>处理.so文件时有一条简单却并不知名的重要法则。</p>
<p>你应该尽可能的提供专为每个ABI优化过的.so文件，但要么全部支持，要么都不支持：你不应该混合着使用。你应该为每个ABI目录提供对应的.so文件。</p>
<p>当一个应用安装在设备上，只有该设备支持的CPU架构对应的.so文件会被安装。在x86设备上，libs/x86目录中如果存在.so文件的话，会被安装，如果不存在，则会选择armeabi-v7a中的.so文件，如果也不存在，则选择armeabi目录中的.so文件（因为x86设备也支持armeabi-v7a和armeabi）。</p>
<h3 id="0x03-其他地方也可能出错"><a href="#0x03-其他地方也可能出错" class="headerlink" title="0x03 其他地方也可能出错"></a>0x03 其他地方也可能出错</h3><p>当你引入一个.so文件时，不止影响到CPU架构。我从其他开发者那里可以看到一系列常见的错误，其中最多的是”UnsatisfiedLinkError”，”dlopen: failed”以及其他类型的crash或者低下的性能：</p>
<h3 id="0x04-使用android-21平台版本编译的-so文件运行在android-15的设备上"><a href="#0x04-使用android-21平台版本编译的-so文件运行在android-15的设备上" class="headerlink" title="0x04 使用android-21平台版本编译的.so文件运行在android-15的设备上"></a>0x04 使用android-21平台版本编译的.so文件运行在android-15的设备上</h3><p>使用NDK时，你可能会倾向于使用最新的编译平台，但事实上这是错误的，因为NDK平台不是后向兼容的，而是前向兼容的。推荐使用app的minSdkVersion对应的编译平台。</p>
<p>这也意味着当你引入一个预编译好的.so文件时，你需要检查它被编译所用的平台版本。</p>
<h3 id="0x05-混合使用不同C-运行时编译的-so文件"><a href="#0x05-混合使用不同C-运行时编译的-so文件" class="headerlink" title="0x05 混合使用不同C++运行时编译的.so文件"></a>0x05 混合使用不同C++运行时编译的.so文件</h3><p>.so文件可以依赖于不同的C++运行时，静态编译或者动态加载。混合使用不同版本的C++运行时可能导致很多奇怪的crash，是应该避免的。作为一个经验法则，当只有一个.so文件时，静态编译C++运行时是没问题的，否则当存在多个.so文件时，应该让所有的.so文件都动态链接相同的C++运行时。</p>
<p>这意味着当引入一个新的预编译.so文件，而且项目中还存在其他的.so文件时，我们需要首先确认新引入的.so文件使用的C++运行时是否和已经存在的.so文件一致。</p>
<h3 id="0x06-没有为每个支持的CPU架构提供对应的-so文件"><a href="#0x06-没有为每个支持的CPU架构提供对应的-so文件" class="headerlink" title="0x06 没有为每个支持的CPU架构提供对应的.so文件"></a>0x06 没有为每个支持的CPU架构提供对应的.so文件</h3><p>这一点在前文已经说到了，但你应该真的特别注意它，因为它可能发生在根本没有意识到的情况下。</p>
<p>例如：你的app支持armeabi-v7a和x86架构，然后使用android Studio新增了一个函数库依赖，这个函数库包含.so文件并支持更多的CPU架构，例如新增android-gif-drawable函数库：</p>
<p><code>compile ‘pl.droidsonroids.gif:android-gif-drawable:1.1.+’</code></p>
<p>发布我们的app后，会发现它在某些设备上会发生Crash，例如Galaxy S6，最终可以发现只有64位目录下的.so文件被安装进手机。</p>
<p>解决方案：重新编译我们的.so文件使其支持缺失的ABIs，或者设置</p>
<p><code>ndk.abiFilters</code></p>
<p>显示指定支持的ABIs。</p>
<p>最后一点：如果你是一个SDK提供者，但提供的函数库不支持所有的ABIs，那你将会搞砸你的用户，因为他们能支持的ABIs必将只能少于你提供的。</p>
<h3 id="0x07-将-so文件放在错误的地方"><a href="#0x07-将-so文件放在错误的地方" class="headerlink" title="0x07 将.so文件放在错误的地方"></a>0x07 将.so文件放在错误的地方</h3><p>我们往往很容易对.so文件应该放在或者生成到哪里感到困惑，下面是一个总结：</p>
<ul>
<li>android Studio工程放在jniLibs/ABI目录中（当然也可以通过在build.gradle文件中的设置jniLibs.srcDir属性自己指定）</li>
<li>Eclipse工程放在libs/ABI目录中（这也是ndk-build命令默认生成.so文件的目录）</li>
<li>AAR压缩包中位于jni/ABI目录中（.so文件会自动包含到引用AAR压缩包的APK中）</li>
<li>最终APK文件中的lib/ABI目录中</li>
<li>通过PackageManager安装后，在小于android 5.0的系统中，.so文件位于app的nativeLibraryPath目录中；在大于等于android 5.0的系统中，.so文件位于app的nativeLibraryRootDir/CPU_ARCH目录中。</li>
</ul>
<h3 id="0x08-只提供armeabi架构的-so文件而忽略其他ABIs的"><a href="#0x08-只提供armeabi架构的-so文件而忽略其他ABIs的" class="headerlink" title="0x08 只提供armeabi架构的.so文件而忽略其他ABIs的"></a>0x08 只提供armeabi架构的.so文件而忽略其他ABIs的</h3><p>所有的x86/x86_64/armeabi-v7a/arm64-v8a设备都支持armeabi架构的.so文件，因此似乎移除其他ABIs的.so文件是一个减少APK大小的好技巧。但事实上并不是：这不只影响到函数库的性能和兼容性。</p>
<p>x86设备能够很好的运行ARM类型函数库，但并不保证100%不发生crash，特别是对旧设备。64位设备（arm64-v8a, x86_64, mips64）能够运行32位的函数库，但是以32位模式运行，在64位平台上运行32位版本的ART和android组件，将丢失专为64位优化过的性能（ART，webview，media等等）。</p>
<p>以减少APK包大小为由是一个错误的借口，因为你也可以选择在应用市场上传指定ABI版本的APK，生成不同ABI版本的APK可以在build.gradle中如下配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ... </div><div class="line">    splits &#123;</div><div class="line">        abi &#123;</div><div class="line">            <span class="function">enable <span class="keyword">true</span></span></div><div class="line">            <span class="title">reset</span><span class="params">()</span></div><div class="line">            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a' <span class="comment">//select ABIs to build APKs for</span></div><div class="line">            universalApk <span class="keyword">true</span> <span class="comment">//generate an additional APK that contains all the ABIs</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// map for the version code</span></div><div class="line">    project.ext.versionCodes = [<span class="string">'armeabi'</span>: <span class="number">1</span>, <span class="string">'armeabi-v7a'</span>: <span class="number">2</span>, <span class="string">'arm64-v8a'</span>: <span class="number">3</span>, <span class="string">'mips'</span>: <span class="number">5</span>, <span class="string">'mips64'</span>: <span class="number">6</span>, <span class="string">'x86'</span>: <span class="number">8</span>, <span class="string">'x86_64'</span>: <span class="number">9</span>]</div><div class="line"></div><div class="line">    android.applicationVariants.all &#123; variant -&gt;</div><div class="line">        <span class="comment">// assign different version code for each output</span></div><div class="line">        variant.outputs.each &#123; output -&gt;</div><div class="line">            output.versionCodeOverride =</div><div class="line">                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), <span class="number">0</span>) * <span class="number">1000000</span> + android.defaultConfig.versionCode</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="http://www.jianshu.com/p/cb05698a1968#" target="_blank" rel="external">中文译文</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android 邮箱地址自动补全]]></title>
      <url>http://dalufan.com/2015/08/26/android-EmailAutoCompleteTextView/</url>
      <content type="html"><![CDATA[<p>已有邮箱地址补全不是很美观，后来在网上看到有仿“知乎”的自动补全，看上去不错，直接拿来用发现很多问题，自己修改了下，适合自己的项目，可能不是很完善。</p>
<p>下面直接贴代码</p>
<a id="more"></a> 
<h3 id="新方法"><a href="#新方法" class="headerlink" title="新方法"></a>新方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Paint;</div><div class="line"><span class="keyword">import</span> android.graphics.Rect;</div><div class="line"><span class="keyword">import</span> android.text.Editable;</div><div class="line"><span class="keyword">import</span> android.text.TextUtils;</div><div class="line"><span class="keyword">import</span> android.text.TextWatcher;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.util.TypedValue;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by dalu on 2015/9/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailAutoCompleteView</span> <span class="keyword">extends</span> <span class="title">EditText</span> <span class="keyword">implements</span> <span class="title">TextWatcher</span>, <span class="title">View</span>.<span class="title">OnFocusChangeListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line">    <span class="keyword">private</span> String content = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> String inputContent = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> String suffixLeft = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> String afterAt = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> String suffix[] = &#123;<span class="string">"qq.com"</span>, <span class="string">"163.com"</span>, <span class="string">"126.com"</span>&#125;;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mInputTextWidth;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSuffixTextWidth;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSuffixTextStart;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextHeight;</div><div class="line">    <span class="keyword">private</span> Rect mTextBound = <span class="keyword">new</span> Rect();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextOriginColor = <span class="number">0xff000000</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextChangeColor = <span class="number">0xffff0000</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmailAutoCompleteView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmailAutoCompleteView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        mPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">        mPaint.setTextSize(sp2px(<span class="number">14</span>));</div><div class="line">        <span class="comment">//设置监听</span></div><div class="line">        addTextChangedListener(<span class="keyword">this</span>);</div><div class="line">        setOnFocusChangeListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(content)) &#123;</div><div class="line">            <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mPaint.getTextBounds(content, <span class="number">0</span>, content.length(), mTextBound);</div><div class="line">            mTextHeight = mTextBound.height();</div><div class="line">            mInputTextWidth = (<span class="keyword">int</span>) mPaint.measureText(inputContent);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(suffixLeft)) &#123;</div><div class="line">                mSuffixTextWidth = (<span class="keyword">int</span>) mPaint.measureText(suffixLeft);</div><div class="line">                mSuffixTextStart = getPaddingLeft() + mInputTextWidth;</div><div class="line">                mPaint.setColor(mTextChangeColor);</div><div class="line">                canvas.save(Canvas.CLIP_SAVE_FLAG);</div><div class="line">                <span class="comment">//截取画布中的一个区域</span></div><div class="line">                canvas.clipRect(mSuffixTextStart, <span class="number">0</span>, mSuffixTextStart + mSuffixTextWidth, getMeasuredHeight());</div><div class="line">                canvas.drawText(suffixLeft, mSuffixTextStart,</div><div class="line">                        getMeasuredHeight() / <span class="number">2</span></div><div class="line">                                - ((mPaint.descent() + mPaint.ascent()) / <span class="number">2</span>), mPaint);</div><div class="line">                canvas.restore();</div><div class="line">            &#125;</div><div class="line">            mPaint.setColor(mTextOriginColor);</div><div class="line">            canvas.drawText(inputContent, getPaddingLeft(),</div><div class="line">                    getMeasuredHeight() / <span class="number">2</span></div><div class="line">                            - ((mPaint.descent() + mPaint.ascent()) / <span class="number">2</span>), mPaint);</div><div class="line">            canvas.restore();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">sp2px</span><span class="params">(<span class="keyword">float</span> dpVal)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,</div><div class="line">                dpVal, getResources().getDisplayMetrics());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</div><div class="line">        inputContent = s.toString();</div><div class="line">        <span class="keyword">if</span> ((inputContent.indexOf(<span class="string">"@"</span>) != -<span class="number">1</span>) &amp;&amp; (!TextUtils.isEmpty(inputContent.substring(inputContent.indexOf(<span class="string">"@"</span>) + <span class="number">1</span>)))) &#123;</div><div class="line">            afterAt = inputContent.substring(inputContent.indexOf(<span class="string">"@"</span>) + <span class="number">1</span>);</div><div class="line">            suffixLeft = <span class="string">""</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; suffix.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (suffix[i].startsWith(afterAt)) &#123;</div><div class="line">                    suffixLeft = suffix[i].substring(suffix[i].indexOf(afterAt) + afterAt.length());</div><div class="line">                    content = inputContent + suffixLeft;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            suffixLeft = <span class="string">""</span>;</div><div class="line">            content = inputContent;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFocusChange</span><span class="params">(View v, <span class="keyword">boolean</span> hasFocus)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!hasFocus &amp;&amp; !TextUtils.isEmpty(suffixLeft)) &#123;</div><div class="line">            suffixLeft = <span class="string">""</span>;</div><div class="line">            setText(content);</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="之前的方法"><a href="#之前的方法" class="headerlink" title="之前的方法"></a>之前的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Color;</div><div class="line"><span class="keyword">import</span> android.graphics.Paint;</div><div class="line"><span class="keyword">import</span> android.graphics.Rect;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.BitmapDrawable;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.text.Editable;</div><div class="line"><span class="keyword">import</span> android.text.TextWatcher;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailAutoCompleteTextView</span> <span class="keyword">extends</span> <span class="title">EditText</span> <span class="keyword">implements</span> <span class="title">TextWatcher</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Bitmap mBitmap;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBaseLine;</div><div class="line">    <span class="keyword">private</span> Canvas mCanvas;</div><div class="line">    <span class="keyword">private</span> BitmapDrawable mDrawable;</div><div class="line">    <span class="keyword">private</span> Drawable leftDrawable = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mFlag;</div><div class="line">    <span class="keyword">private</span> String mAddedText;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPR = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 常用的邮箱</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> HashMap&lt;String, String&gt; mAutoData = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmailAutoCompleteTextView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        initEmail();</div><div class="line">        addTextChangedListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmailAutoCompleteTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        <span class="comment">// 下面主要是为了获取android:drawableLeft属性的值，后来在[参考链接1]发现的其他方式</span></div><div class="line">        <span class="keyword">int</span> id = attrs</div><div class="line">                .getAttributeResourceValue(</div><div class="line">                        <span class="string">"http://schemas.android.com/apk/res/android"</span>,</div><div class="line">                        <span class="string">"drawableLeft"</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (id != <span class="number">0</span>) &#123;</div><div class="line">            leftDrawable = getResources().getDrawable(id);</div><div class="line">        &#125;</div><div class="line">        initEmail();</div><div class="line">        addTextChangedListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmailAutoCompleteTextView</span><span class="params">(Context context, AttributeSet attrs,</span></span></div><div class="line">            <span class="keyword">int</span> defStyle) &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">        <span class="keyword">int</span> id = attrs</div><div class="line">                .getAttributeResourceValue(</div><div class="line">                        <span class="string">"http://schemas.android.com/apk/res/android"</span>,</div><div class="line">                        <span class="string">"drawableLeft"</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (id != <span class="number">0</span>) &#123;</div><div class="line">            leftDrawable = getResources().getDrawable(id);</div><div class="line">        &#125;</div><div class="line">        initEmail();</div><div class="line">        addTextChangedListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count,</span></span></div><div class="line">            <span class="keyword">int</span> after) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFocusChanged</span><span class="params">(<span class="keyword">boolean</span> focused, <span class="keyword">int</span> direction,</span></span></div><div class="line">            Rect previouslyFocusedRect) &#123;</div><div class="line">        <span class="keyword">if</span> (!focused &amp;&amp; mAddedText != <span class="keyword">null</span>) &#123;</div><div class="line">            append(mAddedText);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.onFocusChanged(focused, direction, previouslyFocusedRect);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</div><div class="line">        String text = s.toString();</div><div class="line">        mFlag = <span class="keyword">true</span>;</div><div class="line">        Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = mAutoData.entrySet()</div><div class="line">                .iterator();</div><div class="line">        <span class="comment">// 遍历常用邮箱</span></div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            Map.Entry&lt;String, String&gt; entry = iterator.next();</div><div class="line">            <span class="keyword">if</span> (text.endsWith(entry.getKey())) &#123;</div><div class="line">                drawAddedText(entry.getValue());</div><div class="line">                mAddedText = entry.getValue();</div><div class="line">                mFlag = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 如果没有匹配，就画一个空</span></div><div class="line">        <span class="keyword">if</span> (mFlag) &#123;</div><div class="line">            drawAddedText(<span class="string">""</span>);</div><div class="line">            mAddedText = <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 画出后缀字符串</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> addedText</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawAddedText</span><span class="params">(String addedText)</span> </span>&#123;</div><div class="line">        <span class="comment">// 如果字符串为空，画空</span></div><div class="line">        <span class="keyword">if</span> (addedText.equals(<span class="string">""</span>)) &#123;</div><div class="line">            <span class="comment">// setCompoundDrawables(null, null, null, null);</span></div><div class="line">            setCompoundDrawablesWithIntrinsicBounds(leftDrawable, <span class="keyword">null</span>, <span class="keyword">null</span>,</div><div class="line">                    <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 只需要初始化一次</span></div><div class="line">        <span class="keyword">if</span> (mBitmap == <span class="keyword">null</span>) &#123;</div><div class="line">            mHeight = getHeight();</div><div class="line">            mWidth = getWidth();</div><div class="line"></div><div class="line">            <span class="comment">// 初始化画笔</span></div><div class="line">            mPaint = <span class="keyword">new</span> Paint();</div><div class="line">            mPaint.setColor(Color.GRAY);</div><div class="line">            mPaint.setAntiAlias(<span class="keyword">true</span>);<span class="comment">// 去除锯齿</span></div><div class="line">            mPaint.setFilterBitmap(<span class="keyword">true</span>);<span class="comment">// 对位图进行滤波处理</span></div><div class="line">            mPaint.setTextSize(getTextSize());</div><div class="line">            mPR = getCompoundPaddingRight() ;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 计算baseLine</span></div><div class="line">        Rect rect = <span class="keyword">new</span> Rect();</div><div class="line">        <span class="keyword">int</span> baseLineLocation = getLineBounds(<span class="number">0</span>, rect);</div><div class="line">        mBaseLine = baseLineLocation - rect.top;</div><div class="line">        <span class="keyword">int</span> addedTextHeight = mHeight - getCompoundPaddingTop()</div><div class="line">                - getCompoundPaddingBottom();</div><div class="line">        <span class="keyword">int</span> addedTextWidth = (<span class="keyword">int</span>) mPaint.measureText(addedText);</div><div class="line">        <span class="comment">// 创建bitmap</span></div><div class="line">        mBitmap = Bitmap.createBitmap(addedTextWidth, addedTextHeight,</div><div class="line">                Bitmap.Config.ARGB_8888);</div><div class="line">        mCanvas = <span class="keyword">new</span> Canvas(mBitmap);</div><div class="line"></div><div class="line">        <span class="comment">// 绘制后缀字符串</span></div><div class="line">        mCanvas.drawText(addedText, <span class="number">0</span>, mBaseLine, mPaint);</div><div class="line">        <span class="comment">// bitmap转化为Drawable</span></div><div class="line">        mDrawable = <span class="keyword">new</span> BitmapDrawable(mBitmap);</div><div class="line"></div><div class="line">        String text = getText().toString();</div><div class="line">        <span class="comment">// 计算后缀字符串在输入框中的位置</span></div><div class="line">        <span class="keyword">int</span> addedTextTop = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> addedTextLeft = (<span class="keyword">int</span>) (mPaint.measureText(text) - mWidth</div><div class="line">                + addedTextWidth + getCompoundPaddingLeft() + mPR);</div><div class="line">        <span class="comment">// 设置后缀字符串位置</span></div><div class="line">        <span class="keyword">if</span> (leftDrawable != <span class="keyword">null</span>) &#123;</div><div class="line">            leftDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, leftDrawable.getIntrinsicWidth(),</div><div class="line">                    leftDrawable.getIntrinsicHeight());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> addedTextRight = addedTextLeft + addedTextWidth;</div><div class="line">        mDrawable.setBounds(addedTextLeft, addedTextTop, addedTextRight,</div><div class="line">                addedTextHeight);</div><div class="line">        <span class="comment">// 显示后缀字符串</span></div><div class="line">        setCompoundDrawables(leftDrawable, <span class="keyword">null</span>, mDrawable, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化常用的邮箱</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initEmail</span><span class="params">()</span> </span>&#123;</div><div class="line">        mAutoData.put(<span class="string">"@q"</span>, <span class="string">"q.com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@qq"</span>, <span class="string">".com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@qq."</span>, <span class="string">"com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@qq.c"</span>, <span class="string">"om"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@qq.co"</span>, <span class="string">"m"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@1"</span>, <span class="string">"63.com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@16"</span>, <span class="string">"3.com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@163"</span>, <span class="string">".com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@163."</span>, <span class="string">"com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@163.c"</span>, <span class="string">"om"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@163.co"</span>, <span class="string">"m"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@s"</span>, <span class="string">"ina.cn"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@si"</span>, <span class="string">"na.cn"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@sin"</span>, <span class="string">"a.cn"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@sina"</span>, <span class="string">".cn"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@sina."</span>, <span class="string">"cn"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@sina.c"</span>, <span class="string">"n"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@s"</span>, <span class="string">"ina.com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@si"</span>, <span class="string">"na.com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@sin"</span>, <span class="string">"a.com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@sina"</span>, <span class="string">".com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@sina."</span>, <span class="string">"com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@sina.c"</span>, <span class="string">"om"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@sina.co"</span>, <span class="string">"m"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@1"</span>, <span class="string">"26.com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@12"</span>, <span class="string">"6.com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@126"</span>, <span class="string">".com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@126."</span>, <span class="string">"com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@126.c"</span>, <span class="string">"om"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@126.co"</span>, <span class="string">"m"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@g"</span>, <span class="string">"mail.com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@gm"</span>, <span class="string">"ail.com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@gma"</span>, <span class="string">"il.com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@gmail"</span>, <span class="string">".com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@gmail."</span>, <span class="string">"com"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@gmail.c"</span>, <span class="string">"om"</span>);</div><div class="line">        mAutoData.put(<span class="string">"@gmail.co"</span>, <span class="string">"m"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="http://www.cnblogs.com/over140/p/3464348.html" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android setCompoundDrawables与setCompoundDrawablesWithIntrinsicBounds的区别]]></title>
      <url>http://dalufan.com/2015/08/24/android-setCompoundDrawables-setCompoundDrawablesWithIntrinsicBounds/</url>
      <content type="html"><![CDATA[<p>更换radiobutton中的图片在xml中很好设置，但对于初学者如何在代码中设置还是不容易找的。没法子，通过看原版api找到两个方法，setCompoundDrawables和setCompoundDrawablesWithIntrinsicBounds。</p>
<p>下面交给大家方法。</p>
<a id="more"></a> 
<p><strong>第一个方法</strong>：setCompoundDrawablesWithIntrinsicBounds(Drawable left, Drawable top, Drawable right, Drawable bottom)</p>
<p>api原文为：</p>
<blockquote>
<p>Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. Use null if you do not want a Drawable there. The Drawables’ bounds will be set to their intrinsic bounds.意思大概就是：可以在上、下、左、右设置图标，如果不想在某个地方显示，则设置为null。图标的宽高将会设置为固有宽高，既自动通过getIntrinsicWidth和getIntrinsicHeight获取。——笔者翻译</p>
</blockquote>
<p>如代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">button = (RadioButton) group.getChildAt(i);</div><div class="line">Resources res = TabTest.<span class="keyword">this</span>.getResources();</div><div class="line">Drawable myImage = res.getDrawable(R.drawable.home);</div><div class="line">button.setCompoundDrawablesWithIntrinsicBounds(<span class="keyword">null</span>, myImage, <span class="keyword">null</span>, <span class="keyword">null</span>);</div></pre></td></tr></table></figure>
<p><strong>第二种方法</strong>：setCompoundDrawables(Drawable left, Drawable top, Drawable right, Drawable bottom)</p>
<p>api原文为：</p>
<blockquote>
<p>Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. Use null if you do not want a Drawable there. The Drawables must already have had setBounds(Rect) called.意思大概就是：可以在上、下、左、右设置图标，如果不想在某个地方显示，则设置为null。但是Drawable必须已经setBounds(Rect)。意思是你要添加的资源必须已经设置过初始位置、宽和高等信息。——笔者翻译</p>
</blockquote>
<p>这下就明白了，这个方法要先给Drawable设置setBounds(x,y,x+width,y+height);其中<code>x:组件在容器X轴上的起点 y:组件在容器Y轴上的起点 width:组件的长度 height:组件的高度</code>。</p>
<p>如代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Resources res = TabTest.<span class="keyword">this</span>.getResources();</div><div class="line">Drawable myImage = res.getDrawable(R.drawable.home);</div><div class="line">myImage.setBounds(<span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">button.setCompoundDrawables(<span class="keyword">null</span>, myImage, <span class="keyword">null</span>, <span class="keyword">null</span>);</div></pre></td></tr></table></figure>
<p>总结：radiobutton设置不同方位的图标的方法有以上两种，如果想手动设置大小的话就要用setCompoundDrawables，事先要给Drawable设置setBounds。如果按照原有比例大小显示图片就使用setCompoundDrawablesWithIntrinsicBounds</p>
<hr>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/wulianghuan/article/details/24421179" target="_blank" rel="external">CSDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android Drawable 那些不为人知的高效用法]]></title>
      <url>http://dalufan.com/2015/08/20/android-Drawable-usage/</url>
      <content type="html"><![CDATA[<h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>Drawable在我们平时的开发中，基本都会用到，而且给大家非常的有用。那么什么是Drawable呢？能够在canvas上绘制的一个玩意，而且相比于View，并不需要去考虑measure、layout，仅仅只要去考虑如何draw（canavs）。当然了，对于Drawable传统的用法，大家肯定不陌生 ，今天主要给大家带来以下几个Drawable的用法：</p>
<p>1、自定义Drawable，相比View来说，Drawable属于轻量级的、使用也很简单。以后自定义实现一个效果的时候，可以改变View first的思想，尝试下Drawable first。</p>
<p>2、自定义状态，相信大家对于State Drawable都不陌生，但是有没有尝试过去自定义一个状态呢？</p>
<p>3、利用Drawable提升我们的UI Perfermance ， 如何利用Drawable去提升我们的UI的性能。</p>
<p>下面交给大家方法。</p>
<a id="more"></a> 
<h3 id="2、Drawable基本概念"><a href="#2、Drawable基本概念" class="headerlink" title="2、Drawable基本概念"></a>2、Drawable基本概念</h3><p>一般情况下，除了直接使用放在Drawable下的图片，其实的Drawable的用法都和xml相关，我们可以使用shape、layer-list等标签绘制一些背景，还可以通过selector标签定义View的状态的效果等。当然了基本每个标签都对应于一个真正的实体类，关系如下：（图片来自：Cyril Mottier ：master_android_drawables）</p>
<p><img src="/article_images/master_android_drawables.png" alt="alt"></p>
<h3 id="3、自定义Drawable"><a href="#3、自定义Drawable" class="headerlink" title="3、自定义Drawable"></a>3、自定义Drawable</h3><p>关于自定义Drawable，可以通过写一个类，然后继承自Drawable ， 类似于自定义View，当然了自定义Drawable的核心方法只有一个，那就是draw。那么自定义Drawable到底有什么实际的作用呢？能干什么呢？</p>
<p>相信大家对于圆角、圆形图片都不陌生，并且我曾经写过通过自定义View实现的方式，具体可参考：</p>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/41967509" target="_blank" rel="external">android BitmapShader 实战 实现圆形、圆角图片</a><br><a href="http://blog.csdn.net/lmj623565791/article/details/42094215" target="_blank" rel="external">android Xfermode 实战 实现圆形、圆角图片</a></p>
<p>那我今天要告诉你，不需要自定义View，自定义Drawable也能实现，而且更加简单、高效、使用范围更广（你可以作为任何View的背景）。</p>
<h4 id="3-1-RoundImageDrawable"><a href="#3-1-RoundImageDrawable" class="headerlink" title="3.1 RoundImageDrawable"></a>3.1 RoundImageDrawable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;  </div><div class="line"><span class="keyword">import</span> android.graphics.BitmapShader;  </div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;  </div><div class="line"><span class="keyword">import</span> android.graphics.ColorFilter;  </div><div class="line"><span class="keyword">import</span> android.graphics.Paint;  </div><div class="line"><span class="keyword">import</span> android.graphics.PixelFormat;  </div><div class="line"><span class="keyword">import</span> android.graphics.RectF;  </div><div class="line"><span class="keyword">import</span> android.graphics.Shader.TileMode;  </div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundImageDrawable</span> <span class="keyword">extends</span> <span class="title">Drawable</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Paint mPaint;  </div><div class="line">    <span class="keyword">private</span> Bitmap mBitmap;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> RectF rectF;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundImageDrawable</span><span class="params">(Bitmap bitmap)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        mBitmap = bitmap;  </div><div class="line">        BitmapShader bitmapShader = <span class="keyword">new</span> BitmapShader(bitmap, TileMode.CLAMP,  </div><div class="line">                TileMode.CLAMP);  </div><div class="line">        mPaint = <span class="keyword">new</span> Paint();  </div><div class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);  </div><div class="line">        mPaint.setShader(bitmapShader);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBounds</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.setBounds(left, top, right, bottom);  </div><div class="line">        rectF = <span class="keyword">new</span> RectF(left, top, right, bottom);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        canvas.drawRoundRect(rectF, <span class="number">30</span>, <span class="number">30</span>, mPaint);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIntrinsicWidth</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> mBitmap.getWidth();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIntrinsicHeight</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> mBitmap.getHeight();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlpha</span><span class="params">(<span class="keyword">int</span> alpha)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        mPaint.setAlpha(alpha);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColorFilter</span><span class="params">(ColorFilter cf)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        mPaint.setColorFilter(cf);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOpacity</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> PixelFormat.TRANSLUCENT;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>核心代码就是draw了，but，我们只需要一行~~~~setAlpha、setColorFilter、getOpacity、draw这几个方法是必须实现的，不过除了draw以为，其他都很简单。getIntrinsicWidth、getIntrinsicHeight主要是为了在View使用wrap_content的时候，提供一下尺寸，默认为-1可不是我们希望的。setBounds就是去设置下绘制的范围。</p>
<p>ok，圆角图片就这么实现了，easy 不~~</p>
<p>用法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Bitmap bitmap = BitmapFactory.decodeResource(getResources(),  </div><div class="line">                R.drawable.mv);  </div><div class="line">        ImageView iv = (ImageView) findViewById(R.id.id_one);  </div><div class="line">        iv.setImageDrawable(<span class="keyword">new</span> RoundImageDrawable(bitmap));</div></pre></td></tr></table></figure>
<p>ok，贴一下我们的效果图，两个ImageView和一个TextView<br><img src="/article_images/android-RoundImageDrawable.png" alt="alt"><br>可以看到，不仅仅用于ImageView去实现圆角图片，并且可以作为任何View的背景，在ImageView中的拉伸的情况，配下ScaleType即可。在其他View作为背景时，如果出现拉伸情况，请参考：<a href="http://blog.csdn.net/lmj623565791/article/details/41967509" target="_blank" rel="external">android BitmapShader 实战 实现圆形、圆角图片</a> 。 足够详细了。</p>
<h4 id="3-2-CircleImageDrawable"><a href="#3-2-CircleImageDrawable" class="headerlink" title="3.2 CircleImageDrawable"></a>3.2 CircleImageDrawable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;  </div><div class="line"><span class="keyword">import</span> android.graphics.BitmapShader;  </div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;  </div><div class="line"><span class="keyword">import</span> android.graphics.ColorFilter;  </div><div class="line"><span class="keyword">import</span> android.graphics.Paint;  </div><div class="line"><span class="keyword">import</span> android.graphics.PixelFormat;  </div><div class="line"><span class="keyword">import</span> android.graphics.RectF;  </div><div class="line"><span class="keyword">import</span> android.graphics.Shader.TileMode;  </div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleImageDrawable</span> <span class="keyword">extends</span> <span class="title">Drawable</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Paint mPaint;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;  </div><div class="line">    <span class="keyword">private</span> Bitmap mBitmap ;   </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleImageDrawable</span><span class="params">(Bitmap bitmap)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        mBitmap = bitmap ;   </div><div class="line">        BitmapShader bitmapShader = <span class="keyword">new</span> BitmapShader(bitmap, TileMode.CLAMP,  </div><div class="line">                TileMode.CLAMP);  </div><div class="line">        mPaint = <span class="keyword">new</span> Paint();  </div><div class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);  </div><div class="line">        mPaint.setShader(bitmapShader);  </div><div class="line">        mWidth = Math.min(mBitmap.getWidth(), mBitmap.getHeight());  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        canvas.drawCircle(mWidth / <span class="number">2</span>, mWidth / <span class="number">2</span>, mWidth / <span class="number">2</span>, mPaint);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIntrinsicWidth</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> mWidth;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIntrinsicHeight</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> mWidth;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlpha</span><span class="params">(<span class="keyword">int</span> alpha)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        mPaint.setAlpha(alpha);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColorFilter</span><span class="params">(ColorFilter cf)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        mPaint.setColorFilter(cf);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOpacity</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> PixelFormat.TRANSLUCENT;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果：<br><img src="/article_images/android-CircleImageDrawable.png" alt="alt"></p>
<h3 id="4、自定义Drawable-State"><a href="#4、自定义Drawable-State" class="headerlink" title="4、自定义Drawable State"></a>4、自定义Drawable State</h3><p>关于Drawable State，state_pressed神马的，相信大家都掌握的特别熟练了。</p>
<p>那么接下来，我们有个需求，类似于邮箱，邮件以ListView形式展示，但是我们需要一个状态去标识出未读和已读：so，我们自定义一个状态state_message_readed。</p>
<p><img src="/article_images/android-Drawable-state.png" alt="alt"><br>可以看到，如果是已读的邮件，我们的图标是打开状态，且有个淡红色的背景。那么如何通过自定义drawable state 实现呢？</p>
<p>自定义drawable state 需要分为以下几个步骤：</p>
<h4 id="4-1-res-values-新建一个xml文件：drawable-status-xml"><a href="#4-1-res-values-新建一个xml文件：drawable-status-xml" class="headerlink" title="4.1 res/values/新建一个xml文件：drawable_status.xml"></a>4.1 res/values/新建一个xml文件：<code>drawable_status.xml</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"MessageStatus"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"state_message_readed"</span> <span class="attr">format</span>=<span class="string">"boolean"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="4-2-继承Item的容器"><a href="#4-2-继承Item的容器" class="headerlink" title="4.2 继承Item的容器"></a>4.2 继承Item的容器</h4><p>我们这里Item选择RelativeLayout实现，我们需要继承它，然后复写它的onCreateDrawableState方法，把我们自定义的状态在合适的时候添加进去。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.zhy.sample.drawable.R;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;  </div><div class="line"><span class="keyword">import</span> android.widget.RelativeLayout;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListItem</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] STATE_MESSAGE_READED = &#123; R.attr.state_message_readed &#125;;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mMessgeReaded = <span class="keyword">false</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageListItem</span><span class="params">(Context context, AttributeSet attrs)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>(context, attrs);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageReaded</span><span class="params">(<span class="keyword">boolean</span> readed)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mMessgeReaded != readed)  </div><div class="line">        &#123;  </div><div class="line">            mMessgeReaded = readed;  </div><div class="line">            refreshDrawableState();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span>[] onCreateDrawableState(<span class="keyword">int</span> extraSpace)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span> (mMessgeReaded)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span>[] drawableState = <span class="keyword">super</span>  </div><div class="line">                    .onCreateDrawableState(extraSpace + <span class="number">1</span>);  </div><div class="line">            mergeDrawableStates(drawableState, STATE_MESSAGE_READED);  </div><div class="line">            <span class="keyword">return</span> drawableState;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateDrawableState(extraSpace);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码不复杂，声明了一个STATE_MESSAGE_READED，然后在mMessgeReaded=true的情况下，通过onCreateDrawableState方法，加入我们自定义的状态。<br>类似的代码，大家可以看看CompoundButton（CheckBox父类）的源码，它有个checked状态：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line">   <span class="keyword">protected</span> <span class="keyword">int</span>[] onCreateDrawableState(<span class="keyword">int</span> extraSpace) &#123;  </div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span>[] drawableState = <span class="keyword">super</span>.onCreateDrawableState(extraSpace + <span class="number">1</span>);  </div><div class="line">       <span class="keyword">if</span> (isChecked()) &#123;  </div><div class="line">           mergeDrawableStates(drawableState, CHECKED_STATE_SET);  </div><div class="line">       &#125;  </div><div class="line">       <span class="keyword">return</span> drawableState;  </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="4-3-使用"><a href="#4-3-使用" class="headerlink" title="4.3 使用"></a>4.3 使用</h4><p>布局文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.zhy.view.MessageListItem</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>  </div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span>  </div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@drawable/message_item_bg"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_msg_item_icon"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"30dp"</span>  </div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/message_item_icon_bg"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:duplicateParentState</span>=<span class="string">"true"</span>  </div><div class="line">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span>  </div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span>  </div><div class="line">      /&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_msg_item_text"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span>  </div><div class="line">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/id_msg_item_icon"</span> /&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">com.zhy.view.MessageListItem</span>&gt;</span></div></pre></td></tr></table></figure>
<p>很简单，一个图标，一个文本</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.zhy.view.MessageListItem;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> android.app.ListActivity;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;  </div><div class="line"><span class="keyword">import</span> android.view.View;  </div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;  </div><div class="line"><span class="keyword">import</span> android.widget.ArrayAdapter;  </div><div class="line"><span class="keyword">import</span> android.widget.TextView;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomStateActivity</span> <span class="keyword">extends</span> <span class="title">ListActivity</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">private</span> Message[] messages = <span class="keyword">new</span> Message[] &#123;  </div><div class="line">            <span class="keyword">new</span> Message(<span class="string">"Gas bill overdue"</span>, <span class="keyword">true</span>),  </div><div class="line">            <span class="keyword">new</span> Message(<span class="string">"Congratulations, you've won!"</span>, <span class="keyword">true</span>),  </div><div class="line">            <span class="keyword">new</span> Message(<span class="string">"I love you!"</span>, <span class="keyword">false</span>),  </div><div class="line">            <span class="keyword">new</span> Message(<span class="string">"Please reply!"</span>, <span class="keyword">false</span>),  </div><div class="line">            <span class="keyword">new</span> Message(<span class="string">"You ignoring me?"</span>, <span class="keyword">false</span>),  </div><div class="line">            <span class="keyword">new</span> Message(<span class="string">"Not heard from you"</span>, <span class="keyword">false</span>),  </div><div class="line">            <span class="keyword">new</span> Message(<span class="string">"Electricity bill"</span>, <span class="keyword">true</span>),  </div><div class="line">            <span class="keyword">new</span> Message(<span class="string">"Gas bill"</span>, <span class="keyword">true</span>), <span class="keyword">new</span> Message(<span class="string">"Holiday plans"</span>, <span class="keyword">false</span>),  </div><div class="line">            <span class="keyword">new</span> Message(<span class="string">"Marketing stuff"</span>, <span class="keyword">false</span>), &#125;;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">  </div><div class="line">        getListView().setAdapter(<span class="keyword">new</span> ArrayAdapter&lt;Message&gt;(<span class="keyword">this</span>, -<span class="number">1</span>, messages)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">private</span> LayoutInflater mInflater = LayoutInflater  </div><div class="line">                    .from(getContext());  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span>  </span></div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)  </div><div class="line">                &#123;  </div><div class="line">                    convertView = mInflater.inflate(R.layout.item_msg_list,  </div><div class="line">                            parent, <span class="keyword">false</span>);  </div><div class="line">                &#125;  </div><div class="line">                MessageListItem messageListItem = (MessageListItem) convertView;  </div><div class="line">                TextView tv = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.id_msg_item_text);  </div><div class="line">                tv.setText(getItem(position).message);  </div><div class="line">                messageListItem.setMessageReaded(getItem(position).readed);  </div><div class="line">                <span class="keyword">return</span> convertView;  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">        &#125;);  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码很简单，但是可以看到，我们需要在getView里面中去使用调用setMessageReaded方法，当然了其他的一些状态，肯定也要手动触发，比如在ACTION_DOWN中触发pressed等。请勿纠结咋没有使用ViewHolder什么的，自己添加下就行。参考<a href="https://github.com/CharlesHarley/Example-android-CustomDrawableStates" target="_blank" rel="external">github</a></p>
<h3 id="5、提升我们的UI-Perfermance"><a href="#5、提升我们的UI-Perfermance" class="headerlink" title="5、提升我们的UI Perfermance"></a>5、提升我们的UI Perfermance</h3><p>现在大家越来越注重性能问题，其实没必要那么在乎，但是既然大家在乎了，这里通过Cyril Mottier ：master_android_drawables ppt中的一个例子来说明如果利用Drawable来提升我们的UI的性能。</p>
<p>大家看这样一个效果图：</p>
<p><img src="/article_images/android-drawable-demo1.png" alt="alt"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/app_background"</span>  </div><div class="line">    <span class="attr">android:padding</span>=<span class="string">"8dp"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>  </div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"24dp"</span>  </div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/logo"</span> /&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span>  </div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span>  </div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> &gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>  </div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@string/sign_up"</span> /&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>  </div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@string/sign_in"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到最外层是FrameLayout仅仅是为了设置背景图和padding，这样的布局相信很多人也写过。<br>再看看这个布局作为APP启动时，用户的直观效果：</p>
<p><img src="/article_images/android-drawable-demo2.png" alt="alt"></p>
<p>用户首先看到一个白板，然后显示出我们的页面。接下来，我们将利用Drawable改善我们的UI性能以及用户体验。</p>
<p>1、首先，我们去除我们最外层的FrameLayout，然后自定义一个drawable的xml，叫做logo.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> &gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span> &gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/app_background"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:bottom</span>=<span class="string">"48dp"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">bitmap</span>  </span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span>  </div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/logo"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure>
<p>ok，这个drawable是设置了我们的背景和logo；</p>
<p>2、将其作为我们当前Activity的windowBackground</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">style</span>  </span></div><div class="line">        <span class="attr">name</span>=<span class="string">"Theme.Default.NoActionBar"</span>  </div><div class="line">        <span class="attr">parent</span>=<span class="string">"@android:style/Theme.Holo.Light.NoActionBar"</span> &gt;<span class="xml">  </span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/login<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3、设置到Activity上：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span>  </span></div><div class="line"><span class="attr">android:name</span>=<span class="string">"LoginActivity"</span>  </div><div class="line"><span class="attr">android:theme</span>=<span class="string">"@style/Theme.Default.NoActionBar"</span>&gt;</div></pre></td></tr></table></figure>
<p>Ok，这样不仅最小化了我们的layout，现在我们的layout里面只有一个LinearLayout和两个按钮；并且提升了用户体验，现在用户的直观效果时：</p>
<p><img src="/article_images/android-drawable-demo3.png" alt="alt"></p>
<p><a href="/article_files/sample_zhy_drawable.rar">下载地址</a></p>
<hr>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/43752383" target="_blank" rel="external">CSDN</a></p>
<p><a href="http://www.curious-creature.com/2012/12/11/android-recipe-1-image-with-rounded-corners/comment-page-2/" target="_blank" rel="external">Romain Guy’s Blog</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo的使用方法]]></title>
      <url>http://dalufan.com/2015/07/29/hello-world/</url>
      <content type="html"><![CDATA[<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<h3 id="支持高亮的语言"><a href="#支持高亮的语言" class="headerlink" title="支持高亮的语言"></a>支持高亮的语言</h3><p>More info: <a href="http://highlightjs.readthedocs.org/en/latest/css-classes-reference.html" target="_blank" rel="external">highlight</a></p>
<h3 id="引入图片的方式"><a href="#引入图片的方式" class="headerlink" title="引入图片的方式"></a>引入图片的方式</h3><p><code>![alt](/article_images/master_android_drawables.png)</code></p>
<h3 id="引入文件的方式"><a href="#引入文件的方式" class="headerlink" title="引入文件的方式"></a>引入文件的方式</h3><p><code>[下载地址](/article_files/sample_zhy_drawable.rar)</code></p>
<h3 id="站内引用"><a href="#站内引用" class="headerlink" title="站内引用"></a>站内引用</h3><p><code>[地址](../../../../../2015/08/28/android-handler-gc/)</code></p>
<h3 id="hexo部署后，保存CNAME的方法"><a href="#hexo部署后，保存CNAME的方法" class="headerlink" title="hexo部署后，保存CNAME的方法"></a>hexo部署后，保存CNAME的方法</h3><p>将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等</p>
<hr>
<p>更多信息: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[eclipse git push和pull出错]]></title>
      <url>http://dalufan.com/2015/07/10/eclipse-cannot-open-git-upload-pack/</url>
      <content type="html"><![CDATA[<p>eclipse git 提交时候提示<code>git: cannot open git-receive-pack</code>,pull 提示<code>cannot open git-upload-pack</code>,网上搜了很多都是说一般引起这个问题的原因有两个：一、网络问题，网络访问外网总是会出现各种不稳定因素。二、eclipse中egit插件的配置问题。</p>
<a id="more"></a> 
<p><strong>配置问题</strong></p>
<p>打开eclipse中的windows–&gt;Preferences–&gt;Team–&gt;Git–&gt;Configuration–&gt;User Settings.然后点Add Entry新建一个键值对，输入http.sslVerify=false。</p>
<p><strong>通信异常</strong></p>
<p>不能生产DH密钥对，密钥函数出错，谷歌：“Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)”时发现网友说可能是java版本的问题，低版本的java中存在的Bug，但我已经是用1.7来编译的了，1.8 android不支持。</p>
<p>我本机chrome浏览器可以访问内网git，觉得不是网络问题，后来想到自己IE浏览器早上有配置代理，没有关闭就是赶紧关闭试下，果然是代理的问题。也是奇怪，我在IE上配置的代理没影响到chrome浏览器，怎么会影响到Eclipse呢？</p>
<hr>
<p>参考链接：<a href="http://www.cnblogs.com/yejiurui/p/3386393.html" target="_blank" rel="external">1</a>，<a href="http://blog.sina.com.cn/s/blog_6f8ad8190102vbeh.html" target="_blank" rel="external">2</a>，<a href="http://blog.csdn.net/qq635785620/article/details/8191799" target="_blank" rel="external">Eclipse代理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中对GridView， ListView等滚动控件的Touch事件onInterceptTouchEvent，onTouchEvent理解]]></title>
      <url>http://dalufan.com/2015/07/01/android-listview-ontouchevent/</url>
      <content type="html"><![CDATA[<h3 id="0x00-前记"><a href="#0x00-前记" class="headerlink" title="0x00 前记"></a>0x00 前记</h3><p>在开始正文之前，首先得感谢<a href="http://blog.csdn.net/guitk/article/details/7057155" target="_blank" rel="external">CSDN</a>提供的一篇转载文章，里面说的内容和插图让我对TouchEvent的事件传递迅速有了一个大致的印象。但是文章里面有说的不全面不详细的地方，特发此博客记录个人对于这类问题的理解，用来补充和完善，有不妥的地方，也欢迎大家批评讨论。</p>
<a id="more"></a> 
<h3 id="0x01-解读"><a href="#0x01-解读" class="headerlink" title="0x01 解读"></a>0x01 解读</h3><p>正如命名一样，onInterceptTouchEvent用来拦截事件，onTouchEvent用来处理事件，网上大部分的文章中也都对这两类方法的使用情况进行了简单的说明。</p>
<p>事件传递如下图，逐级向下看onInterceptTouchEvent()是否需要截断事件，如果没发生截断，则逐级向上寻找能够处理该事件的onTouchEvent()。</p>
<p><img src="/article_images/listview_ontouch_01.png" alt="alt"></p>
<p>源码上RelativeLayout等布局是继承ViewGroup，看源码上ViewGroup中的onInterceptTouchEvent却非常简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果不重写该方法直接就会return false。</p>
<p>如果在其中一层截断事件，让onInterceptTouchEvent()返回true，例如在上图中ChildLayout中发生截断，则事件传递则会向跳过MyView，直接从这一层进入onTouchEvent。若ChildLayout的onTouchEvent返回false，则传递流程如下图</p>
<p><img src="/article_images/listview_ontouch_02.png" alt="alt"></p>
<p>很重要的一点：事件传递是这样的，你可以在传递到响应的方法里面做任何你想做的事情，这些事情不会改变事件传递，能影响事件传递的是这些方法的返回值。例如你在ChildLayout的onTouchEvent做了很多事情，<code>只要返回了false</code>，事件还是会进入到ParentLayout的onTouchEvent。</p>
<p>若保持ChildLayout的onInterceptTouchEvent返回true，将它的onTouchEvent返回true，则事件不会再进入其他组件的onTouchEvent，后续的时间会依次进入这个返回了true的onTouchEvent，传递则变为如下图：</p>
<p><img src="/article_images/listview_ontouch_03.png" alt="alt"></p>
<p>自此说的内容都跟博客开头那个链接里面的文章类似。下面写一些那篇文章里面没有谈及或者不够全面的地方。下文中举例进行的操作都是拖动，即ACITON_DOWN -&gt; ACTION_MOVE -&gt; ACTION_UP</p>
<p>那篇文章里面说在事件发生截断的时候，会像子View发出ACTION_CANCEL，但是我在ChildLayout的onInterceptTouchEvent里面return true之后，却没有收到ACTION_CANCEL，经实验发现，谈谈关于ACTION_CANCEL的事情。ACTION_CANCEL的发出是有条件的：如果子一层曾经处理过事件，即事件进入到onTouchEvent中，则此时截断事件，上一层会向下一层发出ACTION_CANCEL。例如在ChildLayout的onInterceptTouchEvent中对event.getAction()进行判断，如果是ACTION_DOWN，返回false，在ACTION_MOVE的时候，返回true进行截断。则可以发现MyView接到了action为ACTION_DOWN的事件，但是当出现ACTION_MOVE在ChildLayout截断发生时，MyView则收到了ACTION_CANCEL的消息。代码如下：</p>
<p><strong>ChildLayout</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">@Override</span>  </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;  </div><div class="line">     <span class="keyword">boolean</span> result = <span class="keyword">super</span>.onInterceptTouchEvent(ev);  </div><div class="line">     <span class="keyword">switch</span>(ev.getAction()) &#123;  </div><div class="line">     <span class="keyword">case</span> MotionEvent.ACTION_DOWN:  </div><div class="line">         Log.i(<span class="string">"ZZZZ"</span>, <span class="string">"ChildLayout onInterceptTouchEvent ACITON_DOWN:"</span>);  </div><div class="line">         <span class="keyword">break</span>;  </div><div class="line">     <span class="keyword">case</span> MotionEvent.ACTION_MOVE:  </div><div class="line">         Log.i(<span class="string">"ZZZZ"</span>, <span class="string">"ChildLayout onInterceptTouchEvent ACITON_MOVE:"</span>);  </div><div class="line">         result = <span class="keyword">true</span>;  </div><div class="line">         <span class="keyword">break</span>;  </div><div class="line">     <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:  </div><div class="line">         Log.i(<span class="string">"ZZZZ"</span>, <span class="string">"ChildLayout onInterceptTouchEvent ACITON_CANCEL:"</span>);  </div><div class="line">         <span class="keyword">break</span>;  </div><div class="line">     <span class="keyword">case</span> MotionEvent.ACTION_UP:  </div><div class="line">         Log.i(<span class="string">"ZZZZ"</span>, <span class="string">"ChildLayout onInterceptTouchEvent ACITON_UP:"</span>);  </div><div class="line">         <span class="keyword">break</span>;  </div><div class="line">     &#125;  </div><div class="line">     Log.i(<span class="string">"ZZZZ"</span>, <span class="string">"ChildLayout onInterceptTouchEvent return "</span>+result);  </div><div class="line">     <span class="keyword">return</span> result;  </div><div class="line"> &#125;  </div><div class="line">  </div><div class="line"> <span class="meta">@Override</span>  </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;  </div><div class="line">     <span class="keyword">boolean</span> result = <span class="keyword">super</span>.onTouchEvent(ev);  </div><div class="line">     <span class="keyword">switch</span>(ev.getAction()) &#123;  </div><div class="line">     <span class="keyword">case</span> MotionEvent.ACTION_DOWN:  </div><div class="line">         Log.i(<span class="string">"ZZZZ"</span>, <span class="string">"ChildLayout onTouchEvent ACTION_DOWN"</span>);  </div><div class="line">         <span class="keyword">break</span>;  </div><div class="line">     <span class="keyword">case</span> MotionEvent.ACTION_MOVE:  </div><div class="line">         Log.i(<span class="string">"ZZZZ"</span>, <span class="string">"ChildLayout onTouchEvent ACTION_MOVE"</span>);  </div><div class="line">         <span class="keyword">break</span>;  </div><div class="line">     <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:  </div><div class="line">         Log.i(<span class="string">"ZZZZ"</span>, <span class="string">"ChildLayout onTouchEvent ACTION_CANCEL"</span>);  </div><div class="line">     <span class="keyword">case</span> MotionEvent.ACTION_UP:  </div><div class="line">         Log.i(<span class="string">"ZZZZ"</span>, <span class="string">"ChildLayout onTouchEvent ACTION_UP"</span>);  </div><div class="line">         <span class="keyword">break</span>;  </div><div class="line">     &#125;  </div><div class="line">  </div><div class="line">     result = <span class="keyword">true</span>;  </div><div class="line">     Log.i(<span class="string">"ZZZZ"</span>, <span class="string">"ChildLayout onTouchEvent return "</span>+result);  </div><div class="line">     <span class="keyword">return</span> result;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了增加事件的复杂性，挑选了有滚动效果的GridView在ChildLayout下一层的MyView作为实验对象</p>
<p><strong>MyGridView</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;  </div><div class="line">    <span class="keyword">boolean</span> result = <span class="keyword">super</span>.onInterceptTouchEvent(ev);  </div><div class="line">    <span class="keyword">switch</span>(ev.getAction()) &#123;  </div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_DOWN:  </div><div class="line">        Log.d(<span class="string">"ZZZZ"</span>, <span class="string">"MyGridView onInterceptTouchEvent ACITON_DOWN:"</span>);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_MOVE:  </div><div class="line">        Log.d(<span class="string">"ZZZZ"</span>, <span class="string">"MyGridView onInterceptTouchEvent ACITON_MOVE:"</span>);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:  </div><div class="line">        Log.d(<span class="string">"ZZZZ"</span>, <span class="string">"MyGridView onInterceptTouchEvent ACITON_CANCEL:"</span>);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_UP:  </div><div class="line">        Log.d(<span class="string">"ZZZZ"</span>, <span class="string">"MyGridView onInterceptTouchEvent ACITON_UP:"</span>);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">    Log.d(<span class="string">"ZZZZ"</span>, <span class="string">"MyGridView onInterceptTouchEvent return "</span>+result);  </div><div class="line">    <span class="keyword">return</span> result;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;  </div><div class="line">    <span class="keyword">boolean</span> result = <span class="keyword">super</span>.onTouchEvent(ev);  </div><div class="line">    <span class="keyword">switch</span>(ev.getAction()) &#123;  </div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_DOWN:  </div><div class="line">        Log.d(<span class="string">"ZZZZ"</span>, <span class="string">"MyGridView onTouchEvent ACTION_DOWN"</span>);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_MOVE:  </div><div class="line">        Log.d(<span class="string">"ZZZZ"</span>, <span class="string">"MyGridView onTouchEvent ACTION_MOVE"</span>);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:  </div><div class="line">        Log.d(<span class="string">"ZZZZ"</span>, <span class="string">"MyGridView onTouchEvent ACTION_CANCEL"</span>);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> MotionEvent.ACTION_UP:  </div><div class="line">        Log.d(<span class="string">"ZZZZ"</span>, <span class="string">"MyGridView onTouchEvent ACTION_UP"</span>);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    Log.d(<span class="string">"ZZZZ"</span>, <span class="string">"MyGridView onTouchEvent return "</span>+result);  </div><div class="line">    <span class="keyword">return</span> result;</div></pre></td></tr></table></figure>
<p><img src="/article_images/listview_ontouch_04.png" alt="alt"></p>
<p>再次修改代码，取消ChildLayout里onInterceptTouchEvent对事件的拦截返回false，让MyGridView的onTouchEvent方法return super.onTouchEvent(ev)默认返回true。</p>
<p>在同样尝试拖动效果的时候，按照上面的说法，理论上在ParentLayout，ChildLayout，MyGridView都不拦截事件return false的状态下，事件会通过依次通过ParentLayout，ChildLayout，MyGridView的onInterceptTouchEvent，然后到达MyGridView的onTouchEvent，但是我们发现事实并不是如此，移动一段距离后，就没有任何onInterceptTouchEvent执行了。运行效果如下：</p>
<p><img src="/article_images/listview_ontouch_05.png" alt="alt"></p>
<p>说好的依次传递并没有发生，无奈只能去源码中寻找原因，GridView继承于AbsListView，与之前ChildLayout，ParentLayout继承与ViewGroup不同，在AbsListView中的onTouchEvent的ACTION_MOVE的这个case中看到有个startScrollIfNeeded方法，点进去才发现有方法说明<code>Check if we have moved far enough that it looks more like a scroll than a tap</code>， 在我们tap屏幕的时候有一段距离touchSlop，小于这个距离的ACTION_MOVE是会被判定成为tap效果的，所以在这段源码里面能看到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (overscroll || distance &gt; mTouchSlop) &#123;  </div><div class="line">            createScrollingCache();  </div><div class="line">            <span class="keyword">if</span> (overscroll) &#123;  </div><div class="line">                mTouchMode = TOUCH_MODE_OVERSCROLL;  </div><div class="line">                mMotionCorrection = <span class="number">0</span>;  </div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                mTouchMode = TOUCH_MODE_SCROLL;  </div><div class="line">                mMotionCorrection = deltaY &gt; <span class="number">0</span> ? mTouchSlop : -mTouchSlop;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">final</span> Handler handler = getHandler();  </div><div class="line">            <span class="comment">// Handler should not be null unless the AbsListView is not attached to a  </span></div><div class="line">            <span class="comment">// window, which would make it very hard to scroll it... but the monkeys  </span></div><div class="line">            <span class="comment">// say it's possible.  </span></div><div class="line">            <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;  </div><div class="line">                handler.removeCallbacks(mPendingCheckForLongPress);  </div><div class="line">            &#125;  </div><div class="line">            setPressed(<span class="keyword">false</span>);  </div><div class="line">            View motionView = getChildAt(mMotionPosition - mFirstPosition);  </div><div class="line">            <span class="keyword">if</span> (motionView != <span class="keyword">null</span>) &#123;  </div><div class="line">                motionView.setPressed(<span class="keyword">false</span>);  </div><div class="line">            &#125;  </div><div class="line">            reportScrollStateChange(OnScrollListener.SCROLL_STATE_TOUCH_SCROLL);  </div><div class="line">            <span class="comment">// Time to start stealing events! Once we've stolen them, don't let anyone  </span></div><div class="line">            <span class="comment">// steal from us  </span></div><div class="line">            <span class="keyword">final</span> ViewParent parent = getParent();  </div><div class="line">            <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;  </div><div class="line">                parent.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);  </div><div class="line">            &#125;  </div><div class="line">            scrollIfNeeded(y);  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>里面有代码，对parent判空了执行requestDisallowInterceptTouchEvent(true);看到注释则说明的很清楚了，如果满足了条件，被判定成为looks more like a scroll than a tap，则s<code>tart stealing events, once we&#39;ve stolen them, don&#39;t let anyone steal from us</code>，好傲娇的样子，直接屏蔽了各种有可能阻截这些事件的情况，然后能够阻截这个MotionEvent的就只有onInterceptTouchEvent了，这也就是为什么在有GridView的情况下，”ACTION_DOWN -&gt; ACTION_MOVE -&gt; ACTION_UP”操作一小距离之后却看不到任何onInterceptTouchEvent被执行的原因了。</p>
<hr>
<p>参考链接：<a href="http://waynehu16.iteye.com/blog/1926741" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android与Javascript交互概要]]></title>
      <url>http://dalufan.com/2015/06/29/android-javascript-exchange/</url>
      <content type="html"><![CDATA[<p><strong>写在前面</strong></p>
<p>Android与Javascript交互主要是使用的WebView。关于WebView，一般涉及到2个类：WebChromeClient 和 WebViewClient 。开发的大致流程为（摘自Android developer）：</p>
<blockquote>
<p>A WebView has several customization points where you can add your own behavior. These are:<br>Creating and setting a WebChromeClient subclass. This class is called when something that might impact a browser UI happens, for instance, progress updates and JavaScript alerts are sent here (see Debugging Tasks).<br>Creating and setting a WebViewClient subclass. It will be called when things happen that impact the rendering of the content, eg, errors or form submissions. You can also intercept URL loading here (via shouldOverrideUrlLoading()).<br>Modifying the WebSettings, such as enabling JavaScript with setJavaScriptEnabled().<br>Injecting Java objects into the WebView using the addJavascriptInterface(Object, String) method. This method allows you to inject Java objects into a page’s JavaScript context, so that they can be accessed by JavaScript in the page.</p>
</blockquote>
<a id="more"></a> 
<p>简要代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">	mWebView = (WebView) findViewById(R.id.webview);</div><div class="line">	mWebView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">	mWebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);</div><div class="line">	mWebView.addJavascriptInterface(<span class="keyword">new</span> Object() &#123;</div><div class="line">		<span class="meta">@JavascriptInterface</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestUrl</span><span class="params">(String data, String requestMethod)</span> </span>&#123;</div><div class="line">			checkUrl(data, requestMethod);</div><div class="line">		&#125;</div><div class="line">	&#125;, <span class="string">"android"</span>);</div><div class="line"></div><div class="line">	mWebView.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				mWebView.loadUrl(requestUrl);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	<span class="comment">//下面这段是用于解决html中alert不弹出来的问题</span></div><div class="line">	mWebView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message,</span></span></div><div class="line">				JsResult result) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">super</span>.onJsAlert(view, url, message, result);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;);</div><div class="line"></div><div class="line">-------------------------------------------</div><div class="line"></div><div class="line"><span class="meta">@JavascriptInterface</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startHtml</span><span class="params">(<span class="keyword">final</span> String json, <span class="keyword">final</span> String requestMethod)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!TextUtils.isEmpty(requestMethod)) &#123;</div><div class="line">		mWebView.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				mWebView.loadUrl(<span class="string">"javascript:responseUrl_"</span> + requestMethod</div><div class="line">						+ <span class="string">"('"</span> + json + <span class="string">"')"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">function responseUrl_catchPhoto(data) &#123;</div><div class="line">	alert('--'+data);</div><div class="line">&#125;</div><div class="line">function catchPhoto()&#123;</div><div class="line">	//http://baidu.com 为图片上传url</div><div class="line">	window.android.requestUrl("http://baidu.com","catchPhoto");</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function responseUrl_scanQR(data) &#123;</div><div class="line">	alert(data);</div><div class="line">&#125;</div><div class="line">function scanQR()&#123;</div><div class="line">	window.android.requestUrl("","scanQR");</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>完整代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"GBK"</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>js交互android<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">  </span></div><div class="line">      </div><div class="line">    function show()&#123;  </div><div class="line">    var a = document.getElementById("text").value;  </div><div class="line">    alert("警告，你输入的是："+a);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    function rfInfo(jsonStr) &#123;   </div><div class="line">            document.getElementById("info").innerHTML="从Android客户端传来的作者信息:"+jsonStr.Developer;   </div><div class="line">        &#125;   </div><div class="line">  </div><div class="line">    function cfm() &#123;   </div><div class="line">    if(confirm("确认界面提示?"))&#123;  </div><div class="line">    return true;  </div><div class="line">    &#125;else  </div><div class="line">     return false;  </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    function pmt() &#123;   </div><div class="line">    var place = prompt("请输入位置?","");  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"info"</span> &gt;</span>从Android客户端传来的作者信息:<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"input your msg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inputinfo"</span> &gt;</span>输入的信息:<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn_alert"</span> <span class="attr">onclick</span>=<span class="string">"show()"</span> <span class="attr">value</span>=<span class="string">"Alert"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn_cfm"</span> <span class="attr">onclick</span>=<span class="string">"cfm()"</span> <span class="attr">value</span>=<span class="string">"Confirm"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn_pmt"</span> <span class="attr">onclick</span>=<span class="string">"pmt()"</span> <span class="attr">value</span>=<span class="string">"Prompt"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn_pmt"</span> <span class="attr">onclick</span>=<span class="string">"window.demo.adrdMethod()"</span> <span class="attr">value</span>=<span class="string">"调用android方法"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.annotation.SuppressLint;  </div><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.os.Handler;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line"><span class="keyword">import</span> android.view.View;  </div><div class="line"><span class="keyword">import</span> android.webkit.JsPromptResult;  </div><div class="line"><span class="keyword">import</span> android.webkit.JsResult;  </div><div class="line"><span class="keyword">import</span> android.webkit.WebChromeClient;  </div><div class="line"><span class="keyword">import</span> android.webkit.WebSettings;  </div><div class="line"><span class="keyword">import</span> android.webkit.WebView;  </div><div class="line"><span class="keyword">import</span> android.webkit.WebViewClient;  </div><div class="line"><span class="keyword">import</span> android.widget.Button;  </div><div class="line"><span class="keyword">import</span> android.widget.Toast;  </div><div class="line">  </div><div class="line"><span class="meta">@SuppressLint</span>(<span class="string">"SetJavaScriptEnabled"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;  </div><div class="line">    WebView webView;  </div><div class="line">    Handler handler = <span class="keyword">new</span> Handler();  </div><div class="line">    Button btn;  </div><div class="line">    <span class="keyword">final</span> String  jsonStr = <span class="string">"&#123;\"Developer\":\"Harlan\",\"Place\":\"Nanjing\"&#125;"</span>;  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">                <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">                setContentView(R.layout.activity_main);  </div><div class="line">  </div><div class="line">                webView = (WebView) findViewById(R.id.myweb);  </div><div class="line">                btn = (Button) findViewById(R.id.mybtn);  </div><div class="line">                <span class="comment">/* </span></div><div class="line">                 * webSettings 保存着WebView中的状态信息。 </div><div class="line">                 * 当WebView第一次被创建时，webSetting中存储的都为默认值。 </div><div class="line">                 * WebSetting和WebView一一绑定的。 </div><div class="line">                 * 如果webView被销毁了，那么我们再次调用webSetting中的方法时，会抛出异常。 </div><div class="line">                 */  </div><div class="line">                WebSettings webSettings = webView.getSettings();  </div><div class="line">                <span class="comment">//允许在webview中执行JavaScript代码  </span></div><div class="line">                webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);  </div><div class="line">                <span class="comment">//设置webview是否支持缩放  </span></div><div class="line">                webSettings.setSupportZoom(<span class="keyword">false</span>);  </div><div class="line">                <span class="comment">//加载本地html代码，此代码位于assets目录下，通过file:///android_asset/jsdroid.html访问。  </span></div><div class="line">                webView.loadUrl(<span class="string">"file:///android_asset/jsdroid.html"</span>);  </div><div class="line">  </div><div class="line">                <span class="comment">/*** </span></div><div class="line">                 *webChromeClient主要是将javascript中相应的方法翻译成android本地方法 </div><div class="line">                 * </div><div class="line">                 * 例如：我们重写了onJsAlert方法，那么当页面中需要弹出alert窗口时，便 </div><div class="line">                 * 会执行我们的代码，按照我们的Toast的形式提示用户。 </div><div class="line">                 */  </div><div class="line">                <span class="class"><span class="keyword">class</span> <span class="title">HarlanWebChromeClient</span> <span class="keyword">extends</span> <span class="title">WebChromeClient</span> </span>&#123;  </div><div class="line">  </div><div class="line">                    <span class="comment">/*此处覆盖的是javascript中的alert方法。 </span></div><div class="line">                     *当网页需要弹出alert窗口时，会执行onJsAlert中的方法 </div><div class="line">                     * 网页自身的alert方法不会被调用。 </div><div class="line">                     */  </div><div class="line">                    <span class="meta">@Override</span>  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message,  </span></span></div><div class="line">                            JsResult result) &#123;  </div><div class="line">                        Toast.makeText(getApplicationContext(), message,  </div><div class="line">                                Toast.LENGTH_LONG).show();  </div><div class="line">                        Log.d(TAG, <span class="string">"弹出了提示框"</span>);  </div><div class="line">                        <span class="comment">/*此处代码非常重要，若没有，android就不能与js继续进行交互了， </span></div><div class="line">                         * 且第一次交互后，webview不再展示出来。 </div><div class="line">                         * result：A JsResult to confirm that the user hit enter. </div><div class="line">                         * 我的理解是，confirm代表着此次交互执行完毕。只有执行完毕了，才可以进行下一次交互。 </div><div class="line">                         */  </div><div class="line">                        result.confirm();  </div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">                    &#125;  </div><div class="line">                      </div><div class="line">                    <span class="comment">/*此处覆盖的是javascript中的confirm方法。 </span></div><div class="line">                     *当网页需要弹出confirm窗口时，会执行onJsConfirm中的方法 </div><div class="line">                     * 网页自身的confirm方法不会被调用。 </div><div class="line">                     */  </div><div class="line">                    <span class="meta">@Override</span>  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsConfirm</span><span class="params">(WebView view, String url,  </span></span></div><div class="line">                            String message, JsResult result) &#123;  </div><div class="line">                        Log.d(TAG, <span class="string">"弹出了确认框"</span>);  </div><div class="line">                        result.confirm();  </div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">                    &#125;  </div><div class="line">                      </div><div class="line">                    <span class="comment">/*此处覆盖的是javascript中的confirm方法。 </span></div><div class="line">                     *当网页需要弹出confirm窗口时，会执行onJsConfirm中的方法 </div><div class="line">                     * 网页自身的confirm方法不会被调用。 </div><div class="line">                     */  </div><div class="line">                    <span class="meta">@Override</span>  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsPrompt</span><span class="params">(WebView view, String url,  </span></span></div><div class="line">                            String message, String defaultValue,  </div><div class="line">                            JsPromptResult result) &#123;  </div><div class="line">                        Log.d(TAG, <span class="string">"弹出了输入框"</span>);  </div><div class="line">                        result.confirm();  </div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">                    &#125;  </div><div class="line">                      </div><div class="line">                    <span class="comment">/* </span></div><div class="line">                     * 如果页面被强制关闭,弹窗提示：是否确定离开？ </div><div class="line">                     * 点击确定 保存数据离开，点击取消，停留在当前页面 </div><div class="line">                     */  </div><div class="line">                    <span class="meta">@Override</span>  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsBeforeUnload</span><span class="params">(WebView view, String url,  </span></span></div><div class="line">                            String message, JsResult result) &#123;  </div><div class="line">                        Log.d(TAG, <span class="string">"弹出了离开确认框"</span>);  </div><div class="line">                        result.confirm();  </div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">                    &#125;  </div><div class="line">                &#125;  </div><div class="line">                  </div><div class="line">                <span class="class"><span class="keyword">class</span> <span class="title">HarlanWebViewClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span></span>&#123;  </div><div class="line">                    <span class="comment">/*点击页面的某条链接进行跳转的话，会启动系统的默认浏览器进行加载，调出了我们本身的应用 </span></div><div class="line">                     * 因此，要在shouldOverrideUrlLoading方法中 </div><div class="line">                     */  </div><div class="line">                    <span class="meta">@Override</span>  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view,  </span></span></div><div class="line">                            String url) &#123;  </div><div class="line">                         <span class="comment">//使用当前的WebView加载页面  </span></div><div class="line">                        view.loadUrl(url);  </div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span> ;  </div><div class="line">                    &#125;  </div><div class="line">                      </div><div class="line">                    <span class="comment">/* </span></div><div class="line">                     * 网页加载完毕(仅指主页，不包括图片) </div><div class="line">                     */  </div><div class="line">                    <span class="meta">@Override</span>  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url,  </span></span></div><div class="line">                            Bitmap favicon) &#123;  </div><div class="line">                        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">                        <span class="keyword">super</span>.onPageStarted(view, url, favicon);  </div><div class="line">                    &#125;  </div><div class="line">                      </div><div class="line">                    <span class="comment">/* </span></div><div class="line">                     * 网页加载完毕(仅指主页，不包括图片) </div><div class="line">                     */  </div><div class="line">                    <span class="meta">@Override</span>  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;  </div><div class="line">                        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">                        <span class="keyword">super</span>.onPageFinished(view, url);  </div><div class="line">                    &#125;  </div><div class="line">                      </div><div class="line">                    <span class="comment">/* </span></div><div class="line">                     * 加载页面资源 </div><div class="line">                     */  </div><div class="line">                    <span class="meta">@Override</span>  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadResource</span><span class="params">(WebView view, String url)</span> </span>&#123;  </div><div class="line">                        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">                        <span class="keyword">super</span>.onLoadResource(view, url);  </div><div class="line">                    &#125;  </div><div class="line">                      </div><div class="line">                    <span class="comment">/* </span></div><div class="line">                     * 错误提示 </div><div class="line">                     */  </div><div class="line">                    <span class="meta">@Override</span>  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, <span class="keyword">int</span> errorCode,  </span></span></div><div class="line">                            String description, String failingUrl) &#123;  </div><div class="line">                        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">                        <span class="keyword">super</span>.onReceivedError(view, errorCode, description, failingUrl);  </div><div class="line">                    &#125;  </div><div class="line">                &#125;;  </div><div class="line">                  </div><div class="line">                webView.setWebChromeClient(<span class="keyword">new</span> HarlanWebChromeClient());  </div><div class="line">                webView.setWebViewClient(<span class="keyword">new</span> HarlanWebViewClient());  </div><div class="line">                <span class="comment">/* </span></div><div class="line">                 * 为js提供一个方法，注意该方法一般不写在UI线程中 </div><div class="line">                 * addJavascriptInterface(Object obj, String interfaceName) </div><div class="line">                 * obj代表一个java对象，这里我们一般会实现一个自己的类，类里面提供我们要提供给javascript访问的方法 </div><div class="line">                 * interfaceName则是访问我们在obj中声明的方法时候所用到的js对象，调用方法为window.interfaceName.方法名() </div><div class="line">                 */  </div><div class="line">                webView.addJavascriptInterface(<span class="keyword">new</span> Object() &#123;  </div><div class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adrdMethod</span><span class="params">()</span> </span>&#123;  </div><div class="line">                        handler.post(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">                            <span class="meta">@Override</span>  </div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                                Log.d(TAG, <span class="string">"js调用了Android方法"</span>);  </div><div class="line">                            &#125;  </div><div class="line">                        &#125;);  </div><div class="line">                    &#125;  </div><div class="line">                &#125;, <span class="string">"demo"</span>);  </div><div class="line">                  </div><div class="line">                btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  </div><div class="line">                    <span class="meta">@Override</span>  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">                        Log.d(TAG, <span class="string">"Android调用了js方法"</span>);  </div><div class="line">                        <span class="comment">/* </span></div><div class="line">                         * 通过webView.loadUrl("javascript:xxx")方式就可以调用当前网页中的名称 </div><div class="line">                         * 为xxx的javascript方法 </div><div class="line">                         */  </div><div class="line">                        webView.loadUrl(<span class="string">"javascript:rfInfo("</span>+jsonStr+<span class="string">")"</span>);  </div><div class="line">                    &#125;  </div><div class="line">                &#125;);  </div><div class="line">  </div><div class="line">        &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/singleton1900/article/details/8776336" target="_blank" rel="external">CSDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android应用性能优化中使用SparseArray替代HashMap]]></title>
      <url>http://dalufan.com/2015/05/21/android-performance-optimization-SparseArray/</url>
      <content type="html"><![CDATA[<h3 id="0x00-前记"><a href="#0x00-前记" class="headerlink" title="0x00 前记"></a>0x00 前记</h3><p>HashMap是java里比较常用的一个集合类，我比较习惯用来缓存一些处理后的结果。最近在做一个android项目，在代码中定义这样一个变量，实例化时，Eclipse却给出了一个 performance 警告。</p>
<p><img src="/article_images/sparsearray.png" alt="alt"></p>
<p>意思就是说用SparseArray<e>来替代，以获取更好性能。老实说，对SparseArray并不熟悉，第一感觉应该是android提供的一个类。按住Ctrl点击进入SparseArray的源码，果不其然，确定是android提供的一个工具类。</e></p>
<a id="more"></a> 
<h3 id="0x01-解读"><a href="#0x01-解读" class="headerlink" title="0x01 解读"></a>0x01 解读</h3><p>单纯从字面上来理解，SparseArray指的是稀疏数组(Sparse array)，所谓稀疏数组就是数组中大部分的内容值都未被使用（或都为零），在数组中仅有少部分的空间使用。因此造成内存空间的浪费，为了节省内存空间，并且不影响数组中原有的内容值，我们可以采用一种压缩的方式来表示稀疏数组的内容。</p>
<p>假设有一个9*7的数组，其内容如下：</p>
<p><img src="/article_images/sparsearray_pic1.jpg" alt="alt"></p>
<p>在此数组中，共有63个空间，但却只使用了5个元素，造成58个元素空间的浪费。以下我们就使用稀疏数组重新来定义这个数组：</p>
<p><img src="/article_images/sparsearray_pic2.jpg" alt="alt"></p>
<p>其中在稀疏数组中第一部分所记录的是原数组的列数和行数以及元素使用的个数、第二部分所记录的是原数组中元素的位置和内容。经过压缩之后，原来需要声明大小为63的数组，而使用压缩后，只需要声明大小为6*3的数组，仅需18个存储空间。</p>
<h3 id="0x02-使用"><a href="#0x02-使用" class="headerlink" title="0x02 使用"></a>0x02 使用</h3><p>继续阅读SparseArray的源码，从构造方法我们可以看出，它和一般的List一样，可以预先设置容器大小，默认的大小是10：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SparseArray</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SparseArray</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);</div><div class="line"></div><div class="line">        mKeys = <span class="keyword">new</span> <span class="keyword">int</span>[initialCapacity];</div><div class="line">        mValues = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">        mSize = <span class="number">0</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>它有两个方法可以添加键值对：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, E value)</span> </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">int</span> key, E value)</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>有四个方法可以执行删除操作:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;&#125; <span class="comment">//直接调用的delete(int key)</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>修改数据起初以为只有setValueAt(int index, E value)可以修改数据，但后来发现put(int key, E value)也可以修改数据，我们查看put(int key, E value)的源码可知，在put数据之前，会先查找要put的数据是否已经存在，如果存在就是修改，不存在就添加。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, E value)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> i = binarySearch(mKeys, <span class="number">0</span>, mSize, key);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</div><div class="line">           mValues[i] = value;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           i = ~i;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (i &lt; mSize &amp;&amp; mValues[i] == DELETED) &#123;</div><div class="line">               mKeys[i] = key;</div><div class="line">               mValues[i] = value;</div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (mGarbage &amp;&amp; mSize &gt;= mKeys.length) &#123;</div><div class="line">               gc();</div><div class="line"></div><div class="line">               <span class="comment">// Search again because indices may have changed.</span></div><div class="line">               i = ~binarySearch(mKeys, <span class="number">0</span>, mSize, key);</div><div class="line">           &#125;</div><div class="line">           …………</div></pre></td></tr></table></figure>
<ul>
<li>所以，修改数据实际也有两种方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, E value)</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValueAt</span><span class="params">(<span class="keyword">int</span> index, E value)</span></div></pre></td></tr></table></figure>
<ul>
<li>最后再来看看如何查找数据。有两个方法可以查询取值：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span></span></div><div class="line"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> key, E valueIfKeyNotFound)</span></div><div class="line"><span class="comment">//其中get(int key)也只是调用了 get(int key,E valueIfKeyNotFound),最后一个从传参的变量名就能看出，传入的是找不到的时候返回的值.get(int key)当找不到的时候，默认返回null。</span></div></pre></td></tr></table></figure>
<ul>
<li>查看第几个位置的键：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">keyAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></div><div class="line"><span class="comment">//有一点需要注意的是，查看键所在位置，由于是采用二分法查找键的位置，所以找不到时返回小于0的数值，而不是返回-1。返回的负值是表示它在找不到时所在的位置。</span></div></pre></td></tr></table></figure>
<ul>
<li>查看第几个位置的值：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">valueAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>查看值所在位置，没有的话返回-1：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOfValue</span><span class="params">(E value)</span></span></div></pre></td></tr></table></figure>
<p>最后，发现其核心就是折半查找函数（binarySearch），算法设计的很不错</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> start, <span class="keyword">int</span> len, <span class="keyword">int</span> key)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> high = start + len, low = start - <span class="number">1</span>, guess;</div><div class="line"></div><div class="line">       <span class="keyword">while</span> (high - low &gt; <span class="number">1</span>) &#123;</div><div class="line">           guess = (high + low) / <span class="number">2</span>;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (a[guess] &lt; key)</div><div class="line">               low = guess;</div><div class="line">           <span class="keyword">else</span></div><div class="line">               high = guess;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (high == start + len)</div><div class="line">           <span class="keyword">return</span> ~(start + len);</div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (a[high] == key)</div><div class="line">           <span class="keyword">return</span> high;</div><div class="line">       <span class="keyword">else</span></div><div class="line">           <span class="keyword">return</span> ~high;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>相应的也有SparseBooleanArray，用来取代HashMap<integer, boolean="">，SparseIntArray用来取代HashMap<integer, integer="">，大家有兴趣的可以研究。</integer,></integer,></p>
<h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><p>SparseArray是android里为<interger,object>这样的Hashmap而专门写的类,目的是提高效率，其核心是折半查找函数（binarySearch）。</interger,object></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在android中，当我们需要定义</span></div><div class="line">HashMap&lt;Integer, E&gt; hashMap = <span class="keyword">new</span> HashMap&lt;Integer, E&gt;();</div><div class="line"><span class="comment">//我们可以这样替换使用</span></div><div class="line">SparseArray&lt;E&gt; sparseArray = <span class="keyword">new</span> SparseArray&lt;E&gt;();</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://liuzhichao.com/p/832.html" target="_blank" rel="external">1</a>,<a href="http://blog.csdn.net/gogler/article/details/15810113" target="_blank" rel="external">2</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java正则表达式的一般使用]]></title>
      <url>http://dalufan.com/2015/05/12/java-regex-useage/</url>
      <content type="html"><![CDATA[<h3 id="0x00-前记"><a href="#0x00-前记" class="headerlink" title="0x00 前记"></a>0x00 前记</h3><p>经常用到正则表达式，每每用的时候都要去看那个<a href="http://www.jb51.net/tools/zhengze.html" target="_blank" rel="external">30分钟入门教程</a>，里面内容太多了，觉得需要自己整理下了。</p>
<a id="more"></a> 
<h3 id="0x01-符号"><a href="#0x01-符号" class="headerlink" title="0x01 符号"></a>0x01 符号</h3><h4 id="字符及字符集"><a href="#字符及字符集" class="headerlink" title="字符及字符集"></a>字符及字符集</h4><p><img src="/article_images/regex_01.png" alt="alt"></p>
<h4 id="运算符及边界匹配符"><a href="#运算符及边界匹配符" class="headerlink" title="运算符及边界匹配符"></a>运算符及边界匹配符</h4><p><img src="/article_images/regex_02.png" alt="alt"></p>
<h4 id="数量表示符"><a href="#数量表示符" class="headerlink" title="数量表示符"></a>数量表示符</h4><p><img src="/article_images/regex_03.png" alt="alt"></p>
<ul>
<li><code>Greedy(贪婪的，最大匹配)</code>： 除非另有表示，否则数量表示符都是greedy的。Greedy的表达式会一直匹配下去，直到匹配不下去为止。(如果你发现表达式匹配的结果与预期的不符) ，很有可能是因为，你以为表达式会只匹配前面几个字符，而实际上它是greedy的，因此会一直匹配下去。</li>
<li><code>Reluctant(懒惰的，最小匹配)</code>： 用问号表示，它会匹配最少的字符。也称为lazy, minimal matching, non-greedy, 或ungreedy。</li>
<li><code>Possessive(占有的)</code>： 目前只有Java支持(其它语言都不支持)。它更加先进，所以你可能还不太会用。用正则表达式匹配字符串的时候会产生很多中间状态，(一般的匹配引擎会保存这种中间状态，) 这样匹配失败的时候就能原路返回了。占有型的表达式不保存这种中间状态，因此也就不会回头重来了。它能防止正则表达式的失控，同时也能提高运行的效率。</li>
</ul>
<p>说明：</p>
<pre><code>abc+ 表示的是&apos;ab&apos;后边跟着一个或多个&apos;c&apos;
(abc)+表示的是匹配一个或多个完整的&apos;abc&apos;
所以，要想让表达式照你的意思去运行，你应该用括号把&apos;X&apos;括起来
</code></pre><h3 id="0x02-常用正则"><a href="#0x02-常用正则" class="headerlink" title="0x02 常用正则"></a>0x02 常用正则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//整数或者小数：^[0-9]+\.&#123;0,1&#125;[0-9]&#123;0,2&#125;$</span></div><div class="line"><span class="comment">//只能输入数字："^[0-9]*$"。</span></div><div class="line"><span class="comment">//只能输入n位的数字："^\d&#123;n&#125;$"。</span></div><div class="line"><span class="comment">//只能输入至少n位的数字："^\d&#123;n,&#125;$"。</span></div><div class="line"><span class="comment">//只能输入m~n位的数字：。"^\d&#123;m,n&#125;$"</span></div><div class="line"><span class="comment">//只能输入零和非零开头的数字："^(0|[1-9][0-9]*)$"。</span></div><div class="line"><span class="comment">//只能输入有两位小数的正实数："^[0-9]+(.[0-9]&#123;2&#125;)?$"。</span></div><div class="line"><span class="comment">//只能输入有1~3位小数的正实数："^[0-9]+(.[0-9]&#123;1,3&#125;)?$"。</span></div><div class="line"><span class="comment">//只能输入非零的正整数："^\+?[1-9][0-9]*$"。</span></div><div class="line"><span class="comment">//只能输入非零的负整数："^\-[1-9][]0-9"*$。</span></div><div class="line"><span class="comment">//只能输入长度为3的字符："^.&#123;3&#125;$"。</span></div><div class="line"><span class="comment">//只能输入由26个英文字母组成的字符串："^[A-Za-z]+$"。</span></div><div class="line"><span class="comment">//只能输入由26个大写英文字母组成的字符串："^[A-Z]+$"。</span></div><div class="line"><span class="comment">//只能输入由26个小写英文字母组成的字符串："^[a-z]+$"。</span></div><div class="line"><span class="comment">//只能输入由数字和26个英文字母组成的字符串："^[A-Za-z0-9]+$"。</span></div><div class="line"><span class="comment">//只能输入由数字、26个英文字母或者下划线组成的字符串："^\w+$"。</span></div><div class="line"><span class="comment">//验证用户密码："^[a-zA-Z]\w&#123;5,17&#125;$"正确格式为：以字母开头，长度在6~18之间，只能包含字符、数字和下划线。</span></div><div class="line"><span class="comment">//验证是否含有^%&amp;',;=?$\"等字符："[^%&amp;',;=?$\x22]+"。</span></div><div class="line"><span class="comment">//只能输入汉字："^[\u4e00-\u9fa5]&#123;0,&#125;$"</span></div><div class="line"><span class="comment">//验证Email地址："^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$"。</span></div><div class="line"><span class="comment">//验证InternetURL："^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$"。</span></div><div class="line"><span class="comment">//验证电话号码："^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$"正确格式为："XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX"。</span></div><div class="line"><span class="comment">//验证身份证号（15位或18位数字）："^\d&#123;15&#125;|\d&#123;18&#125;$"。</span></div><div class="line"><span class="comment">//验证一年的12个月："^(0?[1-9]|1[0-2])$"正确格式为："01"～"09"和"1"～"12"。</span></div><div class="line"><span class="comment">//验证一个月的31天："^((0?[1-9])|((1|2)[0-9])|30|31)$"正确格式为；"01"～"09"和"1"～"31"。</span></div><div class="line"><span class="comment">//匹配中文字符的正则表达式： [\u4e00-\u9fa5]</span></div><div class="line"><span class="comment">//匹配双字节字符(包括汉字在内)：[^\x00-\xff]</span></div><div class="line"><span class="comment">//匹配空行的正则表达式：\n[\s| ]*\r</span></div><div class="line"><span class="comment">//匹配html标签的正则表达式：&lt;(.*)&gt;(.*)&lt;\/(.*)&gt;|&lt;(.*)\/&gt;</span></div><div class="line"><span class="comment">//匹配首尾空格的正则表达式：(^\s*)|(\s*$)</span></div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://www.cnblogs.com/kkcheng/archive/2010/02/03/1662821.html" target="_blank" rel="external">1</a>,<a href="http://www.jb51.net/tools/zhengze.html" target="_blank" rel="external">2</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MotionEvent中getX()、getRawX()等位置说明]]></title>
      <url>http://dalufan.com/2015/05/05/android-motionevent/</url>
      <content type="html"><![CDATA[<h3 id="位置图解"><a href="#位置图解" class="headerlink" title="位置图解"></a>位置图解</h3><p><img src="/article_images/android_motionevent.png" alt="alt"></p>
<a id="more"></a> 
<h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Res</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnTouchListener</span> </span>&#123;    </div><div class="line">    </div><div class="line">    Button btn = <span class="keyword">null</span>;    </div><div class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;    </div><div class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;    </div><div class="line">    <span class="keyword">int</span> rawx = <span class="number">0</span>;    </div><div class="line">    <span class="keyword">int</span> rawy = <span class="number">0</span>;    </div><div class="line">    </div><div class="line">        </div><div class="line">    <span class="meta">@Override</span>    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;    </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);    </div><div class="line">        setContentView(R.layout.main);    </div><div class="line">        btn = (Button) findViewById(R.id.button);    </div><div class="line">        btn.setOnTouchListener(<span class="keyword">this</span>);    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent event)</span> </span>&#123;    </div><div class="line">        <span class="keyword">int</span> eventaction = event.getAction();    </div><div class="line">        <span class="keyword">switch</span> (eventaction) &#123;    </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:    </div><div class="line">            <span class="keyword">break</span>;    </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:    </div><div class="line">            x = (<span class="keyword">int</span>) event.getX();    </div><div class="line">            y = (<span class="keyword">int</span>) event.getY();    </div><div class="line">            rawx = (<span class="keyword">int</span>) event.getRawX();    </div><div class="line">            rawy = (<span class="keyword">int</span>) event.getRawY();    </div><div class="line">            Log.d(<span class="string">"DEBUG"</span>, <span class="string">"getX="</span> + x + <span class="string">"getY="</span> + y + <span class="string">"n"</span> + <span class="string">"getRawX="</span> + rawx    </div><div class="line">                    + <span class="string">"getRawY="</span> + rawy + <span class="string">"n"</span>);    </div><div class="line">            <span class="keyword">break</span>;    </div><div class="line">    </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:    </div><div class="line">    </div><div class="line">            <span class="keyword">break</span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>当你触到按钮时，x,y是相对于该按钮左上点（<code>控件本身</code>）的相对位置，<code>且控件的左边和上边的值为负数，下方和右方为正数</code>。而rawx,rawy始终是相对于屏幕的位置。</p>
<ol>
<li><code>getRawX</code>：触摸点相对于屏幕的坐标</li>
<li><code>getX</code>： 触摸点相对于按钮的坐标</li>
<li><code>getTop</code>： 按钮左上角相对于父view（LinerLayout）的y坐标</li>
<li><code>getLeft</code>： 按钮左上角相对于父view（LinerLayout）的x坐标</li>
</ol>
<p>所以getRight()等同于：getLeft()+getWidth()。</p>
<p>getX()是表示Widget相对于自身左上角的x坐标,而getRawX()是表示相对于屏幕左上角的x坐标值(注意:这个屏幕左上角是手机屏幕左上角,不管activity是否有titleBar或是否全屏幕),getY(),getRawY()一样的道理</p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/ztp800201/article/details/17218067" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中Service断点下载-单线程]]></title>
      <url>http://dalufan.com/2015/04/26/android-service-download-singlethread/</url>
      <content type="html"><![CDATA[<p>下载并刷新UI的过程<br><img src="/article_images/service_down_01.png" alt="alt"></p>
<h4 id="下载的关键点"><a href="#下载的关键点" class="headerlink" title="下载的关键点"></a>下载的关键点</h4><ul>
<li>获取网络文件的长度</li>
<li>在本地创建一个文件，设置其长度</li>
<li>从数据库中获取上次下载的进度</li>
<li>从上次下载的位置开始下载数据，同时保存进度到数据库</li>
<li>将下载进度回传给Activity</li>
<li>下载完成后删除信息</li>
</ul>
<a id="more"></a> 
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>||-Activity</p>
<p>||-Service</p>
<pre><code>-DownloadService(启动新线程获取文件信息FileInfo)
-DownloadTask(下载任务类，关联数据库，获取下载信息，开始下载任务)
</code></pre><p>||-Bean</p>
<pre><code>-FileInfo（文件信息）
-ThreadInfo(线程下载信息：下载进度)
</code></pre><p>||-db</p>
<pre><code>-DBHelper(创建数据库)
-ThreadDAO(线程的数据访问接口)
-ThreadDAOImpl(实现接口)
</code></pre><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><p><strong>1</strong> Adapter的ViewHolder应该定义成static的，这样它就只会实例化一次，即</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> ImageView imageview ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2</strong> RandomAccessFile 随机访问文件，特殊的输出流，可以在文件的任意位置进行写入操作。构造方法需传入文件对象以及文件操作模式r—-Read—阅读权限，w—-Write—写入权限，d—-Delete—写入权限，如需使用三个权限使用则输入”rwd”</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">File file = <span class="keyword">new</span> File(dir,fileName) ;</div><div class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(file,<span class="string">"rwd"</span>) ;</div><div class="line"><span class="comment">//设置文件长度</span></div><div class="line">raf.setLength(length) ;</div><div class="line">···</div><div class="line">raf.close( ) ;</div></pre></td></tr></table></figure>
<p><strong>3</strong> 设置下载位置DownloadTask.java</p>
<pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">()</span></span>{
    <span class="comment">//读取数据库的线程信息</span>
    List&lt;ThreadInfo&gt; threadInfos = mThreadDAO.getThreads(mFileInfo.getUrl()) ;
    ThreadInfo threadInfo = <span class="keyword">null</span> ;
    <span class="keyword">if</span>(threadInfos.size() ==<span class="number">0</span> ){
        threadInfo  = <span class="keyword">new</span> ThreadInfo(···) ;
    }<span class="keyword">else</span>{
        <span class="comment">//该例子中是单线程的，所以就一个</span>
        threadInfo = threadInfos.get(<span class="number">0</span>) ;
    }
    <span class="comment">//创建子线程下载</span>
    <span class="keyword">new</span> DownloadThread(threadInfo).start() ;
}
<span class="comment">//下载线程</span>
<span class="class"><span class="keyword">class</span> <span class="title">DownloadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{
        URL url = <span class="keyword">new</span> URL(fileUrl) ;
        HttpURLConnection conn = (HttpURLConnection)url.openConnection() ;
        conn.setConnectTimeout(<span class="number">3000</span>);
        conn.setRequestMethod(<span class="string">"GET"</span>);
        <span class="comment">//1.设置下载位置</span>
        <span class="comment">//文件开始下载的位置</span>
        <span class="keyword">int</span> downStartPath = mThreadInfo.getStart()+mThreadInfo.getFinished() ;
        <span class="comment">//这里设置的是Range，即部分下载，则下面的conn.getResponseCode() == HttpStatus.SC_OK==200就不能起作用了，应该设置为conn.getResponseCode() == HttpStatus.SC_PARTIAL_CONTENT==206</span>
        conn.setRequestProperty(<span class="string">"Range"</span>, <span class="string">"bytes="</span>+downStartPath+<span class="string">"-"</span>+mThreadInfo.getEnd());
        <span class="comment">//2.设置写入位置</span>
        File file = <span class="keyword">new</span> File(DownloadService.DOWNLOAD_PATH,mFileInfo.getFileName()) ;
        RandomAccessFile raf - <span class="keyword">new</span> RandomAccessFile(file, <span class="string">"rwd"</span>) ;
        <span class="comment">//seek():在读写的时候，跳过设置的字节数downStartPath，从下一个字节开始读写</span>
        raf.seek(downStartPath);
        Intent intent = <span class="keyword">new</span> Intent(DownloadService.ACTION_UPDATE) ;
        <span class="comment">//当前进度</span>
        mFinish += mThreadInfo.getFinished() ;
        <span class="comment">//3.开始下载</span>
        <span class="keyword">if</span>(conn.getResponseCode() == HttpStatus.SC_PARTIAL_CONTENT){
            <span class="keyword">long</span> time = System.currentTimeMillis() ;
            <span class="comment">//3.1读取数据</span>
            InputStream input = conn.getInputStream() ;
            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">4</span>] ;
            <span class="keyword">int</span> len = -<span class="number">1</span> ;
            <span class="keyword">while</span>((len = input.read(buffer))!=-<span class="number">1</span>){
                <span class="comment">//3.2写入文件</span>
                raf.write(buffer,<span class="number">0</span>,len);
                mFinish += len ;
                <span class="comment">//0.5s刷新一次</span>
                <span class="keyword">if</span>(System.currentTimeMillis()-time&gt;<span class="number">500</span>){
                    time = System.currentTimeMillis() ;
                    intent.putExtra(<span class="string">"finished"</span>, mFinish*<span class="number">100</span>/mFileInfo.getlength) ;
                    mContext.sendBroadcast(intent) ;
                }
                <span class="comment">//3.3暂停时保存进度到数据库</span>
                <span class="keyword">if</span>(isPause){
                    mThreadDAO.updateThread(···) ;
                    <span class="keyword">return</span> ;
                }
            }
            <span class="comment">//4.删除线程信息</span>
            mThreadDAO.deleteThread(···); 
        }
        <span class="comment">//关闭流等</span>
    }
}
</code></pre>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/article_images/service_down_02.png" alt="alt"></p>
<p><img src="/article_images/service_down_03.png" alt="alt"></p>
<p><img src="/article_images/service_down_04.png" alt="alt"></p>
<hr>
<p>参考链接：<a href="http://www.imooc.com/video/7046" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android保证Service不被杀掉的方法]]></title>
      <url>http://dalufan.com/2015/04/18/service-not-be-killed/</url>
      <content type="html"><![CDATA[<h3 id="onStartCommand方法，返回START-STICKY"><a href="#onStartCommand方法，返回START-STICKY" class="headerlink" title="onStartCommand方法，返回START_STICKY"></a>onStartCommand方法，返回START_STICKY</h3><p>StartCommond几个常量参数简介：</p>
<p><strong>1、</strong>START_STICKY</p>
<p>在运行onStartCommand后service进程被kill后，那将保留在开始状态，但是不保留那些传入的intent。不久后service就会再次尝试重新创建，因为保留在开始状态，在创建service后将保证调用onstartCommand。如果没有传递任何开始命令给service，那将获取到null的intent。</p>
<a id="more"></a> 
<p><strong>2、</strong>START_NOT_STICKY</p>
<p>在运行onStartCommand后service进程被kill后，并且没有新的intent传递给它。Service将移出开始状态，并且直到新的明显的方法（startService）调用才重新创建。因为如果没有传递任何未决定的intent那么service是不会启动，也就是期间onstartCommand不会接收到任何null的intent。</p>
<p><strong>3、</strong>START_REDELIVER_INTENT</p>
<p>在运行onStartCommand后service进程被kill后，系统将会再次启动service，并传入最后一个intent给onstartCommand。直到调用stopSelf(int)才停止传递intent。如果在被kill后还有未处理好的intent，那被kill后服务还是会自动启动。因此onstartCommand不会接收到任何null的intent。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;  </div><div class="line">    flags = START_STICKY;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>【结论】</strong> 设置START_STICKY时，当service因内存不足被kill，当内存又有的时候，service又被重新创建，比较不错，但是不能保证任何情况下都被重建，比如进程被干掉了….</p>
<h3 id="提升service优先级"><a href="#提升service优先级" class="headerlink" title="提升service优先级"></a>提升service优先级</h3><p>在androidManifest.xml文件中对于intent-filter可以通过android:priority = “1000”这个属性设置最高优先级，1000是最高值，如果数字越小则优先级越低，同时适用于广播。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;service  </div><div class="line">    android:name="com.dbjtech.acbxt.waiqin.UploadService"  </div><div class="line">    android:enabled="true" &gt;  </div><div class="line">    &lt;intent-filter android:priority="1000" &gt;  </div><div class="line">        &lt;action android:name="com.dbjtech.myservice" /&gt;  </div><div class="line">    &lt;/intent-filter&gt;  </div><div class="line">&lt;/service&gt;</div></pre></td></tr></table></figure>
<p><strong>【结论】</strong>目前看来，priority这个属性貌似只适用于broadcast，对于Service来说可能无效</p>
<h3 id="提升service进程优先级"><a href="#提升service进程优先级" class="headerlink" title="提升service进程优先级"></a>提升service进程优先级</h3><p>android中的进程是托管的，当系统进程空间紧张的时候，会依照优先级自动进行进程的回收。android将进程分为6个等级,它们按优先级顺序由高到低依次是:</p>
<ol>
<li>前台进程( FOREGROUND_APP)</li>
<li>可视进程(VISIBLE_APP )</li>
<li>次要服务进程(SECONDARY_SERVER )</li>
<li>后台进程 (HIDDEN_APP)</li>
<li>内容供应节点(CONTENT_PROVIDER)</li>
<li>空进程(EMPTY_APP)</li>
</ol>
<p>当service运行在低内存的环境时，将会kill掉一些存在的进程。因此进程的优先级将会很重要，可以使用startForeground 将service放到前台状态。这样在低内存时被kill的几率会低一些。</p>
<p>在onStartCommand方法内添加如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> Notification notification = <span class="keyword">new</span> Notification(R.drawable.ic_launcher,  </div><div class="line"> getString(R.string.app_name), System.currentTimeMillis());  </div><div class="line">  </div><div class="line"> PendingIntent pendingintent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>,  </div><div class="line"> <span class="keyword">new</span> Intent(<span class="keyword">this</span>, AppMain.class), <span class="number">0</span>);  </div><div class="line"> notification.setLatestEventInfo(<span class="keyword">this</span>, <span class="string">"uploadservice"</span>, <span class="string">"请保持程序在后台运行"</span>,  </div><div class="line"> pendingintent);  </div><div class="line">startForeground(<span class="number">0x111</span>, notification);</div></pre></td></tr></table></figure>
<p>注意在<code>onDestroy</code>里还需要stopForeground(true)，运行时在下拉列表会看到自己的APP在：</p>
<p><strong>【结论】</strong>如果在极度极度低内存的压力下，该service还是会被kill掉，并且不一定会restart</p>
<h3 id="onDestroy方法里重启service"><a href="#onDestroy方法里重启service" class="headerlink" title="onDestroy方法里重启service"></a>onDestroy方法里重启service</h3><p>service +broadcast  方式，就是当service走ondestory的时候，发送一个自定义的广播，当收到广播的时候，重新启动service；</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;receiver android:name="com.dbjtech.acbxt.waiqin.BootReceiver" &gt;  </div><div class="line">    &lt;intent-filter&gt;  </div><div class="line">        &lt;action android:name="android.intent.action.BOOT_COMPLETED" /&gt;  </div><div class="line">        &lt;action android:name="android.intent.action.USER_PRESENT" /&gt;  </div><div class="line">        &lt;action android:name="com.dbjtech.waiqin.destroy" /&gt;//这个就是自定义的action  </div><div class="line">    &lt;/intent-filter&gt;  </div><div class="line">&lt;/receiver&gt;</div></pre></td></tr></table></figure>
<p>在onDestroy时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">    stopForeground(<span class="keyword">true</span>);  </div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.dbjtech.waiqin.destroy"</span>);  </div><div class="line">    sendBroadcast(intent);  </div><div class="line">    <span class="keyword">super</span>.onDestroy();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在BootReceiver里</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;    </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (intent.getAction().equals(<span class="string">"com.dbjtech.waiqin.destroy"</span>)) &#123;  </div><div class="line">            <span class="comment">//TODO  </span></div><div class="line">            <span class="comment">//在这里写重新启动service的相关操作  </span></div><div class="line">                startUploadService(context);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以直接在onDestroy（）里startService</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;    </div><div class="line">    Intent sevice = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainService.class);  </div><div class="line">    <span class="keyword">this</span>.startService(sevice);    </div><div class="line">    <span class="keyword">super</span>.onDestroy();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>【结论】</strong>当使用类似QQ管家等第三方应用或是在setting里-应用-强制停止时，APP进程可能就直接被干掉了，onDestroy方法都进不来，所以还是无法保证</p>
<h3 id="Application加上Persistent属性"><a href="#Application加上Persistent属性" class="headerlink" title="Application加上Persistent属性"></a>Application加上Persistent属性</h3><p>看android的文档知道，当进程长期不活动，或系统需要资源时，会自动清理门户，杀死一些Service，和不可见的Activity等所在的进程。但是如果某个进程不想被杀死（如数据缓存进程，或状态监控进程，或远程服务进程），可以这么做：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;application  </div><div class="line">    android:name="com.test.Application"  </div><div class="line">    android:allowBackup="true"  </div><div class="line">    android:icon="@drawable/ic_launcher"  </div><div class="line">    android:label="@string/app_name"  </div><div class="line">    android:persistent="true"</div><div class="line">    android:theme="@style/AppTheme" &gt;  </div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure>
<p><strong>【结论】</strong>据说这个属性不能乱设置，不过设置后，的确发现优先级提高不少，或许是相当于系统级的进程，但是还是无法保证存活</p>
<h3 id="监听系统广播判断Service状态"><a href="#监听系统广播判断Service状态" class="headerlink" title="监听系统广播判断Service状态"></a>监听系统广播判断Service状态</h3><p>通过系统的一些广播，比如：手机重启、界面唤醒、应用状态改变等等监听并捕获到，然后判断我们的Service是否还存活，<code>别忘记加权限</code>，也可以使用AlarmManager(全局定时器)来定时发送自定义的广播</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;receiver android:name="com.dbjtech.acbxt.waiqin.BootReceiver" &gt;  </div><div class="line">    &lt;intent-filter&gt;  </div><div class="line">        &lt;action android:name="android.intent.action.BOOT_COMPLETED" /&gt;  </div><div class="line">        &lt;action android:name="android.intent.action.USER_PRESENT" /&gt;  </div><div class="line">        &lt;action android:name="android.intent.action.PACKAGE_RESTARTED" /&gt;  </div><div class="line">        &lt;action android:name="com.dbjtech.waiqin.destroy" /&gt;  </div><div class="line">    &lt;/intent-filter&gt;  </div><div class="line">&lt;/receiver&gt;</div></pre></td></tr></table></figure>
<p>BroadcastReceiver中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) &#123;  </div><div class="line">        System.out.println(<span class="string">"手机开机了...."</span>);  </div><div class="line">        startUploadService(context);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span> (Intent.ACTION_USER_PRESENT.equals(intent.getAction())) &#123;  </div><div class="line">        startUploadService(context);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>【结论】</strong>经测试，最好的广播是 Intent.ACTION_TIME_TICK，该系统广播每分钟发送一次，由于其是系统广播，只能通过动态注册的方式使用。即你不能通过在manifest.xml里注册的方式接收到这个广播，只能在代码里通过registerReceiver()方法注册。可以在App extends Application 或者在service里注册广播：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntentFilter filter = newIntentFilter(Intent.ACTION_TIME_TICK);         </div><div class="line">    MyBroadcastReceiver receiver = <span class="keyword">new</span> MyBroadcastReceiver();   </div><div class="line">    registerReceiver(receiver, filter);</div></pre></td></tr></table></figure>
<p>在广播接收器MyBroadcastReceiver extends BroadcastReceiver的onReceive里</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">boolean</span> isServiceRunning = <span class="keyword">false</span>;   </div><div class="line">    <span class="keyword">if</span> (intent.getAction().equals(Intent.ACTION_TIME_TICK)) &#123;        </div><div class="line">    <span class="comment">//检查Service状态        </span></div><div class="line">    ActivityManager manager = (ActivityManager)ThisApp.getContext().getSystemService(Context.ACTIVITY_SERVICE);   </div><div class="line">    <span class="keyword">for</span> (RunningServiceInfo service :manager.getRunningServices(Integer.MAX_VALUE)) &#123;   </div><div class="line">        <span class="keyword">if</span>(<span class="string">"so.xxxx.xxxxService"</span>.equals(service.service.getClassName()))          </div><div class="line">        &#123;   </div><div class="line">            isServiceRunning = <span class="keyword">true</span>;   </div><div class="line">        &#125;   </div><div class="line">    &#125;   </div><div class="line">    <span class="keyword">if</span> (!isServiceRunning) &#123;   </div><div class="line">    Intent i = <span class="keyword">new</span> Intent(context, xxxService.class);   </div><div class="line">           context.startService(i);   </div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="将APK安装到-system-app，变身系统级应用"><a href="#将APK安装到-system-app，变身系统级应用" class="headerlink" title="将APK安装到/system/app，变身系统级应用"></a>将APK安装到/system/app，变身系统级应用</h3><h3 id="开启守护进程，相互监听"><a href="#开启守护进程，相互监听" class="headerlink" title="开启守护进程，相互监听"></a>开启守护进程，相互监听</h3><hr>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/mad1989/article/details/22492519" target="_blank" rel="external">1</a>, <a href="http://blog.sina.com.cn/s/blog_9f3cecc50101glr4.html" target="_blank" rel="external">2</a>, <a href="http://blog.csdn.net/toyuexinshangwan/article/details/8634531" target="_blank" rel="external">AlarmManager</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中Intent和PendingIntent的区别]]></title>
      <url>http://dalufan.com/2015/04/12/android-Intent-PendingIntent/</url>
      <content type="html"><![CDATA[<p>intent英文意思是意图，pending表示即将发生或来临的事情。<br><code>PendingIntent</code>这个类用于处理即将发生的事情。比如在通知Notification中用于跳转页面，但不是马上跳转。 </p>
<p><code>Intent是及时启动，Intent随所在的Activity消失而消失。</code></p>
<p><code>PendingIntent可以看作是对intent的包装</code>，通常通过getActivity,getBroadcast,getService来得到pendingintent的实例，当前activity并不能马上启动它所包含的intent,而是在外部执行 pendingintent时，调用intent的。正由于pendingintent中 保存有当前App的Context<code>，使它赋予外部App一种能力，使得外部App可以如同当前App一样的执行pendingintent里的Intent，即使在执行时，当前App已经不存在了，也能通过存在pendingintent里的Context照样执行Intent。另外还可以处理intent执行后的操作。常和alermanger 和notificationmanager一起使用。 
Intent一般是用作Activity、Sercvice、BroadcastReceiver之间传递数据，而Pendingintent，一般用在Notification上，</code>可以理解为延迟执行的Intent`，PendingIntent是对Intent一个包装。 </p>
<a id="more"></a> 
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showNotify</span><span class="params">()</span></span>&#123;   </div><div class="line">        Notification notice=<span class="keyword">new</span> Notification();   </div><div class="line">        notice.icon=R.drawable.icon;   </div><div class="line">        notice.tickerText=<span class="string">"您有一条新的信息"</span>;   </div><div class="line">        notice.defaults=Notification.DEFAULT_SOUND;   </div><div class="line">        notice.when=<span class="number">10L</span>;   </div><div class="line">        <span class="comment">// 100 毫秒延迟后，震动 250 毫秒，暂停 100 毫秒后，再震动 500 毫秒     </span></div><div class="line">        <span class="comment">//notice.vibrate = new long[] &#123; 100, 250, 100, 500 &#125;;出错？   </span></div><div class="line">        <span class="comment">//notice.setLatestEventInfo(this, "通知", "开会啦", PendingIntent.getActivity(this, 0, null, 0));   </span></div><div class="line">notice.setLatestEventInfo(<span class="keyword">this</span>, <span class="string">"通知"</span>, <span class="string">"开会啦"</span>, PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, <span class="keyword">new</span> Intent(<span class="keyword">this</span>,Activity2.class), <span class="number">0</span>));<span class="comment">//即将跳转页面，还没跳转   </span></div><div class="line">        NotificationManager manager=(NotificationManager)getSystemService(<span class="keyword">this</span>.NOTIFICATION_SERVICE);   </div><div class="line">        manager.notify(<span class="number">0</span>,notice);   </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>Demo：</strong>GSM网络中android发送短信示例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String msg =<span class="string">"你好，美女"</span>;   </div><div class="line">String number = <span class="string">"135****6784"</span>;   </div><div class="line">SmsManager sms = SmsManager.getDefault();         </div><div class="line">PendingIntent pi = PendingIntent.getBroadcast(SmsActivity.<span class="keyword">this</span>,<span class="number">0</span>,<span class="keyword">new</span> Intent(...),<span class="number">0</span>);   </div><div class="line">sms.sendTextMessage(number, <span class="keyword">null</span>, msg, pi, <span class="keyword">null</span>);   </div><div class="line">Toast.makeText(SmsActivity.<span class="keyword">this</span>,<span class="string">"发送成功"</span>,Toast.LENGHT_LONG).show();</div></pre></td></tr></table></figure>
<p><strong>代码解释</strong></p>
<p>PendingIntent就是一个Intent的描述，我们可以把这个描述交给别的程序，别的程序根据这个描述在后面的别的时间做你安排做的事情 （By giving a PendingIntent to another application, you are granting it the right to perform the operation you have specified as if the other application was yourself，就相当于PendingIntent代表了Intent）。本例中别的程序就是发送短信的程序，短信发送成功后要把intent广播出去 。 </p>
<p>函数SmsManager.sendTextMessage(String destinationAddress, String scAddress, String text, PendingIntent sentIntent, PendingIntent deliveryIntent)中参数解释： </p>
<ol>
<li>PendingIntent sentIntent：当短信发出时，成功的话sendIntent会把其内部的描述的intent广播出去，否则产生错误代码并通过android.app.PendingIntent.OnFinished进行回调，这个参数最好不为空，否则会存在资源浪费的潜在问题； </li>
<li>PendingIntentdeliveryIntent：是当消息已经传递给收信人后所进行的PendingIntent广播。 </li>
</ol>
<p>查看PendingIntent类可以看到许多的Send函数，就是PendingIntent在进行被赋予的相关的操作。</p>
<hr>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/zeng622peng/article/details/6180190" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中AlarmManager的说明例子]]></title>
      <url>http://dalufan.com/2015/04/10/android-AlarmManager/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="comment">//AlarmManager称呼为全局定时器</span></div><div class="line"><span class="comment">//AlarmManager对象配合Intent使用，可以定时的开启一个Activity,发送一个BroadCast,或者开启一个Service.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//android提供了四种类型的闹钟：</span></div><div class="line"><span class="comment">//ELAPSED_REALTIME在指定的延时过后，发送广播，但不唤醒设备。</span></div><div class="line"><span class="comment">//ELAPSED_REALTIME_WAKEUP在指定的演示后，发送广播，并唤醒设备</span></div><div class="line"><span class="comment">//RTC在指定的时刻，发送广播，但不唤醒设备</span></div><div class="line"><span class="comment">//RTC_WAKEUP在指定的时刻，发送广播，并唤醒设备</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//AlarmManager提供的方法：</span></div><div class="line"><span class="comment">//void set(int type, long triggerAtTime, PendingIntent operation)设置一个闹钟</span></div><div class="line"><span class="comment">//void setRepeating(int type, long triggerAtTime, long interval, PendingIntent operation)设置一个会重复的闹钟</span></div><div class="line"><span class="comment">//void setInexactRepeating(int type, long triggerAtTime, long interval, PendingIntent operation)</span></div><div class="line"><span class="comment">//设置一个重复闹钟的不精确版本，它相对而言更节能（power-efficient）一些，因为系统可能会将几个差不多的闹钟合并为一个来执行，减少设备的唤醒次数。</span></div><div class="line"><span class="comment">//void cancel(PendingIntent operation)取消一个设置的闹钟</span></div><div class="line"><span class="comment">//void setTimeZone(String timeZone)</span></div><div class="line"><span class="comment">//设置系统的默认时区。需要android.permission.SET_TIME_ZONE权限</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//setRepeating方法有4个参数，这些参数的含义如下：</span></div><div class="line"><span class="comment">//type：表示警报类型，一般可以取的值是AlarmManager.RTC和AlarmManager.RTC_WAKEUP。</span></div><div class="line"><span class="comment">//如果将type参数值设为AlarmManager.RTC，表示是一个正常的定时器，如果将type参数值设为AlarmManager.RTC_WAKEUP，</span></div><div class="line"><span class="comment">//除了有定时器的功能外，还会发出警报声（例如，响铃、震动）。</span></div><div class="line"><span class="comment">//triggerAtTime：第1次运行时要等待的时间，也就是执行延迟时间，单位是毫秒。</span></div><div class="line"><span class="comment">//interval：表示执行的时间间隔，单位是毫秒。</span></div><div class="line"><span class="comment">//operation：一个PendingIntent对象，表示到时间后要执行的操作。PendingIntent与Intent类</span></div><div class="line"><span class="comment">//似，可以封装Activity、BroadcastReceiver和Service。但与Intent不同的是，PendingIntent可以脱离应用程序而存在。 </span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//calendar.getTimeInMillis()返回从格林威治标准时间 1970 年 1 月 1 日的 00:00:00.000到Calendar对象表示的时间之间的毫秒数</span></div><div class="line"><span class="keyword">import</span> java.util.Calendar;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.app.AlarmManager;</div><div class="line"><span class="keyword">import</span> android.app.PendingIntent;</div><div class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.content.IntentFilter;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeTask</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Calendar calendar;</div><div class="line">    <span class="keyword">private</span> AlarmManager am;</div><div class="line">    <span class="keyword">private</span> PendingIntent pendingIntent;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">       </div><div class="line">        calendar = Calendar.getInstance();</div><div class="line"> </div><div class="line">        calendar.setTimeInMillis(System.currentTimeMillis());</div><div class="line">        <span class="comment">//set(f, value) changes field f to value. 设置监听时间的时分秒</span></div><div class="line">        <span class="keyword">int</span> hourOfDay = <span class="number">23</span>,minute = <span class="number">59</span>;</div><div class="line">        calendar.set(Calendar.HOUR_OF_DAY, hourOfDay);</div><div class="line">        calendar.set(Calendar.SECOND, <span class="number">0</span>);</div><div class="line">        calendar.set(Calendar.MILLISECOND, <span class="number">0</span>);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.buscall.alarm"</span>);</div><div class="line">        intent.putExtra(<span class="string">"time"</span>, calendar.getTimeInMillis());</div><div class="line">        pendingIntent = PendingIntent.getBroadcast(TimeTask.<span class="keyword">this</span>, <span class="number">0</span>, intent, PendingIntent.FLAG_CANCEL_CURRENT);</div><div class="line">        <span class="comment">//获取系统进程</span></div><div class="line">        am = (AlarmManager)getSystemService(ALARM_SERVICE);</div><div class="line">        am.set(AlarmManager.RTC, calendar.getTimeInMillis(), pendingIntent);</div><div class="line">        <span class="comment">//设置周期！！</span></div><div class="line">        am.setRepeating(AlarmManager.RTC, calendar.getTimeInMillis(), (<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>), pendingIntent);</div><div class="line">        String tmps = <span class="string">"设置闹钟时间为："</span>+format(hourOfDay)+<span class="string">":"</span>+format(minute);</div><div class="line">        System.out.println(tmps);</div><div class="line">        IntentFilter filter = <span class="keyword">new</span> IntentFilter();</div><div class="line">        filter.addAction(<span class="string">"com.buscall.alarm"</span>);</div><div class="line">        registerReceiver(TimeReceiver, filter);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        am.cancel(pendingIntent);</div><div class="line">        unregisterReceiver(TimeReceiver);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> BroadcastReceiver TimeReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            String action = intent.getAction();</div><div class="line">            <span class="keyword">if</span> (action.equals(<span class="string">"com.buscall.alarm"</span>)||action==<span class="string">"com.buscall.alarm"</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"到时间了:"</span>+getIntent().getStringExtra(<span class="string">"time"</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">/**8:8 format 08:08*/</span></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">format</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        String s = <span class="string">""</span>+x;</div><div class="line">        <span class="keyword">if</span>(s.length() == <span class="number">1</span>)</div><div class="line">            s = <span class="string">"0"</span>+s;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/toyuexinshangwan/article/details/8634531" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中Handler的使用Tips]]></title>
      <url>http://dalufan.com/2015/03/30/android-handler-learn/</url>
      <content type="html"><![CDATA[<h3 id="Looper-prepare-和Looper-loop"><a href="#Looper-prepare-和Looper-loop" class="headerlink" title="Looper.prepare()和Looper.loop()"></a>Looper.prepare()和Looper.loop()</h3><p>android中的Looper类，是用来封装消息循环和消息队列的一个类，用于在android线程中进行消息处理。handler其实可以看做是一个工具类，用来向消息队列中插入消息的。</p>
<a id="more"></a> 
<ol>
<li>Looper类用来为一个线程开启一个消息循环。默认情况下android中新诞生的线程是没有开启消息循环的。（主线程除外，<code>主线程系统会自动为其创建Looper对象</code>，开启消息循环。）Looper对象通过<code>MessageQueue</code>来存放消息和事件。一个线程<code>只能有一个Looper</code>，对应一个MessageQueue。 </li>
<li>通常是通过Handler对象来与Looper进行交互的。Handler可看做是Looper的一个接口，用来向指定的Looper发送消息及定义处理方法。默认情况下Handler会与其被定义时所在线程的Looper绑定，比如，Handler在主线程中定义，那么它是与主线程的Looper绑定。 mainHandler = new Handler() 等价于new Handler（Looper.myLooper()）. 其中<code>Looper.myLooper()</code>：获取当前进程的looper对象，类似的 Looper.getMainLooper() 用于获取主线程的Looper对象。 </li>
<li>在非主线程中直接new Handler() 会报如下的错误: E/androidRuntime( 6173): Uncaught handler: thread Thread-8 exiting due to uncaught exception E/androidRuntime( 6173): java.lang.RuntimeException: Can’t create handler inside thread that has not called Looper.prepare() 原因是非主线程中默认没有创建Looper对象，需要先调用Looper.prepare()启用Looper。 </li>
<li>Looper.loop(); 这是一个死循环,让Looper开始工作，从消息队列里取消息，处理消息。注意：写在Looper.loop()之后的代码不会被执行，这个函数内部应该是一个循环，当调用<code>mHandler.getLooper().quit()</code>后，loop才会中止，其后的代码才能得以运行。</li>
<li>基于以上知识，可实现主线程给子线程（非主线程）发送消息。 把下面例子中的mHandler声明成类成员，在主线程通过mHandler发送消息即可。         android官方文档中Looper的介绍： Class used to run a message loop for a thread. Threads by default do not have a message loop associated with them; to create one, call prepare() in the thread that is to run the loop, and then loop() to have it process messages until the loop is stopped.<br>Most interaction with a message loop is through the Handler class.<br>This is a typical example of the implementation of a Looper thread, using the separation of prepare() and loop() to create an initial Handler to communicate with the Looper.</li>
</ol>
<p>如果线程中使用Looper.prepare()和Looper.loop()创建了消息队列就可以让消息处理在该线程中完成。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="keyword">public</span> Handler mHandler;  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span>   </span></div><div class="line">&#123;  </div><div class="line">    Looper.prepare();  </div><div class="line">    mHandler = <span class="keyword">new</span> Handler()  &#123;  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span>   </span></div><div class="line">        &#123;  </div><div class="line">        <span class="comment">// process incoming messages here  </span></div><div class="line">        &#125;  </div><div class="line">    &#125;;  </div><div class="line">    Looper.loop();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="子线程和主线程通信"><a href="#子线程和主线程通信" class="headerlink" title="子线程和主线程通信"></a>子线程和主线程通信</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.os.HandlerThread;</div><div class="line"><span class="keyword">import</span> android.os.Message;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="comment">/** 主线程handler */</span></div><div class="line">    <span class="keyword">private</span> Handler mainHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(android.os.Message msg)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"msg from subHandlerThread:"</span> + msg.what);</div><div class="line">            subHandler.sendEmptyMessage(<span class="number">1</span>);</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">/** 子线程handler */</span></div><div class="line">    <span class="keyword">private</span> Handler subHandler;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        HandlerThread subThread = <span class="keyword">new</span> HandlerThread(<span class="string">"subHandlerThread"</span>);</div><div class="line">        subThread.start();</div><div class="line">        subHandler = <span class="keyword">new</span> Handler(subThread.getLooper()) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"msg from mainThread:"</span> + msg.what);</div><div class="line">                mainHandler.sendEmptyMessage(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        mainHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                subHandler.sendEmptyMessage(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">3000</span>);</div><div class="line">        mainHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mainHandler.removeMessages(<span class="number">0</span>);</div><div class="line">                subHandler.removeMessages(<span class="number">1</span>);</div><div class="line">                System.out.println(<span class="string">"---------------------------------------------"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">3100</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="http://blog.csdn.net/heng615975867/article/details/9193899" target="_blank" rel="external">1</a>,<a href="http://blog.csdn.net/heng615975867/article/details/9194219" target="_blank" rel="external">2</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sqlite遇到的问题]]></title>
      <url>http://dalufan.com/2015/03/14/android-sqlite-err/</url>
      <content type="html"><![CDATA[<p><a href="/article_files/sqlDemo.zip">DEMO下载</a></p>
<blockquote>
<p>android.database.CursorIndexOutOfBoundsException:Index -1 requested, with a size of 1</p>
</blockquote>
<p>android中数据库处理使用cursor时，游标不是放在为0的下标，而是放在为-1的下标处开始的。<br>也就是说返回给cursor查询结果时，不能够马上从cursor中提取值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Cursor cursor = db.rawQuery(<span class="string">"select * from user where id = ?"</span>, <span class="keyword">new</span> String[] &#123; id.toString() &#125;);  </div><div class="line"><span class="comment">//需要使用下面的moveToFirst()，把游标移动到最开始位置</span></div><div class="line">cursor.moveToFirst()</div></pre></td></tr></table></figure>
<a id="more"></a> 
<blockquote>
<p>android.database.CursorIndexOutOfBoundsException: Index 5 requested, with a size of 5</p>
</blockquote>
<p>出错代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(cursor.moveToFirst())&#123;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cursor.getCount(); i++) &#123;  </div><div class="line">            cursor.move(i);  </div><div class="line">            ChatGroup chatGroup = <span class="keyword">new</span> ChatGroup();  </div><div class="line">            String id = cursor.getString(<span class="number">0</span>);  </div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>官方解释：</p>
<p>Move the cursor by a relative amount, forward or backward, from the current position. Positive offsets move forwards, negative offsets move backwards. If the final position is outside of the bounds of the result set then the resultant position will be pinned to -1 or count() depending on whether the value is off the front or end of the set, respectively.<br>This method will return true if the requested destination was reachable, otherwise, it returns false. For example, if the cursor is at currently on the second entry in the result set and move(-5) is called, the position will be pinned at -1, and false will be returned. </p>
<p>意思是Cursor的move(i)的<code>i是移动相对量</code>，即相对于当前值向前或向后移动i个，i是正的就向后移动，i是负数就向前移动</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//改成moveToPosition(int position) ,果然好了</span></div><div class="line"><span class="comment">//或参考其他方法改变代码处理方式：</span></div><div class="line">moveToNext() <span class="comment">//相当于move(1)</span></div><div class="line">moveToPrevious() <span class="comment">//相当于move(-1)</span></div></pre></td></tr></table></figure>
<blockquote>
<p>android.content.res.Resources$NotFoundException: String resource ID #0x1</p>
</blockquote>
<p>一般发生在参数 int resId 错误，你把String赋值给int的resId，所以编译器找不到正确的resource于是报错。<br>最简单的例子，检查一下你的Toast.makeText()啊textView.setText啊之类的函数，这种函数通常有几个重载，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">textView.setText(CharSequence text);</div><div class="line">textView.setText(<span class="keyword">int</span> resId);</div></pre></td></tr></table></figure>
<p>如果不小心将一个int值传给了它，那它不会显示该int值，而是跑到工程下去找一个对应的resource的id,当然是找不到的，于是就报错啦。<br>本例子中，出错位置在给adapter中setText()时，直接把查找出来的uid（int类型）直接set进去了，应该是setText(uid+””)</p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/woshixuye/article/details/8260547" target="_blank" rel="external">1</a>,<a href="http://blog.csdn.net/u013456765/article/details/42340809" target="_blank" rel="external">2</a>,<a href="http://blog.sina.com.cn/s/blog_5e58565701012ox7.html" target="_blank" rel="external">3</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sqlite的使用]]></title>
      <url>http://dalufan.com/2015/02/14/android-sqlite-learn/</url>
      <content type="html"><![CDATA[<h3 id="sqlite的一般使用"><a href="#sqlite的一般使用" class="headerlink" title="sqlite的一般使用"></a>sqlite的一般使用</h3><h4 id="创建基类-DatabaseHelper-java"><a href="#创建基类-DatabaseHelper-java" class="headerlink" title="创建基类 DatabaseHelper.java"></a>创建基类 DatabaseHelper.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"mydata.db"</span>; <span class="comment">//数据库名称</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> version = <span class="number">1</span>; <span class="comment">//数据库版本</span></div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatabaseHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DB_NAME, <span class="keyword">null</span>, version);</div><div class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"create table user(username varchar(20) not null , password varchar(60) not null );"</span>;          </div><div class="line">        db.execSQL(sql);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line"> </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a> 
<h4 id="方法说明："><a href="#方法说明：" class="headerlink" title="方法说明："></a>方法说明：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造方法，一般是传递一个要创建的数据库名称那么参数</span></div><div class="line">SQLiteOpenHelper(Context context,String name,SQLiteDatabase.CursorFactory factory,<span class="keyword">int</span> version)    </div><div class="line"><span class="comment">//创建数据库时调用</span></div><div class="line">onCreate(SQLiteDatabase db) </div><div class="line"><span class="comment">//版本更新时调用</span></div><div class="line">onUpgrade(SQLiteDatabase db,<span class="keyword">int</span> oldVersion , <span class="keyword">int</span> newVersion)    </div><div class="line"><span class="comment">//创建或打开一个只读数据库</span></div><div class="line">getReadableDatabase()   </div><div class="line">创建或打开一个读写数据库    </div><div class="line">getWritableDatabase()</div></pre></td></tr></table></figure>
<h4 id="创建数据库："><a href="#创建数据库：" class="headerlink" title="创建数据库："></a>创建数据库：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这段代码放到Activity类中才用this</span></div><div class="line">DatabaseHelper database = <span class="keyword">new</span> DatabaseHelper(<span class="keyword">this</span>);</div><div class="line">SQLiteDatabase db = <span class="keyword">null</span>;</div><div class="line">db = database.getReadableDatabase();</div></pre></td></tr></table></figure>
<h4 id="数据的添加"><a href="#数据的添加" class="headerlink" title="数据的添加"></a>数据的添加</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.使用insert方法</span></div><div class="line"><span class="comment">//实例化一个ContentValues用来装载待插入的数据</span></div><div class="line">ContentValues cv = <span class="keyword">new</span> ContentValues();</div><div class="line">cv.put(<span class="string">"username"</span>,<span class="string">"Jack Johnson"</span>);<span class="comment">//添加用户名</span></div><div class="line">cv.put(<span class="string">"password"</span>,<span class="string">"iLovePopMusic"</span>); <span class="comment">//添加密码</span></div><div class="line">db.insert(<span class="string">"user"</span>,<span class="keyword">null</span>,cv);<span class="comment">//执行插入操作</span></div><div class="line"></div><div class="line"><span class="comment">//2.使用execSQL方式来实现</span></div><div class="line"><span class="comment">//插入操作的SQL语句</span></div><div class="line">String sql = <span class="string">"insert into user(username,password) values ('Jack Johnson','iLovePopMuisc')"</span>;</div><div class="line">db.execSQL(sql);<span class="comment">//执行SQL语句</span></div></pre></td></tr></table></figure>
<h4 id="数据的删除"><a href="#数据的删除" class="headerlink" title="数据的删除"></a>数据的删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1</span></div><div class="line">String whereClause = <span class="string">"username=?"</span>;<span class="comment">//删除的条件</span></div><div class="line">String[] whereArgs = &#123;<span class="string">"Jack Johnson"</span>&#125;;<span class="comment">//删除的条件参数</span></div><div class="line">db.delete(<span class="string">"user"</span>,whereClause,whereArgs);<span class="comment">//执行删除</span></div><div class="line"></div><div class="line"><span class="comment">//2</span></div><div class="line">String sql = <span class="string">"delete from user where username='Jack Johnson'"</span>;<span class="comment">//删除操作的SQL语句</span></div><div class="line">db.execSQL(sql);<span class="comment">//执行删除操作</span></div></pre></td></tr></table></figure>
<h4 id="数据修改"><a href="#数据修改" class="headerlink" title="数据修改"></a>数据修改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1</span></div><div class="line">ContentValues cv = <span class="keyword">new</span> ContentValues();<span class="comment">//实例化ContentValues</span></div><div class="line">cv.put(<span class="string">"password"</span>,<span class="string">"iHatePopMusic"</span>);<span class="comment">//添加要更改的字段及内容</span></div><div class="line">String whereClause = <span class="string">"username=?"</span>;<span class="comment">//修改条件</span></div><div class="line">String[] whereArgs = &#123;<span class="string">"Jack Johnson"</span>&#125;;<span class="comment">//修改条件的参数</span></div><div class="line">db.update(<span class="string">"user"</span>,cv,whereClause,whereArgs);<span class="comment">//执行修改</span></div><div class="line"></div><div class="line"><span class="comment">//2</span></div><div class="line">String sql = <span class="string">"update [user] set password = 'iHatePopMusic' where username='Jack Johnson'"</span>;<span class="comment">//修改的SQL语句</span></div><div class="line">db.execSQL(sql);<span class="comment">//执行修改</span></div></pre></td></tr></table></figure>
<h4 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h4><blockquote>
<p>public Cursor query(String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit)</p>
</blockquote>
<ul>
<li>table：表名称</li>
<li>colums：列名称数组</li>
<li>selection：条件子句，相当于where</li>
<li>selectionArgs：条件语句的参数数组</li>
<li>groupBy：分组</li>
<li>having：分组条件</li>
<li>orderBy：排序类</li>
<li>limit：分页查询的限制</li>
<li>Cursor：返回值，相当于结果集ResultSet</li>
</ul>
<h4 id="游标（Cursor）方法说明："><a href="#游标（Cursor）方法说明：" class="headerlink" title="游标（Cursor）方法说明："></a>游标（Cursor）方法说明：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">getCount()  <span class="comment">//总记录条数</span></div><div class="line">isFirst()   <span class="comment">//判断是否第一条记录</span></div><div class="line">isLast()    <span class="comment">//判断是否最后一条记录</span></div><div class="line">moveToFirst()   <span class="comment">//移动到第一条记录</span></div><div class="line">moveToLast()    <span class="comment">//移动到最后一条记录</span></div><div class="line">move(<span class="keyword">int</span> offset)    <span class="comment">//移动到指定的记录</span></div><div class="line">moveToNext()    <span class="comment">//移动到下一条记录</span></div><div class="line">moveToPrevious()    <span class="comment">//移动到上一条记录</span></div><div class="line">getColumnIndex(String columnName)   <span class="comment">//获得指定列索引的int类型值</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1</span></div><div class="line">Cursor c = db.query(<span class="string">"user"</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);<span class="comment">//查询并获得游标</span></div><div class="line"><span class="keyword">if</span>(c.moveToFirst())&#123;<span class="comment">//判断游标是否为空</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.getCount();i++)&#123;</div><div class="line">        c.move(<span class="number">1</span>);<span class="comment">//移动到指定记录</span></div><div class="line">        String username = c.getString(c.getColumnIndex(<span class="string">"username"</span>);</div><div class="line">        String password = c.getString(c.getColumnIndex(<span class="string">"password"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//2</span></div><div class="line">Cursor c = db.rawQuery(<span class="string">"select * from user where username=?"</span>,<span class="keyword">new</span> Stirng[]&#123;<span class="string">"Jack Johnson"</span>&#125;);</div><div class="line"><span class="keyword">if</span>(cursor.moveToFirst()) &#123;</div><div class="line">    String password = c.getString(c.getColumnIndex(<span class="string">"password"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="sqlite支持的数据类型"><a href="#sqlite支持的数据类型" class="headerlink" title="sqlite支持的数据类型"></a>sqlite支持的数据类型</h3><p>Sqlite3支持的数据类型 ：NULL、INTEGER、REAL、TEXT、BLOB, 但实际上，sqlite3也接受如下的数据类型：</p>
<ul>
<li>smallint 16 位元的整数。</li>
<li>interger 32 位元的整数。</li>
<li>decimal(p,s) p 精确值和 s 大小的十进位整数，精确值p是指全部有几个数(digits)大小值，s是指小数点後有几位数。如果没有特别指定，则系统会设为 p=5; s=0 。</li>
<li>float  32位元的实数。</li>
<li>double  64位元的实数。</li>
<li>char(n)  n 长度的字串，n不能超过 254。</li>
<li>varchar(n) 长度不固定且其最大长度为 n 的字串，n不能超过 4000。</li>
<li>graphic(n) 和 char(n) 一样，不过其单位是两个字元 double-bytes， n不能超过127。这个形态是为了支援两个字元长度的字体，例如中文字。</li>
<li>vargraphic(n) 可变长度且其最大长度为 n 的双字元字串，n不能超过 2000</li>
<li>date  包含了 年份、月份、日期。</li>
<li>time  包含了 小时、分钟、秒。</li>
<li>timestamp 包含了 年、月、日、时、分、秒、千分之一秒</li>
</ul>
<h4 id="插入时，某条记录不存在则插入，存在则更新"><a href="#插入时，某条记录不存在则插入，存在则更新" class="headerlink" title="插入时，某条记录不存在则插入，存在则更新"></a>插入时，某条记录不存在则插入，存在则更新</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String sql = <span class="string">"replace into xxt_config(name,value) values ('requestCount','"</span></div><div class="line">                    + maxBatchReportCount + <span class="string">"')"</span>;</div><div class="line">db.execSQL(sql);</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/qwjhappy/article/details/7355414" target="_blank" rel="external">数据类型</a>,<a href="http://www.cnblogs.com/Excellent/archive/2011/11/19/2254888.html" target="_blank" rel="external">详解</a>,<a href="http://www.trinea.cn/android/sqlite-insert-or-update/" target="_blank" rel="external">插入或更新</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[进程通信中volatile, synchronized, final的使用]]></title>
      <url>http://dalufan.com/2015/02/11/android-thread-volatile-synchronized-final/</url>
      <content type="html"><![CDATA[<h3 id="引出"><a href="#引出" class="headerlink" title="引出"></a>引出</h3><ol>
<li>对volatile变量的操作一定具有原子性吗？</li>
<li>synchronized所谓的加锁，锁住的是什么？</li>
<li>final定义的变量不变的到底是什么？</li>
</ol>
<a id="more"></a>
<h3 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h3><p>在多处理器系统中，处理器通常有多级缓存，因为这些缓存离处理器更近并且可以存储一部分数据，所以缓存可以改善处理器获取数据的速度和减少对共享内存数据总线的占用。缓存虽然能极大的提高性能，但是同时也带来了诸多挑战。例如，当两个处理器同时操作同一个内存地址的时候，该如何处理？这两个处理器在什么条件下才能看到相同的值？</p>
<p>对于处理器而言，一个内存模型就是定义一些充分必要的规范，这些规范使得其他处理器对内存的写操作对当前处理器可见，或者当前处理器的写操作对其他处理器可见。</p>
<blockquote>
<p>其他处理器对内存的写一定发生在当前处理器对同一内存的读之前，称之为其他处理器对内存的写对当前处理器可见。</p>
</blockquote>
<p>简单的讲，java内存模型指的就是一套规范，现在最新的规范为JSR-133。这套规范包含：</p>
<ol>
<li>线程之间如何通过内存通信；</li>
<li>线程之间通过什么方式通信才合法，才能得到期望的结果。</li>
</ol>
<p>我们已经知道 java 内存模型就是一套规范，那么在这套规范中，规定的内存结构是什么样的呢？</p>
<p>简单的讲，Java 内存模型将内存分为共享内存和本地内存。共享内存又称为堆内存，指的就是线程之间共享的内存，包含所有的实例域、静态域和数组元素。每个线程都有一个私有的，只对自己可见的内存，称之为本地内存。</p>
<p>java内存模型中的内存结构如下图所示：</p>
<p><img src="/article_images/volatile-synchronized-final01.png" alt="alt"></p>
<p>共享内存中共享变量虽然由所有的线程共享，但是为了提高效率，线程并不直接使用这些变量，每个线程都会在自己的本地内存中存储一个共享内存的副本，使用这个副本参与运算。由于这个副本的参与，导致了线程之间对共享内存的读写存在可见性问题。</p>
<p>为了方便线程之间的通信，java 提供了 volatile, synchronized, final 三个关键字供我们使用，下面我们来看看如何使用它们进行线程间通信</p>
<h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>volatile 定义的变量，特殊性在于：</p>
<blockquote>
<p>一个线程对 volatile 变量的写一定对之后对这个变量的读的线程可见。</p>
</blockquote>
<p>等价于</p>
<blockquote>
<p>一个线程对 volatile 变量的读一定能看见在它之前最后一个线程对这个变量的写。</p>
</blockquote>
<p>为了实现这些语义，Java 规定，（1）当一个线程要使用共享内存中的 volatile 变量时，如图中的变量a，它会直接从主内存中读取，而不使用自己本地内存中的副本。（2）当一个线程对一个 volatile 变量进行写时，它会将这个共享变量的值刷新到共享内存中。</p>
<p>我们可以看到，其实 volatile 变量保证的是一个线程对它的写会立即刷新到主内存中，并置其它线程的副本为无效，它并不保证对 volatile 变量的操作都是具有原子性的。</p>
<p>由于</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void add()&#123;</div><div class="line">    a++;         #1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">   temp = a;        </div><div class="line">   temp = temp +<span class="number">1</span>;  </div><div class="line">   a = temp;         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码1并不是一个原子操作，所以类似于 a++ 这样的操作会导致并发数据问题。</p>
<p>volatile变量的写可以被之后其他线程的读看到，因此我们可以利用它进行线程间的通信。如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> a;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    a = b; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = a; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A执行set()后，线程B执行get()，相当于线程A向线程B发送了消息。</p>
<h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p>如果我们非要使用 a++ 这种复合操作进行线程间通信呢？java为我们提供了synchronized。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">   a++; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>synchronized 使得它作用范围内的代码对于不同线程是互斥的，并且线程在释放锁的时候会将共享变量的值刷新到共享内存中。</p>
<p>我们可以利用这种互斥性来进行线程间通信。看下面的代码，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">    a++; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = a; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当线程A执行 add()，线程B调用get()，由于互斥性，线程A执行完add()后，线程B才能开始执行get()，并且线程A执行完add()，释放锁的时候，会将a的值刷新到共享内存中。因此线程B拿到的a的值是线程A更新之后的。</p>
<h3 id="volatile-和-synchronized比较"><a href="#volatile-和-synchronized比较" class="headerlink" title="volatile 和 synchronized比较"></a>volatile 和 synchronized比较</h3><p>根据以上的分析，我们可以发现volatile和synchronized有些相似。</p>
<ol>
<li>当线程对 volatile变量写时，java 会把值刷新到共享内存中；而对于synchronized，指的是当线程释放锁的时候，会将共享变量的值刷新到主内存中。</li>
<li>线程读取volatile变量时，会将本地内存中的共享变量置为无效；对于synchronized来说，当线程获取锁时，会将当前线程本地内存中的共享变量置为无效。</li>
<li>synchronized 扩大了可见影响的范围，扩大到了synchronized作用的代码块。</li>
</ol>
<h3 id="final-变量"><a href="#final-变量" class="headerlink" title="final 变量"></a>final 变量</h3><p>final关键字可以作用于变量、方法和类，我们这里只看final 变量。</p>
<p>final变量的特殊之处在于，final 变量一经初始化，就不能改变其值。</p>
<p>这里的值对于一个对象或者数组来说指的是这个对象或者数组的引用地址。因此，一个线程定义了一个final变量之后，其他任意线程都拿到这个变量。但有一点需要注意的是，当这个final变量为对象或者数组时，</p>
<ol>
<li>虽然我们不能讲这个变量赋值为其他对象或者数组，但是我们可以改变对象的域或者数组中的元素。</li>
<li>线程对这个对象变量的域或者数据的元素的改变不具有线程可见性。</li>
</ol>
<hr>
<p><a href="https://segmentfault.com/a/1190000002679340" target="_blank" rel="external">volatile只确保了可见性，并不能确保原子性</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java.lang.Process 阻塞问题 & Runtime.exec()的陷阱]]></title>
      <url>http://dalufan.com/2015/01/17/java-Process/</url>
      <content type="html"><![CDATA[<p>When <code>Runtime.exec()</code> won’t<br>Navigate yourself around pitfalls related to the Runtime.exec() method</p>
<blockquote>
<p>Summary<br>In this installment of Java Traps, Michael Daconta discusses one new pitfall and revisits another from his previous column. Originating in the java.lang package, the pitfall specifically involves problems with the Runtime.exec() method. Daconta also corrects an error from Pitfall 3 and offers a simpler solution. (2,500 words)</p>
</blockquote>
<p>As part of the Java language, the <code>java.lang</code> package is implicitly imported into every Java program. This package’s pitfalls surface often, affecting most programmers. This month, I’ll discuss the traps lurking in the <code>Runtime.exec()</code> method.</p>
<a id="more"></a> 
<h3 id="Pitfall-4-When-Runtime-exec-won’t"><a href="#Pitfall-4-When-Runtime-exec-won’t" class="headerlink" title="Pitfall 4: When Runtime.exec() won’t"></a>Pitfall 4: When Runtime.exec() won’t</h3><p>The class <code>java.lang.Runtime</code> features a static method called <code>getRuntime()</code>, which retrieves the current Java Runtime Environment. That is the only way to obtain a reference to the <code>Runtime</code> object. With that reference, you can run external programs by invoking the <code>Runtime</code> class’s <code>exec()</code> method. Developers often call this method to launch a browser for displaying a help page in HTML.</p>
<p>There are four overloaded versions of the <code>exec()</code> command:</p>
<pre><code>public Process exec(String command);
public Process exec(String [] cmdArray);
public Process exec(String command, String [] envp);
public Process exec(String [] cmdArray, String [] envp);
</code></pre><p>For each of these methods, a command – and possibly a set of arguments – is passed to an operating-system-specific function call. This subsequently creates an operating-system-specific process (a running program) with a reference to a <code>Process</code> class returned to the Java VM. The <code>Process</code> class is an abstract class, because a specific subclass of <code>Process</code> exists for each operating system.</p>
<p>You can pass three possible input parameters into these methods:</p>
<ol>
<li>A single string that represents both the program to execute and any arguments to that program.</li>
<li>An array of strings that separate the program from its arguments.</li>
<li>An array of environment variables</li>
</ol>
<p>Pass in the environment variables in the form <code>name=value.</code> If you use the version of <code>exec()</code> with a single string for both the program and its arguments, note that the string is parsed using white space as the delimiter via the <code>StringTokenizer</code> class.</p>
<h4 id="Stumbling-into-an-IllegalThreadStateException"><a href="#Stumbling-into-an-IllegalThreadStateException" class="headerlink" title="Stumbling into an IllegalThreadStateException"></a>Stumbling into an IllegalThreadStateException</h4><p>The first pitfall(陷阱) relating to <code>Runtime.exec()</code> is the <code>IllegalThreadStateException</code>. The prevalent first test of an API is to code its most obvious methods. For example, to execute a process that is external to the Java VM, we use the <code>exec()</code> method. To see the value that the external process returns, we use the <code>exitValue()</code> method on the Process class. In our first example, we will attempt to execute the Java compiler (javac.exe):</p>
<p><strong>Listing 4.1</strong> <em>BadExecJavac.java</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadExecJavac</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;            </div><div class="line">            Runtime rt = Runtime.getRuntime();</div><div class="line">            Process proc = rt.exec(<span class="string">"javac"</span>);</div><div class="line">            <span class="keyword">int</span> exitVal = proc.exitValue();</div><div class="line">            System.out.println(<span class="string">"Process exitValue: "</span> + exitVal);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t)</div><div class="line">          &#123;</div><div class="line">            t.printStackTrace();</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>A run of BadExecJavac produces:</p>
<pre><code>E:/classes/com/javaworld/jpitfalls/article2&gt;java BadExecJavac
java.lang.IllegalThreadStateException: process has not exited
        at java.lang.Win32Process.exitValue(Native Method)
        at BadExecJavac.main(BadExecJavac.java:13)
</code></pre><p>If an external process has not yet completed, the <code>exitValue()</code> method will throw an <code>IllegalThreadStateException</code>; that’s why this program failed. While the documentation states this fact, why can’t this method wait until it can give a valid answer?</p>
<p>A more thorough look at the methods available in the Process class reveals a <code>waitFor()</code> method that does precisely that. In fact, <code>waitFor()</code> also returns the exit value, which means that you would not use exitValue() and waitFor() in conjunction(联合) with each other, but rather would choose one or the other. The only possible time you would use <code>exitValue()</code> instead of waitFor() would be when you don’t want your program to block waiting on an external process that may never complete. Instead of using the waitFor() method, I would prefer passing a boolean parameter called waitFor into the exitValue() method to determine whether or not the current thread should wait. A boolean would be more beneficial because exitValue() is a more appropriate name for this method, and it isn’t necessary for two methods to perform the same function under different conditions. Such simple condition discrimination is the domain of an input parameter.</p>
<p>Therefore, to avoid this trap, either catch the <code>IllegalThreadStateException</code> or wait for the process to complete.</p>
<p>Now, let’s fix the problem in Listing 4.1 and wait for the process to complete. In Listing 4.2, the program again attempts to execute javac.exe and then waits for the external process to complete:</p>
<p><strong>Listing 4.2</strong>  <em>BadExecJavac2.java</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadExecJavac2</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;            </div><div class="line">            Runtime rt = Runtime.getRuntime();</div><div class="line">            Process proc = rt.exec(<span class="string">"javac"</span>);</div><div class="line">            <span class="keyword">int</span> exitVal = proc.waitFor();</div><div class="line">            System.out.println(<span class="string">"Process exitValue: "</span> + exitVal);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t)</div><div class="line">          &#123;</div><div class="line">            t.printStackTrace();</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Unfortunately, a run of BadExecJavac2 produces no output. The program hangs and never completes. Why does the javacprocess never complete?</p>
<h4 id="Why-Runtime-exec-hangs"><a href="#Why-Runtime-exec-hangs" class="headerlink" title="Why Runtime.exec() hangs"></a>Why Runtime.exec() hangs</h4><p>The JDK’s Javadoc documentation provides the answer to this question:</p>
<blockquote>
<p>Because some native platforms only provide limited buffer size for standard input and output streams, failure to promptly write the input stream or read the output stream of the subprocess may cause the subprocess to block, and even deadlock.</p>
</blockquote>
<p>Is this just a case of programmers not reading the documentation, as implied in the oft-quoted advice: read the fine manual (RTFM)? The answer is partially yes. In this case, reading the Javadoc would get you halfway there; it explains that you need to handle the streams to your external process, but it does not tell you how.(少年，今天你看文档了吗？)</p>
<p>Another variable is at play here, as is evident by the large number of programmer questions and misconceptions concerning this API in the newsgroups: though <code>Runtime.exec()</code> and the Process APIs seem extremely simple, that simplicity is deceiving because the simple, or obvious, use of the API is prone to error. The lesson here for the API designer is to reserve simple APIs for simple operations. Operations prone to complexities and platform-specific dependencies should reflect the domain accurately. It is possible for an abstraction to be carried too far. The JConfiglibrary provides an example of a more complete API to handle file and process operations .</p>
<p>Now, let’s follow the JDK documentation and handle the output of the javac process. When you run javac without any arguments, it produces a set of usage statements that describe how to run the program and the meaning of all the available program options. Knowing that this is going to the stderr stream, you can easily write a program to exhaust that stream before waiting for the process to exit. Listing 4.3 completes that task. While this approach will work, it is not a good general solution. Thus, Listing 4.3’s program is named <code>MediocreExecJavac</code>; it provides only a mediocre solution. A better solution would empty both the standard error stream and the standard output stream. And the best solution would empty these streams simultaneously (I’ll demonstrate that later).</p>
<p><strong>Listing 4.3</strong>  <em>MediocreExecJavac.java</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediocreExecJavac</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;            </div><div class="line">            Runtime rt = Runtime.getRuntime();</div><div class="line">            Process proc = rt.exec(<span class="string">"javac"</span>);</div><div class="line">            InputStream stderr = proc.getErrorStream();</div><div class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(stderr);</div><div class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</div><div class="line">            String line = <span class="keyword">null</span>;</div><div class="line">            System.out.println(<span class="string">"&lt;ERROR&gt;"</span>);</div><div class="line">            <span class="keyword">while</span> ( (line = br.readLine()) != <span class="keyword">null</span>)</div><div class="line">                System.out.println(line);</div><div class="line">            System.out.println(<span class="string">"&lt;/ERROR&gt;"</span>);</div><div class="line">            <span class="keyword">int</span> exitVal = proc.waitFor();</div><div class="line">            System.out.println(<span class="string">"Process exitValue: "</span> + exitVal);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t)</div><div class="line">          &#123;</div><div class="line">            t.printStackTrace();</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>A run of MediocreExecJavac generates:</p>
<pre><code>E:/classes/com/javaworld/jpitfalls/article2&gt;java MediocreExecJavac
&lt;ERROR&gt;
Usage: javac &lt;options&gt; &lt;source files&gt;
where &lt;options&gt; includes:
  -g                     Generate all debugging info
  -g:none                Generate no debugging info
  -g:{lines,vars,source} Generate only some debugging info
  -O                     Optimize; may hinder debugging or enlarge class files
  -nowarn                Generate no warnings
  -verbose               Output messages about what the compiler is doing
  -deprecation           Output source locations where deprecated APIs are used
  -classpath &lt;path&gt;      Specify where to find user class files
  -sourcepath &lt;path&gt;     Specify where to find input source files
  -bootclasspath &lt;path&gt;  Override location of bootstrap class files
  -extdirs &lt;dirs&gt;        Override location of installed extensions
  -d &lt;directory&gt;         Specify where to place generated class files
  -encoding &lt;encoding&gt;   Specify character encoding used by source files
  -target &lt;release&gt;      Generate class files for specific VM version
&lt;/ERROR&gt;
Process exitValue: 2
</code></pre><p>So, <code>MediocreExecJavac</code> works and produces an exit value of 2. Normally, an exit value of <code>0 indicates success</code>; any <code>nonzero value indicates an error</code>. The meaning of these exit values depends on the particular operating system. A Win32 error with a value of 2 is a “file not found” error. That makes sense, since javac expects us to follow the program with the source code file to compile.</p>
<p>Thus, to circumvent the second pitfall – hanging forever in Runtime.exec() – if the program you launch produces output or expects input, ensure that you process the input and output streams.</p>
<h4 id="Assuming-a-command-is-an-executable-program"><a href="#Assuming-a-command-is-an-executable-program" class="headerlink" title="Assuming a command is an executable program"></a>Assuming a command is an executable program</h4><p>Under the Windows operating system, many new programmers stumble upon Runtime.exec() when trying to use it for nonexecutable commands like dir and copy. Subsequently, they run into Runtime.exec()’s third pitfall. Listing 4.4 demonstrates exactly that:</p>
<p><strong>Listing 4.4</strong>  <em>BadExecWinDir.java</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadExecWinDir</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;            </div><div class="line">            Runtime rt = Runtime.getRuntime();</div><div class="line">            Process proc = rt.exec(<span class="string">"dir"</span>);</div><div class="line">            InputStream stdin = proc.getInputStream();</div><div class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(stdin);</div><div class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</div><div class="line">            String line = <span class="keyword">null</span>;</div><div class="line">            System.out.println(<span class="string">"&lt;OUTPUT&gt;"</span>);</div><div class="line">            <span class="keyword">while</span> ( (line = br.readLine()) != <span class="keyword">null</span>)</div><div class="line">                System.out.println(line);</div><div class="line">            System.out.println(<span class="string">"&lt;/OUTPUT&gt;"</span>);</div><div class="line">            <span class="keyword">int</span> exitVal = proc.waitFor();            </div><div class="line">            System.out.println(<span class="string">"Process exitValue: "</span> + exitVal);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t)</div><div class="line">          &#123;</div><div class="line">            t.printStackTrace();</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>A run of BadExecWinDir produces:</p>
<pre><code>E:/classes/com/javaworld/jpitfalls/article2&gt;java BadExecWinDir
java.io.IOException: CreateProcess: dir error=2
    at java.lang.Win32Process.create(Native Method)
    at java.lang.Win32Process.&lt;init&gt;(Unknown Source)
    at java.lang.Runtime.execInternal(Native Method)
    at java.lang.Runtime.exec(Unknown Source)
    at java.lang.Runtime.exec(Unknown Source)
    at java.lang.Runtime.exec(Unknown Source)
    at java.lang.Runtime.exec(Unknown Source)
    at BadExecWinDir.main(BadExecWinDir.java:12)
</code></pre><p>As stated earlier, the error value of 2 means “file not found,” which, in this case, means that the executable nameddir.exe could not be found. That’s because the directory command is part of the Windows command interpreter and not a separate executable. To run the Windows command interpreter, execute either command.com or cmd.exe, depending on the Windows operating system you use. Listing 4.5 runs a copy of the Windows command interpreter and then executes the user-supplied command (e.g., dir).</p>
<p><strong>Listing 4.5</strong>  <em>GoodWindowsExec.java</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamGobbler</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></div><div class="line">&#123;</div><div class="line">    InputStream is;</div><div class="line">    String type;</div><div class="line">    </div><div class="line">    StreamGobbler(InputStream is, String type)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.is = is;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);</div><div class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</div><div class="line">            String line=<span class="keyword">null</span>;</div><div class="line">            <span class="keyword">while</span> ( (line = br.readLine()) != <span class="keyword">null</span>)</div><div class="line">                System.out.println(type + <span class="string">"&gt;"</span> + line);    </div><div class="line">            &#125; <span class="keyword">catch</span> (IOException ioe)</div><div class="line">              &#123;</div><div class="line">                ioe.printStackTrace();  </div><div class="line">              &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodWindowsExec</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            System.out.println(<span class="string">"USAGE: java GoodWindowsExec &lt;cmd&gt;"</span>);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;            </div><div class="line">            String osName = System.getProperty(<span class="string">"os.name"</span> );</div><div class="line">            String[] cmd = <span class="keyword">new</span> String[<span class="number">3</span>];</div><div class="line"></div><div class="line">            <span class="keyword">if</span>( osName.equals( <span class="string">"Windows NT"</span> ) )</div><div class="line">            &#123;</div><div class="line">                cmd[<span class="number">0</span>] = <span class="string">"cmd.exe"</span> ;</div><div class="line">                cmd[<span class="number">1</span>] = <span class="string">"/C"</span> ;</div><div class="line">                cmd[<span class="number">2</span>] = args[<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( osName.equals( <span class="string">"Windows 95"</span> ) )</div><div class="line">            &#123;</div><div class="line">                cmd[<span class="number">0</span>] = <span class="string">"command.com"</span> ;</div><div class="line">                cmd[<span class="number">1</span>] = <span class="string">"/C"</span> ;</div><div class="line">                cmd[<span class="number">2</span>] = args[<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            Runtime rt = Runtime.getRuntime();</div><div class="line">            System.out.println(<span class="string">"Execing "</span> + cmd[<span class="number">0</span>] + <span class="string">" "</span> + cmd[<span class="number">1</span>] </div><div class="line">                               + <span class="string">" "</span> + cmd[<span class="number">2</span>]);</div><div class="line">            Process proc = rt.exec(cmd);</div><div class="line">            <span class="comment">// any error message?</span></div><div class="line">            StreamGobbler errorGobbler = <span class="keyword">new</span> </div><div class="line">                StreamGobbler(proc.getErrorStream(), <span class="string">"ERROR"</span>);            </div><div class="line">            </div><div class="line">            <span class="comment">// any output?</span></div><div class="line">            StreamGobbler outputGobbler = <span class="keyword">new</span> </div><div class="line">                StreamGobbler(proc.getInputStream(), <span class="string">"OUTPUT"</span>);</div><div class="line">                </div><div class="line">            <span class="comment">// kick them off</span></div><div class="line">            errorGobbler.start();</div><div class="line">            outputGobbler.start();</div><div class="line">                                    </div><div class="line">            <span class="comment">// any error???</span></div><div class="line">            <span class="keyword">int</span> exitVal = proc.waitFor();</div><div class="line">            System.out.println(<span class="string">"ExitValue: "</span> + exitVal);        </div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t)</div><div class="line">          &#123;</div><div class="line">            t.printStackTrace();</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Running GoodWindowsExec with the dir command generates:</p>
<pre><code>E:/classes/com/javaworld/jpitfalls/article2&gt;java GoodWindowsExec &quot;dir *.java&quot;
Execing cmd.exe /C dir *.java
OUTPUT&gt; Volume in drive E has no label.
OUTPUT&gt; Volume Serial Number is 5C5F-0CC9
OUTPUT&gt;
OUTPUT&gt; Directory of E:/classes/com/javaworld/jpitfalls/article2
OUTPUT&gt;
OUTPUT&gt;10/23/00  09:01p                   805 BadExecBrowser.java
OUTPUT&gt;10/22/00  09:35a                   770 BadExecBrowser1.java
OUTPUT&gt;10/24/00  08:45p                   488 BadExecJavac.java
OUTPUT&gt;10/24/00  08:46p                   519 BadExecJavac2.java
OUTPUT&gt;10/24/00  09:13p                   930 BadExecWinDir.java
OUTPUT&gt;10/22/00  09:21a                 2,282 BadURLPost.java
OUTPUT&gt;10/22/00  09:20a                 2,273 BadURLPost1.java
... (some output omitted for brevity)
OUTPUT&gt;10/12/00  09:29p                   151 SuperFrame.java
OUTPUT&gt;10/24/00  09:23p                 1,814 TestExec.java
OUTPUT&gt;10/09/00  05:47p                23,543 TestStringReplace.java
OUTPUT&gt;10/12/00  08:55p                   228 TopLevel.java
OUTPUT&gt;              22 File(s)         46,661 bytes
OUTPUT&gt;                         19,678,420,992 bytes free
ExitValue: 0
</code></pre><p>Running <code>GoodWindowsExec</code> with any associated document type will launch the application associated with that document type. For example, to launch Microsoft Word to display a Word document (i.e., one with a .doc extension), type:</p>
<pre><code>java GoodWindowsExec &quot;yourdoc.doc&quot;
</code></pre><p>Notice that <code>GoodWindowsExec</code> uses the <code>os.name</code> system property to determine which Windows operating system you are running – and thus determine the appropriate command interpreter. After executing the command interpreter, handle the standard error and standard input streams with the <code>StreamGobbler</code> class. StreamGobbler empties any stream passed into it in a separate thread. The class uses a simple String type to denote the stream it empties when it prints the line just read to the console.</p>
<p>Thus, to avoid the third pitfall related to <code>Runtime.exec()</code>, do not assume that a command is an executable program; know whether you are executing a standalone executable or an interpreted command. At the end of this section, I will demonstrate a simple command-line tool that will help you with that analysis.</p>
<p>It is important to note that the method used to obtain a process’s output stream is called getInputStream(). The thing to remember is that the API sees things from the perspective(角度) of the Java program and not the external process. Therefore, the external program’s output is the Java program’s input. And that logic carries over to the external program’s input stream, which is an output stream to the Java program.</p>
<h4 id="Runtime-exec-is-not-a-command-line"><a href="#Runtime-exec-is-not-a-command-line" class="headerlink" title="Runtime.exec() is not a command line"></a>Runtime.exec() is not a command line</h4><p>One final pitfall to cover with <code>Runtime.exec()</code> is mistakenly assuming that exec() accepts any String that your command line (or shell) accepts. Runtime.exec() is much more limited and not cross-platform. This pitfall is caused by users attempting to use the exec() method to accept a single String as a command line would. The confusion may be due to the fact that <code>command</code> is the parameter name for the exec() method. Thus, the programmer incorrectly associates the parameter command with anything that he or she can type on a command line, instead of associating it with a single program and its arguments. In listing 4.6 below, a user tries to execute a command and redirect its output in one call to exec():</p>
<p><strong>Listing 4.6</strong>  <em>BadWinRedirect.java</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="comment">// StreamGobbler omitted for brevity</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadWinRedirect</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;            </div><div class="line">            Runtime rt = Runtime.getRuntime();</div><div class="line">            Process proc = rt.exec(<span class="string">"java jecho 'Hello World' &gt; test.txt"</span>);</div><div class="line">            <span class="comment">// any error message?</span></div><div class="line">            StreamGobbler errorGobbler = <span class="keyword">new</span> </div><div class="line">                StreamGobbler(proc.getErrorStream(), <span class="string">"ERROR"</span>);            </div><div class="line">            </div><div class="line">            <span class="comment">// any output?</span></div><div class="line">            StreamGobbler outputGobbler = <span class="keyword">new</span> </div><div class="line">                StreamGobbler(proc.getInputStream(), <span class="string">"OUTPUT"</span>);</div><div class="line">                </div><div class="line">            <span class="comment">// kick them off</span></div><div class="line">            errorGobbler.start();</div><div class="line">            outputGobbler.start();</div><div class="line">                                    </div><div class="line">            <span class="comment">// any error???</span></div><div class="line">            <span class="keyword">int</span> exitVal = proc.waitFor();</div><div class="line">            System.out.println(<span class="string">"ExitValue: "</span> + exitVal);        </div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t)</div><div class="line">          &#123;</div><div class="line">            t.printStackTrace();</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Running BadWinRedirect produces:</p>
<pre><code>E:/classes/com/javaworld/jpitfalls/article2&gt;java BadWinRedirect
OUTPUT&gt;&apos;Hello World&apos; &gt; test.txt
ExitValue: 0
</code></pre><p>The program <code>BadWinRedirect</code> attempted to redirect the output of an echo program’s simple Java version into the filetest.txt. However, we find that the file test.txt does not exist. The <code>jecho</code> program simply takes its command-line arguments and writes them to the standard output stream. In Listing 4.6, the user assumed that you could redirect standard output into a file just as you could on a DOS command line. Nevertheless, you do not redirect the output through this approach. The incorrect assumption here is that the exec() method acts like a shell interpreter; it does not. Instead, exec()executes a single executable (a program or script). If you want to process the stream to either redirect it or pipe it into another program, you must do so programmatically, using the java.io package. Listing 4.7 properly redirects the standard output stream of the jecho process into a file.</p>
<p><strong>Listing 4.7</strong>  <em>GoodWinRedirect.java</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamGobbler</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></div><div class="line">&#123;</div><div class="line">    InputStream is;</div><div class="line">    String type;</div><div class="line">    OutputStream os;</div><div class="line">    </div><div class="line">    StreamGobbler(InputStream is, String type)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>(is, type, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    StreamGobbler(InputStream is, String type, OutputStream redirect)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.is = is;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">        <span class="keyword">this</span>.os = redirect;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            PrintWriter pw = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>)</div><div class="line">                pw = <span class="keyword">new</span> PrintWriter(os);</div><div class="line">                </div><div class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);</div><div class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</div><div class="line">            String line=<span class="keyword">null</span>;</div><div class="line">            <span class="keyword">while</span> ( (line = br.readLine()) != <span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (pw != <span class="keyword">null</span>)</div><div class="line">                    pw.println(line);</div><div class="line">                System.out.println(type + <span class="string">"&gt;"</span> + line);    </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (pw != <span class="keyword">null</span>)</div><div class="line">                pw.flush();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ioe)</div><div class="line">            &#123;</div><div class="line">            ioe.printStackTrace();  </div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodWinRedirect</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            System.out.println(<span class="string">"USAGE java GoodWinRedirect &lt;outputfile&gt;"</span>);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;            </div><div class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(args[<span class="number">0</span>]);</div><div class="line">            Runtime rt = Runtime.getRuntime();</div><div class="line">            Process proc = rt.exec(<span class="string">"java jecho 'Hello World'"</span>);</div><div class="line">            <span class="comment">// any error message?</span></div><div class="line">            StreamGobbler errorGobbler = <span class="keyword">new</span> </div><div class="line">                StreamGobbler(proc.getErrorStream(), <span class="string">"ERROR"</span>);            </div><div class="line">            </div><div class="line">            <span class="comment">// any output?</span></div><div class="line">            StreamGobbler outputGobbler = <span class="keyword">new</span> </div><div class="line">                StreamGobbler(proc.getInputStream(), <span class="string">"OUTPUT"</span>, fos);</div><div class="line">                </div><div class="line">            <span class="comment">// kick them off</span></div><div class="line">            errorGobbler.start();</div><div class="line">            outputGobbler.start();</div><div class="line">                                    </div><div class="line">            <span class="comment">// any error???</span></div><div class="line">            <span class="keyword">int</span> exitVal = proc.waitFor();</div><div class="line">            System.out.println(<span class="string">"ExitValue: "</span> + exitVal);</div><div class="line">            fos.flush();</div><div class="line">            fos.close();        </div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t)</div><div class="line">          &#123;</div><div class="line">            t.printStackTrace();</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Running GoodWinRedirect produces:</p>
<pre><code>E:/classes/com/javaworld/jpitfalls/article2&gt;java GoodWinRedirect test.txt
OUTPUT&gt;&apos;Hello World&apos;
ExitValue: 0
</code></pre><p>After running <code>GoodWinRedirect</code>, test.txt does exist. The solution to the pitfall was to simply control the redirection by handling the external process’s standard output stream separately(分离) from the Runtime.exec() method. We create a separate OutputStream, read in the filename to which we redirect the output, open the file, and write the output that we receive from the spawned process’s standard output to the file. Listing 4.7 completes that task by adding a new constructor to our <code>StreamGobbler</code> class. The new constructor takes three arguments: the input stream to gobble, the type String that labels the stream we are gobbling, and the output stream to which we redirect the input. This new version of StreamGobbler does not break any of the code in which it was previously used, as we have not changed the existing public API – we only extended it.</p>
<p>Since the argument to Runtime.exec() is dependent on the operating system, the proper commands to use will vary from one OS to another. So, before finalizing arguments to Runtime.exec() and writing the code, quickly test the arguments. Listing 4.8 is a simple command-line utility that allows you to do just that.</p>
<p>Here’s a useful exercise: try to modify TestExec to redirect the standard input or standard output to a file. When executing the javac compiler on Windows 95 or Windows 98, that would solve the problem of error messages scrolling off the top of the limited command-line buffer.</p>
<p><strong>Listing 4.8</strong>  <em>TestExec.java</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="comment">// class StreamGobbler omitted for brevity</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExec</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            System.out.println(<span class="string">"USAGE: java TestExec /"</span>cmd/<span class="string">""</span>);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            String cmd = args[<span class="number">0</span>];</div><div class="line">            Runtime rt = Runtime.getRuntime();</div><div class="line">            Process proc = rt.exec(cmd);</div><div class="line">            </div><div class="line">            <span class="comment">// any error message?</span></div><div class="line">            StreamGobbler errorGobbler = <span class="keyword">new</span> </div><div class="line">                StreamGobbler(proc.getErrorStream(), <span class="string">"ERR"</span>);            </div><div class="line">            </div><div class="line">            <span class="comment">// any output?</span></div><div class="line">            StreamGobbler outputGobbler = <span class="keyword">new</span> </div><div class="line">                StreamGobbler(proc.getInputStream(), <span class="string">"OUT"</span>);</div><div class="line">                </div><div class="line">            <span class="comment">// kick them off</span></div><div class="line">            errorGobbler.start();</div><div class="line">            outputGobbler.start();</div><div class="line">                                    </div><div class="line">            <span class="comment">// any error???</span></div><div class="line">            <span class="keyword">int</span> exitVal = proc.waitFor();</div><div class="line">            System.out.println(<span class="string">"ExitValue: "</span> + exitVal);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t)</div><div class="line">          &#123;</div><div class="line">            t.printStackTrace();</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Running TestExec to launch the Netscape browser and load the Java help documentation produces:</p>
<pre><code>E:/classes/com/javaworld/jpitfalls/article2&gt;java TestExec &quot;e:/java/docs/index.html&quot;
java.io.IOException: CreateProcess: e:/java/docs/index.html error=193
        at java.lang.Win32Process.create(Native Method)
        at java.lang.Win32Process.&lt;init&gt;(Unknown Source)
        at java.lang.Runtime.execInternal(Native Method)
        at java.lang.Runtime.exec(Unknown Source)
        at java.lang.Runtime.exec(Unknown Source)
        at java.lang.Runtime.exec(Unknown Source)
        at java.lang.Runtime.exec(Unknown Source)
        at TestExec.main(TestExec.java:45)
</code></pre><p>Our first test failed with an error of 193. The Win32 error for value 193 is “not a valid Win32 application.” This error tells us that no path to an associated application (e.g., Netscape) exists, and that the process cannot run an HTML file without an associated application.</p>
<p>Therefore, we try the test again, this time giving it a full path to Netscape. (Alternately, we could add Netscape to our PATH environment variable.) A second run of TestExec produces:</p>
<pre><code>E:/classes/com/javaworld/jpitfalls/article2&gt;java TestExec 
&quot;e:/program files/netscape/program/netscape.exe e:/java/docs/index.html&quot;
ExitValue: 0
</code></pre><p>This worked! The Netscape browser launches, and it then loads the Java help documentation.</p>
<p>One additional improvement to TestExec would include a command-line switch to accept input from standard input. You would then use the Process.getOutputStream() method to pass the input to the spawned external program.</p>
<p>To sum up, follow these rules of thumb to avoid the pitfalls in Runtime.exec():</p>
<ol>
<li>You cannot obtain an exit status from an external process until it has exited</li>
<li>You must immediately handle the input, output, and error streams from your spawned external process</li>
<li>You must use Runtime.exec() to execute programs</li>
<li>You cannot use Runtime.exec() like a command line</li>
</ol>
<h4 id="Correction-to-Pitfall-3"><a href="#Correction-to-Pitfall-3" class="headerlink" title="Correction to Pitfall 3"></a>Correction to Pitfall 3</h4><p>In the discussion of Pitfall 3 (“Don’t mix floats and doubles when generating text or XML messages”) in my last column, I incorrectly stated that the different string representation of a decimal number after casting it from a float to a double was a bug. While this is a pitfall, its cause is not a bug, but the fact that the decimal numbers in question – 100.28 and 91.09 – do not represent precisely in binary.</p>
<p>The combination of forgetting my numerical methods class, the numerous bug reports on the bug parade, and the automatic rounding of floats and doubles when printing (but not after casting a float to a double) threw me. I apologize for confusing anyone who read the article, especially to new Java programmers. I present two better solutions to the problem:</p>
<p>The first possible solution is to always specify the desired rounding explicitly with <code>NumberFormat</code>. In my case, I use the float and double to represent dollars and cents; therefore, I need only two significant digits. Listing C3.1 demonstrates how to use the <code>NumberFormat</code> class to specify a maximum of two fraction digits.</p>
<p><strong>Listing C3.1</strong>  <em>FormatNumbers.java</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormatNumbers</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            NumberFormat fmt = NumberFormat.getInstance();</div><div class="line">            fmt.setMaximumFractionDigits(<span class="number">2</span>);</div><div class="line">            <span class="keyword">float</span> f = <span class="number">100.28f</span>;</div><div class="line">            System.out.println(<span class="string">"As a float        : "</span> + f);</div><div class="line">            <span class="keyword">double</span> d = f;</div><div class="line">            System.out.println(<span class="string">"Cast to a double  : "</span> + d);</div><div class="line">            System.out.println(<span class="string">"Using NumberFormat: "</span> + fmt.format(d));            </div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t)</div><div class="line">          &#123;</div><div class="line">            t.printStackTrace();</div><div class="line">          &#125;          </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>When we run the FormatNumbers program, it produces:</p>
<pre><code>E:/classes/com/javaworld/jpitfalls/article2&gt;java FormatNumbers
As a float        : 100.28
Cast to a double  : 100.27999877929688
Using NumberFormat: 100.28
</code></pre><p>As you can see – regardless of whether we cast the float to a double – when we specify the number of digits we want, it properly rounds to that precision – even if the number is infinitely repeating in binary. To circumvent this pitfall, control the formatting of your doubles and floats when converting to a String.</p>
<p>A second, simpler solution would be to not use a float to represent cents. Integers (number of pennies) can represent cents, with a legal range of 0 to 99. You can check the range in the mutator method.</p>
<hr>
<p>参考链接：<a href="http://kingj.iteye.com/blog/1420586" target="_blank" rel="external">方案一</a>，<a href="http://blog.csdn.net/aerchi/article/details/7653372" target="_blank" rel="external">方案二</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android操作Excel文件]]></title>
      <url>http://dalufan.com/2015/01/16/android-excel/</url>
      <content type="html"><![CDATA[<h3 id="jxl的使用"><a href="#jxl的使用" class="headerlink" title="jxl的使用"></a>jxl的使用</h3><p><a href="/article_files/jxl.jar">jxl包下载</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadExcel</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">    <span class="comment">/** Called when the activity is first created. */</span>  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.main);  </div><div class="line">        <span class="comment">// createExcel();  </span></div><div class="line">        <span class="comment">// readExcel();  </span></div><div class="line">        writeExcel(<span class="string">"mnt/sdcard/test.xls"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExcel</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">  </div><div class="line">            <span class="comment">/** </span></div><div class="line">             * 后续考虑问题,比如Excel里面的图片以及其他数据类型的读取 </div><div class="line">             **/  </div><div class="line">            InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"mnt/sdcard/test.xls"</span>);  </div><div class="line">  </div><div class="line">            Workbook book = Workbook  </div><div class="line">                    .getWorkbook(<span class="keyword">new</span> File(<span class="string">"mnt/sdcard/test.xls"</span>));  </div><div class="line">            book.getNumberOfSheets();  </div><div class="line">            <span class="comment">// 获得第一个工作表对象  </span></div><div class="line">            Sheet sheet = book.getSheet(<span class="number">0</span>);  </div><div class="line">            <span class="keyword">int</span> Rows = sheet.getRows();  </div><div class="line">            <span class="keyword">int</span> Cols = sheet.getColumns();  </div><div class="line">            System.out.println(<span class="string">"当前工作表的名字:"</span> + sheet.getName());  </div><div class="line">            System.out.println(<span class="string">"总行数:"</span> + Rows);  </div><div class="line">            System.out.println(<span class="string">"总列数:"</span> + Cols);  </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Cols; ++i) &#123;  </div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Rows; ++j) &#123;  </div><div class="line">                    <span class="comment">// getCell(Col,Row)获得单元格的值  </span></div><div class="line">                    System.out  </div><div class="line">                            .print((sheet.getCell(i, j)).getContents() + <span class="string">"\t"</span>);  </div><div class="line">                &#125;  </div><div class="line">                System.out.print(<span class="string">"\n"</span>);  </div><div class="line">            &#125;  </div><div class="line">            <span class="comment">// 得到第一列第一行的单元格  </span></div><div class="line">            Cell cell1 = sheet.getCell(<span class="number">0</span>, <span class="number">0</span>);  </div><div class="line">            String result = cell1.getContents();  </div><div class="line">            System.out.println(result);  </div><div class="line">            book.close();  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">            System.out.println(e);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExcel</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            <span class="comment">// 创建或打开Excel文件  </span></div><div class="line">            WritableWorkbook book = Workbook.createWorkbook(<span class="keyword">new</span> File(  </div><div class="line">                    <span class="string">"mnt/sdcard/test.xls"</span>));  </div><div class="line">  </div><div class="line">            <span class="comment">// 生成名为“第一页”的工作表,参数0表示这是第一页  </span></div><div class="line">            WritableSheet sheet1 = book.createSheet(<span class="string">"第一页"</span>, <span class="number">0</span>);  </div><div class="line">            WritableSheet sheet2 = book.createSheet(<span class="string">"第三页"</span>, <span class="number">2</span>);  </div><div class="line">  </div><div class="line">            <span class="comment">// 在Label对象的构造函数中,元格位置是第一列第一行(0,0)以及单元格内容为test  </span></div><div class="line">            Label label = <span class="keyword">new</span> Label(<span class="number">0</span>, <span class="number">0</span>, <span class="string">"test"</span>);  </div><div class="line">  </div><div class="line">            <span class="comment">// 将定义好的单元格添加到工作表中  </span></div><div class="line">            sheet1.addCell(label);  </div><div class="line">  </div><div class="line">            <span class="comment">/* </span></div><div class="line">             * 生成一个保存数字的单元格.必须使用Number的完整包路径,否则有语法歧义 </div><div class="line">             */  </div><div class="line">            jxl.write.Number number = <span class="keyword">new</span> jxl.write.Number(<span class="number">1</span>, <span class="number">0</span>, <span class="number">555.12541</span>);  </div><div class="line">            sheet2.addCell(number);  </div><div class="line">  </div><div class="line">            <span class="comment">// 写入数据并关闭文件  </span></div><div class="line">            book.write();  </div><div class="line">            book.close();  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">            System.out.println(e);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * jxl暂时不提供修改已经存在的数据表,这里通过一个小办法来达到这个目的,不适合大型数据更新! 这里是通过覆盖原文件来更新的. </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@param</span> filePath </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateExcel</span><span class="params">(String filePath)</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            Workbook rwb = Workbook.getWorkbook(<span class="keyword">new</span> File(filePath));  </div><div class="line">            WritableWorkbook wwb = Workbook.createWorkbook(<span class="keyword">new</span> File(  </div><div class="line">                    <span class="string">"d:/new.xls"</span>), rwb);<span class="comment">// copy  </span></div><div class="line">            WritableSheet ws = wwb.getSheet(<span class="number">0</span>);  </div><div class="line">            WritableCell wc = ws.getWritableCell(<span class="number">0</span>, <span class="number">0</span>);  </div><div class="line">            <span class="comment">// 判断单元格的类型,做出相应的转换  </span></div><div class="line">            Label label = (Label) wc;  </div><div class="line">            label.setString(<span class="string">"The value has been modified"</span>);  </div><div class="line">            wwb.write();  </div><div class="line">            wwb.close();  </div><div class="line">            rwb.close();  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeExcel</span><span class="params">(String filePath)</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            <span class="comment">// 创建工作薄  </span></div><div class="line">            WritableWorkbook wwb = Workbook.createWorkbook(<span class="keyword">new</span> File(filePath));  </div><div class="line">            <span class="comment">// 创建工作表  </span></div><div class="line">            WritableSheet ws = wwb.createSheet(<span class="string">"Sheet1"</span>, <span class="number">0</span>);  </div><div class="line">            <span class="comment">// 添加标签文本  </span></div><div class="line">            <span class="comment">// Random rnd = new Random((new Date()).getTime());  </span></div><div class="line">            <span class="comment">// int forNumber = rnd.nextInt(100);  </span></div><div class="line">            <span class="comment">// Label label = new Label(0, 0, "test");  </span></div><div class="line">            <span class="comment">// for (int i = 0; i &lt; 3; i++) &#123;  </span></div><div class="line">            <span class="comment">// ws.addCell(label);  </span></div><div class="line">            <span class="comment">// ws.addCell(new jxl.write.Number(rnd.nextInt(50), rnd  </span></div><div class="line">            <span class="comment">// .nextInt(50), rnd.nextInt(1000)));  </span></div><div class="line">            <span class="comment">// &#125;  </span></div><div class="line">            <span class="comment">// 添加图片(注意此处jxl暂时只支持png格式的图片)  </span></div><div class="line">            <span class="comment">// 0,1分别代表x,y 2,5代表宽和高占的单元格数  </span></div><div class="line">            ws.addImage(<span class="keyword">new</span> WritableImage(<span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="keyword">new</span> File(  </div><div class="line">                    <span class="string">"mnt/sdcard/nb.png"</span>)));  </div><div class="line">            wwb.write();  </div><div class="line">            wwb.close();  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">            System.out.println(e.toString());  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>附录：android操作excel代码<a href="/article_files/androidExcelReader.zip">下载</a></p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/zhy_cheng/article/details/10286563" target="_blank" rel="external">方案一</a>，<a href="http://www.cnblogs.com/foura/articles/2016755.html" target="_blank" rel="external">方案二</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Smail语法]]></title>
      <url>http://dalufan.com/2015/01/14/android-Smail-learn/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Dalvik字节码Dalvik是google专门为android操作系统设计的一个虚拟机，经过深度的优化。虽然android上的程序是使用java来开发的，但是Dalvik和标准的java虚拟机JVM还是两回事。Dalvik VM是基于寄存器的，而JVM是基于栈的；Dalvik有专属的文件执行格式dex（dalvik executable），而JVM则执行的是java字节码。Dalvik VM比JVM速度更快，占用空间更少。</p>
<p>通过Dalvik的字节码我们不能直接看到原来的逻辑代码，这时需要借助如Apktool或dex2jar+jd-gui工具来帮助查看。但是，注意的是最终我们修改APK需要操作的文件是.smali文件，而不是导出来的Java文件重新编译（况且这基本上不可能）。</p>
<a id="more"></a> 
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.class public Lcom/disney/WMW/WMWActivity; </div><div class="line">.super Lcom/disney/common/BaseActivity;</div><div class="line">.source "WMWActivity.java"</div><div class="line"></div><div class="line"># interfaces</div><div class="line">.implements Lcom/burstly/lib/ui/IBurstlyAdListener;</div><div class="line"></div><div class="line"># annotations</div><div class="line">.annotation system Ldalvik/annotation/MemberClasses;</div><div class="line">    value = &#123;</div><div class="line">    Lcom/disney/WMW/WMWActivity$MessageHandler;,</div><div class="line">    Lcom/disney/WMW/WMWActivity$FinishActivityArgs;</div><div class="line">    &#125;</div><div class="line">.end annotation</div></pre></td></tr></table></figure>
<p>1-3行定义的是基本信息：这是一个由WMWActivity.java编译得到的smali文件（第3行），它是com.disney.WMW这个package下的一个类（第1行），继承自com.disney.common.BaseActivity（第2行）。      5-6行定义的是接口信息：这个WMWActivity实现了一个com.burstly.lib.ui这个package下（一个广告SDK）的IBurstyAdListener接口。<br>8-14行定义的则是内部类：它有两个成员内部类——MessageHandler和FinishActivityArgs，内部类将在后面小节中会有提及。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WMWActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">IBurstlyAdListener</span></span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MessageHandler</span> </span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FinishActivityArgs</span></span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="一-数据类型"><a href="#一-数据类型" class="headerlink" title="一. 数据类型"></a>一. 数据类型</h3><h4 id="原始类型："><a href="#原始类型：" class="headerlink" title="原始类型："></a>原始类型：</h4><pre><code>V   void，只能用于返回值类型
Z 　boolean
B   byte
S   short
C   char
I   int
J   long（64位）
F   float
D   double(64位)
</code></pre><h4 id="引用类型："><a href="#引用类型：" class="headerlink" title="引用类型："></a>引用类型：</h4><pre><code>对象 和 数组
</code></pre><p>对象:<code>L + 包名.对象</code></p>
<p>对象的表示则以L作为开头，格式是<code>LpackageName/objectName;</code>（注意<code>必须有个分号</code>跟在最后），例如String对象在smali中为：<code>Ljava/lang/String;</code>，其中java/lang对应java.lang包，String就是定义在该包中的一个对象。</p>
<p>数组：<code>[ + 数据类型</code></p>
<p>数组的表示方式是：在基本类型前加上前中括号“[”，例如int数组和float数组分别表示为：[I、[F,<br><code>[I</code>表示一个整型一维数组，相当于java中的int[]。  对于多维数组，只要增加[就行了。<code>[[I</code>相当于<code>int[][]</code>，[[[I相当于int[][][]。注意每一维的最多<code>255</code>个对象数组的表示：[Ljava/lang/String;表示一个String对象数组。</p>
<h3 id="二-方法"><a href="#二-方法" class="headerlink" title="二. 方法"></a>二. 方法</h3><h4 id="方法定义："><a href="#方法定义：" class="headerlink" title="方法定义："></a>方法定义：</h4><p>表示形式：<code>Lpackage/name/ObjectName;-&gt;MethodName(III)Z</code></p>
<ul>
<li>Lpackage/name/ObjectName;表示类型，</li>
<li>MethodName是方法名。</li>
<li>III为参数（在此是3个整型参数），</li>
<li>Z是返回类型（bool型）。</li>
</ul>
<p>方法的参数是一个接一个的，中间没有隔开。一个更复杂的例子：</p>
<pre><code>method(I[[IILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
</code></pre><p>在java中则为：<code>String method(int, int[][], int, String, Object[])</code></p>
<h4 id="内部类："><a href="#内部类：" class="headerlink" title="内部类："></a>内部类：</h4><p>既然类是用LpackageName/objectName;来表示，那类里面的内部类又如何在smali中引用呢？答案是：LpackageName/objectName$subObjectName;。也就是在内部类前加“<code>$</code>”符号</p>
<h4 id="字段："><a href="#字段：" class="headerlink" title="字段："></a>字段：</h4><p>表示形式： Lpackage/name/ObjectName;-&gt;FieldName:Ljava/lang/String;  即包名，字段名和各字段类型。</p>
<h4 id="标记说明："><a href="#标记说明：" class="headerlink" title="标记说明："></a>标记说明：</h4><pre><code># static fields             定义静态变量的标记
# instance fields        定义实例变量的标记
</code></pre><p>一般来说，获取的指令有：iget、sget、iget-boolean、sget-boolean、iget-object、sget-object等，操作的指令有：iput、sput、iput-boolean、sput-boolean、iput-object、sput-object等。没有“-object”后缀的表示操作的成员变量对象是基本数据类型，带“-object”表示操作的成员变量是对象类型，特别地，boolean类型则使用带“-boolean”的指令操作。构造函数的返回类型为V，名字为<init>。</init></p>
<pre><code>sget-object v0, Lcom/disney/WMW/WMWActivity;-&gt;PREFS_INSTALLATION_ID:Ljava/lang/String;
</code></pre><p>sget-object就是用来获取变量值并保存到紧接着的参数的寄存器中，在这里，把上面出现的PREFS_INSTALLATION_ID这个String成员变量获取并放到v0这个寄存器中，<code>注意：前面需要该变量所属的类的类型，后面需要加一个冒号和该成员变量的类型</code>，中间是“<code>-&gt;</code>”表示所属关系。</p>
<p>获取instance fields的指令与static fields的基本一样，只是由于不是static变量，<code>不能仅仅指出该变量所在类的类型，还需要该变量所在类的实例</code>。看例子：</p>
<pre><code>iget-object v0, p0, Lcom/disney/WMW/WMWActivity;-&gt;_view:Lcom/disney/common/WMWView;
</code></pre><p>可以看到iget-object指令比sget-object多了一个参数，就是该变量所在类的实例，在这里就是p0即“this”。</p>
<p>获取array的还有aget和aget-object，指令使用和上述类似，不细述。</p>
<p>put指令的使用和get指令是统一的，直接看例子不解释：</p>
<pre><code>const/4 v3, 0x0
sput-object v3, Lcom/disney/WMW/WMWActivity;-&gt;globalIapHandler:Lcom/disney/config/GlobalPurchaseHandler;
</code></pre><p>相当于：this.globalIapHandler = null;（null = 0x0）</p>
<pre><code># direct methods       定义静态方法的标记
# virtual methods      定义非静态方法的标记
</code></pre><p>直白地讲，direct method就是private函数，其余的public和protected函数都属于virtual method。所以在调用函数时，有invoke-direct，invoke-virtual，另外还有invoke-static、invoke-super以及invoke-interface等几种不同的指令。当然其实还有invoke-XXX/range 指令的，这是参数多于4个的时候调用的指令，比较少见，了解下即可。</p>
<p><code>invoke-static</code>：顾名思义就是调用static函数的，因为是static函数，所以比起其他调用少一个参数，例如：</p>
<pre><code>invoke-static {}, Lcom/disney/WMW/UnlockHelper;-&gt;unlockCrankypack()Z
</code></pre><p>这里注意到invoke-static后面有一对大括号“{}”，其实是调用该方法的实例+参数列表，由于这个方法既不需参数也是static的，所以{}内为空.</p>
<p><code>invoke-super</code>：调用父类方法用的指令，在onCreate、onDestroy等方法都能看到，略。</p>
<p><code>invoke-direct</code>：调用private函数的，例如：</p>
<pre><code>invoke-direct {p0}, Lcom/disney/WMW/WMWActivity;-&gt;getGlobalIapHandler()Lcom/disney/config/GlobalPurchaseHandler;
</code></pre><p>这里GlobalPurchaseHandler getGlobalIapHandler()就是定义在WMWActivity中的一个private函数，如果修改smali时错用invoke-virtual或invoke-static将在回编译后程序运行时引发一个常见的VerifyError.</p>
<p><code>invoke-virtual</code>：用于调用protected或public函数，同样注意修改smali时不要错用invoke-direct或invoke-static，例子：</p>
<pre><code>sget-object v0, Lcom/disney/WMW/WMWActivity;-&gt;shareHandler:Landroid/os/Handler;
invoke-virtual {v0, v3}, Landroid/os/Handler;-&gt;removeCallbacksAndMessages(Ljava/lang/Object;)V
</code></pre><p>这里相信大家都已经明白了，主要搞清楚v0是shareHandlerandroid/os/Handler，v3是传递给removeCallbackAndMessage方法的Ljava/lang/Object参数就可以了。</p>
<h4 id="语法：If语句"><a href="#语法：If语句" class="headerlink" title="语法：If语句"></a>语法：If语句</h4><pre><code>if-eq p1, v0, :cond_8 表示如果p1和v0相等，则执行cond_8的流程：
    :cond_8
    invoke-direct {p0}, Lcom/paul/test/a;-&gt;d()V
</code></pre><p>调用com.paul.test.a的d()方法</p>
<pre><code>if-ne p1, v0, :cond_b 表示不相等则执行cond_b的流程：
    :cond_b
    const/4 v0, 0x0
    invoke-virtual {p0, v0}, Lcom/paul/test/a;-&gt;setPressed(Z)V
    invoke-super {p0, p1, p2}, Landroid/view/View;-&gt;onKeyUp(ILandroid/view/KeyEvent;)Z
    move-result v0
</code></pre><p>大概意思就是调用com.paul.test.a的setPressed方法，然后再调用父类View的onKeyUp方法，最后 return v0</p>
<h3 id="三-寄存器（重点）"><a href="#三-寄存器（重点）" class="headerlink" title="三. 寄存器（重点）"></a>三. 寄存器（重点）</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>在dalvik字节码中，寄存器都是32位的，能够支持任何类型。64位类型（Long和Double型）用2个寄存器表示。有两种方式指定一个方法中有多少寄存器是可用的。<code>registers</code>指令指定了方法中寄存器的总数。 [注意：一个方法内，不允许超过15个；如果超过15个，需要做特殊处理，处理方法找google大神，度娘],<code>locals</code>指令表明了方法中非参寄存器的数量。</p>
<h4 id="命名方式"><a href="#命名方式" class="headerlink" title="命名方式"></a>命名方式</h4><p>在smali里的所有操作都必须经过寄存器来进行：<code>本地寄存器</code>用v开头数字结尾的符号来表示，如v0、v1、v2、…<code>参数寄存器</code>则使用p开头数字结尾的符号来表示，如p0、p1、p2、…特别注意的是，p0不一定是函数中的第一个参数，在非static函数中，p0代指“this”，p1表示函数的第一个参数，p2代表函数中的第二个参数…而在static函数中p0才对应第一个参数（因为Java的static方法中没有this方法）。本地寄存器没有限制，理论上是可以任意使用的。</p>
<pre><code>const/4 v0, 0x0
iput-boolean v0, p0, Lcom/disney/WMW/WMWActivity;-&gt;isRunning:Z
</code></pre><p>在上面的两句中，使用了v0本地寄存器，并把值0x0存到v0中，然后第二句用iput-boolean这个指令把v0中的值存放到com.disney.WMW.WMWActivity.isRunning这个成员变量中。即相当于：this.isRunning = false;（上面说过，<code>在非static函数中p0代表的是“this”</code>，在这里就是com.disney.WMW.WMWActivity实例）。</p>
<p><strong>Long/Double值</strong>:Long和double类型是64位的，需要2个寄存器（切记切记）。<br>例如，对于非静态方法LMyObject;-&gt;MyMethod(IJZ)V，参数分别是LMyObject;，int，long，boolean。故该方法需要5个寄存器来存储参数。</p>
<pre><code>p0  this
p1  I
p2,p3   J
p4  Z
</code></pre><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>1.If语句 </p>
<pre><code>if-nez v0,:cond_0    如果结果不为0，就跳转到cond_0标号处
if-eqz v0,:cond_1    如果结果为0，就跳转到cond_1标号处    
</code></pre><p>2.数据操作指令</p>
<pre><code>move v0,v1    将v1的值赋给v0 ，两个寄存器都为4位

move-result v0    将上一个invoke类型指令操作的单字非对象结果赋给v0
move-result-object v0    将上一个invoke类型指令操作的对象结果（返回值）赋给v0    
</code></pre><p>3.返回指令</p>
<pre><code>return-void
return v0
return-object v0    
</code></pre><p>4.实例操作指令</p>
<pre><code>check-cast v1, Landroid/widget/TextView;  将v1寄存器中的对象引用转化成指定的类型（这里是 TextView）
new-instance v1, Ljava/lang/StringBuilder; 构造一个指定类型对象的新实例    
</code></pre><p>5.数组操作指令</p>
<pre><code>new-array v0,v0,[I  构造Int类型，大小是v0的数组，并将值赋给v0寄存器
array-length v1,v0  获取v0数组的长度且将值赋给v1    
</code></pre><p>6.异常指令</p>
<pre><code>throw vAA 抛出vAA寄存器中指定类型的异常    
</code></pre><p>7.跳转指令</p>
<pre><code>1,goto :goto_0  偏移量goto_0不能为0 
2,If语句
3,switch    
    packed-switch v0, :pswitch_data_0  v0是switch需要判断的值     :pswitch_data_0 偏移表，表中值是有规律递增的。
    sparse-switch v0, :pswitch_data_0  偏移表中值是无规律的。
</code></pre><p>8,比较指令</p>
<pre><code>cmpl-float v0,v2,v3     比较v2和v3，如果v2&gt;v3，v0=-1；反之，v0=1；相等，v0=0
cmpg-float v0,v2,v3  比较v2和v3，如果v2&gt;v3，v0=1；反之，v0=-1；相等，v0=0
cmpl-double v0,v2,v3  同理
cmpg-double v0,v2,v3  同理
cmp-long v0,v2,v3    比较v2和v3，如果v2&gt;v3，v0=1；反之，v0=-1；相等，v0=0
</code></pre><p>在Java代码中调用函数和返回函数结果是一条语句完成的，而在smali里则需要分开来完成，在使用上述指令后，如果调用的函数返回非void，那么还需要用到move-result（返回基本数据类型）和move-result-object（返回对象）指令：</p>
<pre><code>const/4 v2, 0x0
invoke-virtual {p0, v2}, Lcom/disney/WMW/WMWActivity;-&gt;getPreferences(I)Landroid/content/SharedPreferences;
move-result-object v1
</code></pre><p>v1保存的就是调用getPreferences(int)方法返回的SharedPreferences实例。</p>
<pre><code>invoke-virtual {v2}, Ljava/lang/String;-&gt;length()I
move-result v2
</code></pre><p>v2保存的则是调用String.length()返回的整型。</p>
<h4 id="smali中函数实体分析"><a href="#smali中函数实体分析" class="headerlink" title="smali中函数实体分析"></a>smali中函数实体分析</h4><p>下面开始介绍函数实体，其实没有什么特别的地方，只是在植入代码时有一点需要特别注意，举例说明：</p>
<pre><code>.method protected onDestroy()V     
.locals 0     

.prologue     
.line 277     
invoke-super {p0}, Lcom/disney/common/BaseActivity;-&gt;onDestroy()V     

.line 279     
return-void     
.end method
</code></pre><p>这是onDestroy()函数，它的作用大家都知道。首先看到函数内第一句：.locals 0，这句话很重要，标明了你在这个函数中最少要用到的本地寄存器的个数。在这里，由于只需要调用一个父类的onDestroy()处理，所以只需要用到p0，所以使用到的本地寄存器数为0。如果不清楚这个规则，很容易在植入代码后忘记修改.local 的值，那么回编译后运行时将会得到一个VerifyError错误，而且极难发现问题所在。例如往onDestroy()增加一句：this.existed = true;那么应该改为（注意修改.local的值为1——使用到了v0这一个本地寄存器）：</p>
<pre><code>.method protected onDestroy()V
.locals 1
.prologue
.line 277
const/4 v0, 0x1
iput-boolean v0, p0, Lcom/disney/WMW/WMWActivity;-&gt;exited:Z
invoke-super {p0}, Lcom/disney/common/BaseActivity;-&gt;onDestroy()V
.line 279
return-void
.end method
</code></pre><p>.line 这个标识，它是标注了该代码在原Java文件中的行数，它也很有用，想想使用IDE开发时，遇到错误崩溃时，在catLog不是有提示哪个文件哪一行崩溃的么？Dalvik VM运行到.line XX时就将这个值存起来，如果在这一行运行时出错了，就往catLog输出这个值，这样我们就能看到具体是哪一行的问题了。jd-gui这个工具也是通过分析这些信息将smali代码还原成我们喜闻乐见的Java代码的。当然，它不是必须的，去掉也没有关系，只不过为了方便调试还是保留一下吧。<br>以上一些smali语法规则可以点击参照<br><a href="http://code.google.com/p/smali/wiki/TypesMethodsAndFields" target="_blank" rel="external">http://code.google.com/p/smali/wiki/TypesMethodsAndFields</a></p>
<pre><code>.class public LHelloWorld;
#Ye olde hello world application
#To assemble and run this on a phone or emulator:
#s
#java -jar smali.jar -o classes.dex HelloWorld.smali
#zip HelloWorld.zip classes.dex
#adb push HelloWorld.zip /data/local
#adb shell dalvikvm -cp /data/local/HelloWorld.zip HelloWorld
#
#if you get out of memory type errors when running smali.jar, try
#java -Xmx512m -jar smali.jar HelloWorld.smali
#instead
.super Ljava/lang/Object;
.method public static main([Ljava/lang/String;)V
    .registers 2
    sget-object v0, Ljava/lang/System;-&gt;out:Ljava/io/PrintStream;
    const-string    v1, &quot;Hello World!&quot;
    invoke-virtual {v0, v1}, Ljava/io/PrintStream;-&gt;println(Ljava/lang/String;)V
    return-void
.end method
</code></pre><hr>
<p>参考链接：<a href="http://www.blogjava.net/midea0978/archive/2012/01/04/367847.html" target="_blank" rel="external">官方语法链接</a>,<a href="http://www.cnblogs.com/codeAnimal/p/4053858.html" target="_blank" rel="external">语法</a>,<a href="http://blog.csdn.net/beijingshi1/article/details/39400981" target="_blank" rel="external">详解</a>,<a href="http://blog.csdn.net/banketree/article/details/10919297" target="_blank" rel="external">静态分析</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中ContentObserver类详解]]></title>
      <url>http://dalufan.com/2015/01/12/android-ContentObserver-learn/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>ContentObserver</code>——内容观察者，目的是观察(捕捉)特定Uri引起的数据库的变化，继而做一些相应的处理，它类似于数据库技术中的触发器(Trigger)，当ContentObserver所观察的Uri发生变化时，便会触发它。触发器分为表触发器、行触发器，</p>
<p>相应地ContentObserver也分为“表“ContentObserver、“行”ContentObserver，当然这是与它所监听的Uri MIME Type有关的。</p>
<p>熟悉Content Provider(内容提供者)的应该知道，我们可以通过UriMatcher类注册不同类型的Uri，我们可以通过这些不同的Uri来查询不同的结果。根据Uri返回的结果，Uri Type可以分为：返回多条数据的Uri、返回单条数据的Uri。</p>
<a id="more"></a> 
<h3 id="注册-取消注册："><a href="#注册-取消注册：" class="headerlink" title="注册/取消注册："></a>注册/取消注册：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">     * 功能：为指定的Uri注册一个ContentObserver派生类实例，当给定的Uri发生改变时，回调该实例对象去处理。 参数：uri</div><div class="line">     * 需要观察的Uri(需要在UriMatcher里注册，否则该Uri也没有意义了)</div><div class="line">     * </div><div class="line">     * notifyForDescendents 为false 表示精确匹配，即只匹配该Uri,为true 表示可以同时匹配其派生的Uri，举例如下：</div><div class="line">     * </div><div class="line">     * 假设UriMatcher 里注册的Uri共有一下类型： 1 、content://com.qin.cb/student (学生) 2</div><div class="line">     * 、content://com.qin.cb/student/# 3、</div><div class="line">     * content://com.qin.cb/student/schoolchild(小学生，派生的Uri)</div><div class="line">     * </div><div class="line">     * 假设我们当前需要观察的Uri为content://com.qin.cb/student，如果发生数据变化的 Uri 为</div><div class="line">     * content://com.qin.cb/student/schoolchild ，当notifyForDescendents为</div><div class="line">     * false，那么该ContentObserver会监听不到， 但是当notifyForDescendents</div><div class="line">     * 为ture，能捕捉该Uri的数据库变化。</div><div class="line">     * </div><div class="line">     * observer ContentObserver的派生类实例</div><div class="line">     */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span>  <span class="title">registerContentObserver</span><span class="params">(Uri uri, <span class="keyword">boolean</span> notifyForDescendents, ContentObserver observer)</span></span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*功能：取消对给定Uri的观察</div><div class="line">*参数： observer ContentObserver的派生类实例</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span>  <span class="title">unregisterContentObserver</span><span class="params">(ContentObserver observer)</span></span></div></pre></td></tr></table></figure>
<h3 id="ContentObserver类介绍"><a href="#ContentObserver类介绍" class="headerlink" title="ContentObserver类介绍"></a>ContentObserver类介绍</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*构造方法</div><div class="line">*说明：所有   ContentObserver的派生类都需要调用该构造方法</div><div class="line">*</div><div class="line">*参数：　handler　 Handler对象。可以是主线程Handler(这时候可以更新UI 了)，也可以是任何Handler对象。 </div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ContentObserver</span><span class="params">(Handler handler)</span>       </span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">*常用方法</div><div class="line">*功能：当观察到的Uri发生变化时，回调该方法去处理。所有ContentObserver的派生类都需要重载该方法去处理逻辑。</div><div class="line">*</div><div class="line">*参数：selfChange　回调后，其值一般为false，该参数意义不大(我也不懂，理解方法最重要)。               </div><div class="line">*/</div><div class="line"><span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange)</span></div></pre></td></tr></table></figure>
<h3 id="观察特定Uri的步骤如下："><a href="#观察特定Uri的步骤如下：" class="headerlink" title="观察特定Uri的步骤如下："></a>观察特定Uri的步骤如下：</h3><p>1、创建我们特定的ContentObserver派生类，必须重载父类构造方法，必须重载onChange()方法去处理回调后的功能实现</p>
<p>2、利用<code>context.getContentResolover()</code>获得ContentResolove对象，接着调用<code>registerContentObserver()</code>方法去注册内容观察者</p>
<p>3、由于ContentObserver的生命周期不同步于Activity和Service等，因此，在不需要时，需要手动的调用<code>unregisterContentObserver()</code>去取消注册。    </p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>Demo中共有两个不同的ContentObserver派生类，如下：<br>1、用来观察系统是否改变了飞行模式状态，<br>PS： 大家可以去SDK中查看该类：android.provider.Settings.System。该类封装了对设置模块下所有值的存取，比如：飞行模式状态、蓝牙状态、屏幕亮度值等，并且提供了相应的Uri。</p>
<p>2、观察系统的短信息数据发生了变化。当监听到短信数据发生变化时，查询所有已发送的短信并且显示出来。</p>
<p>短信的Uri共有一下几种：</p>
<pre><code>content://sms/inbox     收件箱         
content://sms/sent        已发送 
content://sms/draft        草稿           
content://sms/outbox    发件箱           (正在发送的信息)
content://sms/failed      发送失败     
content://sms/queued  待发送列表  (比如开启飞行模式后，该短信就在待发送列表里)
</code></pre><p>1、 观察飞行模式状态的ContentObserver派生类，<code>AirplaneContentObserver.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.database.ContentObserver;  </div><div class="line"><span class="keyword">import</span> android.net.Uri;  </div><div class="line"><span class="keyword">import</span> android.os.Handler;  </div><div class="line"><span class="keyword">import</span> android.provider.*;  </div><div class="line"><span class="keyword">import</span> android.provider.Settings.SettingNotFoundException;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="comment">//用来观察system表里飞行模式所在行是否发生变化 ， “行”内容观察者  </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirplaneContentObserver</span> <span class="keyword">extends</span> <span class="title">ContentObserver</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String TAG = <span class="string">"AirplaneContentObserver"</span> ;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MSG_AIRPLANE = <span class="number">1</span> ;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> Context mContext;      </div><div class="line">    <span class="keyword">private</span> Handler mHandler ;  <span class="comment">//此Handler用来更新UI线程  </span></div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AirplaneContentObserver</span><span class="params">(Context context, Handler handler)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>(handler);  </div><div class="line">        mContext = context;  </div><div class="line">        mHandler = handler ;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 当所监听的Uri发生改变时，就会回调此方法 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@param</span> selfChange 此值意义不大 一般情况下该回调值false </div><div class="line">     */  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange)</span> </span>&#123;  </div><div class="line">        Log.i(TAG, <span class="string">"-------------the airplane mode has changed-------------"</span>);  </div><div class="line">          </div><div class="line">        <span class="comment">// 系统是否处于飞行模式下  </span></div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            <span class="keyword">int</span> isAirplaneOpen = Settings.System.getInt(mContext.getContentResolver(), Settings.System.AIRPLANE_MODE_ON);  </div><div class="line">            Log.i(TAG, <span class="string">" isAirplaneOpen -----&gt; "</span> +isAirplaneOpen) ;  </div><div class="line">            mHandler.obtainMessage(MSG_AIRPLANE,isAirplaneOpen).sendToTarget() ;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">catch</span> (SettingNotFoundException e) &#123;  </div><div class="line">            <span class="comment">// TODO Auto-generated catch block  </span></div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、观察系统里短消息的数据库变化的ContentObserver派生类，<code>SMSContentObserver.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.database.ContentObserver;  </div><div class="line"><span class="keyword">import</span> android.database.Cursor;  </div><div class="line"><span class="keyword">import</span> android.net.Uri;  </div><div class="line"><span class="keyword">import</span> android.os.Handler;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="comment">//用来观察系统里短消息的数据库变化  ”表“内容观察者,只要信息数据库发生变化，都会触发该ContentObserver 派生类  </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSContentObserver</span> <span class="keyword">extends</span> <span class="title">ContentObserver</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String TAG = <span class="string">"SMSContentObserver"</span>;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> MSG_OUTBOXCONTENT = <span class="number">2</span> ;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> Context mContext  ;  </div><div class="line">    <span class="keyword">private</span> Handler mHandler ;   <span class="comment">//更新UI线程  </span></div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SMSContentObserver</span><span class="params">(Context context,Handler handler)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>(handler);  </div><div class="line">        mContext = context ;  </div><div class="line">        mHandler = handler ;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 当所监听的Uri发生改变时，就会回调此方法 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@param</span> selfChange  此值意义不大 一般情况下该回调值false </div><div class="line">     */  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange)</span></span>&#123;  </div><div class="line">        Log.i(TAG, <span class="string">"the sms table has changed"</span>);  </div><div class="line">          </div><div class="line">        <span class="comment">//查询发件箱里的内容       </span></div><div class="line">        Uri outSMSUri = Uri.parse(<span class="string">"content://sms/sent"</span>) ;  </div><div class="line">          </div><div class="line">        Cursor c = mContext.getContentResolver().query(outSMSUri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,<span class="string">"date desc"</span>);  </div><div class="line">        <span class="keyword">if</span>(c != <span class="keyword">null</span>)&#123;  </div><div class="line">              </div><div class="line">            Log.i(TAG, <span class="string">"the number of send is"</span>+c.getCount()) ;  </div><div class="line">              </div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder() ;  </div><div class="line">            <span class="comment">//循环遍历  </span></div><div class="line">            <span class="keyword">while</span>(c.moveToNext())&#123;  </div><div class="line"><span class="comment">//              sb.append("发件人手机号码: "+c.getInt(c.getColumnIndex("address")))  </span></div><div class="line"><span class="comment">//                .append("信息内容: "+c.getInt(c.getColumnIndex("body")))  </span></div><div class="line"><span class="comment">//                .append("是否查看: "+c.getInt(c.getColumnIndex("read")))   </span></div><div class="line"><span class="comment">//                .append("发送时间： "+c.getInt(c.getColumnIndex("date")))  </span></div><div class="line"><span class="comment">//                .append("\n");  </span></div><div class="line">                sb.append(<span class="string">"发件人手机号码: "</span>+c.getInt(c.getColumnIndex(<span class="string">"address"</span>)))  </div><div class="line">                  .append(<span class="string">"信息内容: "</span>+c.getString(c.getColumnIndex(<span class="string">"body"</span>)))  </div><div class="line">                  .append(<span class="string">"\n"</span>);  </div><div class="line">            &#125;  </div><div class="line">            c.close();            </div><div class="line">            mHandler.obtainMessage(MSG_OUTBOXCONTENT, sb.toString()).sendToTarget();          </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、主工程逻辑为MainActivity.java，对短消息的观察Uri，通过测试我发现只能监听此Uri “content://sms” (等同于”content://sms/“)，而不能监听其他的Uri，比如”content://sms/outbox”等。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.database.Cursor;  </div><div class="line"><span class="keyword">import</span> android.net.Uri;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.os.Handler;  </div><div class="line"><span class="keyword">import</span> android.os.Message;  </div><div class="line"><span class="keyword">import</span> android.provider.*;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line"><span class="keyword">import</span> android.widget.EditText;  </div><div class="line"><span class="keyword">import</span> android.widget.TextView;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> TextView tvAirplane;  </div><div class="line">    <span class="keyword">private</span> EditText etSmsoutbox;  </div><div class="line">  </div><div class="line">    <span class="comment">// Message 类型值  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_AIRPLANE = <span class="number">1</span>;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_OUTBOXCONTENT = <span class="number">2</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> AirplaneContentObserver airplaneCO;  </div><div class="line">    <span class="keyword">private</span> SMSContentObserver smsContentObserver;  </div><div class="line">  </div><div class="line">    <span class="comment">/** Called when the activity is first created. */</span>  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.main);  </div><div class="line">  </div><div class="line">        tvAirplane = (TextView) findViewById(R.id.tvAirplane);  </div><div class="line">        etSmsoutbox = (EditText) findViewById(R.id.smsoutboxContent);  </div><div class="line">  </div><div class="line">        <span class="comment">// 创建两个对象  </span></div><div class="line">        airplaneCO = <span class="keyword">new</span> AirplaneContentObserver(<span class="keyword">this</span>, mHandler);  </div><div class="line">        smsContentObserver = <span class="keyword">new</span> SMSContentObserver(<span class="keyword">this</span>, mHandler);  </div><div class="line">          </div><div class="line">        <span class="comment">//注册内容观察者  </span></div><div class="line">        registerContentObservers() ;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerContentObservers</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="comment">// 通过调用getUriFor 方法获得 system表里的"飞行模式"所在行的Uri  </span></div><div class="line">        Uri airplaneUri = Settings.System.getUriFor(Settings.System.AIRPLANE_MODE_ON);  </div><div class="line">        <span class="comment">// 注册内容观察者  </span></div><div class="line">        getContentResolver().registerContentObserver(airplaneUri, <span class="keyword">false</span>, airplaneCO);  </div><div class="line">        <span class="comment">// ”表“内容观察者 ，通过测试我发现只能监听此Uri -----&gt; content://sms  </span></div><div class="line">        <span class="comment">// 监听不到其他的Uri 比如说 content://sms/outbox  </span></div><div class="line">        Uri smsUri = Uri.parse(<span class="string">"content://sms"</span>);  </div><div class="line">        getContentResolver().registerContentObserver(smsUri, <span class="keyword">true</span>,smsContentObserver);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;  </div><div class="line">              </div><div class="line">            System.out.println(<span class="string">"---mHanlder----"</span>);  </div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;  </div><div class="line">            <span class="keyword">case</span> MSG_AIRPLANE:  </div><div class="line">                <span class="keyword">int</span> isAirplaneOpen = (Integer) msg.obj;  </div><div class="line">                <span class="keyword">if</span> (isAirplaneOpen != <span class="number">0</span>)  </div><div class="line">                    tvAirplane.setText(<span class="string">"飞行模式已打开"</span>);  </div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (isAirplaneOpen == <span class="number">0</span>)  </div><div class="line">                    tvAirplane.setText(<span class="string">"飞行模式已关闭"</span>);  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">case</span> MSG_OUTBOXCONTENT:  </div><div class="line">                String outbox = (String) msg.obj;  </div><div class="line">                etSmsoutbox.setText(outbox);  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">default</span>:  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>使用ContentObserver的情况主要有一下两者情况：</p>
<p>1、需要频繁检测的数据库或者某个数据是否发生改变，如果使用线程去操作，很不经济而且很耗时 ；</p>
<p>2、在用户不知晓的情况下对数据库做一些事件，比如：悄悄发送信息、拒绝接受短信黑名单等；</p>
<p>在这两种情形下，使用ContentObserver无疑是最好的利刃了。</p>
<hr>
<p>参考链接：<a href="http://www.cnblogs.com/slider/archive/2012/02/14/2351702.html" target="_blank" rel="external">方案</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android广播中的安全问题]]></title>
      <url>http://dalufan.com/2015/01/12/android-BroadCast-Security/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Broadcast Recevier 广播接收器是一个专注于接收广播通知信息，并做出对应处理的组件。很多广播是源自于系统代码的──比如，通知时区改变、电池电量低、拍摄了一张照片或者用户改变了语言选项。应用程序也可以进行广播──比如说，通知其它应用程序一些数据下载完成并处于可用状态。 应用程序可以拥有任意数量的广播接收器以对所有它感兴趣的通知信息予以响应。所有的接收器均继承自BroadcastReceiver基类。 广播接收器没有用户界面。然而，它们可以启动一个activity来响应它们收到的信息，或者用NotificationManager来通知用户。通知可以用很多种方式来吸引用户的注意力──闪动背灯、震动、播放声音等等。一般来说是在状态栏上放一个持久的图标，用户可以打开它并获取消息。</p>
<a id="more"></a> 
<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><h4 id="注册形式：动态or静态"><a href="#注册形式：动态or静态" class="headerlink" title="注册形式：动态or静态"></a>注册形式：动态or静态</h4><p>元素的name属性指定了实现了这个activity的 Activity的子类。icon和label属性指向了包含展示给用户的此activity的图标和标签的资源文件。其它组件也以类似的方法声明── 元素用于声明服务， 元素用于声明广播接收器，而 元素用于声明内容提供器。 manifest文件中未进行声明的activity、服务以及内容提供器将不为系统所见，从而也就不会被运行。然而，广播接收器既可以在manifest文件中声明，也可以在代码中进行动态的创建，并以调用Context.registerReceiver()的方式注册至系统。</p>
<p>静态与动态注册广播接收器区别：</p>
<p><img src="/article_images/static.jpg" alt="alt"></p>
<h4 id="回调方法"><a href="#回调方法" class="headerlink" title="回调方法"></a>回调方法</h4><p>广播接收器只有一个回调方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context curContext, Intent broadcastMsg)</span></span></div></pre></td></tr></table></figure>
<p>当广播消息抵达接收器时，android调用它的onReceive() 方法并将包含消息的Intent对象传递给它。广播接收器仅在它执行这个方法时处于活跃状态。当onReceive()返回后，它即为失活状态。 拥有一个活跃状态的广播接收器的进程被保护起来而不会被杀死。但仅拥有失活状态组件的进程则会在其它进程需要它所占有的内存的时候随时被杀掉。 这种方式引出了一个问题：如果响应一个广播信息需要很长的一段时间，我们一般会将其纳入一个衍生的线程中去完成，而不是在主线程内完成它，从而保证用户交互过程的流畅。<code>如果onReceive()衍生了一个线程并且返回，则包涵新线程在内的整个进程都被会判为失活状态</code>（除非进程内的其它应用程序组件仍处于活跃状态），于是它就有可能被杀掉。这个问题的解决方法是<code>令onReceive()启动一个新服务，并用其完成任务</code>，于是系统就会知道进程中仍然在处理着工作。</p>
<h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p>设置接收app</p>
<pre><code>Intent  setPackage(String packageName)
(Usually optional) Set an explicit application package name that limits the components this Intent will resolve to.
</code></pre><p>设置接收权限</p>
<pre><code>abstract void  sendBroadcast(Intent intent, String receiverPermission)
Broadcast the given intent to all interested BroadcastReceivers, allowing an optional required permission to be enforced.
</code></pre><p>protectionLevel</p>
<ul>
<li>normal:默认值。低风险权限，只要申请了就可以使用，安装时不需要用户确认。</li>
<li>dangerous：像WRITE_SETTING和SEND_SMS等权限是有风险的，因为这些权限能够用来重新配置设备或者导致话费。使用此protectionLevel来标识用户可能关注的一些权限。android将会在安装程序时，警示用户关于这些权限的需求，具体的行为可能依据android版本或者所安装的移动设备而有所变化。</li>
<li>signature：这些权限仅授予那些和本程序应用了相同密钥来签名的程序。</li>
<li>signatureOrSystem:与signature类似，除了一点，系统中的程序也需要有资格来访问。这样允许定制android系统应用也能获得权限，这种保护等级有助于集成系统编译过程。    </li>
</ul>
<h4 id="广播类型"><a href="#广播类型" class="headerlink" title="广播类型"></a>广播类型</h4><ol>
<li>系统广播：像开机启动、接收到短信、电池电量低这类事件发生的时候系统都会发出特定的广播去通知应用，应用接收到广播后会以某种形式再转告用户。</li>
<li>自定义广播：不同于系统广播事件，应用可以为自己的广播接收器自定义出一条广播事件。</li>
</ol>
<p><strong>Ordered Broadcast</strong></p>
<p>OrderedBroadcast-有序广播，Broadcast-普通广播，他们的区别是有序广播发出后能够适配的广播接收者按照一定的权限顺序接收这个广播，并且前面的接收者可以对广播的内容进行修改，修改的结果被后面接收者接收，优先级高的接收者还可以结束这个广播，那么后面优先级低的接收者就接收不到这个广播了。而普通广播发出后，能够是适配的接收者没有一定顺序接收广播，也不能终止广播。</p>
<p><strong>sticky broadcast</strong></p>
<p>有这么一种broadcast，在发送并经过AMS(ActivityManagerService)分发给对应的receiver后，这个broadcast并不会被丢弃，而是保存在AMS中，当有新的需要动态注册的receiver请求AMS注册时，如果这个receiver能够接收这个broadcast，那么AMS会将在receiver注册成功之后，马上向receiver发送这个broadcast。这种broadcast我们称之为stickybroadcast。</p>
<p>sendStickyBroadcast()字面意思是发送粘性的广播，使用这个api需要权限android.Manifest.permission.BROADCAST_STICKY,粘性广播的特点是Intent会一直保留到广播事件结束，而这种广播也没有所谓的10秒限制，<code>10秒限制</code>是指普通的广播如果onReceive方法执行时间太长，超过10秒的时候系统会将这个广播置为可以干掉的candidate，一旦系统资源不够的时候，就会干掉这个广播而让它不执行。</p>
<p><img src="/article_images/charact.png" alt="alt"></p>
<h4 id="变动"><a href="#变动" class="headerlink" title="变动"></a>变动</h4><p>android3.1以及之后版本广播接收器不能在启动应用前注册。可以通过设置intent的flag为<code>Intent.FLAG_INCLUDE_STOPPED_PACKAGES</code>将广播发送给未启动应用的广播接收器。</p>
<h3 id="关键方法"><a href="#关键方法" class="headerlink" title="关键方法"></a>关键方法</h3><pre><code>sendBroadcast(intent)
sendOrderedBroadcast(intent, null, mResultReceiver, null, 0, null, null)
onReceive(Context context, Intent intent)
getResultData()
abortBroadcast()
registerReceiver()
unregisterReceiver()
LocalBroadcastManager.getInstance(this).sendBroadcast(intent)
sendStickyBroadcast(intent)
</code></pre><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><img src="/article_images/type.jpg" alt="alt"></p>
<ol>
<li>私有广播接收器：只接收app自身发出的广播</li>
<li>公共广播接收器：能接收所有app发出的广播</li>
<li>内部广播接收器：只接收内部app发出的广播</li>
</ol>
<h4 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h4><p>intent-filter节点与exported属性设置组合建议</p>
<p><img src="/article_images/exported.png" alt="alt"></p>
<p>1.私有广播接收器设置<code>exported=&#39;false&#39;</code>，并且不配置intent-filter。(私有广播接收器依然能接收到同UID的广播)</p>
<pre><code>&lt;receiver android:name=&quot;.PrivateReceiver&quot; android:exported=&quot;false&quot; /&gt;
</code></pre><p>2.对接收来的广播进行验证</p>
<p>3.内部app之间的广播使用<code>protectionLevel=&#39;signature&#39;</code>验证其是否真是内部app</p>
<p>4.返回结果时需注意接收app是否会泄露信息</p>
<p>5.发送的广播包含敏感信息时需指定广播接收器，使用显示意图或者</p>
<pre><code>setPackage(String packageName)
</code></pre><p>6.sticky broadcast粘性广播中不应包含敏感信息</p>
<p>7.Ordered Broadcast建议设置接收权限receiverPermission，避免恶意应用设置高优先级抢收此广播后并执行abortBroadcast()方法。</p>
<h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><p>1、查找动态广播接收器：反编译后检索registerReceiver(),</p>
<pre><code>dz&gt; run app.broadcast.info -a android -i
</code></pre><p>2、查找静态广播接收器：反编译后查看配置文件查找广播接收器组件，注意exported属性</p>
<p>3、查找发送广播内的信息检索sendBroadcast与sendOrderedBroadcast，注意setPackage方法于receiverPermission变量。</p>
<p>发送测试广播</p>
<pre><code>adb shell：
am broadcast -a MyBroadcast -n com.isi.vul_broadcastreceiver/.MyBroadCastReceiver
am broadcast -a MyBroadcast -n com.isi.vul_broadcastreceiver/.MyBroadCastReceiver –es number 5556.

drozer：
dz&gt; run app.broadcast.send --component com.package.name --action android.intent.action.XXX

code：
Intent i = new Intent();
ComponentName componetName = new ComponentName(packagename,  componet);         
i.setComponent(componetName);       
sendBroadcast(i);
</code></pre><p>接收指定广播</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String ACCOUNT_NAME = <span class="string">"account_name"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String ACCOUNT_PWD = <span class="string">"account_password"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String ACCOUNT_TYPE = <span class="string">"account_type"</span>;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLog</span><span class="params">(Context paramContext, Intent paramIntent)</span></span></div><div class="line">    &#123;</div><div class="line">        String name;</div><div class="line">        String password;</div><div class="line">        String type;</div><div class="line">        do</div><div class="line">        &#123;</div><div class="line">            name = paramIntent.getExtras().getString(ACCOUNT_NAME);</div><div class="line">            password = paramIntent.getExtras().getString(ACCOUNT_PWD);</div><div class="line">            type = paramIntent.getExtras().getString(ACCOUNT_TYPE);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> ((TextUtils.isEmpty(name)) || (TextUtils.isEmpty(password)) || (TextUtils.isEmpty(type)) || ((!type.equals(<span class="string">"email"</span>)) &amp;&amp; (!type.equals(<span class="string">"cellphone"</span>))));</div><div class="line">        Log.i(<span class="string">"name"</span>, name);</div><div class="line">        Log.i(<span class="string">"password"</span>, password);</div><div class="line">        Log.i(<span class="string">"type"</span>, type);</div><div class="line">     &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context paramContext, Intent paramIntent)</span></span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> (TextUtils.equals(paramIntent.getAction(), <span class="string">"account"</span>))</div><div class="line">      doLog(paramContext, paramIntent);</div><div class="line">     &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="案例1：伪造消息代码执行"><a href="#案例1：伪造消息代码执行" class="headerlink" title="案例1：伪造消息代码执行"></a>案例1：伪造消息代码执行</h4><p><a href="http://www.wooyun.org/bugs/wooyun-2013-039801" target="_blank" rel="external">WooYun: 百度云盘手机版钓鱼、信息泄露和代码执行高危漏洞三合一</a></p>
<h4 id="案例2：拒绝服务"><a href="#案例2：拒绝服务" class="headerlink" title="案例2：拒绝服务"></a>案例2：拒绝服务</h4><p>尝试向广播接收器发送不完整的intent比如空action或者空extra</p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2010-0511" target="_blank" rel="external">WooYun: 乐phone手机系统重启漏洞</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2013-034181" target="_blank" rel="external">手机百度4.5.1android客户端DOS攻击</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2013-042755" target="_blank" rel="external">QQ手机管家拒绝服务漏洞</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2014-053878" target="_blank" rel="external">百度某手机应用拒绝服务漏洞</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2014-047716" target="_blank" rel="external">搜狗输入法安卓客户端本地拒绝服务漏洞</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2013-039968" target="_blank" rel="external">百度云盘客户端拒绝服务</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2013-019422" target="_blank" rel="external">su提权广播劫持导致拒绝服务攻击</a></p>
<h4 id="案例3：敏感信息泄漏"><a href="#案例3：敏感信息泄漏" class="headerlink" title="案例3：敏感信息泄漏"></a>案例3：敏感信息泄漏</h4><p>某应用利用广播传输用户账号密码</p>
<p><img src="/article_images/break.png" alt="alt"></p>
<p>隐式意图发送敏感信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    Intent v1 = <span class="keyword">new</span> Intent();</div><div class="line">    v1.setAction(<span class="string">"com.sample.action.server_running"</span>);</div><div class="line">    v1.putExtra(<span class="string">"local_ip"</span>, v0.h);</div><div class="line">    v1.putExtra(<span class="string">"port"</span>, v0.i);</div><div class="line">    v1.putExtra(<span class="string">"code"</span>, v0.g);</div><div class="line">    v1.putExtra(<span class="string">"connected"</span>, v0.s);</div><div class="line">    v1.putExtra(<span class="string">"pwd_predefined"</span>, v0.r);</div><div class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(v0.t)) &#123;</div><div class="line">      v1.putExtra(<span class="string">"connected_usr"</span>, v0.t);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.sendBroadcast(v1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接收POC</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BcReceiv</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span>&#123;</div><div class="line"> </div><div class="line">    String s = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (intent.getAction().equals(<span class="string">"com.sample.action.server_running"</span>))&#123;</div><div class="line">      String pwd = intent.getStringExtra(<span class="string">"connected"</span>);</div><div class="line">      s = <span class="string">"Airdroid  =&gt; ["</span> + pwd + <span class="string">"]/"</span> + intent.getExtras();</div><div class="line">    &#125;</div><div class="line">    Toast.makeText(context, String.format(<span class="string">"%s Received"</span>, s),</div><div class="line">                   Toast.LENGTH_SHORT).show();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修复后代码，使用 <code>LocalBroadcastManager.sendBroadcast()</code> 发出的广播只能被app自身广播接收器接收。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"my-sensitive-event"</span>);</div><div class="line">intent.putExtra(<span class="string">"event"</span>, <span class="string">"this is a test event"</span>);</div><div class="line">LocalBroadcastManager.getInstance(<span class="keyword">this</span>).sendBroadcast(intent);</div></pre></td></tr></table></figure>
<h4 id="案例4：权限绕过"><a href="#案例4：权限绕过" class="headerlink" title="案例4：权限绕过"></a>案例4：权限绕过</h4><p><a href="http://www.wooyun.org/bugs/wooyun-2012-09175" target="_blank" rel="external">小米MIUI漏洞可能导致硬件资源消耗</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2013-019579" target="_blank" rel="external">无须权限随意开启和关闭手机wifi功能</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2014-068478" target="_blank" rel="external">华为荣耀3X android4.2提权打电话漏洞</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2014-084520" target="_blank" rel="external">酷派最安全手机s6拨打电话权限绕过</a></p>
<p><a href="http://www.wooyun.org/bugs/wooyun-2014-084516" target="_blank" rel="external">酷派最安全手机s6程序锁绕过</a></p>
<p><a href="http://zone.wooyun.org/content/16841" target="_blank" rel="external">CVE-2014-8610 android &lt; 5.0 短信重发漏洞</a></p>
<hr>
<p>参考链接：<a href="http://drops.wooyun.org/tips/4393" target="_blank" rel="external">方案</a>,<a href="http://www.jssec.org/dl/android_securecoding_en.pdf" target="_blank" rel="external">文档</a>,<a href="https://www.securecoding.cert.org/confluence/display/java/DRD03-J.+Do+not+broadcast+sensitive+information+using+an+implicit+intent" target="_blank" rel="external">其他</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android 获取各应用的运行时间]]></title>
      <url>http://dalufan.com/2014/12/30/android-app-usagestats/</url>
      <content type="html"><![CDATA[<h3 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h3><p>android本身有PkgUsageStats等相关类来统计应用使用情况，但这些类在SDK不公开，只能通过反射或者在源码环境下才能访问到。所以，针对这一特点，如果需要获取应用使用信息，可以采取反射或者源码下开发这两种方式。下面代码是采用反射来做的.</p>
<a id="more"></a> 
<p>实体类AppItemInfo.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppItemInfo</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">AppItemInfo</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Drawable icon; <span class="comment">// 存放图片</span></div><div class="line">    <span class="keyword">private</span> String label; <span class="comment">// 存放应用程序名</span></div><div class="line">    <span class="keyword">private</span> String packageName; <span class="comment">// 存放应用程序包名</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> startTime ;  <span class="comment">//程序运行时间</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">getIcon</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> icon;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(Drawable icon)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.icon = icon;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLabel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> label;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLabel</span><span class="params">(String label)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.label = label;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPackageName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> packageName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPackageName</span><span class="params">(String packageName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.packageName = packageName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getStartTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> startTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartTime</span><span class="params">(<span class="keyword">long</span> startTime)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.startTime = startTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(AppItemInfo another)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (startTime-another.getStartTime());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AppTime.java 工具类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Drawable <span class="title">getProgramIcon</span><span class="params">(String packageName)</span> </span>&#123;</div><div class="line">        PackageManager pm = context.getPackageManager();</div><div class="line">        Drawable name = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            name = pm.getApplicationIcon(pm.getApplicationInfo(packageName,</div><div class="line">                            PackageManager.GET_META_DATA));</div><div class="line">        &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;AppItemInfo&gt; <span class="title">getRunPkgUsageStats</span><span class="params">()</span> </span>&#123;</div><div class="line">        ArrayList&lt;AppItemInfo&gt; list = <span class="keyword">new</span> ArrayList&lt;AppItemInfo&gt;();</div><div class="line">        AppItemInfo ai = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;?&gt; cServiceManager = Class</div><div class="line">                    .forName(<span class="string">"android.os.ServiceManager"</span>);</div><div class="line">            Method mGetService = cServiceManager.getMethod(<span class="string">"getService"</span>,</div><div class="line">                    java.lang.String.class);</div><div class="line">            Object oRemoteService = mGetService.invoke(<span class="keyword">null</span>, <span class="string">"usagestats"</span>);</div><div class="line"></div><div class="line">            Class&lt;?&gt; cStub = Class</div><div class="line">                    .forName(<span class="string">"com.android.internal.app.IUsageStats$Stub"</span>);</div><div class="line">            Method mUsageStatsService = cStub.getMethod(<span class="string">"asInterface"</span>,</div><div class="line">                    android.os.IBinder.class);</div><div class="line">            Object oIUsageStats = mUsageStatsService.invoke(<span class="keyword">null</span>,</div><div class="line">                    oRemoteService);</div><div class="line"></div><div class="line">            Class&lt;?&gt; cIUsageStatus = Class</div><div class="line">                    .forName(<span class="string">"com.android.internal.app.IUsageStats"</span>);</div><div class="line">            Method mGetAllPkgUsageStats = cIUsageStatus.getMethod(</div><div class="line">                    <span class="string">"getAllPkgUsageStats"</span>, (Class[]) <span class="keyword">null</span>);</div><div class="line">            Object[] oPkgUsageStatsArray = (Object[]) mGetAllPkgUsageStats</div><div class="line">                    .invoke(oIUsageStats, (Object[]) <span class="keyword">null</span>);</div><div class="line">            Class&lt;?&gt; cPkgUsageStats = Class</div><div class="line">                    .forName(<span class="string">"com.android.internal.os.PkgUsageStats"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (Object pkgUsageStats : oPkgUsageStatsArray) &#123;</div><div class="line">                ai = <span class="keyword">new</span> AppItemInfo();</div><div class="line">                String packageName = (String) cPkgUsageStats.getDeclaredField(</div><div class="line">                        <span class="string">"packageName"</span>).get(pkgUsageStats);</div><div class="line">                ai.setLabel(packageName);</div><div class="line">                ai.setIcon(getProgramIcon(packageName));</div><div class="line">                <span class="keyword">int</span> launchCount = cPkgUsageStats</div><div class="line">                        .getDeclaredField(<span class="string">"launchCount"</span>).getInt(pkgUsageStats);</div><div class="line">                <span class="keyword">long</span> usageTime = cPkgUsageStats.getDeclaredField(<span class="string">"usageTime"</span>)</div><div class="line">                        .getLong(pkgUsageStats);</div><div class="line">                ai.setStartTime(usageTime);</div><div class="line">                <span class="keyword">if</span> (launchCount &gt; <span class="number">0</span>) &#123;</div><div class="line">                    Log.i(TAG, <span class="string">"[getPkgUsageStats] "</span> + packageName</div><div class="line">                            + <span class="string">"  count: "</span> + launchCount + <span class="string">"  time:  "</span></div><div class="line">                            + usageTime);</div><div class="line">                    list.add(ai);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(list!=<span class="keyword">null</span>)</div><div class="line">            Collections.sort(list);</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>MainActivity.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 用来记录应用程序的信息</span></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;AppItemInfo&gt; list;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView listview;</div><div class="line">    <span class="keyword">private</span> PackageManager pManager;</div><div class="line">    <span class="keyword">private</span> Button refresh ;</div><div class="line">    <span class="keyword">private</span> baseAdapter mAdapter ;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="keyword">this</span>.setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">// 取得gridview</span></div><div class="line">        listview = (ListView) findViewById(R.id.listview);</div><div class="line">        refresh = (Button) findViewById(R.id.refresh);</div><div class="line">        refresh.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                list = <span class="keyword">new</span> AppTime(MainActivity.<span class="keyword">this</span>).getRunPkgUsageStats();</div><div class="line">                mAdapter.notifyDataSetChanged();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        pManager = <span class="keyword">this</span>.getPackageManager();</div><div class="line">        list = <span class="keyword">new</span> AppTime(<span class="keyword">this</span>).getRunPkgUsageStats();</div><div class="line"></div><div class="line">        mAdapter = <span class="keyword">new</span> baseAdapter(list) ;</div><div class="line">        listview.setAdapter(mAdapter);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">baseAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">        LayoutInflater inflater = LayoutInflater.from(MainActivity.<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">private</span> ArrayList&lt;AppItemInfo&gt; itemlist = <span class="keyword">null</span> ;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">baseAdapter</span><span class="params">(ArrayList&lt;AppItemInfo&gt; list)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.itemlist = list ;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> itemlist.size();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> position;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">            ViewHolder holder;</div><div class="line">            <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 使用View的对象itemView与R.layout.item关联</span></div><div class="line">                convertView = inflater.inflate(R.layout.list_item, <span class="keyword">null</span>);</div><div class="line">                holder = <span class="keyword">new</span> ViewHolder();</div><div class="line">                holder.icon = (ImageView) convertView</div><div class="line">                        .findViewById(R.id.apps_image);</div><div class="line">                holder.label = (TextView) convertView</div><div class="line">                        .findViewById(R.id.apps_name);</div><div class="line">                holder.time = (TextView) convertView</div><div class="line">                        .findViewById(R.id.apps_time);</div><div class="line">                convertView.setTag(holder);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                holder = (ViewHolder) convertView.getTag();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            holder.icon.setImageDrawable(itemlist.get(position).getIcon());</div><div class="line">            holder.label.setText(itemlist.get(position).getLabel().toString());</div><div class="line">            holder.time.setText(itemlist.get(position).getStartTime()+<span class="string">"毫秒"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> convertView;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> ImageView icon;</div><div class="line">        <span class="keyword">private</span> TextView label;</div><div class="line">        <span class="keyword">private</span> TextView time;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>activity_main.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/refresh"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"refresh"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/listview"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>list_item.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"5dp"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"5dp"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/apps_image"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"48dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></div><div class="line">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:contentDescription</span>=<span class="string">"@null"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/apps_name"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"15dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"15dp"</span></div><div class="line">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/apps_image"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"应用名称"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/apps_time"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/apps_name"</span></div><div class="line">        <span class="attr">android:maxWidth</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">""</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>androidManifest.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"cn.dalu.listapp"</span></div><div class="line">    <span class="attr">android:sharedUserId</span>=<span class="string">"android.uid.system"</span></div><div class="line">    <span class="attr">android:versionCode</span>=<span class="string">"1"</span></div><div class="line">    <span class="attr">android:versionName</span>=<span class="string">"1.0"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.PACKAGE_USAGE_STATS"</span> /&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span></span></div><div class="line">        <span class="attr">android:minSdkVersion</span>=<span class="string">"10"</span></div><div class="line">        <span class="attr">android:targetSdkVersion</span>=<span class="string">"19"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"cn.dalu.listapp.MainActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>1.声明下面权限时候</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.PACKAGE_USAGE_STATS"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>会报错:</p>
<blockquote>
<p>Permission is only granted to system apps </p>
</blockquote>
<p><code>clean</code>一下项目就行<br>请勿忘记添加</p>
<pre><code>android:sharedUserId=&quot;android.uid.system&quot;
</code></pre><p>2.对apk进行系统签名，在源码中取platform.pk8、platform.x509.pem、signapk.jar文件并通过如下命令实现apk的签名,相关文件<a href="/article_files/signapk.zip">下载地址</a></p>
<pre><code>java -jar signapk.jar platform.x509.pem platform.pk8 unsigned.apk signed.apk
</code></pre><p>unsigned.apk为签名之前的apk，signed.apk为通过命令签名成功的apk</p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/pierce0young/article/details/22292603" target="_blank" rel="external">运行时间</a>,<a href="http://blog.csdn.net/ystyaoshengting/article/details/7448773" target="_blank" rel="external">list排序</a>,<a href="http://blog.csdn.net/hugengzong/article/details/6366806" target="_blank" rel="external">获取应用,系统和非系统</a>,<a href="http://blog.sina.com.cn/s/blog_6324d6990101dkur.html" target="_blank" rel="external">错误</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下解决不能识别android设备]]></title>
      <url>http://dalufan.com/2014/12/29/ubuntu-android-driver/</url>
      <content type="html"><![CDATA[<p>1.分别在断开和连接手机状态下输入</p>
<pre><code>lsusb
</code></pre><p>找到变化的那一行</p>
<pre><code>Bus 002 Device 007: ID 2717:4e21  
</code></pre><p><code>2717</code>为手机的ID号，同一款手机的ID号是一样的。</p>
<a id="more"></a> 
<p>常见厂商的设备代码参考下表:</p>
<pre><code>Manufacturer    USB Vendor ID
Acer            0502
Dell            413c
Foxconn         0489
Garmin-Asus     091E
HTC             0bb4
Huawei          12d1
Kyocera         0482
LG              1004
Motorola        22b8
Nvidia          0955
Pantech         10A9
Samsung         04e8
Sharp           04dd
Sony Ericsson   0fce
ZTE             19D2
XiaoMi          2717
</code></pre><p>2.创建.rules 文件</p>
<pre><code>sudo vim /etc/udev/rules.d/80-android.rules
</code></pre><p><code>80-android</code>为自定义文件名,添加如下内容：</p>
<pre><code>SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;2717&quot;, MODE=&quot;0666&quot;
</code></pre><p>也可以写成这种形式：(建议用上面这种以厂商ID的方法，因为厂商ID全球唯一)</p>
<pre><code>SUBSYSTEM==&quot;usb&quot;, SYSFS{&quot;hongmi1s&quot;}==&quot;2717&quot;, MODE=&quot;0666&quot;
</code></pre><p>3.更改权限：</p>
<pre><code>sudo chmod a+rx /etc/udev/rules.d/80-android.rules
</code></pre><p>4.重启 udev 服务：</p>
<pre><code>sudo /etc/init.d/udev restart
sudo adb kill-server
sudo adb devices
</code></pre><p>若发现 List of devices attached 下面没有设备出现，这就意味着 adb不识别新的USB 设备,请执行如下操作:</p>
<pre><code>cd ~
cd .android/
ls
</code></pre><blockquote>
<p>adbkey       adb_usb.ini~     avd       debug.keystore     repositories.cfg<br>adbkey.pub   androidtool.cfg  cache     default.keyset     sites-settings.cfg<br><code>adb_usb.ini</code>  androidwin.cfg   ddms.cfg  modem-nv-ram-5554</p>
</blockquote>
<p>请注意这个 adb_usb.ini（如果没有，可以自己建立一个）</p>
<pre><code>sudo vim adb_usb.ini
</code></pre><p>里面的内容一般如下：</p>
<pre><code># android 3RD PARTY USB VENDOR ID LIST -- DO NOT EDIT.
# USE &apos;android update adb&apos; TO GENERATE.
# 1 USB VENDOR ID PER LINE.
</code></pre><p>我们在其中加一行</p>
<pre><code># android 3RD PARTY USB VENDOR ID LIST -- DO NOT EDIT.
# USE &apos;android update adb&apos; TO GENERATE.
# 1 USB VENDOR ID PER LINE.
0x2717
</code></pre><p>请注意，这个 <code>0x2717</code> 就是我们得到的设备号码</p>
<p>保存，关掉，然后</p>
<pre><code>sudo adb kill-server
sudo adb devices
</code></pre><blockquote>
<p>List of devices attached<br>9109ce53    device</p>
</blockquote>
<p>注意  9109ce53    device 这行就是我们的识别到的小米手机了。</p>
<hr>
<p>原文链接：<a href="http://ice-k.iteye.com/blog/1412513" target="_blank" rel="external">1</a>,<a href="http://www.cnblogs.com/loulijun/archive/2012/12/18/2823272.html" target="_blank" rel="external">2</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中简单自定义view③]]></title>
      <url>http://dalufan.com/2014/12/25/android-View-learn-three/</url>
      <content type="html"><![CDATA[<p><a href="/article_files/viewDemo.zip">DEMO下载</a></p>
<p>继承View，重写构造函数、onDraw，（onMeasure）等函数。</p>
<p>如果自定义的View需要有自定义的属性，需要在values下建立attrs.xml。在其中定义你的属性。</p>
<p>在使用到自定义View的xml布局文件中需要加入xmlns:前缀=”<a href="http://schemas.android.com/apk/res/你的自定义View所在的包路径(`包路径指的是项目的package`" target="_blank" rel="external">http://schemas.android.com/apk/res/你的自定义View所在的包路径(`包路径指的是项目的package`</a>)”.</p>
<p>在使用自定义属性的时候，使用前缀：属性名，如my:textColor=”#FFFFFFF”。</p>
<a id="more"></a> 
<h4 id="MyView-java"><a href="#MyView-java" class="headerlink" title="MyView.java"></a>MyView.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> demo.view.my;   </div><div class="line"><span class="keyword">import</span> android.content.Context;   </div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;   </div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;   </div><div class="line"><span class="keyword">import</span> android.graphics.Color;   </div><div class="line"><span class="keyword">import</span> android.graphics.Paint;   </div><div class="line"><span class="keyword">import</span> android.graphics.Paint.Style;   </div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;   </div><div class="line"><span class="keyword">import</span> android.view.View;   </div><div class="line"><span class="comment">/**  </span></div><div class="line"> * 这个是自定义的TextView.  </div><div class="line"> * 至少需要重载构造方法和onDraw方法    </div><div class="line"> * 如果使用自定义属性，那么在应用xml文件中需要加上新的schemas，  </div><div class="line"> * 比如这里是xmlns:my="http://schemas.android.com/apk/res/demo.view.my"  </div><div class="line"> * 其中xmlns后的“my”是自定义的属性的前缀，res后的是我们自定义View所在的包(项目的包，不是view的java文件所在的包路径)  </div><div class="line"> * <span class="doctag">@author</span> Administrator  </div><div class="line"> *  </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;   </div><div class="line">       </div><div class="line">    Paint mPaint; <span class="comment">//画笔,包含了画几何图形、文本等的样式和颜色信息   </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;   </div><div class="line">        <span class="keyword">super</span>(context);   </div><div class="line">           </div><div class="line">    &#125;   </div><div class="line">       </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs)</span></span>&#123;   </div><div class="line">        <span class="keyword">super</span>(context, attrs);   </div><div class="line">        mPaint = <span class="keyword">new</span> Paint();   </div><div class="line">        <span class="comment">//TypedArray是一个用来存放由context.obtainStyledAttributes获得的属性的数组   </span></div><div class="line">        <span class="comment">//在使用完成后，一定要调用recycle方法   </span></div><div class="line">        <span class="comment">//属性的名称是styleable中的名称+“_”+属性名称   </span></div><div class="line">        TypedArray array = context.obtainStyledAttributes(attrs, R.styleable.MyView);   </div><div class="line">        <span class="keyword">int</span> textColor = array.getColor(R.styleable.MyView_textColor, <span class="number">0XFF00FF00</span>); <span class="comment">//提供默认值，放置未指定   </span></div><div class="line">        <span class="keyword">float</span> textSize = array.getDimension(R.styleable.MyView_textSize, <span class="number">36</span>);   </div><div class="line">        mPaint.setColor(textColor);   </div><div class="line">        mPaint.setTextSize(textSize);   </div><div class="line">           </div><div class="line">        array.recycle(); <span class="comment">//一定要调用，否则这次的设定会对下次的使用造成影响   </span></div><div class="line">    &#125;   </div><div class="line">       </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span></span>&#123;   </div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);   </div><div class="line">        <span class="comment">//Canvas中含有很多画图的接口，利用这些接口，我们可以画出我们想要的图形   </span></div><div class="line">        <span class="comment">//mPaint = new Paint();   </span></div><div class="line">        <span class="comment">//mPaint.setColor(Color.RED);   </span></div><div class="line">        mPaint.setStyle(Style.FILL); <span class="comment">//设置填充   </span></div><div class="line">        canvas.drawRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>, mPaint); <span class="comment">//绘制矩形   </span></div><div class="line">           </div><div class="line">        mPaint.setColor(Color.BLUE);   </div><div class="line">        canvas.drawText(<span class="string">"我是被画出来的"</span>, <span class="number">10</span>, <span class="number">120</span>, mPaint);   </div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="attrs-xml"><a href="#attrs-xml" class="headerlink" title="attrs.xml"></a>attrs.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"MyView"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textColor"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>    </span></div><div class="line">              <span class="attr">xmlns:my</span>=<span class="string">"http://schemas.android.com/apk/res/demo.view.my"</span>    </div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>  </div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>  </div><div class="line">    &gt;  </div><div class="line">       </div><div class="line">    <span class="tag">&lt;<span class="name">demo.view.my.MyView</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>    </div><div class="line">        <span class="attr">my:textColor</span>=<span class="string">"#FFFFFFFF"</span>    </div><div class="line">        <span class="attr">my:textSize</span>=<span class="string">"22dp"</span>  </div><div class="line">        /&gt;  </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://www.cnblogs.com/ufocdy/archive/2011/05/17/2048958.html" target="_blank" rel="external">CNBLOG</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android DownloadManager广播事件：下载完成、通知栏点击事件]]></title>
      <url>http://dalufan.com/2014/12/25/android-DownloadManager/</url>
      <content type="html"><![CDATA[<p>一、DownloadManager简单介绍<br>DownloadManager是系统开放给第三方应用使用的类，包含两个静态内部类DownloadManager.Query和DownloadManager.Request。DownloadManager.Request用来请求一个下载，DownloadManager.Query用来查询下载信息，这两个类的具体功能会在后面穿插介绍。DownloadManager的源码可见<a href="http://www.grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.0.4_r2.1/android/app/DownloadManager.java#DownloadManager" target="_blank" rel="external">DownloadManager@Grepcode</a>。</p>
<a id="more"></a> 
<p>DownloadManager主要提供了下面几个接口：</p>
<ul>
<li>public long enqueue(Request request)执行下载，返回downloadId，downloadId可用于后面查询下载信息。若网络不满足条件、Sdcard挂载中、超过最大并发数等异常会等待下载，正常则直接下载。</li>
<li>public int remove(long… ids)删除下载，若下载中取消下载。会同时删除下载文件和记录。</li>
<li>public Cursor query(Query query)查询下载信息。</li>
<li>public static Long getRecommendedMaxBytesOverMobile(Context context)通过移动网络下载的最大字节数</li>
<li>public String getMimeTypeForDownloadedFile(long id)得到下载的mimeType，如何设置后面会进行介绍</li>
</ul>
<p>其它：通过查看代码我们可以发现还有个CursorTranslator私有静态内部类。这个类主要对Query做了一层代理。将DownloadProvider和DownloadManager之间做个映射。将DownloadProvider中的十几种状态对应到了DownloadManager中的五种状态，DownloadProvider中的失败、暂停原因转换为了DownloadManager的原因。</p>
<p>需要的权限</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>注册广播</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"cn.dalu.DownloadReceiver"</span> &gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.DOWNLOAD_COMPLETE"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.DOWNLOAD_NOTIFICATION_CLICKED"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<p>再在代码里面进行接收，下面是整个接收器代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">          </div><div class="line">        DownloadManager manager = (DownloadManager)context.getSystemService(Context.DOWNLOAD_SERVICE);  </div><div class="line">        <span class="keyword">if</span>(DownloadManager.ACTION_DOWNLOAD_COMPLETE.equals(intent.getAction()))&#123;  </div><div class="line">            DownloadManager.Query query = <span class="keyword">new</span> DownloadManager.Query();   </div><div class="line">            <span class="comment">//在广播中取出下载任务的id  </span></div><div class="line">            <span class="keyword">long</span> id = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, <span class="number">0</span>);  </div><div class="line">            query.setFilterById(id);   </div><div class="line">            Cursor c = manager.query(query);   </div><div class="line">            <span class="keyword">if</span>(c.moveToFirst()) &#123;   </div><div class="line">                <span class="comment">//获取文件下载路径  </span></div><div class="line">                String filename = c.getString(c.getColumnIndex(DownloadManager.COLUMN_LOCAL_FILENAME));  </div><div class="line">                <span class="comment">//如果文件名不为空，说明已经存在了，拿到文件名想干嘛都好  </span></div><div class="line">                <span class="keyword">if</span>(filename != <span class="keyword">null</span>)&#123;  </div><div class="line">                      </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(DownloadManager.ACTION_NOTIFICATION_CLICKED.equals(intent.getAction()))&#123;  </div><div class="line">            <span class="keyword">long</span>[] ids = intent.getLongArrayExtra(DownloadManager.EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS);  </div><div class="line">            <span class="comment">//点击通知栏取消下载  </span></div><div class="line">            manager.remove(ids);  </div><div class="line">            ShowToastUtil.showShortToast(context, <span class="string">"已经取消下载"</span>);  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>遇到的问题:</p>
<ol>
<li>解析包时出现问题–&gt;原因是路径给的不对,前面多了”file://“</li>
<li>java.lang.IllegalArgumentException: Unknown URL content://downloads/my_downl–&gt;设备的下载管理器没有启用或者下载管理器故障</li>
</ol>
<p>最后完成的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">bt.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">    AlertDialog.Builder builder = <span class="keyword">new</span> Builder(mContext);</div><div class="line">    builder.setMessage(<span class="string">"您要下载\""</span>+ name + <span class="string">"\"应用?"</span>);</div><div class="line">    builder.setTitle(<span class="string">"提示"</span>);</div><div class="line">    builder.setPositiveButton(<span class="string">"确认"</span>,<span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog,<span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(TextUtils.isEmpty(url))</div><div class="line">                <span class="keyword">return</span> ;</div><div class="line">            download(mContext,name,url);</div><div class="line">            dialog.dismiss();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    builder.setNegativeButton(<span class="string">"取消"</span>,<span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog,<span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">            dialog.dismiss();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    builder.create().show();</div><div class="line">    &#125;</div><div class="line">&#125;);    </div><div class="line"></div><div class="line"><span class="comment">//---------------------------------------------------</span></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">isFolderExist</span><span class="params">(String dir)</span> </span>&#123;</div><div class="line">        File folder = Environment.getExternalStoragePublicDirectory(dir);</div><div class="line">        <span class="keyword">boolean</span> rs = (folder.exists() &amp;&amp; folder.isDirectory()) ? <span class="keyword">true</span> : folder</div><div class="line">                .mkdirs();</div><div class="line">        <span class="keyword">return</span> folder.getAbsolutePath();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(Context context, String name, String apkUrl)</span> </span>&#123;</div><div class="line">        DownloadManager downloadManager = (DownloadManager) context</div><div class="line">                .getSystemService(context.DOWNLOAD_SERVICE);</div><div class="line">        String dir = isFolderExist(<span class="string">"download"</span>);</div><div class="line">        System.out.println(dir + <span class="string">"/"</span> + name + <span class="string">".apk"</span>);</div><div class="line">        File f = <span class="keyword">new</span> File(name);</div><div class="line">        <span class="keyword">if</span> (f.exists())</div><div class="line">            f.delete();</div><div class="line">        DownloadManager.Request request = <span class="keyword">new</span> DownloadManager.Request(</div><div class="line">                Uri.parse(apkUrl));</div><div class="line">        request.setDestinationInExternalPublicDir(<span class="string">"download"</span>, name + <span class="string">".apk"</span>);</div><div class="line">        request.allowScanningByMediaScanner();<span class="comment">// 表示允许MediaScanner扫描到这个文件，默认不允许。</span></div><div class="line">        request.setTitle(<span class="string">"应用下载"</span>);<span class="comment">// 设置下载中通知栏提示的标题</span></div><div class="line">        request.setDescription(<span class="string">"\""</span> + name + <span class="string">"\"正在下载"</span>);<span class="comment">// 设置下载中通知栏提示的介绍</span></div><div class="line">        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">long</span> downloadId = downloadManager.enqueue(request);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</div><div class="line">               <span class="comment">//open by brower</span></div><div class="line">               Intent intent = <span class="keyword">new</span> Intent();        </div><div class="line">               intent.setAction(<span class="string">"android.intent.action.VIEW"</span>);    </div><div class="line">               Uri content_url = Uri.parse(apkUrl); </div><div class="line">               intent.setData(content_url);  </div><div class="line">               context.startActivity(intent);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> com.ixdtech.XueXunTong.uitl.ToastUtil;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</div><div class="line"><span class="keyword">import</span> android.app.DownloadManager;</div><div class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.database.Cursor;</div><div class="line"><span class="keyword">import</span> android.net.Uri;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadCompleteReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>) <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">        DownloadManager dm = (DownloadManager) mContext</div><div class="line">                .getSystemService(mContext.DOWNLOAD_SERVICE);</div><div class="line">        <span class="keyword">if</span> (intent.getAction().equals(DownloadManager.ACTION_DOWNLOAD_COMPLETE)) &#123;</div><div class="line">            <span class="keyword">long</span> downId = intent.getLongExtra(</div><div class="line">                    DownloadManager.EXTRA_DOWNLOAD_ID, -<span class="number">1</span>);</div><div class="line">            Cursor c = dm.query(<span class="keyword">new</span> DownloadManager.Query().setFilterById(downId));</div><div class="line">            <span class="keyword">if</span> (c.moveToFirst()) &#123;</div><div class="line">                <span class="keyword">int</span> status = c.getInt(c.getColumnIndex(DownloadManager.COLUMN_STATUS));</div><div class="line">                <span class="keyword">if</span> (status == DownloadManager.STATUS_SUCCESSFUL) &#123;</div><div class="line">                    <span class="comment">//downComplete(Uri.decode(c.getString(c.getColumnIndex(DownloadManager.COLUMN_LOCAL_URI)))) ;</span></div><div class="line">                    downComplete( c.getString(c.getColumnIndex(DownloadManager.COLUMN_LOCAL_FILENAME))) ;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//int reason = c.getInt(c.getColumnIndex(DownloadManager.COLUMN_REASON));</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (intent.getAction().equals(DownloadManager.ACTION_NOTIFICATION_CLICKED)) &#123;</div><div class="line">              <span class="keyword">long</span>[] ids = intent.getLongArrayExtra(DownloadManager.EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS);</div><div class="line">                <span class="comment">//点击通知栏取消下载</span></div><div class="line">                dm.remove(ids);</div><div class="line">                ToastUtil.showShortDefault(mContext, <span class="string">"已经取消下载"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">downComplete</span><span class="params">(String filePath)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"filePath : "</span> + filePath);</div><div class="line">        File _file = <span class="keyword">new</span> File(filePath.indexOf(<span class="string">"file://"</span>)!=-<span class="number">1</span>?filePath.substring(filePath.indexOf(<span class="string">"://"</span>)+<span class="number">3</span>):filePath);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">        intent.setAction(<span class="string">"android.intent.action.VIEW"</span>);<span class="comment">// 向用户显示数据</span></div><div class="line">        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<span class="comment">// 以新压入栈</span></div><div class="line">        intent.addCategory(<span class="string">"android.intent.category.DEFAULT"</span>);</div><div class="line">        Uri abc = Uri.fromFile(_file);</div><div class="line">        intent.setDataAndType(abc, <span class="string">"application/vnd.android.package-archive"</span>);</div><div class="line">        mContext.startActivity(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://www.trinea.cn/android/android-downloadmanager/" target="_blank" rel="external">1</a>,<a href="http://www.trinea.cn/android/android-downloadmanager-pro/" target="_blank" rel="external">2</a>,<a href="http://aswang.iteye.com/blog/1424149" target="_blank" rel="external">3</a>,<a href="https://github.com/flegare/JAV387_LaboWidget/blob/master/src/com/mobidroid/widgetfact/service/FactService.java" target="_blank" rel="external">4</a>,<a href="http://blog.csdn.net/liu149339750/article/details/8571971" target="_blank" rel="external">5</a>,<a href="http://blog.csdn.net/kroclin/article/details/41523299" target="_blank" rel="external">6</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中View的使用及解释①]]></title>
      <url>http://dalufan.com/2014/12/23/android-View-learn-one/</url>
      <content type="html"><![CDATA[<h3 id="LayoutInflater"><a href="#LayoutInflater" class="headerlink" title="LayoutInflater"></a>LayoutInflater</h3><pre><code>LayoutInflater layoutInflater = LayoutInflater.from(context);
//等同于
LayoutInflater LayoutInflater =
            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- activity_main.xml  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/main_layout"</span>  </div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;  </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line"></div><div class="line"><span class="comment">&lt;!-- button_layout.xml  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"300dp"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"80dp"</span>  </div><div class="line">    <span class="attr">android:text</span>=<span class="string">"Button"</span> &gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a> 
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;   </div><div class="line">    <span class="keyword">private</span> LinearLayout mainLayout;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        mainLayout = (LinearLayout) findViewById(R.id.main_layout);  </div><div class="line">        LayoutInflater layoutInflater = LayoutInflater.from(<span class="keyword">this</span>);  </div><div class="line">        View buttonLayout = layoutInflater.inflate(R.layout.button_layout, <span class="keyword">null</span>);  </div><div class="line">        mainLayout.addView(buttonLayout);  </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实这里不管你将Button的layout_width和layout_height的值修改成多少，都不会有任何效果的，因为这两个值现在已经完全失去了作用。因为它们其实是用于设置View在布局中的大小的，也就是说，<code>首先View必须存在于一个布局中</code>，之后如果将layout_width设置成match_parent表示让View的宽度填充满布局，如果设置成wrap_content表示让View的宽度刚好可以包含其内容，如果设置成具体的数值则View的宽度会变成相应的数值。这也是为什么这两个属性叫作layout_width和layout_height，而不是width和height。</p>
<p>再来看一下我们的button_layout.xml吧，很明显Button这个控件目前不存在于任何布局当中，所以layout_width和layout_height这两个属性理所当然没有任何作用。那么怎样修改才能让按钮的大小改变呢？解决方法其实有很多种，最简单的方式就是在Button的外面再嵌套一层布局，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"300dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"80dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span> &gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h3><p>平时在Activity中指定布局文件的时候，最外层的那个布局是可以指定大小的呀，layout_width和layout_height都是有作用的。确实，这主要是因为，在setContentView()方法中，<code>android会自动</code>在布局文件的最外层再嵌套一个<code>FrameLayout</code>，所以layout_width和layout_height属性才会有效果。那么我们来证实一下吧，修改MainActivity中的代码，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> LinearLayout mainLayout;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        mainLayout = (LinearLayout) findViewById(R.id.main_layout);  </div><div class="line">        ViewParent viewParent = mainLayout.getParent();  </div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"the parent of mainLayout is "</span> + viewParent);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//the parent of mainLayout is android.widget.FrameLayout@4142fb68</span></div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/guolin_blog/article/details/12921889" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中View的使用及解释②]]></title>
      <url>http://dalufan.com/2014/12/23/android-View-learn-two/</url>
      <content type="html"><![CDATA[<p>要知道，任何一个视图都不可能凭空突然出现在屏幕上，它们都是要经过非常科学的绘制流程后才能显示出来的。每一个视图的绘制过程都必须经历三个最主要的阶段，即<code>onMeasure()</code>、<code>onLayout()</code>和<code>onDraw()</code>，下面我们逐个对这三个阶段展开进行探讨。</p>
<a id="more"></a> 
<h3 id="一-onMeasure"><a href="#一-onMeasure" class="headerlink" title="一. onMeasure()"></a>一. onMeasure()</h3><p>measure是测量的意思，那么onMeasure()方法顾名思义就是用于测量视图的大小的。View系统的绘制流程会从ViewRoot的performTraversals()方法中开始，在其内部调用View的measure()方法。measure()方法接收两个参数，<code>widthMeasureSpec</code>和<code>heightMeasureSpec</code>，这两个值分别用于确定视图的宽度和高度的规格和大小。</p>
<p>MeasureSpec是一个32位的int值，其值由specMode（占2位）和specSize（占30位）共同组成的，其中specMode记录的是测量的模式，specSize记录的是大小。specMode一共有三种类型，如下所示：</p>
<p><strong>EXACTLY</strong>表示父视图希望子视图的大小应该是由specSize的值来决定的。<code>当我们指定layout_width的值或者为match_parent时，会使用该模式</code></p>
<p><strong>AT_MOST</strong>表示子视图最多只能是specSize中指定的大小，开发人员应该尽可能小得去设置这个视图，并且保证不会超过specSize。<code>当我们设置layout_width的值为wrap_content时，会使用该模式</code></p>
<p><strong>UNSPECIFIED</strong>表示开发人员可以将视图按照自己的意愿设置成任意的大小，没有任何限制。这种情况比较少见，不太会用到。</p>
<p><strong>补充：</strong>View类默认的onMeasure()方法只支持EXACTLY模式，如果在自定义控件的时候，不重写onMeasure()，只能使用EXACTLY模式。其他模式均需要重写onMeasure()。</p>
<p>那么你可能会有疑问了，<code>widthMeasureSpec</code>和<code>heightMeasureSpec</code>这两个值又是从哪里得到的呢？通常情况下，<code>这两个值都是由父视图经过计算后传递给子视图的</code>，说明父视图会在一定程度上决定子视图的大小。但是最外层的根视图，它的widthMeasureSpec和heightMeasureSpec又是从哪里得到的呢？这就需要去分析ViewRoot中的源码了，观察performTraversals()方法可以发现如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth, lp.width);  </div><div class="line">childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight, lp.height);</div></pre></td></tr></table></figure>
<p>可以看到，这里调用了getRootMeasureSpec()方法去获取widthMeasureSpec和heightMeasureSpec的值，注意方法中传入的参数，其中lp.width和lp.height在创建ViewGroup实例的时候就被赋值了，它们都等于<code>MATCH_PARENT</code>。然后看下getRootMeasureSpec()方法中的代码，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getRootMeasureSpec</span><span class="params">(<span class="keyword">int</span> windowSize, <span class="keyword">int</span> rootDimension)</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> measureSpec;  </div><div class="line">    <span class="keyword">switch</span> (rootDimension) &#123;  </div><div class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.MATCH_PARENT:  </div><div class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:  </div><div class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">default</span>:  </div><div class="line">        measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> measureSpec;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，这里使用了MeasureSpec.makeMeasureSpec()方法来组装一个MeasureSpec，当rootDimension参数等于MATCH_PARENT的时候，MeasureSpec的specMode就等于EXACTLY，当rootDimension等于WRAP_CONTENT的时候，MeasureSpec的specMode就等于AT_MOST。并且MATCH_PARENT和WRAP_CONTENT时的specSize都是等于windowSize的，也就意味着根视图总是会充满全屏的。</p>
<p>介绍了这么多MeasureSpec相关的内容，接下来我们看下View的measure()方法里面的代码吧，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">measure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> ((mPrivateFlags &amp; FORCE_LAYOUT) == FORCE_LAYOUT ||  </div><div class="line">            widthMeasureSpec != mOldWidthMeasureSpec ||  </div><div class="line">            heightMeasureSpec != mOldHeightMeasureSpec) &#123;  </div><div class="line">        mPrivateFlags &amp;= ~MEASURED_DIMENSION_SET;  </div><div class="line">        <span class="keyword">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;  </div><div class="line">            ViewDebug.trace(<span class="keyword">this</span>, ViewDebug.HierarchyTraceType.ON_MEASURE);  </div><div class="line">        &#125;  </div><div class="line">        onMeasure(widthMeasureSpec, heightMeasureSpec);  </div><div class="line">        <span class="keyword">if</span> ((mPrivateFlags &amp; MEASURED_DIMENSION_SET) != MEASURED_DIMENSION_SET) &#123;  </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"onMeasure() did not set the"</span>  </div><div class="line">                    + <span class="string">" measured dimension by calling"</span>  </div><div class="line">                    + <span class="string">" setMeasuredDimension()"</span>);  </div><div class="line">        &#125;  </div><div class="line">        mPrivateFlags |= LAYOUT_REQUIRED;  </div><div class="line">    &#125;  </div><div class="line">    mOldWidthMeasureSpec = widthMeasureSpec;  </div><div class="line">    mOldHeightMeasureSpec = heightMeasureSpec;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意观察，<code>measure()这个方法是final的</code>，因此我们无法在子类中去重写这个方法，说明android是不允许我们改变View的measure框架的。然后在第9行调用了onMeasure()方法，这里才是真正去测量并设置View大小的地方，默认会调用getDefaultSize()方法来获取视图的大小，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> result = size;  </div><div class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);  </div><div class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);  </div><div class="line">    <span class="keyword">switch</span> (specMode) &#123;  </div><div class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:  </div><div class="line">        result = size;  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:  </div><div class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:  </div><div class="line">        result = specSize;  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> result;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里传入的measureSpec是一直从measure()方法中传递过来的。然后调用MeasureSpec.getMode()方法可以解析出specMode，调用MeasureSpec.getSize()方法可以解析出specSize。接下来进行判断，如果specMode等于AT_MOST或EXACTLY就返回specSize，这也是系统默认的行为。之后会在onMeasure()方法中调用<code>setMeasuredDimension()</code>方法来设定测量出的大小，这样一次measure过程就结束了。</p>
<p>当然，一个界面的展示可能会涉及到很多次的measure，因为一个布局中一般都会包含多个子视图，每个视图都需要经历一次measure过程。ViewGroup中定义了一个measureChildren()方法来去测量子视图的大小，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildren</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = mChildrenCount;  </div><div class="line">    <span class="keyword">final</span> View[] children = mChildren;  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;  </div><div class="line">        <span class="keyword">final</span> View child = children[i];  </div><div class="line">        <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;  </div><div class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里首先会去遍历当前布局下的所有子视图，然后逐个调用measureChild()<br>方法来测量相应子视图的大小，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child, <span class="keyword">int</span> parentWidthMeasureSpec,  </span></span></div><div class="line">        <span class="keyword">int</span> parentHeightMeasureSpec) &#123;  </div><div class="line">    <span class="keyword">final</span> LayoutParams lp = child.getLayoutParams();  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,  </div><div class="line">            mPaddingLeft + mPaddingRight, lp.width);  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,  </div><div class="line">            mPaddingTop + mPaddingBottom, lp.height);  </div><div class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，在第4行和第6行分别调用了getChildMeasureSpec()方法来去计算子视图的MeasureSpec，计算的依据就是布局文件中定义的MATCH_PARENT、WRAP_CONTENT等值，这个方法的内部细节就不再贴出。然后在第8行调用子视图的measure()方法，并把计算出的MeasureSpec传递进去，之后的流程就和前面所介绍的一样了。<br>当然，onMeasure()方法是可以重写的，也就是说，如果你不想使用系统默认的测量方式，可以按照自己的意愿进行定制，比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;  </div><div class="line">  </div><div class="line">    ......  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;  </div><div class="line">        setMeasuredDimension(<span class="number">200</span>, <span class="number">200</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的话就把View默认的测量流程覆盖掉了，不管在布局文件中定义MyView这个视图的大小是多少，最终在界面上显示的大小都将会是200*200。</p>
<p>或者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;  </div><div class="line">  </div><div class="line">    ......  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;  </div><div class="line">        setMeasuredDimension(measureWidth(widthMeasureSpec), measureHeight(heightMeasureSpec));  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureWidth</span><span class="params">(<span class="keyword">int</span> measureSpec)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec) ;</div><div class="line">        <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(specMode==MeasureSpec.EXACTLY)&#123;</div><div class="line">            result = specSize;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            result = <span class="number">200</span>;</div><div class="line">            <span class="keyword">if</span>(specMode == MeasureSpec.AT_MOST)&#123;</div><div class="line">                result = Math.min(result,specSize);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureHeight</span><span class="params">(<span class="keyword">int</span> measureSpec)</span></span>&#123;</div><div class="line">       ......  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当模式为AT_MOST，需要设置为“指定大小”与specSize的最小值。</p>
<p>需要注意的是，<code>在setMeasuredDimension()</code>方法调用之后，我们<code>才能使用getMeasuredWidth()和getMeasuredHeight()</code>来获取视图测量出的宽高，以此之前调用这两个方法得到的值都会是0。</p>
<p>由此可见，视图大小的控制是由父视图、布局文件、以及视图本身共同完成的，父视图会提供给子视图参考的大小，而开发人员可以在XML文件中指定视图的大小，然后视图本身会对最终的大小进行拍板。</p>
<p>到此为止，我们就把视图绘制流程的第一阶段分析完了。</p>
<h3 id="二-onLayout"><a href="#二-onLayout" class="headerlink" title="二. onLayout()"></a>二. onLayout()</h3><p>measure过程结束后，视图的大小就已经测量好了，接下来就是layout的过程了。正如其名字所描述的一样，这个方法是用于给视图进行布局的，也就是确定视图的位置。ViewRoot的<code>performTraversals()</code>方法会在measure结束后继续执行，并调用View的layout()方法来执行此过程，如下所示：</p>
<pre><code>host.layout(0, 0, host.mMeasuredWidth, host.mMeasuredHeight);  
</code></pre><p>layout()方法接收四个参数，分别代表着左、上、右、下的坐标，当然这个坐标是相对于当前视图的父视图而言的。可以看到，这里还把刚才测量出的宽度和高度传到了layout()方法中。那么我们来看下layout()方法中的代码是什么样的吧，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> oldL = mLeft;  </div><div class="line">    <span class="keyword">int</span> oldT = mTop;  </div><div class="line">    <span class="keyword">int</span> oldB = mBottom;  </div><div class="line">    <span class="keyword">int</span> oldR = mRight;  </div><div class="line">    <span class="keyword">boolean</span> changed = setFrame(l, t, r, b);  </div><div class="line">    <span class="keyword">if</span> (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123;  </div><div class="line">        <span class="keyword">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;  </div><div class="line">            ViewDebug.trace(<span class="keyword">this</span>, ViewDebug.HierarchyTraceType.ON_LAYOUT);  </div><div class="line">        &#125;  </div><div class="line">        onLayout(changed, l, t, r, b);  </div><div class="line">        mPrivateFlags &amp;= ~LAYOUT_REQUIRED;  </div><div class="line">        <span class="keyword">if</span> (mOnLayoutChangeListeners != <span class="keyword">null</span>) &#123;  </div><div class="line">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =  </div><div class="line">                    (ArrayList&lt;OnLayoutChangeListener&gt;) mOnLayoutChangeListeners.clone();  </div><div class="line">            <span class="keyword">int</span> numListeners = listenersCopy.size();  </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;  </div><div class="line">                listenersCopy.get(i).onLayoutChange(<span class="keyword">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    mPrivateFlags &amp;= ~FORCE_LAYOUT;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在layout()方法中，首先会调用setFrame()方法来判断视图的大小是否发生过变化，以确定有没有必要对当前的视图进行重绘，同时还会在这里把传递过来的四个参数分别赋值给mLeft、mTop、mRight和mBottom这几个变量。接下来会在第11行调用onLayout()方法，正如onMeasure()方法中的默认行为一样，也许你已经迫不及待地想知道onLayout()方法中的默认行为是什么样的了。进入onLayout()方法，咦？怎么这是个空方法，一行代码都没有？！</p>
<p>没错，View中的onLayout()方法就是一个空方法，因为onLayout()过程是为了确定视图在布局中所在的位置，而这个操作应该是由布局来完成的，即<code>父视图决定子视图的显示位置</code>。既然如此，我们来看下ViewGroup中的onLayout()方法是怎么写的吧，代码如下：</p>
<pre><code>@Override  
protected abstract void onLayout(boolean changed, int l, int t, int r, int b);  
</code></pre><p>可以看到，ViewGroup中的onLayout()方法竟然是一个抽象方法，这就意味着所有ViewGroup的子类都必须重写这个方法。没错，像LinearLayout、RelativeLayout等布局，都是重写了这个方法，然后在内部按照各自的规则对子视图进行布局的。由于LinearLayout和RelativeLayout的布局规则都比较复杂，就不单独拿出来进行分析了，这里我们尝试自定义一个布局，借此来更深刻地理解onLayout()的过程。<br>自定义的这个布局目标很简单，只要能够包含一个子视图，并且让子视图正常显示出来就可以了。那么就给这个布局起名叫做SimpleLayout吧，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>(context, attrs);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);  </div><div class="line">        <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) &#123;  </div><div class="line">            View childView = getChildAt(<span class="number">0</span>);  </div><div class="line">            measureChild(childView, widthMeasureSpec, heightMeasureSpec);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) &#123;  </div><div class="line">            View childView = getChildAt(<span class="number">0</span>);  </div><div class="line">            childView.layout(<span class="number">0</span>, <span class="number">0</span>, childView.getMeasuredWidth(), childView.getMeasuredHeight());  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码非常的简单，我们来看下具体的逻辑吧。你已经知道，onMeasure()方法会在onLayout()方法之前调用，因此这里在onMeasure()方法中判断SimpleLayout中是否有包含一个子视图，如果有的话就调用measureChild()方法来测量出子视图的大小。<br>接着在onLayout()方法中同样判断SimpleLayout是否有包含一个子视图，然后调用这个子视图的layout()方法来确定它在SimpleLayout布局中的位置，这里传入的四个参数依次是0、0、childView.getMeasuredWidth()和childView.getMeasuredHeight()，分别代表着子视图在SimpleLayout中左上右下四个点的坐标。其中，调用childView.getMeasuredWidth()和childView.getMeasuredHeight()方法得到的值就是在onMeasure()方法中测量出的宽和高。</p>
<p>这样就已经把SimpleLayout这个布局定义好了，下面就是在XML文件中使用它了，如下所示：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;com.example.viewtest.SimpleLayout xmlns:android="http://schemas.android.com/apk/res/android"  </div><div class="line">    android:layout_width="match_parent"  </div><div class="line">    android:layout_height="match_parent" &gt;  </div><div class="line">      </div><div class="line">    &lt;ImageView   </div><div class="line">        android:layout_width="wrap_content"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:src="@drawable/ic_launcher"  </div><div class="line">        /&gt;  </div><div class="line">      </div><div class="line">&lt;/com.example.viewtest.SimpleLayout&gt;</div></pre></td></tr></table></figure>
<p>可以看到，我们能够像使用普通的布局文件一样使用SimpleLayout，只是注意它只能包含一个子视图，多余的子视图会被舍弃掉。如果你想改变ImageView显示的位置，只需要改变childView.layout()方法的四个参数就行了。</p>
<p>在onLayout()过程结束后，我们就可以调用getWidth()方法和getHeight()方法来获取视图的宽高了。说到这里，我相信很多朋友长久以来都会有一个疑问，<code>getWidth()</code>方法和<code>getMeasureWidth()</code>方法到底有什么区别呢？它们的值好像永远都是相同的。其实它们的值之所以会相同基本都是因为布局设计者的编码习惯非常好，实际上它们之间的差别还是挺大的。</p>
<ul>
<li>首先getMeasureWidth()方法在measure()过程结束后就可以获取到了，</li>
<li>而getWidth()方法要在layout()过程结束后才能获取到。</li>
<li>另外，getMeasureWidth()方法中的值是通过setMeasuredDimension()方法来进行设置的，</li>
<li>而getWidth()方法中的值则是通过视图右边的坐标减去左边的坐标计算出来的。</li>
</ul>
<p>观察SimpleLayout中onLayout()方法的代码，这里给子视图的layout()方法传入的四个参数分别是0、0、childView.getMeasuredWidth()和childView.getMeasuredHeight()，因此getWidth()方法得到的值就是childView.getMeasuredWidth() - 0 = childView.getMeasuredWidth() ，所以此时getWidth()方法和getMeasuredWidth() 得到的值就是相同的，但如果你将onLayout()方法中的代码进行如下修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) &#123;  </div><div class="line">        View childView = getChildAt(<span class="number">0</span>);  </div><div class="line">        childView.layout(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样getWidth()方法得到的值就是200 - 0 = 200，不会再和getMeasuredWidth()的值相同了。当然这种做法充分不尊重measure()过程计算出的结果，通常情况下是不推荐这么写的。getHeight()与getMeasureHeight()方法之间的关系同上，就不再重复分析了。<br>到此为止，我们把视图绘制流程的第二阶段也分析完了。</p>
<h3 id="三-onDraw"><a href="#三-onDraw" class="headerlink" title="三. onDraw()"></a>三. onDraw()</h3><p>measure和layout的过程都结束后，接下来就进入到draw的过程了。同样，根据名字你就能够判断出，在这里才真正地开始对视图进行绘制。ViewRoot中的代码会继续执行并创建出一个Canvas对象，然后调用View的draw()方法来执行具体的绘制工作。draw()方法内部的绘制过程总共可以分为六步，其中第二步和第五步在一般情况下很少用到，因此这里我们只分析简化后的绘制过程。代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;  </div><div class="line">        ViewDebug.trace(<span class="keyword">this</span>, ViewDebug.HierarchyTraceType.DRAW);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> privateFlags = mPrivateFlags;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> dirtyOpaque = (privateFlags &amp; DIRTY_MASK) == DIRTY_OPAQUE &amp;&amp;  </div><div class="line">            (mAttachInfo == <span class="keyword">null</span> || !mAttachInfo.mIgnoreDirtyState);  </div><div class="line">    mPrivateFlags = (privateFlags &amp; ~DIRTY_MASK) | DRAWN;  </div><div class="line">    <span class="comment">// Step 1, draw the background, if needed  </span></div><div class="line">    <span class="keyword">int</span> saveCount;  </div><div class="line">    <span class="keyword">if</span> (!dirtyOpaque) &#123;  </div><div class="line">        <span class="keyword">final</span> Drawable background = mBGDrawable;  </div><div class="line">        <span class="keyword">if</span> (background != <span class="keyword">null</span>) &#123;  </div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> scrollX = mScrollX;  </div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> scrollY = mScrollY;  </div><div class="line">            <span class="keyword">if</span> (mBackgroundSizeChanged) &#123;  </div><div class="line">                background.setBounds(<span class="number">0</span>, <span class="number">0</span>,  mRight - mLeft, mBottom - mTop);  </div><div class="line">                mBackgroundSizeChanged = <span class="keyword">false</span>;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">if</span> ((scrollX | scrollY) == <span class="number">0</span>) &#123;  </div><div class="line">                background.draw(canvas);  </div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                canvas.translate(scrollX, scrollY);  </div><div class="line">                background.draw(canvas);  </div><div class="line">                canvas.translate(-scrollX, -scrollY);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;  </div><div class="line">    <span class="keyword">boolean</span> horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != <span class="number">0</span>;  </div><div class="line">    <span class="keyword">boolean</span> verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != <span class="number">0</span>;  </div><div class="line">    <span class="keyword">if</span> (!verticalEdges &amp;&amp; !horizontalEdges) &#123;  </div><div class="line">        <span class="comment">// Step 3, draw the content  </span></div><div class="line">        <span class="keyword">if</span> (!dirtyOpaque) onDraw(canvas);  </div><div class="line">        <span class="comment">// Step 4, draw the children  </span></div><div class="line">        dispatchDraw(canvas);  </div><div class="line">        <span class="comment">// Step 6, draw decorations (scrollbars)  </span></div><div class="line">        onDrawScrollBars(canvas);  </div><div class="line">        <span class="comment">// we're done...  </span></div><div class="line">        <span class="keyword">return</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，第一步是从第9行代码开始的，这一步的作用是对视图的背景进行绘制。这里会先得到一个mBGDrawable对象，然后根据layout过程确定的视图位置来设置背景的绘制区域，之后再调用Drawable的draw()方法来完成背景的绘制工作。那么这个mBGDrawable对象是从哪里来的呢？其实就是在XML中通过android:background属性设置的图片或颜色。当然你也可以在代码中通过setBackgroundColor()、setBackgroundResource()等方法进行赋值。</p>
<p>接下来的第三步是在第34行执行的，这一步的作用是对视图的内容进行绘制。可以看到，这里去调用了一下onDraw()方法，那么onDraw()方法里又写了什么代码呢？进去一看你会发现，原来又是个空方法啊。其实也可以理解，因为每个视图的内容部分肯定都是各不相同的，这部分的功能交给子类来去实现也是理所当然的。</p>
<p>第三步完成之后紧接着会执行第四步，这一步的作用是对当前视图的所有子视图进行绘制。但如果当前的视图没有子视图，那么也就不需要进行绘制了。因此你会发现View中的dispatchDraw()方法又是一个空方法，而ViewGroup的dispatchDraw()方法中就会有具体的绘制代码。</p>
<p>以上都执行完后就会进入到第六步，也是最后一步，这一步的作用是对视图的滚动条进行绘制。那么你可能会奇怪，当前的视图又不一定是ListView或者ScrollView，为什么要绘制滚动条呢？其实不管是Button也好，TextView也好，任何一个视图都是有滚动条的，只是一般情况下我们都没有让它显示出来而已。绘制滚动条的代码逻辑也比较复杂，这里就不再贴出来了，因为我们的重点是第三步过程。</p>
<p>通过以上流程分析，相信大家已经知道，View是不会帮我们绘制内容部分的，因此需要每个视图根据想要展示的内容来自行绘制。如果你去观察TextView、ImageView等类的源码，你会发现它们都有重写onDraw()这个方法，并且在里面执行了相当不少的绘制逻辑。绘制的方式主要是借助Canvas这个类，它会作为参数传入到onDraw()方法中，供给每个视图使用。Canvas这个类的用法非常丰富，基本可以把它当成一块画布，在上面绘制任意的东西，那么我们就来尝试一下吧。</p>
<p>这里简单起见，我只是创建一个非常简单的视图，并且用Canvas随便绘制了一点东西，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Paint mPaint;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>(context, attrs);  </div><div class="line">        mPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">        mPaint.setColor(Color.YELLOW);  </div><div class="line">        canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight(), mPaint);  </div><div class="line">        mPaint.setColor(Color.BLUE);  </div><div class="line">        mPaint.setTextSize(<span class="number">20</span>);  </div><div class="line">        String text = <span class="string">"Hello View"</span>;  </div><div class="line">        canvas.drawText(text, <span class="number">0</span>, getHeight() / <span class="number">2</span>, mPaint);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，我们创建了一个自定义的MyView继承自View，并在MyView的构造函数中创建了一个Paint对象。Paint就像是一个画笔一样，配合着Canvas就可以进行绘制了。这里我们的绘制逻辑比较简单，在onDraw()方法中先是把画笔设置成黄色，然后调用Canvas的drawRect()方法绘制一个矩形。然后在把画笔设置成蓝色，并调整了一下文字的大小，然后调用drawText()方法绘制了一段文字。<br>就这么简单，一个自定义的视图就已经写好了，现在可以在XML中加入这个视图，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">com.example.viewtest.MyView</span>   </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span>  </div><div class="line">        /&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/guolin_blog/article/details/16330267" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android ContentProvider基本使用]]></title>
      <url>http://dalufan.com/2014/12/21/android-ContentProvider-learn/</url>
      <content type="html"><![CDATA[<h3 id="一、ContentProvider简介"><a href="#一、ContentProvider简介" class="headerlink" title="一、ContentProvider简介"></a>一、ContentProvider简介</h3><p>当应用继承ContentProvider类，并重写该类用于提供数据和存储数据的方法，就可以向其他应用共享其数据。ContentProvider为存储和获取数据提供了统一的接口。虽然使用其他方法也可以对外共享数据，但数据访问方式会因数据存储的方式而不同，如采用文件方式对外共享数据，需要进行文件操作读写数据；采用sharedpreferences共享数据，需要使用sharedpreferences API读写数据。而使用ContentProvider共享数据的好处是统一了数据访问方式。</p>
<pre><code>//通过Uri进行查询，返回一个Cursor
query(Uri uri, String[] projection, String selection, String[] selectionArgs,String sortOrder)
//将一组数据插入到Uri 指定的地方
insert(Uri url, ContentValues values)
//更新Uri指定位置的数据
update(Uri uri, ContentValues values, String where, String[] selectionArgs)
//删除指定Uri并且符合一定条件的数据
delete(Uri url, String where, String[] selectionArgs)
</code></pre><a id="more"></a> 
<h3 id="二、Uri类简介"><a href="#二、Uri类简介" class="headerlink" title="二、Uri类简介"></a>二、Uri类简介</h3><p>Uri代表了要操作的数据，Uri主要包含了两部分信息：</p>
<ul>
<li>需要操作的ContentProvider;</li>
<li>对ContentProvider中的什么数据进行操作，一个Uri由以下几部分组成：</li>
</ul>
<ol>
<li>scheme：ContentProvider（内容提供者）的scheme已经由android所规定为：content://。</li>
<li>主机名（或Authority）：用于唯一标识这个ContentProvider，外部调用者可以根据这个标识来找到它。</li>
<li><p>路径（path）：可以用来表示我们要操作的数据，路径的构建应根据业务而定，如下：</p>
<ul>
<li>要操作contact表中id为10的记录，可以构建这样的路径:<code>/contact/10</code></li>
<li>要操作contact表中id为10的记录的name字段， <code>contact/10/name</code></li>
<li>要操作contact表中的所有记录，可以构建这样的路径:<code>/contact</code></li>
<li>要操作的数据不一定来自数据库，也可以是文件等他存储方式，如下:<br>要操作xml文件中contact节点下的name节点，可以构建这样的路径：<code>/contact/name</code></li>
</ul>
</li>
</ol>
<p>如果要把一个字符串转换成Uri，可以使用Uri类中的parse()方法，如下：</p>
<pre><code>Uri uri = Uri.parse(&quot;content://com.changcheng.provider.contactprovider/contact&quot;)
</code></pre><h3 id="三、UriMatcher、ContentUris和ContentResolver简介"><a href="#三、UriMatcher、ContentUris和ContentResolver简介" class="headerlink" title="三、UriMatcher、ContentUris和ContentResolver简介"></a>三、UriMatcher、ContentUris和ContentResolver简介</h3><p><strong>Uri</strong>代表了要操作的数据，所以经常需要解析Uri，并从Uri中获取数据。android系统提供了两个用于操作Uri的工具类，分别为UriMatcher 和ContentUris。掌握它们的使用会便于我们的开发工作。</p>
<p><strong>UriMatcher</strong>用于匹配Uri</p>
<p>①把需要匹配Uri路径全部给注册上</p>
<pre><code>//常量UriMatcher.NO_MATCH表示不匹配任何路径的返回码(-1)。
UriMatcher  uriMatcher = new UriMatcher(UriMatcher.NO_MATCH); 
//如果match()方法匹配content://com.changcheng.sqlite.provider.contactprovider/contact路径，返回匹配码为1
uriMatcher.addURI(“com.changcheng.sqlite.provider.contactprovider”, “contact”, 1);//添加需要匹配uri，如果匹配就会返回匹配码
//如果match()方法匹配   content://com.changcheng.sqlite.provider.contactprovider/contact/230路径，返回匹配码为2
uriMatcher.addURI(“com.changcheng.sqlite.provider.contactprovider”, “contact/#”, 2);//#号为通配符
</code></pre><p>②注册完需要匹配的Uri后，就可以使用uriMatcher.match(uri)方法对输入的Uri进行匹配<br>,如果匹配就返回匹配码，匹配码是调用addURI()方法传入的第三个参数，假设匹配content://com.changcheng.sqlite.provider.contactprovider/contact路径，返回的匹配码为1。</p>
<p><strong>ContentUris</strong>是对URI的操作类，其中的<code>withAppendedId(uri, id)</code>用于为路径加上ID部分，parseId(uri)方法用于从路径中获取ID部分方法很实用。</p>
<pre><code>Uri insertUri = Uri.parse(&quot;content://cn.xyCompany.providers.personProvider/person&quot; + id);等价于
Uri insertUri = ContentUris.withAppendedId(uri, id);
</code></pre><p><strong>ContentResolver</strong>当外部应用需要对ContentProvider中的数据进行添加、删除、修改和查询操作时，可以使用ContentResolver 类来完成。要获取ContentResolver 对象，可以使用Activity提供的getContentResolver()方法。 ContentResolver使用insert、delete、update、query方法来操作数据。</p>
<h3 id="四、ContentProvider示例程序"><a href="#四、ContentProvider示例程序" class="headerlink" title="四、ContentProvider示例程序"></a>四、ContentProvider示例程序</h3><p>当数据需要在应用程序间共享时，我们就可以利用ContentProvider为数据定义一个URI。之后其他应用程序对数据进行查询或者修改时，只需要从当前上下文对象获得一个ContentResolver(内容解析器)传入相应的URI就可以了。<br>contentProvider和Activity一样是android的组件，故使用前需要在androidManifest.xml中注册，必须放在主应用所在包或其子包下,即需要在<application></application>中为provider进行注册！！！！。</p>
<p>Manifest.xml中的代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:icon</span>=<span class="string">"@drawable/icon"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".TestWebviewDemo"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">"vnd.android.cursor.dir/vnd.ruixin.login"</span> /&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">"vnd.android.cursor.item/vnd.ruixin.login"</span> /&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">                         </div><div class="line">                <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 配置内容提供者,android:authorities为该内容提供者取名作为在本应用中的唯一标识 --&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">provider</span> <span class="attr">android:name</span>=<span class="string">"MyProvider"</span> <span class="attr">android:authorities</span>=<span class="string">"com.ruixin.login"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="首先定义一个数据库的工具类："><a href="#首先定义一个数据库的工具类：" class="headerlink" title="首先定义一个数据库的工具类："></a>首先定义一个数据库的工具类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuiXin</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DBNAME = <span class="string">"ruixinonlinedb"</span>; </div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TNAME = <span class="string">"ruixinonline"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERSION = <span class="number">3</span>;</div><div class="line">         </div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String TID = <span class="string">"tid"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EMAIL = <span class="string">"email"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">"username"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATE = <span class="string">"date"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEX = <span class="string">"sex"</span>;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTOHORITY = <span class="string">"com.ruixin.login"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEM = <span class="number">1</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEM_ID = <span class="number">2</span>;</div><div class="line">         </div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTENT_TYPE = <span class="string">"vnd.android.cursor.dir/vnd.ruixin.login"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTENT_ITEM_TYPE = <span class="string">"vnd.android.cursor.item/vnd.ruixin.login"</span>;</div><div class="line">         </div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri CONTENT_URI = Uri.parse(<span class="string">"content://"</span> + AUTOHORITY + <span class="string">"/ruixinonline"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="然后创建一个数据库："><a href="#然后创建一个数据库：" class="headerlink" title="然后创建一个数据库："></a>然后创建一个数据库：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBlite</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DBlite</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>(context, RuiXin.DBNAME, <span class="keyword">null</span>, RuiXin.VERSION);</div><div class="line">                <span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                        db.execSQL(<span class="string">"create table "</span>+RuiXin.TNAME+<span class="string">"("</span> +</div><div class="line">                                RuiXin.TID+<span class="string">" integer primary key autoincrement not null,"</span>+</div><div class="line">                                RuiXin.EMAIL+<span class="string">" text not null,"</span> +</div><div class="line">                                RuiXin.USERNAME+<span class="string">" text not null,"</span> +</div><div class="line">                                RuiXin.DATE+<span class="string">" interger not null,"</span>+</div><div class="line">                                RuiXin.SEX+<span class="string">" text not null);"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String email,String username,String date,String sex)</span></span>&#123;</div><div class="line">                SQLiteDatabase db = getWritableDatabase();</div><div class="line">                ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">                values.put(RuiXin.EMAIL, email);</div><div class="line">                values.put(RuiXin.USERNAME, username);</div><div class="line">                values.put(RuiXin.DATE, date);</div><div class="line">                values.put(RuiXin.SEX, sex);</div><div class="line">                db.insert(RuiXin.TNAME,<span class="string">""</span>,values);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="接着创建一个Myprovider-java对数据库的接口进行包装："><a href="#接着创建一个Myprovider-java对数据库的接口进行包装：" class="headerlink" title="接着创建一个Myprovider.java对数据库的接口进行包装："></a>接着创建一个Myprovider.java对数据库的接口进行包装：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span></span>&#123; </div><div class="line">        DBlite dBlite;</div><div class="line">        SQLiteDatabase db;         </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UriMatcher sMatcher;</div><div class="line">        <span class="keyword">static</span>&#123;</div><div class="line">          <span class="comment">// 若不匹配采用UriMatcher.NO_MATCH(-1)返回  </span></div><div class="line">          sMatcher = <span class="keyword">new</span> UriMatcher(UriMatcher.NO_MATCH);</div><div class="line">          <span class="comment">//对等待匹配的URI进行匹配操作，必须符合RuiXin.AUTOHORITY格式  </span></div><div class="line">          <span class="comment">//匹配返回RuiXin.ITEM，不匹配返回-1  </span></div><div class="line">          sMatcher.addURI(RuiXin.AUTOHORITY,RuiXin.TNAME, RuiXin.ITEM);</div><div class="line">          sMatcher.addURI(RuiXin.AUTOHORITY,RuiXin.TNAME+<span class="string">"/#"</span>, RuiXin.ITEM_ID);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                db = dBlite.getWritableDatabase();</div><div class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">                <span class="keyword">switch</span> (sMatcher.match(uri)) &#123;</div><div class="line">                <span class="keyword">case</span> RuiXin.ITEM:</div><div class="line">                        count = db.delete(RuiXin.TNAME,selection, selectionArgs);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> RuiXin.ITEM_ID:</div><div class="line">                        String id = uri.getPathSegments().get(<span class="number">1</span>);</div><div class="line">                        count = db.delete(RuiXin.TID, RuiXin.TID+<span class="string">"="</span>+id+(!TextUtils.isEmpty(RuiXin.TID=<span class="string">"?"</span>)?<span class="string">"AND("</span>+selection+<span class="string">')'</span>:<span class="string">""</span>), selectionArgs);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown URI"</span>+uri);</div><div class="line">                &#125;</div><div class="line">                getContext().getContentResolver().notifyChange(uri, <span class="keyword">null</span>);</div><div class="line">                <span class="keyword">return</span> count;</div><div class="line">        &#125;</div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 返回对应的内容类型 </div><div class="line">     * 如果返回集合的内容类型，必须以vnd.android.cursor.dir开头 </div><div class="line">     * 如果是单个元素，必须以vnd.android.cursor.item开头 </div><div class="line">     */  </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                <span class="keyword">switch</span> (sMatcher.match(uri)) &#123;</div><div class="line">                <span class="keyword">case</span> RuiXin.ITEM:</div><div class="line">                        <span class="keyword">return</span> RuiXin.CONTENT_TYPE;</div><div class="line">                <span class="keyword">case</span> RuiXin.ITEM_ID:</div><div class="line">                    <span class="keyword">return</span> RuiXin.CONTENT_ITEM_TYPE;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown URI"</span>+uri);</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                 </div><div class="line">                db = dBlite.getWritableDatabase();</div><div class="line">                <span class="keyword">long</span> rowId;</div><div class="line">                <span class="keyword">if</span>(sMatcher.match(uri)!=RuiXin.ITEM)&#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown URI"</span>+uri);</div><div class="line">                &#125;</div><div class="line">                rowId = db.insert(RuiXin.TNAME,RuiXin.TID,values);</div><div class="line">                   <span class="keyword">if</span>(rowId&gt;<span class="number">0</span>)&#123;</div><div class="line">                           Uri noteUri=ContentUris.withAppendedId(RuiXin.CONTENT_URI, rowId);</div><div class="line">                           getContext().getContentResolver().notifyChange(noteUri, <span class="keyword">null</span>);</div><div class="line">                           <span class="keyword">return</span> noteUri;</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown URI"</span>+uri);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                <span class="keyword">this</span>.dBlite = <span class="keyword">new</span> DBlite(<span class="keyword">this</span>.getContext());</div><div class="line"><span class="comment">//                db = dBlite.getWritableDatabase();</span></div><div class="line"><span class="comment">//                return (db == null)?false:true;</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String selection,</span></span></div><div class="line">                        String[] selectionArgs, String sortOrder) &#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                db = dBlite.getWritableDatabase();                </div><div class="line">                Cursor c;</div><div class="line">                Log.d(<span class="string">"-------"</span>, String.valueOf(sMatcher.match(uri)));</div><div class="line">                <span class="keyword">switch</span> (sMatcher.match(uri)) &#123;</div><div class="line">                <span class="keyword">case</span> RuiXin.ITEM:</div><div class="line">                        c = db.query(RuiXin.TNAME, projection, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                 </div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> RuiXin.ITEM_ID:</div><div class="line">                        String id = uri.getPathSegments().get(<span class="number">1</span>);</div><div class="line">                        c = db.query(RuiXin.TNAME, projection, RuiXin.TID+<span class="string">"="</span>+id+(!TextUtils.isEmpty(selection)?<span class="string">"AND("</span>+selection+<span class="string">')'</span>:<span class="string">""</span>),selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                        Log.d(<span class="string">"!!!!!!"</span>, <span class="string">"Unknown URI"</span>+uri);</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown URI"</span>+uri);</div><div class="line">                &#125;</div><div class="line">                c.setNotificationUri(getContext().getContentResolver(), uri);</div><div class="line">                <span class="keyword">return</span> c;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues values, String selection,</span></span></div><div class="line">                        String[] selectionArgs) &#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="最后创建测试类："><a href="#最后创建测试类：" class="headerlink" title="最后创建测试类："></a>最后创建测试类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="comment">/** Called when the activity is first created. */</span></div><div class="line">   <span class="keyword">private</span> DBlite dBlite1 = <span class="keyword">new</span> DBlite(<span class="keyword">this</span>);;</div><div class="line">        <span class="keyword">private</span> ContentResolver contentResolver;</div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">                setContentView(R.layout.main);</div><div class="line">                <span class="comment">//先对数据库进行添加数据</span></div><div class="line">            dBlite1.add(email,username,date,sex);</div><div class="line">            <span class="comment">//通过contentResolver进行查找</span></div><div class="line">             contentResolver = TestWebviewDemo.<span class="keyword">this</span>.getContentResolver();</div><div class="line">            Cursor cursor = contentResolver.query(</div><div class="line">                  RuiXin.CONTENT_URI, <span class="keyword">new</span> String[] &#123;</div><div class="line">                  RuiXin.EMAIL, RuiXin.USERNAME,</div><div class="line">                  RuiXin.DATE,RuiXin.SEX &#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">                     Toast.makeText(</div><div class="line">                    TestWebviewDemo.<span class="keyword">this</span>,</div><div class="line">                    cursor.getString(cursor.getColumnIndex(RuiXin.EMAIL))</div><div class="line">                            + <span class="string">" "</span></div><div class="line">                            + cursor.getString(cursor.getColumnIndex(RuiXin.USERNAME))</div><div class="line">                            + <span class="string">" "</span></div><div class="line">                            + cursor.getString(cursor.getColumnIndex(RuiXin.DATE))</div><div class="line">                            + <span class="string">" "</span></div><div class="line">                            + cursor.getString(cursor.getColumnIndex(RuiXin.SEX)),</div><div class="line">                           Toast.LENGTH_SHORT).show();</div><div class="line">                     &#125;</div><div class="line">                   startManagingCursor(cursor);  <span class="comment">//查找后关闭游标</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>注：上面是在一个程序中进行的测试，也可以再新建一个工程来模拟一个新的程序，然后将上面查询的代码加到新的程序当中！这样就模拟了contentprovider的数据共享功能了！<br>新建个工程：TestProvider<br>创建一个测试的activity</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="comment">/** Called when the activity is first created. */</span></div><div class="line">        <span class="keyword">private</span> ContentResolver contentResolver;</div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">                setContentView(R.layout.main);               </div><div class="line">            <span class="comment">//通过contentResolver进行查找</span></div><div class="line">              contentResolver = TestWebviewDemo.<span class="keyword">this</span>.getContentResolver();                     </div><div class="line">             Cursor cursor = contentResolver.query(</div><div class="line">                RuiXin.CONTENT_URI, <span class="keyword">new</span> String[] &#123;</div><div class="line">                RuiXin.EMAIL, RuiXin.USERNAME,</div><div class="line">                RuiXin.DATE,RuiXin.SEX &#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">               Toast.makeText(TestWebviewDemo.<span class="keyword">this</span>,</div><div class="line">                       cursor.getString(cursor.getColumnIndex(RuiXin.EMAIL))</div><div class="line">                       + <span class="string">" "</span></div><div class="line">                       + cursor.getString(cursor.getColumnIndex(RuiXin.USERNAME))</div><div class="line">                       + <span class="string">" "</span></div><div class="line">                       + cursor.getString(cursor.getColumnIndex(RuiXin.DATE))</div><div class="line">                       + <span class="string">" "</span></div><div class="line">                       + cursor.getString(cursor.getColumnIndex(RuiXin.SEX)),</div><div class="line">                       Toast.LENGTH_SHORT).show();</div><div class="line">                   &#125;</div><div class="line">                   startManagingCursor(cursor);  <span class="comment">//查找后关闭游标</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>运行此程序就能实现共享数据查询了！</p>
<p>注：<code>新建的程序中的manifest.xml中不需要对provider进行注册，直接运行就行，否则会报错！</code></p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/woshixuye/article/details/8280879" target="_blank" rel="external">1</a>,<a href="http://www.cnblogs.com/chenglong/articles/1892029.html" target="_blank" rel="external">2</a>,<a href="http://www.cnblogs.com/Ashia/archive/2012/03/05/2378873.html" target="_blank" rel="external">3</a>,<a href="http://www.cnblogs.com/bravestarrhu/archive/2012/05/02/2479461.html" target="_blank" rel="external">4</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中Uri的使用]]></title>
      <url>http://dalufan.com/2014/12/21/android-Uri-learn/</url>
      <content type="html"><![CDATA[<h3 id="1-Uri"><a href="#1-Uri" class="headerlink" title="1.Uri"></a>1.Uri</h3><p>通用资源标志符（Universal Resource Identifier, 简称”URI”）。<br>Uri代表要操作的数据，android上可用的每种资源 - 图像、视频片段等都可以用Uri来表示。</p>
<p>URI一般由三部分组成： </p>
<ol>
<li>访问资源的命名机制。 </li>
<li>存放资源的主机名。 </li>
<li>资源自身的名称，由路径表示。 </li>
</ol>
<a id="more"></a> 
<p>android的Uri由以下三部分组成： “content://“、数据的路径、标示ID(可选)<br>举些例子，如： </p>
<ul>
<li>所有联系人的Uri：<code>content://contacts/people</code></li>
<li>某个联系人的Uri: <code>content://contacts/people/5</code></li>
<li>所有图片Uri: <code>content://media/external</code></li>
<li>某个图片的Uri：<code>content://media/external/images/media/4</code></li>
</ul>
<p>我们很经常需要解析Uri，并从Uri中获取数据。android系统提供了两个用于操作Uri的工具类，分别为UriMatcher 和ContentUris 。<br>虽然这两类不是非常重要，但是掌握它们的使用，会便于我们的开发工作。下面就一起看一下这两个类的作用。</p>
<h3 id="2-UriMatcher"><a href="#2-UriMatcher" class="headerlink" title="2.UriMatcher"></a>2.UriMatcher</h3><p>UriMatcher 类主要用于匹配Uri.使用方法如下。</p>
<p>首先第一步，初始化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UriMatcher matcher = <span class="keyword">new</span> UriMatcher(UriMatcher.NO_MATCH);</div></pre></td></tr></table></figure>
<p>第二步注册需要的Uri:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">matcher.addURI(<span class="string">"com.yfz.Lesson"</span>, <span class="string">"people"</span>, PEOPLE);  </div><div class="line">matcher.addURI(<span class="string">"com.yfz.Lesson"</span>, <span class="string">"person/#"</span>, PEOPLE_ID);</div></pre></td></tr></table></figure>
<p>第三部，与已经注册的Uri进行匹配:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Uri uri = Uri.parse(<span class="string">"content://"</span> + <span class="string">"com.yfz.Lesson"</span> + <span class="string">"/people"</span>);  </div><div class="line"><span class="keyword">int</span> match = matcher.match(uri);  </div><div class="line">       <span class="keyword">switch</span> (match)  </div><div class="line">       &#123;  </div><div class="line">           <span class="keyword">case</span> PEOPLE:  </div><div class="line">               <span class="keyword">return</span> <span class="string">"vnd.android.cursor.dir/people"</span>;  </div><div class="line">           <span class="keyword">case</span> PEOPLE_ID:  </div><div class="line">               <span class="keyword">return</span> <span class="string">"vnd.android.cursor.item/people"</span>;  </div><div class="line">           <span class="keyword">default</span>:  </div><div class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>match方法匹配后会返回一个匹配码Code，即在使用注册方法addURI时传入的第三个参数。 </p>
<p>上述方法会返回”vnd.android.cursor.dir/person”. </p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h4><p>–常量<strong>UriMatcher.NO_MATCH</strong>表示不匹配任何路径的返回码</p>
<p>–<strong>#</strong> 号为通配符</p>
<p>–<strong>*</strong> 号为任意字符 </p>
<p>另外说一下，官方SDK说明中关于Uri的注册是这样写的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UriMatcher sURIMatcher = <span class="keyword">new</span> UriMatcher();  </div><div class="line">    <span class="keyword">static</span>  </div><div class="line">    &#123;  </div><div class="line">        sURIMatcher.addURI(<span class="string">"contacts"</span>, <span class="string">"/people"</span>, PEOPLE);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"contacts"</span>, <span class="string">"/people/#"</span>, PEOPLE_ID);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"contacts"</span>, <span class="string">"/people/#/phones"</span>, PEOPLE_PHONES);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"contacts"</span>, <span class="string">"/people/#/phones/#"</span>, PEOPLE_PHONES_ID);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"contacts"</span>, <span class="string">"/people/#/contact_methods"</span>, PEOPLE_CONTACTMETHODS);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"contacts"</span>, <span class="string">"/people/#/contact_methods/#"</span>, PEOPLE_CONTACTMETHODS_ID);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"contacts"</span>, <span class="string">"/deleted_people"</span>, DELETED_PEOPLE);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"contacts"</span>, <span class="string">"/phones"</span>, PHONES);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"contacts"</span>, <span class="string">"/phones/filter/*"</span>, PHONES_FILTER);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"contacts"</span>, <span class="string">"/phones/#"</span>, PHONES_ID);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"contacts"</span>, <span class="string">"/contact_methods"</span>, CONTACTMETHODS);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"contacts"</span>, <span class="string">"/contact_methods/#"</span>, CONTACTMETHODS_ID);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"call_log"</span>, <span class="string">"/calls"</span>, CALLS);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"call_log"</span>, <span class="string">"/calls/filter/*"</span>, CALLS_FILTER);  </div><div class="line">        sURIMatcher.addURI(<span class="string">"call_log"</span>, <span class="string">"/calls/#"</span>, CALLS_ID);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个说明估计已经是Google官方没有更新，首先是初始化方法，没有传参，那么现在初始化时，实际是必须传参的。 可以看一下android2.2的源码，无参数的构造方法已经是private的了。</p>
<p>另外就是addURI这个方法，第二个参数开始时<code>不需要</code>“/“， 否则是无法匹配成功的。</p>
<h3 id="3-ContentUris"><a href="#3-ContentUris" class="headerlink" title="3.ContentUris"></a>3.ContentUris</h3><p>ContentUris 类用于获取Uri路径后面的ID部分</p>
<p>1)为路径加上ID: withAppendedId(uri, id)</p>
<p>比如有这样一个Uri</p>
<pre><code>Uri uri = Uri.parse(&quot;content://com.yfz.Lesson/people&quot;)  
</code></pre><p>通过withAppendedId方法，为该Uri加上ID</p>
<pre><code>Uri resultUri = ContentUris.withAppendedId(uri, 10);  
</code></pre><p>最后resultUri为: content://com.yfz.Lesson/people/10</p>
<p>2)从路径中获取ID: parseId(uri)</p>
<pre><code>Uri uri = Uri.parse(&quot;content://com.yfz.Lesson/people/10&quot;)  
long personid = ContentUris.parseId(uri);  
</code></pre><p>最后personid 为 :10 </p>
<p>附上实验的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yfz;  </div><div class="line"><span class="keyword">import</span> com.yfz.log.Logger;  </div><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.content.ContentUris;  </div><div class="line"><span class="keyword">import</span> android.content.UriMatcher;  </div><div class="line"><span class="keyword">import</span> android.net.Uri;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lesson_14</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;            </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY = <span class="string">"com.yfz.Lesson"</span>;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PEOPLE = <span class="number">1</span>;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PEOPLE_ID = <span class="number">2</span>;            </div><div class="line">        <span class="comment">//NO_MATCH表示不匹配任何路径的返回码  </span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UriMatcher sURIMatcher = <span class="keyword">new</span> UriMatcher(UriMatcher.NO_MATCH);  </div><div class="line">        <span class="keyword">static</span>  </div><div class="line">        &#123;  </div><div class="line">            sURIMatcher.addURI(AUTHORITY, <span class="string">"people"</span>, PEOPLE);                </div><div class="line">            <span class="comment">//这里的#代表匹配任意数字，另外还可以用*来匹配任意文本  </span></div><div class="line">            sURIMatcher.addURI(AUTHORITY, <span class="string">"people/#"</span>, PEOPLE_ID);  </div><div class="line">        &#125;          </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">            <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">            Logger.d(<span class="string">"------ Start Activity !!! ------"</span>);               </div><div class="line">            Uri uri1 = Uri.parse(<span class="string">"content://"</span> + AUTHORITY + <span class="string">"/people"</span>);  </div><div class="line">            Logger.e(<span class="string">"Uri:"</span> + uri1);  </div><div class="line">            Logger.d(<span class="string">"Match 1"</span> + getType(uri1));               </div><div class="line">            Uri uri2 = Uri.parse(<span class="string">"content://"</span> + AUTHORITY + <span class="string">"/people"</span> + <span class="string">"/2"</span>);               </div><div class="line">            Logger.e(<span class="string">"Uri:"</span> + uri2);  </div><div class="line">            Logger.d(<span class="string">"Match 2"</span> + getType(uri2));  </div><div class="line">            <span class="comment">//拼接Uri  </span></div><div class="line">            Uri cUri = ContentUris.withAppendedId(uri1, <span class="number">15</span>);  </div><div class="line">            Logger.e(<span class="string">"Uri:"</span> + cUri);  </div><div class="line">            <span class="comment">//获取ID  </span></div><div class="line">            <span class="keyword">long</span> id = ContentUris.parseId(cUri);  </div><div class="line">            Logger.d(<span class="string">"Uri ID: "</span> + id);  </div><div class="line">        &#125;           </div><div class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;  </div><div class="line">            <span class="keyword">int</span> match = sURIMatcher.match(uri);  </div><div class="line">            <span class="keyword">switch</span> (match)  </div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">case</span> PEOPLE:  </div><div class="line">                    <span class="keyword">return</span> <span class="string">"vnd.android.cursor.dir/person"</span>;  </div><div class="line">                <span class="keyword">case</span> PEOPLE_ID:  </div><div class="line">                    <span class="keyword">return</span> <span class="string">"vnd.android.cursor.item/person"</span>;  </div><div class="line">                <span class="keyword">default</span>:  </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://www.cnblogs.com/hnrainll/archive/2011/11/15/2250136.html" target="_blank" rel="external">CNBLOG</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android MediaPlayer基本使用方式]]></title>
      <url>http://dalufan.com/2014/12/20/android-mediaplayer-usage/</url>
      <content type="html"><![CDATA[<p>使用MediaPlayer播放音频或者视频的最简单例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediaPlayerStudy</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Button bplay,bpause,bstop;</div><div class="line">    <span class="keyword">private</span> MediaPlayer mp = <span class="keyword">new</span> MediaPlayer();</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);       </div><div class="line">        bplay = (Button)findViewById(R.id.play);</div><div class="line">        bpause = (Button)findViewById(R.id.pause);</div><div class="line">        bstop = (Button)findViewById(R.id.stop);</div><div class="line">        bplay.setOnClickListener(<span class="keyword">new</span> OnClickListener()&#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                  <span class="keyword">try</span> &#123;</div><div class="line">                     mp.setDataSource(<span class="string">"/sdcard/test.mp3"</span>);</div><div class="line">                     mp.prepare();</div><div class="line">                     mp.start();</div><div class="line">                  &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</div><div class="line">                     e.printStackTrace();</div><div class="line">                  &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</div><div class="line">                     e.printStackTrace();</div><div class="line">                  &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                     e.printStackTrace();</div><div class="line">                  &#125;</div><div class="line">                  mp.setOnCompletionListener(<span class="keyword">new</span> OnCompletionListener()&#123;</div><div class="line">                     <span class="meta">@Override</span></div><div class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</div><div class="line">                         mp.release();</div><div class="line">                     &#125;</div><div class="line">                  &#125;);</div><div class="line">           &#125;</div><div class="line">        &#125;);       </div><div class="line">        bpause.setOnClickListener(<span class="keyword">new</span> OnClickListener()&#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                  <span class="keyword">if</span>(mp != <span class="keyword">null</span>)&#123;</div><div class="line">                     mp.pause();</div><div class="line">                  &#125;</div><div class="line">           &#125;</div><div class="line">        &#125;);   </div><div class="line">        bstop.setOnClickListener(<span class="keyword">new</span> OnClickListener()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">             <span class="keyword">if</span>(mp != <span class="keyword">null</span>)&#123;</div><div class="line">                mp.stop();</div><div class="line">             &#125;</div><div class="line">        &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span>(mp != <span class="keyword">null</span>)&#123;</div><div class="line">          <span class="keyword">if</span>(mp.isPlaying())</div><div class="line">               mp.stop();</div><div class="line">          mp.reset();</div><div class="line">          mp.release();</div><div class="line">          mp=<span class="keyword">null</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>布局文件main.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> <span class="attr">android:text</span>=<span class="string">"@string/hello"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:text</span>=<span class="string">"play"</span> <span class="attr">android:id</span>=<span class="string">"@+id/play"</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:text</span>=<span class="string">"pause"</span> <span class="attr">android:id</span>=<span class="string">"@+id/pause"</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:text</span>=<span class="string">"stop"</span> <span class="attr">android:id</span>=<span class="string">"@+id/stop"</span></span></div><div class="line">           <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="程序说明："><a href="#程序说明：" class="headerlink" title="程序说明："></a>程序说明：</h3><p>这个例子只是描述了MediaPlayer的基本使用步骤和方式，MediaPlayer还有多种使用方式和方法，并不只局限于例子所介绍的一种。具体来看：</p>
<p>1.如何获得MediaPlayer实例：</p>
<p>1）可以使用直接new的方式：         </p>
<pre><code>MediaPlayer mp = new MediaPlayer();
</code></pre><p>2）也可以使用create的方式，如：</p>
<pre><code>MediaPlayer mp = MediaPlayer.create(this, R.raw.test);//这时就不用调用setDataSource了
</code></pre><p>2.MediaPlayer要播放的文件主要包括3个来源：</p>
<pre><code>MediaPlayer.create(this, R.raw.test);
mp.setDataSource(&quot;/sdcard/test.mp3&quot;);
mp.setDataSource(&quot;http://www.citynorth.cn/music/confucius.mp3&quot;);
</code></pre><p>3.MediaPlayer的setDataSource一共四个方法：</p>
<pre><code>setDataSource (String path)
setDataSource (FileDescriptor fd)
setDataSource (Context context, Uri uri)
setDataSource (FileDescriptor fd, long offset, long length)
</code></pre><p>4.对播放器的主要控制方法：</p>
<p>android通过控制播放器的状态的方式来控制媒体文件的播放，其中：<br>prepare()和prepareAsync()  提供了同步和异步两种方式设置播放器进入prepare状态，需要注意的是，如果MediaPlayer实例是由create方法创建的，那么第一次启动播放前不需要再调用prepare()了，因为create方法里已经调用过了。</p>
<p>start()是真正启动文件播放的方法，</p>
<p>pause()和stop()比较简单，起到暂停和停止播放的作用，</p>
<p>seekTo()是定位方法，可以让播放器从指定的位置开始播放，需要注意的是该方法是个异步方法，也就是说该方法返回时并不意味着定位完成，尤其是播放的网络文件，真正定位完成时会触发OnSeekComplete.onSeekComplete()，如果需要是可以调用setOnSeekCompleteListener(OnSeekCompleteListener)设置监听器来处理的。</p>
<p>release()可以释放播放器占用的资源，一旦确定不再使用播放器时应当尽早调用它释放资源。</p>
<p>reset()可以使播放器从Error状态中恢复过来，重新会到Idle状态。</p>
<p>5.设置播放器的监听器：</p>
<p>MediaPlayer提供了一些设置不同监听器的方法来更好地对播放器的工作状态进行监听，以期及时处理各种情况，<br>如： setOnCompletionListener(MediaPlayer.OnCompletionListener listener)、<br>setOnErrorListener(MediaPlayer.OnErrorListener listener)等,设置播放器时需要考虑到播放器可能出现的情况设置好监听和处理逻辑，以保持播放器的健壮性。</p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/ddna/article/details/5176233" target="_blank" rel="external">CSDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GET请求和POST请求的区别]]></title>
      <url>http://dalufan.com/2014/11/30/net-get-post/</url>
      <content type="html"><![CDATA[<p>查看RFC规范再加上之前查过的一些二手文章，整理了如下的观点:</p>
<ol>
<li>GET 被强制服务器支持</li>
<li>浏览器对URL的长度有限制，所以GET请求不能代替POST请求发送大量数据</li>
<li>GET请求发送数据更小</li>
<li>GET请求是安全的</li>
<li>GET请求是幂等的</li>
<li>POST请求不能被缓存</li>
<li>POST请求相对GET请求是「安全」的</li>
</ol>
<a id="more"></a> 
<h3 id="GET被强制服务器支持"><a href="#GET被强制服务器支持" class="headerlink" title="GET被强制服务器支持"></a>GET被强制服务器支持</h3><blockquote>
<p>All general-purpose servers MUST support the methods GET and HEAD. All other methods are OPTIONAL.</p>
</blockquote>
<p>GET 通常用于请求服务器发送某个资源。在HTTP/1.1中，要求服务器实现此方法；POST请求方法起初是用来向服务器输入数据的。在HTTP/1.1中，POST方法是可选被实现的，没有明确规定要求服务器实现。</p>
<h3 id="浏览器对URL的长度有限制"><a href="#浏览器对URL的长度有限制" class="headerlink" title="浏览器对URL的长度有限制"></a>浏览器对URL的长度有限制</h3><blockquote>
<p>RFC 2616 (Hypertext Transfer Protocol — HTTP/1.1) states in section 3.2.1 that there is no limit to the length of an URI (URI is the official term for what most people call a URL)</p>
</blockquote>
<p>RFC 2616 中明确对 uri 的长度并没有限制。不过虽然在RFC中并没有对uri的长度进行限制，但是各大浏览器厂家在实现的时候限制了URL的长度，可查到的是IE对长度限制为2083；而chrome遇到长度很长的URL时，会直接崩溃。</p>
<p>所以这条结论算是正确的。</p>
<h3 id="GET请求发送数据更小"><a href="#GET请求发送数据更小" class="headerlink" title="GET请求发送数据更小"></a>GET请求发送数据更小</h3><p>只能通过写代码验证了：下面第一个文件是服务器代码，作用是在客户端发送GET和POST请求的时候返回200状态码。第二个文件是客户端HTML文件，点击两个button，分别发送GET请求和POST请求。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> koa <span class="keyword">from</span> <span class="string">'koa'</span></div><div class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'mz/fs'</span></div><div class="line"></div><div class="line"></div><div class="line">const app = koa()</div><div class="line"></div><div class="line">app.use(function* (next) &#123;</div><div class="line">  <span class="keyword">if</span>(this.path == <span class="string">'/test'</span>)</div><div class="line">    <span class="keyword">return</span> this.status = <span class="number">200</span></div><div class="line"></div><div class="line">  <span class="keyword">yield</span> next</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.use(function* (next) &#123;</div><div class="line">  this.type = <span class="string">'html'</span></div><div class="line">  this.body = <span class="keyword">yield</span> fs.readFile(<span class="string">'./index.html'</span>)</div><div class="line">  <span class="keyword">yield</span> next</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(<span class="number">8080</span>)</div><div class="line">console.log(<span class="string">'koa server port: 8080'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"get"</span>&gt;</span>GET<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"post"</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">http</span><span class="params">(type)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(url)</span> </span>&#123;</div><div class="line">      <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">      req.open(type, url)</div><div class="line"></div><div class="line">      req.send()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> getDom = document.getElementById(<span class="string">'get'</span>)</div><div class="line">    , postDom = document.getElementById(<span class="string">'post'</span>)</div><div class="line">    , <span class="keyword">get</span> = http(<span class="string">'GET'</span>)</div><div class="line">    , post = http(<span class="string">'POST'</span>)</div><div class="line"></div><div class="line"></div><div class="line">  getDom.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">get</span>(<span class="string">'/test'</span>)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  postDom.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    post(<span class="string">'/test'</span>)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/article_images/net-get-headers.png" alt="alt"></p>
<p><img src="/article_images/net-post-headers.png" alt="alt"></p>
<p>从上两张图可以看到POST请求的headers要比GET请求多了两个属性。所以这条结论其实也算是对的，不过从请求发送时间来看的话，其实两者并没有差别。</p>
<p><img src="/article_images/net-get-send-time.png" alt="alt"></p>
<p><img src="/article_images/net-post-send-time.png" alt="alt"></p>
<h3 id="GET请求是安全的"><a href="#GET请求是安全的" class="headerlink" title="GET请求是安全的"></a>GET请求是安全的</h3><blockquote>
<p>Of the request methods defined by this specification, the GET, HEAD,OPTIONS, and TRACE methods are defined to be safe.</p>
</blockquote>
<p>这里的安全指的是在规范的定义下，Get操作不会修改服务器的数据</p>
<h3 id="GET请求是幂等的"><a href="#GET请求是幂等的" class="headerlink" title="GET请求是幂等的"></a>GET请求是幂等的</h3><blockquote>
<p>A request method is considered “idempotent” if the intended effect on<br>the server of multiple identical requests with that method is the<br>same as the effect for a single such request. Of the request methods<br>defined by this specification, PUT, DELETE, and safe request methods<br>are idempotent.</p>
</blockquote>
<p>从上面可以看到GET请求是安全的，在幂等性(做多次和做一次的效果是一样的)中说PUT和DELETE以及安全method都是幂等的，所以GET自然也被包括了。</p>
<h3 id="POST请求不能被缓存"><a href="#POST请求不能被缓存" class="headerlink" title="POST请求不能被缓存"></a>POST请求不能被缓存</h3><p>我们在实际使用过程中对HTTP请求的优化大多数都放在GET请求上，比如对没有数据变化的请求（网站中常用的静态文件）做缓存，在潜意识中认为只有GET请求才可以被缓存，所以从来也不会考虑POST请求的缓存优化，然而在RFC中提到GET和POST以及HEAD都是可以被缓存的。不过不要惊讶，之前不知道POST可以被缓存是因为标准也很无奈，浏览器的实现总是比标准厉害。</p>
<blockquote>
<p>In general, safe methods thatdo not depend on a current or authoritative response are defined as cacheable; this specification defines GET, HEAD, and POST as cacheable, although the overwhelming majority of cache implementations only support GET and HEAD.</p>
</blockquote>
<h3 id="POST请求相对GET请求是「安全」的"><a href="#POST请求相对GET请求是「安全」的" class="headerlink" title="POST请求相对GET请求是「安全」的"></a>POST请求相对GET请求是「安全」的</h3><p>这一点很多人都会质疑，被抓包之后的POST请求和GET请求是一样裸露的，所以更安全的说法是不对的。我这里所有的「安全」是相对的，因为GET请求有时候会直接反应在浏览器的地址栏，而现在的浏览器大多会记住曾经输入过的URL。试想如果你曾经在别人电脑上填过一个很私密的表单，那么你的这份记录很可能被连没什么电脑常识的人都一览无遗。</p>
<hr>
<p>参考链接：<a href="http://segmentfault.com/a/1190000004014583" target="_blank" rel="external">segmentfault</a>&lt;–&gt;<a href="http://macrochen.iteye.com/blog/678683" target="_blank" rel="external">了解一下幂等</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android一些安全事项]]></title>
      <url>http://dalufan.com/2014/11/28/android-sec-commonly/</url>
      <content type="html"><![CDATA[<p>Activity类型和使用方式决定了其风险和防御方式,故将Activity分类如下： Private、Public、Parter、In-house</p>
<p><img src="/article_images/sec-android.jpg" alt="alt"></p>
<h3 id="private-activity"><a href="#private-activity" class="headerlink" title="private activity"></a>private activity</h3><p>私有Activity不应被其他应用启动相对是安全的</p>
<a id="more"></a> 
<h4 id="创建activity时："><a href="#创建activity时：" class="headerlink" title="创建activity时："></a>创建activity时：</h4><ol>
<li><p>不指定taskAffinity //task管理activity。task的名字取决于根activity的affinity。默认设置中Activity使用包名做为affinity。task由app分配，所以一个应用的Activity在默认情况下属于相同task。跨task启动Activity的intent有可能被其他app读取到。</p>
</li>
<li><p>不指定lunchMode //默认standard，建议使用默认。创建新task时有可能被其他应用读取intent的内容。</p>
</li>
<li><p>设置exported属性为false</p>
</li>
<li><p>谨慎处理从intent中接收的数据，不管是否内部发送的intent</p>
</li>
<li><p>敏感信息只能在应用内部操作</p>
</li>
</ol>
<h4 id="使用activity时："><a href="#使用activity时：" class="headerlink" title="使用activity时："></a>使用activity时：</h4><ol>
<li><p>开启activity时不设置FLAG_ACTIVITY_NEW_TASK标签 //FLAG_ACTIVITY_NEW_TASK标签用于创建新task（被启动的Activity并未在栈中）。</p>
</li>
<li><p>开启应用内部activity使用显示启动的方式</p>
</li>
<li><p>当putExtra()包含敏感信息目的应是app内的activity</p>
</li>
<li><p>谨慎处理返回数据，即可数据来自相同应用</p>
</li>
</ol>
<h3 id="public-activity"><a href="#public-activity" class="headerlink" title="public activity"></a>public activity</h3><p>公开暴露的Activity组件，可以被任意应用启动</p>
<h4 id="创建activity："><a href="#创建activity：" class="headerlink" title="创建activity："></a>创建activity：</h4><ol>
<li><p>设置exported属性为true</p>
</li>
<li><p>谨慎处理接收的intent</p>
</li>
<li><p>有返回数据时不应包含敏感信息</p>
</li>
</ol>
<h4 id="使用activity："><a href="#使用activity：" class="headerlink" title="使用activity："></a>使用activity：</h4><ol>
<li><p>不应发送敏感信息</p>
</li>
<li><p>当收到返回数据时谨慎处理</p>
</li>
</ol>
<p>Parter、in-house部分<a href="http://www.jssec.org/dl/android_securecoding_en.pdf" target="_blank" rel="external">参阅</a></p>
<h3 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h3><ul>
<li>app内使用的私有Activity不应配置intent-filter，如果配置了intent-filter需设置exported属性为false。</li>
<li>使用默认taskAffinity</li>
<li>使用默认launchMode</li>
<li>启动Activity时不设置intent的FLAG_ACTIVITY_NEW_TASK标签</li>
<li>谨慎处理接收的intent以及其携带的信息</li>
<li>签名验证内部（in-house）app</li>
<li>当Activity返回数据时候需注意目标Activity是否有泄露信息的风险</li>
<li>目的Activity十分明确时使用显示启动</li>
<li>谨慎处理Activity返回的数据，目的Activity返回的数据有可能是恶意应用伪造的</li>
<li>验证目标Activity是否恶意app，以免受到intent欺骗，可用hash签名验证</li>
<li>When Providing an Asset Secondhand, the Asset should be Protected with the Same Level of Protection</li>
<li>尽可能的不发送敏感信息，应考虑到启动public Activity中intent的信息均有可能被恶意应用窃取的风险</li>
</ul>
<h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><p><em>查看activity：</em></p>
<ul>
<li>反编译查看配置文件androidManifest.xml中activity组件（关注配置了intent-filter的及未设置export=“false”的）</li>
<li>直接用RE打开安装后的app查看配置文件</li>
<li>Drozer扫描:run app.activity.info -a packagename</li>
<li>动态查看：logcat设置filter的tag为ActivityManager</li>
</ul>
<p><strong>启动activity：</strong></p>
<ul>
<li>adb shell：am start -a action -n package/componet</li>
<li>drozer: run app.activity.start –action android.action.intent.VIEW …</li>
<li>自己编写app调用startActiviy()或startActivityForResult()</li>
<li>浏览器intent scheme远程启动:<a href="http://drops.wooyun.org/tips/2893" target="_blank" rel="external">http://drops.wooyun.org/tips/2893</a></li>
</ul>
<hr>
<p>参考链接：<a href="http://drops.wooyun.org/tips/3936" target="_blank" rel="external">WOOYUN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中Intent使用详解]]></title>
      <url>http://dalufan.com/2014/11/27/android-Intent/</url>
      <content type="html"><![CDATA[<p>简单来说，Intent是系统各组件之间进行数据传递的数据负载者。当我们需要做一个调用动作，我们就可以通过Intent告诉android系统来完成这个过程，Intent就是调用通知的一种操作。<br>Intent有几个重要的属性，下面我们将会逐一介绍：</p>
<h3 id="0-android-exported"><a href="#0-android-exported" class="headerlink" title="0.android:exported"></a>0.android:exported</h3><p>一个Activity组件能否被外部应用启动取决于此属性，设置为true时Activity可以被外部应用启动，设置为false则不能，此时Activity只能被自身app启动。（同user id或者root也能启动）</p>
<p><code>没有配置intent-filter属性exported默认为false</code>（没有filter只能通过明确的类名来启动activity故相当于只有程序本身能启动），<code>配置了intent-filter属性exported默认为true</code>。</p>
<p>exported属性只是用于限制Activity是否暴露给其他app，通过配置文件中的权限申明也可以限制外部启动activity。</p>
<a id="more"></a> 
<h3 id="1-action，要执行的动作"><a href="#1-action，要执行的动作" class="headerlink" title="1.action，要执行的动作"></a>1.action，要执行的动作</h3><p>对于有如下声明的Activity：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".TargetActivity"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.scott.intent.action.TARGET"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>TargetActivity在其<intent-filter>中声明了<action>，即目标action，如果我们需要做一个跳转的动作，就需要在Intent中指定目标的action，如下：</action></intent-filter></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gotoTargetActivity</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.scott.intent.action.TARGET"</span>);  </div><div class="line">    startActivity(intent);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们为Intent指定相应的action，然后调用startActivity方法后，系统会根据action跳转到对应的Activity。<br>除了自定义的action之外，Intent也内含了很多默认的action，随便列举几个：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_MAIN = <span class="string">"android.intent.action.MAIN"</span>;  </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_VIEW = <span class="string">"android.intent.action.VIEW"</span>;  </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_WEB_SEARCH = <span class="string">"android.intent.action.WEB_SEARCH"</span>;  </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_CALL = <span class="string">"android.intent.action.CALL"</span>;</div></pre></td></tr></table></figure>
<p>每一个action都有其特定的用途，下文也会使用到它们。</p>
<h3 id="2-data和extras，即执行动作要操作的数据和传递到目标的附加信息"><a href="#2-data和extras，即执行动作要操作的数据和传递到目标的附加信息" class="headerlink" title="2.data和extras，即执行动作要操作的数据和传递到目标的附加信息"></a>2.data和extras，即执行动作要操作的数据和传递到目标的附加信息</h3><p>下面就举一个与浏览器交互的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 打开指定网页 </div><div class="line"> * <span class="doctag">@param</span> view </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeWebBrowser</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);  </div><div class="line">    intent.setData(Uri.parse(<span class="string">"http://www.google.com.hk"</span>));  </div><div class="line">    startActivity(intent);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * 进行关键字搜索 </div><div class="line"> * <span class="doctag">@param</span> view </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeWebSearch</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_WEB_SEARCH);  </div><div class="line">    intent.putExtra(SearchManager.QUERY, <span class="string">"android"</span>);    <span class="comment">//关键字  </span></div><div class="line">    startActivity(intent);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面两个方法分别是启动浏览器并打开指定网页、进行关键字搜索，分别对应的action是Intent.ACTION_VIEW和Intent.ACTION_WEB_SEARCH，前者需指定相应的网页地址，后者需指定关键字信息，对于关键字搜索来说，浏览器会按照自己设置的默认的搜索引擎进行搜索。<br>我们注意到，在打开网页时，为Intent指定一个data属性，这其实是指定要操作的数据，是一个URI的形式，我们可以将一个指定前缀的字符串转换成特定的URI类型，如：“http:”或“https:”表示网络地址类型，“tel:”表示电话号码类型，“mailto:”表示邮件地址类型，等等。例如，我们要呼叫给定的号码，可以这样做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL);  </div><div class="line">    intent.setData(Uri.parse(<span class="string">"tel:12345678"</span>));  </div><div class="line">    startActivity(intent);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么我们如何知道目标是否接受这种前缀呢？这就需要看一下目标中<data>元素的匹配规则了。<br>在目标<data>标签中包含了以下几种子元素，他们定义了url的匹配规则：</data></data></p>
<ul>
<li>android:scheme 匹配url中的前缀，除了“http”、“https”、“tel”…之外，我们可以定义自己的前缀</li>
<li>android:host 匹配url中的主机名部分，如“google.com”，如果定义为“*”则表示任意主机名</li>
<li>android:port 匹配url中的端口</li>
<li>android:path 匹配url中的路径</li>
</ul>
<p>我们改动一下TargetActivity的声明信息：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".TargetActivity"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.scott.intent.action.TARGET"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"scott"</span> <span class="attr">android:host</span>=<span class="string">"com.scott.intent.data"</span> <span class="attr">android:port</span>=<span class="string">"7788"</span> <span class="attr">android:path</span>=<span class="string">"/target"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个时候如果只指定action就不够了，我们需要为其设置data值，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gotoTargetActivity</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.scott.intent.action.TARGET"</span>);  </div><div class="line">    intent.setData(Uri.parse(<span class="string">"scott://com.scott.intent.data:7788/target"</span>));  </div><div class="line">    startActivity(intent);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时，url中的每个部分和TargetActivity配置信息中全部一致才能跳转成功，否则就被系统拒绝。<br>不过有时候对path限定死了也不太好，比如我们有这样的url：（scott://com.scott.intent.data:7788/target/hello）（scott://com.scott.intent.data:7788/target/hi）<br>这个时候该怎么办呢？我们需要使用另外一个元素：android:pathPrefix，表示路径前缀。<br>我们把<code>android:path=&quot;/target&quot;</code>修改为<code>android:pathPrefix=&quot;/target&quot;</code>，然后就可以满足以上的要求了。<br>而在进行搜索时，我们使用了一个putExtra方法，将关键字做为参数放置在Intent中，我们成为extras（附加信息），这里面涉及到了一个Bundle对象。</p>
<p>Bundle和Intent有着密不可分的关系，主要负责为Intent保存附加参数信息，它实现了android.os.Paracelable接口，内部维护一个Map类型的属性，用于以键值对的形式存放附加参数信息。在我们使用Intent的putExtra方法放置附加信息时，该方法会检查默认的Bundle实例为不为空，如果为空，则新创建一个Bundle实例，然后将具体的参数信息放置到Bundle实例中。我们也可以自己创建Bundle对象，然后为Intent指定这个Bundle即可，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gotoTargetActivity</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.scott.intent.action.TARGET"</span>);  </div><div class="line">    Bundle bundle = <span class="keyword">new</span> Bundle();  </div><div class="line">    bundle.putInt(<span class="string">"id"</span>, <span class="number">0</span>);  </div><div class="line">    bundle.putString(<span class="string">"name"</span>, <span class="string">"scott"</span>);  </div><div class="line">    intent.putExtras(bundle);  </div><div class="line">    startActivity(intent);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，在使用putExtras方法设置Bundle对象之后，系统进行的不是引用操作，而是复制操作，所以如果设置完之后再更改bundle实例中的数据，将不会影响Intent内部的附加信息。那我们如何获取设置在Intent中的附加信息呢？与之对应的是，我们要从Intent中获取到Bundle实例，然后再从中取出对应的键值信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Bundle bundle = intent.getExtras();  </div><div class="line"><span class="keyword">int</span> id = bundle.getInt(<span class="string">"id"</span>);  </div><div class="line">String name = bundle.getString(<span class="string">"name"</span>);</div></pre></td></tr></table></figure>
<p>当然我们也可以使用Intent的getIntExtra和getStringExtra方法获取，其数据源都是Intent中的Bundle类型的实例对象。<br>前面我们涉及到了Intent的三个属性：action、data和extras。除此之外，Intent还包括以下属性：</p>
<h3 id="3-category，要执行动作的目标所具有的特质或行为归类"><a href="#3-category，要执行动作的目标所具有的特质或行为归类" class="headerlink" title="3.category，要执行动作的目标所具有的特质或行为归类"></a>3.category，要执行动作的目标所具有的特质或行为归类</h3><p>例如：在我们的应用主界面Activity通常有如下配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>代表该目标Activity是该应用所在task中的初始Activity并且出现在系统launcher的应用列表中。<br>几个常见的category如下：</p>
<ul>
<li>Intent.CATEGORY_DEFAULT（android.intent.category.DEFAULT） 默认的category</li>
<li>Intent.CATEGORY_PREFERENCE（android.intent.category.PREFERENCE） 表示该目标Activity是一个首选项界面；</li>
<li>Intent.CATEGORY_BROWSABLE（android.intent.category.BROWSABLE）指定了此category后，在网页上点击图片或链接时，系统会考虑将此目标Activity列入可选列表，供用户选择以打开图片或链接。</li>
</ul>
<p>在为Intent设置category时，应使用addCategory(String category)方法向Intent中添加指定的类别信息，来匹配声明了此类别的目标Activity。</p>
<h3 id="4-type：要执行动作的目标Activity所能处理的MIME数据类型"><a href="#4-type：要执行动作的目标Activity所能处理的MIME数据类型" class="headerlink" title="4.type：要执行动作的目标Activity所能处理的MIME数据类型"></a>4.type：要执行动作的目标Activity所能处理的MIME数据类型</h3><p>例如：一个可以处理图片的目标Activity在其声明中包含这样的mimeType：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;data android:mimeType=<span class="string">"image/*"</span> /&gt;</div></pre></td></tr></table></figure>
<p>在使用Intent进行匹配时，我们可以使用setType(String type)或者setDataAndType(Uri data, String type)来设置mimeType。</p>
<h3 id="5-component，目标组件的包或类名称"><a href="#5-component，目标组件的包或类名称" class="headerlink" title="5.component，目标组件的包或类名称"></a>5.component，目标组件的包或类名称</h3><p>在使用component进行匹配时，一般采用以下几种形式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">intent.setComponent(<span class="keyword">new</span> ComponentName(getApplicationContext(), TargetActivity.class));  </div><div class="line">intent.setComponent(<span class="keyword">new</span> ComponentName(getApplicationContext(), <span class="string">"com.scott.intent.TargetActivity"</span>));  </div><div class="line">intent.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">"com.scott.other"</span>, <span class="string">"com.scott.other.TargetActivity"</span>));</div></pre></td></tr></table></figure>
<p>其中，前两种是用于匹配同一包内的目标，第三种是用于匹配其他包内的目标。需要注意的是，如果我们在Intent中指定了component属性，系统将不会再对action、data/type、category进行匹配。</p>
<h3 id="6-在一个apk中调用另外一个apk中的activity"><a href="#6-在一个apk中调用另外一个apk中的activity" class="headerlink" title="6.在一个apk中调用另外一个apk中的activity"></a>6.在一个apk中调用另外一个apk中的activity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_WEB_SEARCH); </div><div class="line"><span class="comment">//传参 </span></div><div class="line">intent.putExtra(SearchManager.QUERY,<span class="string">"searchString"</span>)  </div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<p>其中，Intent.ACTION_WEB_SEARCH是一个字符串，是“搜索”这个Activity的标识，extra是传给这个activity的一些数据。发送出这个intent之后，系统根据action字符串Intent.ACTION_WEB_SEARCH知道了是要调用哪个activity，如果有重名，会弹出一个选择对话框。然后打开此activity，实现想要做的事情。</p>
<p>a demo</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//在androidManifest.xml里面为activity添加intent-filter</div><div class="line">&lt;intent-filter&gt;  </div><div class="line">         &lt;action android:name="chroya.foo"/&gt;  </div><div class="line">         &lt;category android:name="android.intent.category.DEFAULT"/&gt;  </div><div class="line">&lt;/intent-filter&gt;   </div><div class="line">//another app</div><div class="line">Intent intent = new Intent("chroya.foo");  </div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/liuhe688/article/details/7162988" target="_blank" rel="external">1</a>,<a href="http://www.eoeandroid.com/forum.php?mod=viewthread&amp;tid=69600" target="_blank" rel="external">2</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中BroadcastReceiver应用详解]]></title>
      <url>http://dalufan.com/2014/11/27/android-BroadcastReceiver/</url>
      <content type="html"><![CDATA[<h3 id="普通广播（Normal-Broadcast）"><a href="#普通广播（Normal-Broadcast）" class="headerlink" title="普通广播（Normal Broadcast）"></a>普通广播（Normal Broadcast）</h3><p>要创建自己的BroadcastReceiver对象，我们需要继承android.content.BroadcastReceiver，并实现其onReceive方法。下面我们就创建一个名为MyReceiver广播接收者：</p>
<a id="more"></a> 
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;  </div><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyReceiver"</span>;        </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">        String msg = intent.getStringExtra(<span class="string">"msg"</span>);  </div><div class="line">        Log.i(TAG, msg);  </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在onReceive方法内，我们可以获取随广播而来的Intent中的数据，这非常重要，就像无线电一样，包含很多有用的信息。<br>在创建完我们的BroadcastReceiver之后，还不能够使它进入工作状态，我们需要为它注册一个指定的广播地址。没有注册广播地址的BroadcastReceiver就像一个缺少选台按钮的收音机，虽然功能俱备，但也无法收到电台的信号。下面我们就来介绍一下如何为BroadcastReceiver注册广播地址。</p>
<h4 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h4><p>静态注册是在androidManifest.xml文件中配置的，我们就来为MyReceiver注册一个广播地址：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".MyReceiver"</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MY_BROADCAST"</span>/&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置了以上信息之后，只要是android.intent.action.MY_BROADCAST这个地址的广播，MyReceiver都能够接收的到。注意，这种方式的注册是常驻型的，也就是说当应用关闭后，如果有广播信息传来，MyReceiver也会被系统调用而自动运行。</p>
<h4 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h4><p>动态注册需要在代码中动态的指定广播地址并注册，通常我们是在Activity或Service注册一个广播，下面我们就来看一下注册的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MyReceiver receiver = <span class="keyword">new</span> MyReceiver();            </div><div class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter();  </div><div class="line">filter.addAction(<span class="string">"android.intent.action.MY_BROADCAST"</span>);            </div><div class="line">registerReceiver(receiver, filter);</div></pre></td></tr></table></figure>
<pre><code>注意，registerReceiver是android.content.ContextWrapper类中的方法，Activity和Service都继承了ContextWrapper，所以可以直接调用。在实际应用中，我们在Activity或Service中注册了一个BroadcastReceiver，当这个Activity或Service被销毁时如果没有解除注册，系统会报一个异常，提示我们是否忘记解除注册了。所以，记得在特定的地方执行解除注册操作：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onDestroy();  </div><div class="line">    unregisterReceiver(receiver);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行这样行代码就可以解决问题了。注意，这种注册方式与静态注册相反，不是常驻型的，也就是说广播会跟随程序的生命周期。<br>我们可以根据以上任意一种方法完成注册，当注册完成之后，这个接收者就可以正常工作了。我们可以用以下方式向其发送一条广播：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.MY_BROADCAST"</span>);  </div><div class="line">    intent.putExtra(<span class="string">"msg"</span>, <span class="string">"hello receiver."</span>);  </div><div class="line">    sendBroadcast(intent);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>注意，sendBroadcast也是android.content.ContextWrapper类中的方法，它可以将一个指定地址和参数信息的Intent对象以广播的形式发送出去。普通广播对于多个接收者来说是完全异步的，通常每个接收者都无需等待即可以接收到广播，接收者相互之间不会有影响。对于这种广播，接收者无法终止广播，即无法阻止其他接收者的接收动作。
</code></pre><h3 id="有序广播（Ordered-Broadcast）"><a href="#有序广播（Ordered-Broadcast）" class="headerlink" title="有序广播（Ordered Broadcast）"></a>有序广播（Ordered Broadcast）</h3><p>有序广播比较特殊，它每次只发送到优先级较高的接收者那里，然后由优先级高的接受者再传播到优先级低的接收者那里，优先级高的接收者有能力终止这个广播。定义三个接收者:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;  </div><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"OrderedBroadcast"</span>;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">        String msg = intent.getStringExtra(<span class="string">"msg"</span>);  </div><div class="line">        Log.i(TAG, <span class="string">"FirstReceiver: "</span> + msg);  </div><div class="line">          </div><div class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();  </div><div class="line">        bundle.putString(<span class="string">"msg"</span>, msg + <span class="string">"@FirstReceiver"</span>);  </div><div class="line">        setResultExtras(bundle);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"OrderedBroadcast"</span>;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">        String msg = getResultExtras(<span class="keyword">true</span>).getString(<span class="string">"msg"</span>);  </div><div class="line">        Log.i(TAG, <span class="string">"SecondReceiver: "</span> + msg);  </div><div class="line">          </div><div class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();  </div><div class="line">        bundle.putString(<span class="string">"msg"</span>, msg + <span class="string">"@SecondReceiver"</span>);  </div><div class="line">        setResultExtras(bundle);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"OrderedBroadcast"</span>;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">        String msg = getResultExtras(<span class="keyword">true</span>).getString(<span class="string">"msg"</span>);  </div><div class="line">        Log.i(TAG, <span class="string">"ThirdReceiver: "</span> + msg);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们注意到，在FirstReceiver和SecondReceiver中最后都使用了setResultExtras方法将一个Bundle对象设置为结果集对象，传递到下一个接收者那里，这样以来，优先级低的接收者可以用getResultExtras获取到最新的经过处理的信息集合。<br>代码改完之后，我们需要为三个接收者注册广播地址，我们修改一下androidMainfest.xml文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".FirstReceiver"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"1000"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MY_BROADCAST"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".SecondReceiver"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"999"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MY_BROADCAST"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".ThirdReceiver"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"998"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MY_BROADCAST"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们看到，现在这三个接收者的<intent-filter>多了一个android:priority属性，并且依次减小。这个属性的范围在-1000到1000，数值越大，优先级越高。<br>现在，我们需要修改一下发送广播的代码，如下：</intent-filter></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.MY_BROADCAST"</span>);  </div><div class="line">    intent.putExtra(<span class="string">"msg"</span>, <span class="string">"hello receiver."</span>);  </div><div class="line">    sendOrderedBroadcast(intent, <span class="string">"scott.permission.MY_BROADCAST_PERMISSION"</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，使用sendOrderedBroadcast方法发送有序广播时，需要一个权限参数，如果为null则表示不要求接收者声明指定的权限，如果不为null，则表示接收者若要接收此广播，需声明指定权限。这样做是从安全角度考虑的，例如系统的短信就是有序广播的形式，一个应用可能是具有拦截垃圾短信的功能，当短信到来时它可以先接受到短信广播，必要时终止广播传递，这样的软件就必须声明接收短信的权限。</p>
<p>所以我们在androidMainfest.xml中定义一个权限：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:protectionLevel</span>=<span class="string">"normal"</span>  </span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"scott.permission.MY_BROADCAST_PERMISSION"</span> /&gt;</div></pre></td></tr></table></figure>
<p>然后声明使用了此权限：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"scott.permission.MY_BROADCAST_PERMISSION"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>最终的androidMainfest.xml:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:protectionLevel</span>=<span class="string">"normal"</span>  </span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"scott.permission.MY_BROADCAST_PERMISSION"</span> /&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".FirstReceiver"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"1000"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MY_BROADCAST"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".SecondReceiver"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"999"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MY_BROADCAST"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".ThirdReceiver"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"998"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MY_BROADCAST"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span>        </div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"scott.permission.MY_BROADCAST_PERMISSION"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p><a href="../../18/android-permission/"><em>此处可以参考</em></a></p>
<p>我们看到接收是按照顺序的，第一个和第二个都在结果集中加入了自己的标记，并且向优先级低的接收者传递下去。<br>既然是顺序传递，试着终止这种传递，看一看效果如何，我们修改FirstReceiver的代码，在onReceive的最后一行添加以下代码：</p>
<pre><code>abortBroadcast();  
</code></pre><p>此次，只有第一个接收者执行了，其它两个都没能执行，因为广播被第一个接收者终止了。</p>
<h3 id="1-开机启动服务"><a href="#1-开机启动服务" class="headerlink" title="1.开机启动服务"></a>1.开机启动服务</h3><p>我们经常会有这样的应用场合，比如消息推送服务，需要实现开机启动的功能。要实现这个功能，我们就可以订阅系统“启动完成”这条广播，接收到这条广播后我们就可以启动自己的服务了。我们来看一下BootCompleteReceiver和MsgPushService的具体实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;  </div><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootCompleteReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BootCompleteReceiver"</span>;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">        Intent service = <span class="keyword">new</span> Intent(context, MsgPushService.class);  </div><div class="line">        context.startService(service);  </div><div class="line">        Log.i(TAG, <span class="string">"Boot Complete. Starting MsgPushService..."</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Service;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.os.IBinder;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgPushService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MsgPushService"</span>;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate();  </div><div class="line">        Log.i(TAG, <span class="string">"onCreate called."</span>);  </div><div class="line">    &#125;        </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;  </div><div class="line">        Log.i(TAG, <span class="string">"onStartCommand called."</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);  </div><div class="line">    &#125;    </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent arg0)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们需要在androidManifest.xml中配置相关信息,我们看到BootCompleteReceiver注册了“android.intent.action.BOOT_COMPLETED”这个开机广播地址，从安全角度考虑，系统要求必须声明接收开机启动广播的权限，于是我们再声明使用下面的权限：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开机广播接受者 --&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span> /&gt;</span> </div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".BootCompleteReceiver"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">        <span class="comment">&lt;!-- 注册开机广播地址--&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BOOT_COMPLETED"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- 消息推送服务 --&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".MsgPushService"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-网络状态变化"><a href="#2-网络状态变化" class="headerlink" title="2.网络状态变化"></a>2.网络状态变化</h3><p>在某些场合，比如用户浏览网络信息时，网络突然断开，我们要及时地提醒用户网络已断开。要实现这个功能，我们可以接收网络状态改变这样一条广播，当由连接状态变为断开状态时，系统就会发送一条广播，我们接收到之后，再通过网络的状态做出相应的操作。下面就来实现一下这个功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;  </div><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.net.ConnectivityManager;  </div><div class="line"><span class="keyword">import</span> android.net.NetworkInfo;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line"><span class="keyword">import</span> android.widget.Toast;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkStateReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"NetworkStateReceiver"</span>;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">        Log.i(TAG, <span class="string">"network state changed."</span>);  </div><div class="line">        <span class="keyword">if</span> (!isNetworkAvailable(context)) &#123;  </div><div class="line">            Toast.makeText(context, <span class="string">"network disconnected!"</span>, <span class="number">0</span>).show();  </div><div class="line">        &#125;  </div><div class="line">    &#125;       </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 网络是否可用 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@param</span> context </div><div class="line">     * <span class="doctag">@return</span> </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNetworkAvailable</span><span class="params">(Context context)</span> </span>&#123;  </div><div class="line">        ConnectivityManager mgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);  </div><div class="line">        NetworkInfo[] info = mgr.getAllNetworkInfo();  </div><div class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;  </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; info.length; i++) &#123;  </div><div class="line">                <span class="keyword">if</span> (info[i].getState() == NetworkInfo.State.CONNECTED) &#123;  </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".NetworkStateReceiver"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">--因为在isNetworkAvailable方法中我们使用到了网络状态相关的API，所以需要声明相关的权限才行，下面就是对应的权限声明：--</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-电量变化"><a href="#3-电量变化" class="headerlink" title="3.电量变化"></a>3.电量变化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;  </div><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.os.BatteryManager;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatteryChangedReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BatteryChangedReceiver"</span>;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> currLevel = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, <span class="number">0</span>);  <span class="comment">//当前电量  </span></div><div class="line">        <span class="keyword">int</span> total = intent.getIntExtra(BatteryManager.EXTRA_SCALE, <span class="number">1</span>);      <span class="comment">//总电量  </span></div><div class="line">        <span class="keyword">int</span> percent = currLevel * <span class="number">100</span> / total;  </div><div class="line">        Log.i(TAG, <span class="string">"battery: "</span> + percent + <span class="string">"%"</span>);  </div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".BatteryChangedReceiver"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BATTERY_CHANGED"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然，有些时候我们是要立即获取电量的，而不是等电量变化的广播，比如当阅读软件打开时立即显示出电池电量。我们可以按以下方式获取：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Intent batteryIntent = getApplicationContext().registerReceiver(<span class="keyword">null</span>,  </div><div class="line"><span class="keyword">new</span> IntentFilter(Intent.ACTION_BATTERY_CHANGED));  </div><div class="line"><span class="keyword">int</span> currLevel = batteryIntent.getIntExtra(BatteryManager.EXTRA_LEVEL, <span class="number">0</span>);  </div><div class="line"><span class="keyword">int</span> total = batteryIntent.getIntExtra(BatteryManager.EXTRA_SCALE, <span class="number">1</span>);  </div><div class="line"><span class="keyword">int</span> percent = currLevel * <span class="number">100</span> / total;  </div><div class="line">Log.i(<span class="string">"battery"</span>, <span class="string">"battery: "</span> + percent + <span class="string">"%"</span>);</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/liuhe688/article/details/6955668" target="_blank" rel="external">CSDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中Activity的task]]></title>
      <url>http://dalufan.com/2014/11/26/android-activity-task/</url>
      <content type="html"><![CDATA[<p>task是一个具有栈结构的容器，可以放置多个Activity实例。启动一个应用，系统就会为之创建一个task，来放置根Activity；默认情况下（standard模式），一个Activity启动另一个Activity时，两个Activity是放置在同一个task中的，后者被压入前者所在的task栈，当用户按下后退键，后者从task被弹出，前者又显示在幕前，特别是启动其他应用中的Activity时，两个Activity对用户来说就好像是属于同一个应用；系统task和task之间是互相独立的，当我们运行一个应用时，按下Home键回到主屏，启动另一个应用，这个过程中，之前的task被转移到后台，新的task被转移到前台，其根Activity也会显示到幕前，过了一会之后，在此按下Home键回到主屏，再选择之前的应用，之前的task会被转移到前台，系统仍然保留着task内的所有Activity实例，而那个新的task会被转移到后台，如果这时用户再做后退等动作，就是针对该task内部进行操作了。<br>我们今天就讲一下和task相关的知识，主要分一下几点：</p>
<ol>
<li>Activity的affinity(亲和力)</li>
<li>Intent几种常见的flags</li>
<li>activity与task相关属性</li>
</ol>
<a id="more"></a> 
<h3 id="affinity："><a href="#affinity：" class="headerlink" title="affinity："></a>affinity：</h3><p>task对于Activity来说就好像它的身份证一样，可以告诉所在的task，自己属于这个task中的一员；拥有相同affinity的多个Activity理论同属于一个task，task自身的affinity决定于根Activity的affinity值。affinity在什么场合应用呢？</p>
<ol>
<li>根据affinity重新为Activity选择宿主task（与allowTaskReparenting属性配合工作）；</li>
<li>启动一个Activity过程中Intent使用了FLAG_ACTIVITY_NEW_TASK标记，根据affinity查找或创建一个新的具有对应affinity的task。我们会在后面进行详细讲解。</li>
</ol>
<p>默认情况下，一个应用内的所有Activity都具有相同的affinity，都是从Application（参考<application>的taskAffinity属性）继承而来，而Application默认的affinity是<manifest>中的包名，我们可以为<application>设置taskAffinity属性值，这样可以应用到<application>下的所有activity，也可以单独为某个Activity设置taskAffinity。例如：在系统自带的Browser中，package为com.android.browser，但是<application>却自定义一个taskAffinity属性值：</application></application></application></manifest></application></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;application   android:name=<span class="string">"Browser"</span></div><div class="line">               android:label=<span class="string">"@string/application_name"</span></div><div class="line">               android:icon=<span class="string">"@drawable/ic_launcher_browser"</span></div><div class="line">               android:backupAgent=<span class="string">".BrowserBackupAgent"</span></div><div class="line">               android:taskAffinity=<span class="string">"android.task.browser"</span> &gt;</div></pre></td></tr></table></figure>
<h3 id="Intent几种常见的flags："><a href="#Intent几种常见的flags：" class="headerlink" title="Intent几种常见的flags："></a>Intent几种常见的flags：</h3><p>在android.content.Intent中定义了若干个flags，其中最重要的有以下几个：</p>
<h3 id="1-FLAG-ACTIVITY-NEW-TASK："><a href="#1-FLAG-ACTIVITY-NEW-TASK：" class="headerlink" title="1.FLAG_ACTIVITY_NEW_TASK："></a>1.FLAG_ACTIVITY_NEW_TASK：</h3><p>当Intent对象包含这个标记时，系统会寻找或创建一个新的task来放置目标Activity，寻找时依据目标Activity的taskAffinity属性进行匹配，如果找到一个task的taskAffinity与之相同，就将目标Activity压入此task中，如果查找无果，则创建一个新的task，并将该task的taskAffinity设置为目标Activity的taskActivity，将目标Activity放置于此task。注意，如果同一个应用中Activity的taskAffinity都使用默认值或都设置相同值时，应用内的Activity之间的跳转使用这个标记是没有意义的，因为当前应用task就是目标Activity最好的宿主。注意如果试图从非activity的非正常途径启动一个activity（<code>例见文末“intent.setFlags()方法中参数的用例”</code>），比如从一个service中启动一个activity，则intent比如要添加FLAG_ACTIVITY_NEW_TASK标记（<code>activity要存在于activity的栈中，而非activity的途径启动activity时必然不存在一个activity的栈，所以要新起一个栈装入启动的activity</code>）。简而言之，跳转到的activity根据情况，可能压在一个新建的栈中。</p>
<p>我们新建两个项目，分别命名为appA和appB，并且分别创建FirstActivity和SecondActivity，我们准备让appB中的FirstActivity跳转到appA的SecondActivity。appA中的SecondActivity配置如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=".SecondActivity"&gt;  </div><div class="line">            &lt;intent-filter&gt;  </div><div class="line">                &lt;action android:name="android.intent.action.APP_A_SECOND_ACTIVITY" /&gt;  </div><div class="line">                &lt;category android:name="android.intent.category.DEFAULT" /&gt;  </div><div class="line">            &lt;/intent-filter&gt;  </div><div class="line">        &lt;/activity&gt;</div></pre></td></tr></table></figure>
<p>然后，在appB中的FirstActivity跳转代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.APP_A_SECOND_ACTIVITY"</span>);  </div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<p>我们要演示几个步骤：1.在appB中的FirstActivity点击按钮跳转到appA中的SecondActivity；2.按Home键回到主屏，在主选单中再次启动appB；3.按Home键回到主屏，在主选单中启动appA。演示过程如图所示：</p>
<p><img src="/article_images/task-activity01.png" alt="alt"><br>我们发现在从appB跳转到appA的SecondActivity之后，SecondActivity实例好像是嵌入到了appB中,属于appB的一部分，但是不影响appA的正常运行，这种关系如下图所示：</p>
<p><img src="/article_images/task-activity02.png" alt="alt"><br>然后我们修改一下跳转的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.APP_A_SECOND_ACTIVITY"</span>);  </div><div class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  </div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<p><img src="/article_images/task-activity03.png" alt="alt"><br>我们看到差别了吧，当我们再次启动appB时已经看不到刚才启动的appA中的SecondActivity，而启动appA时却直接看到了，说明<code>这个SecondActivity实例并不在appB的task内，而是创建了一个task</code>，这个task的affinity就是SecondActivity默认的affinity，由于appA的SecondActivity的affinity是从Application继承而来，所以当appA启动时会直接找到这个task，而不是创建新的task。我们看一下解析图：</p>
<p><img src="/article_images/task-activity04.png" alt="alt"></p>
<h3 id="2-FLAG-ACTIVITY-CLEAR-TOP："><a href="#2-FLAG-ACTIVITY-CLEAR-TOP：" class="headerlink" title="2.FLAG_ACTIVITY_CLEAR_TOP："></a>2.FLAG_ACTIVITY_CLEAR_TOP：</h3><p>当Intent对象包含这个标记时，如果在栈中发现存在Activity实例，则清空这个实例之上的Activity，使其处于栈顶。例如：我们的FirstActivity跳转到SecondActivity，SecondActivity跳转到ThirdActivity，而ThirdActivity又跳到SecondActivity，那么ThirdActivity实例将被弹出栈，使SecondActivity处于栈顶，显示到幕前，栈内只剩下FirstActivity和SecondActivity。这个SecondActivity既可以在onNewIntent()中接收到传来的Intent，也可以把自己销毁之后重新启动来接受这个Intent。在使用默认的“standard”启动模式下，如果没有在Intent使用到FLAG_ACTIVITY_SINGLE_TOP标记，那么它将关闭后重建，如果使用了这个FLAG_ACTIVITY_SINGLE_TOP标记，则会使用已存在的实例；对于其他启动模式，无需再使用FLAG_ACTIVITY_SINGLE_TOP，它都将使用已存在的实例，Intent会被传递到这个实例的onNewIntent()中。<br>下面我们来验证一下这个过程：<br>首先，Activity启动模式都按照默认值“standard”。从FirstActivity跳转到SecondActivity，SecondActivity实例如下：</p>
<p><img src="/article_images/task-activity05.png" alt="alt"><br>从ThirdActivity跳转到SecondActivity时，跳转代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecondActivity.class);  </div><div class="line">intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  </div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<p>然后跳转后SecondActivity实例如下：</p>
<p><img src="/article_images/task-activity06.png" alt="alt"><br>从序列号可以看到这两个实例是不同的，证明它是经过了销毁和重新的过程。<br>然后我们把ThirdActivity中的跳转代码添加FLAG_ACTIVITY_SINGLE_TOP标记：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecondActivity.class);  </div><div class="line">intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);  </div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<p>两次实例均如下图所示：</p>
<p><img src="/article_images/task-activity07.png" alt="alt"><br>如果我们不想添加FLAG_ACTIVITY_SINGLE_TOP，那么把SecondActivity的启动模式改为“standard”之外的三种即可，效果和上面一样，都不会创建新的实例。</p>
<h3 id="3-FLAG-ACTIVITY-SINGLE-TOP："><a href="#3-FLAG-ACTIVITY-SINGLE-TOP：" class="headerlink" title="3.FLAG_ACTIVITY_SINGLE_TOP："></a>3.FLAG_ACTIVITY_SINGLE_TOP：</h3><p>当task中存在目标Activity实例并且位于栈的顶端时，不再创建一个新的，直接利用这个实例。我们在上边的例子中也有讲到。</p>
<h3 id="4-FLAG-ACTIVITY-CLEAR-WHEN-TASK-RESET："><a href="#4-FLAG-ACTIVITY-CLEAR-WHEN-TASK-RESET：" class="headerlink" title="4.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET："></a>4.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET：</h3><p>如果一个Intent中包含此属性，则它转向的那个Activity以及在那个Activity其上的所有Activity都会在task重置时被清除出task。当我们将一个后台的task重新回到前台时，系统会在特定情况下为这个动作附带一个FLAG_ACTIVITY_RESET_TASK_IF_NEEDED标记，意味着必要时重置task，这时FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET就会生效。经过测试发现，对于一个处于后台的应用，如果在主选单点击应用，这个动作中含有FLAG_ACTIVITY_RESET_TASK_IF_NEEDED标记，长按Home键，然后点击最近记录，这个动作不含FLAG_ACTIVITY_RESET_TASK_IF_NEEDED标记,所以前者会清除，后者不会。关于这个标记，可以下图示之：</p>
<p><img src="/article_images/task-activity08.png" alt="alt"><br>这个标记对于应用存在分割点的情况会非常有用。比如我们在应用主界面要选择一个图片，然后我们启动了图片浏览界面，但是把这个应用从后台恢复到前台时，为了避免让用户感到困惑，我们希望用户仍然看到主界面，而不是图片浏览界面，这个时候我们就要在转到图片浏览界面时的Intent中加入此标记。</p>
<h3 id="5-FLAG-ACTIVITY-RESET-TASK-IF-NEEDED："><a href="#5-FLAG-ACTIVITY-RESET-TASK-IF-NEEDED：" class="headerlink" title="5.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED："></a>5.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED：</h3><p>这个标记在以下情况下会生效：1.启动Activity时创建新的task来放置Activity实例；2.已存在的task被放置于前台。系统会根据affinity对指定的task进行重置操作，task会压入某些Activity实例或移除某些Activity实例。我们结合上面的CLEAR_WHEN_TASK_RESET可以加深理解。</p>
<h3 id="6-FLAG-ACTIVITY-NO-HISTORY："><a href="#6-FLAG-ACTIVITY-NO-HISTORY：" class="headerlink" title="6.FLAG_ACTIVITY_NO_HISTORY："></a>6.FLAG_ACTIVITY_NO_HISTORY：</h3><p>例如现在栈情况为：A B C。C通过intent跳转到D，这个intent添加FLAG_ACTIVITY_NO_HISTORY标志，则此时界面显示D的内容，但是它并不会压入栈中。如果按返回键，返回到C，栈的情况还是：A B C。如果此时D中又跳转到E，栈的情况变为：A B C E，此时按返回键会回到C，因为D根本就没有被压入栈中。简而言之，跳转到的activity不压在栈中。</p>
<h3 id="activity的task相关属性"><a href="#activity的task相关属性" class="headerlink" title="activity的task相关属性"></a>activity的task相关属性</h3><p>在activity中定义了几个常见的task相关属性，它们分别代表了task内部不同的行为特征，我们就来逐个介绍一下：</p>
<h3 id="1-android-allowTaskReparenting"><a href="#1-android-allowTaskReparenting" class="headerlink" title="1.android:allowTaskReparenting"></a>1.android:allowTaskReparenting</h3><p>这个属性用来标记一个Activity实例在当前应用退居后台后，是否能从启动它的那个task移动到有共同affinity的task，“true”表示可以移动，“false”表示它必须呆在当前应用的task中，默认值为false。如果一个这个Activity的activity元素没有设定此属性，设定在<application>上的此属性会对此Activity起作用。例如在一个应用中要查看一个web页面，在启动系统浏览器Activity后，这个Activity实例和当前应用处于同一个task，当我们的应用退居后台之后用户再次从主选单中启动应用，此时这个Activity实例将会重新宿主到Browser应用的task内，在我们的应用中将不会再看到这个Activity实例，而如果此时启动Browser应用，就会发现，第一个界面就是我们刚才打开的web页面，证明了这个Activity实例确实是宿主到了Browser应用的task内。我们就来结合实例演示一下这个过程：<br>首先，在appB的FirstActivity中，我们将跳转动作做以下改动：</application></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent viewIntent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(<span class="string">"http://www.google.com.hk"</span>));  </div><div class="line">startActivity(viewIntent);</div></pre></td></tr></table></figure>
<p><img src="/article_images/task-activity09.png" alt="alt"><br>以上这种行为也证明了我们前面的论断，为了更清楚的说明问题，也为了让大家自己可以验证，下面我们要再次演示一下appB和appA的启动过程：<br>对于appA，在上面的基础上，不用修改其他地方，只需为SecondActivity的activity元素添加一个属性，如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=".SecondActivity" android:allowTaskReparenting="true"&gt;  </div><div class="line">...           </div><div class="line">&lt;/activity&gt;  </div><div class="line">//然后，在appB中的FirstActivity跳转代码改为：</div><div class="line">Intent intent = new Intent("android.intent.action.APP_A_SECOND_ACTIVITY");  </div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<p><img src="/article_images/task-activity10.png" alt="alt"><br>通常两个应用分别有自己的task，它们的taskid肯定不同，但这里的SecondActivity却显示taskid与appB相同，我们想一下也许就明白了，原来它是appB迁徙过来的，再启动appA时并未生成任何新的Activity实例。这个时候如果我们按下后退键，appA就会立即退出，证明了此时appA的task里只有一个Activity实例，也就是这个SecondActivity实例。<br>需要注意的是，如果appB退居后台之后，没有再次启动appB，而是直接启动appA，将不会出现以上现象。重新宿主的动作发生在appB再次启动的过程中。<br>android:allowReparenting的效果图如下：</p>
<p><img src="/article_images/task-activity11.png" alt="alt"></p>
<h3 id="2-android-alwaysRetainTaskState"><a href="#2-android-alwaysRetainTaskState" class="headerlink" title="2.android:alwaysRetainTaskState"></a>2.android:alwaysRetainTaskState</h3><p>这个属性用来标记应用的task是否保持原来的状态，“true”表示总是保持，“false”表示不能够保证，默认为“false”。此属性只对<code>task的根Activity起作用</code>，其他的Activity都会被忽略。<br>默认情况下，如果一个应用在后台呆的太久例如30分钟，用户从主选单再次选择该应用时，系统就会对该应用的task进行清理，除了根Activity，其他Activity都会被清除出栈，但是如果在根Activity中设置了此属性之后，用户再次启动应用时，仍然可以看到上一次操作的界面。<br>这个属性对于一些应用非常有用，例如Browser应用程序，有很多状态，比如打开很多的tab，用户不想丢失这些状态，使用这个属性就极为恰当。</p>
<h3 id="3-android-clearTaskOnLaunch"><a href="#3-android-clearTaskOnLaunch" class="headerlink" title="3.android:clearTaskOnLaunch"></a>3.android:clearTaskOnLaunch</h3><p>这个属性用来标记是否从task清除除根Activity之外的所有的Activity，“true”表示清除，“false”表示不清除，默认为“false”。同样，这个属性<code>也只对根Activity起作用</code>，其他的Activity都会被忽略。<br>如果设置了这个属性为“true”，每次用户重新启动这个应用时，都只会看到根Activity，task中的其他Activity都会被清除出栈。如果我们的应用中引用到了其他应用的Activity，这些Activity设置了allowTaskReparenting属性为“true”，则它们会被重新宿主到有共同affinity的task中。<br>无图无真相，我们就来以实例演示一下这个过程，我们首先修改appB的根Activity的activity元素，如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=".FirstActivity"  </div><div class="line">                  android:clearTaskOnLaunch="true"&gt;  </div><div class="line">        ...      </div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
<p><img src="/article_images/task-activity12.png" alt="alt"></p>
<h3 id="4-android-finishOnTaskLaunch"><a href="#4-android-finishOnTaskLaunch" class="headerlink" title="4.android:finishOnTaskLaunch"></a>4.android:finishOnTaskLaunch</h3><p>这个属性和android:allowReparenting属性相似，不同之处在于allowReparenting属性是重新宿主到有共同affinity的task中，而finishOnTaskLaunch属性是销毁实例。如果这个属性和android:allowReparenting都设定为“true”，则这个属性胜出。</p>
<h3 id="intent-setFlags-方法中参数的用例："><a href="#intent-setFlags-方法中参数的用例：" class="headerlink" title="intent.setFlags()方法中参数的用例："></a>intent.setFlags()方法中参数的用例：</h3><p>很多人使用startActivity时候，会碰到如下的异常：</p>
<blockquote>
<p>Caused by: android.util.androidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</p>
</blockquote>
<p>都知道，Context中有一个startActivity方法，Activity继承自Context，重载了startActivity方法。如果使用Activity的startActivity方法，不会有任何限制，而如果使用Context的startActivity方法的话，就需要开启一个新的task，遇到上面那个异常的，都是因为使用了Context的startActivity方法。解决办法是：Java代码中加一个flag，即intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)。这样就可以在新的task里面启动这个Activity了。</p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/liuhe688/article/details/6761337" target="_blank" rel="external">CSDN</a><br>,<a href="http://drops.wooyun.org/tips/3936" target="_blank" rel="external">WOOYUN</a>,<a href="http://blog.csdn.net/berber78/article/details/7278408" target="_blank" rel="external">CSDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中Service的详细使用说明]]></title>
      <url>http://dalufan.com/2014/11/26/android-Service/</url>
      <content type="html"><![CDATA[<h3 id="0-Demo"><a href="#0-Demo" class="headerlink" title="0.Demo"></a>0.Demo</h3><p><a href="/article_files/ServiceDemo.rar">下载</a></p>
<h3 id="1-Service生命周期"><a href="#1-Service生命周期" class="headerlink" title="1.Service生命周期"></a>1.Service生命周期</h3><p>Service生命周期可以从两种启动Service的模式开始讲起，分别是context.startService()和context.bindService()。</p>
<a id="more"></a> 
<h3 id="startService的启动模式下的生命周期："><a href="#startService的启动模式下的生命周期：" class="headerlink" title="startService的启动模式下的生命周期："></a>startService的启动模式下的生命周期：</h3><p>当我们首次使用startService启动一个服务时，系统会实例化一个Service实例，依次调用其onCreate和onStartCommand方法，然后进入运行状态，此后，如果再使用startService启动服务时，不再创建新的服务对象，系统会自动找到刚才创建的Service实例，调用其onStartCommand和onStart方法；如果我们想要停掉一个服务，可使用stopService方法，此时onDestroy方法会被调用，需要注意的是，不管前面使用了多个次startService，只需一次stopService，即可停掉服务。</p>
<h3 id="bindService启动模式下的生命周期："><a href="#bindService启动模式下的生命周期：" class="headerlink" title="bindService启动模式下的生命周期："></a>bindService启动模式下的生命周期：</h3><p>在这种模式下，当调用者首次使用bindService绑定一个服务时，系统会实例化一个Service实例，并一次调用其onCreate方法和onBind方法，然后调用者就可以和服务进行交互了，此后，如果再次使用bindService绑定服务，系统不会创建新的Service实例，也不会再调用onBind方法；如果我们需要解除与这个服务的绑定，可使用unbindService方法，此时onUnbind方法和onDestroy方法会被调用。</p>
<p>两种模式有以下几点<code>不同之处</code>：startService模式下调用者与服务无必然联系，即使调用者结束了自己的生命周期，只要没有使用stopService方法停止这个服务，服务仍会运行；通常情况下，bindService模式下服务是与调用者生死与共的，在绑定结束之后，一旦调用者被销毁，服务也就立即终止，就像江湖上的一句话：不求同生，但愿同死。<br>值得一提的是，以前我们在使用startService启动服务时都是习惯重写onStart方法，在android2.0时系统引进了onStartCommand方法取代onStart方法，为了兼容以前的程序，在onStartCommand方法中其实调用了onStart方法，不过我们最好是重写onStartCommand方法。</p>
<p><img src="/article_images/Service_lifecycle.png" alt="alt"><br>下面我们就结合实例来演示一下这两种模式的生命周期过程。我们新建一个名为service的项目，然后创建一个MyService的服务类，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Service;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.IBinder;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyService"</span>;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    Log.i(TAG, <span class="string">"onCreate called."</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">    Log.i(TAG, <span class="string">"onStartCommand called."</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStart(intent, startId);</div><div class="line">    Log.i(TAG, <span class="string">"onStart called."</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">    Log.i(TAG, <span class="string">"onBind called."</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">    Log.i(TAG, <span class="string">"onUnbind called."</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    Log.i(TAG, <span class="string">"onDestroy called."</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后再androidManifest.xml中配置服务信息，不然这个服务就不会生效，配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".MyService"</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">                 <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MyService"</span> /&gt;</span>  </div><div class="line">                 <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果服务只是在本应用中使用，大可以去掉<intent-filter>属性。<br>服务搭建完成之后，我们就来关注一下调用者MainActivity，它很简单，只有两个按钮，一个是启动服务，另一个是停止服务，我们来看一下他们的点击事件：</intent-filter></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 启动服务 </div><div class="line"> * <span class="doctag">@param</span> view </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">    startService(intent);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * 停止服务 </div><div class="line"> * <span class="doctag">@param</span> view </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">    stopService(intent);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/article_images/service-activity01.png" alt="alt"><br>我们会发现onDestroy方法被调用了，此时服务就停止运行了。我们再次查看“Running services”，就会发现MyService这个服务已全无踪迹。<br>在这个过程中，onBind方法和onUnbind方法始终没被调用，我们下面就让这两位show一下自己。<br>我们修改一下MainActivity的代码，使其可以以bindService的方式启动一个服务，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ServiceConnection conn = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">    <span class="comment">//connected</span></div><div class="line">    Log.i(TAG, <span class="string">"onServiceConnected called."</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   *  Called when a connection to the Service has been lost.</div><div class="line">   *  This typically happens when the process hosting the service has crashed or been killed.</div><div class="line">   *  This does not remove the ServiceConnection itself.</div><div class="line">   *  this binding to the service will remain active,</div><div class="line">   *  and you will receive a call to onServiceConnected when the Service is next running.</div><div class="line">   */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 绑定服务</div><div class="line"> * <span class="doctag">@param</span> view</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">  Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);</div><div class="line">  bindService(intent, conn, Context.BIND_AUTO_CREATE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 解除绑定</div><div class="line"> * <span class="doctag">@param</span> view</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unbind</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">  unbindService(conn);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在使用bindService绑定服务时，我们需要一个ServiceConnection代表与服务的连接，它只有两个方法，onServiceConnected和onServiceDisconnected，前者是在操作者在连接一个服务成功时被调用，如下图：</p>
<p><img src="/article_images/service-activity001.png" alt="alt"></p>
<p>而后者是在服务崩溃或被杀死导致的连接中断时被调用，而如果我们自己解除绑定时则不会被调用，所以我们这里只研究onServiceConnected这个方法。</p>
<p>看样子是可以去绑定一个服务了，其实还不行，因为我们前面服务中的onBind方法返回值为null，这样是不行的，要想实现绑定操作，必须返回一个实现了IBinder接口类型的实例，该接口描述了与远程对象进行交互的抽象协议，有了它我们才能与服务进行交互。我们于是有了这样的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;  </div><div class="line">    Log.i(TAG, <span class="string">"onBind called."</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Binder() &#123;&#125;;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们返回了一个Binder的实例，而这个Binder恰恰是实现了IBinder接口，所以这样就可以实现绑定服务的操作了，一起来演示一下。<br><img src="/article_images/service-activity02.png" alt="alt"><br>可以看到onUnbind方法和onDestroy方法被调用了，此时MyService已被销毁，整个生命周期结束。<br>另一方面，当我们退出MainActivity时，服务也会随之而结束，从这一点上看，MyService可以说是誓死追随着MainActivity。<br>需要注意的是，在连接中断状态再去做解除绑定操作会引起一个异常，在<code>MainActivity销毁</code>之前没有进行解除绑定也会导致后台出现异常信息，此时我们就要想办法确保不会出现此类情况，可以对MainActivity做如下修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> binded;  </div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;  </div><div class="line">    binded = <span class="keyword">true</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * 解除绑定 </div><div class="line"> * <span class="doctag">@param</span> view </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unbind</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">    unbindService();  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onDestroy();  </div><div class="line">    unbindService();  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * 解除服务绑定 </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unbindService</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (binded) &#123;  </div><div class="line">        unbindService(conn);  </div><div class="line">        binded = <span class="keyword">false</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是bindService的生命周期，正如我们上面讲的一样，使用bindService启动服务后调用者和服务绑定到了一起，当调用者被销毁，服务也立即结终止。<br>通常情况下是这样的，不过也有特殊情况。当startService和bindService在同一场合下使用时，就会出现稍微不同的现象。<br>如果我们先以startService方式启动服务，然后再用bindService绑定到这个服务，之后使用unbindService解除绑定，此时服务并不会因此而终止，而是继续运行，直到我们使用stopService来停止这个服务。下面我们再修改一下代码以验证这个过程。MyService保持不变，我们只需修改一下MainActivity。MainActivity最新代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.content.ComponentName;  </div><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.content.ServiceConnection;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.os.IBinder;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line"><span class="keyword">import</span> android.view.View;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.main);  </div><div class="line">    &#125;        </div><div class="line">    <span class="keyword">private</span> ServiceConnection conn = <span class="keyword">new</span> ServiceConnection() &#123;  </div><div class="line">          </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;  </div><div class="line">            Log.i(TAG, <span class="string">"onServiceConnected called."</span>);  </div><div class="line">        &#125;            </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;  </div><div class="line">        &#125;  </div><div class="line">    &#125;;        </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 启动服务 </div><div class="line">     * <span class="doctag">@param</span> view </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        startService(intent);  </div><div class="line">    &#125;        </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 绑定服务 </div><div class="line">     * <span class="doctag">@param</span> view </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        bindService(intent, conn, Context.BIND_AUTO_CREATE);  </div><div class="line">    &#125;        </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 解除绑定 </div><div class="line">     * <span class="doctag">@param</span> view </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unbind</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">        unbindService(conn);  </div><div class="line">    &#125;        </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 停止服务 </div><div class="line">     * <span class="doctag">@param</span> view </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        stopService(intent);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在MainActivity中包含了四个按钮事件，分别是startService、bindService、unbindService和stopService，我们逐一地按下，看看都发生了什么。<br>首先按下启动服务的按钮，MyService打印如下：<br><img src="/article_images/service-activity03.png" alt="alt"><br>此时，onDestroy被调用了，此时MyService停止了运行，整个生命周期结束。<br>以上就是关于MyService生命周期的讲解，下面我们来介绍一下如何与服务进行通信。与服务之间的通信可以分为两种，进程内的通信和进程间的通信，前者调用者和服务在同一应用进程内，而后者是分布在不同应用进程中的。</p>
<p>关于Service生命周期还有一张比较易懂的图<br><img src="/article_images/service-activity002.png" alt="alt"></p>
<h3 id="2-IntentService介绍"><a href="#2-IntentService介绍" class="headerlink" title="2.IntentService介绍"></a>2.IntentService介绍</h3><p>IntentService使用队列的方式将请求的Intent加入队列，然后开启一个worker thread(线程)来处理队列中的Intent，对于异步的startService请求，IntentService一次只能执行一个请求，他会处理完成一个之后再处理第二个，每一个请求都会在一个单独的worker thread中处理，不会阻塞应用程序的主线程，这里就给我们提供了一个思路，如果有耗时的操作与其在Service里面开启新线程还不如使用IntentService来处理耗时操作。而在一般的继承Service里面如果要进行耗时操作就必须另开线程，但是使用IntentService就可以直接在里面进行耗时操作，因为默认实现了一个worker thread。对于异步的startService请求，IntentService会处理完成一个之后再处理第二个。</p>
<p>源码简析</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IntentService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123; </div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> Looper mServiceLooper; </div><div class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> ServiceHandler mServiceHandler; </div><div class="line"></div><div class="line">        <span class="keyword">private</span> String mName; </div><div class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> mRedelivery; </div><div class="line">    </div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123; </div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123; </div><div class="line">                        <span class="keyword">super</span>(looper); </div><div class="line">                &#125; </div><div class="line">    </div><div class="line">                <span class="meta">@Override</span> </div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123; </div><div class="line">                        onHandleIntent((Intent)msg.obj); </div><div class="line">                        stopSelf(msg.arg1); </div><div class="line">                &#125; </div><div class="line"></div><div class="line">        &#125;    </div><div class="line">        <span class="comment">/**IntentService创建时就会创建Handler线程(HandlerThread)并且启动,然后再得到当前线程的Looper对象来初始化IntentService的mServiceLooper,接着创建mServicehandler对象*/</span></div><div class="line">        <span class="meta">@Override</span> </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123; </div><div class="line">                <span class="keyword">super</span>.onCreate(); </div><div class="line"></div><div class="line">                HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"IntentService["</span> + mName + <span class="string">"]"</span>); </div><div class="line">                thread.start(); </div><div class="line"></div><div class="line">                mServiceLooper = thread.getLooper(); </div><div class="line">                mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper); </div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**当你启动IntentService的时候,就会产生一条附带startId和Intent的Message并发送到MessageQueue中,接下来Looper发现MessageQueue中有Message的时候,就会停止Handler处理消息  */</span></div><div class="line">        <span class="meta">@Override</span> </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123; </div><div class="line">                Message msg = mServiceHandler.obtainMessage(); </div><div class="line">                msg.arg1 = startId; </div><div class="line">                msg.obj = intent; </div><div class="line"></div><div class="line">                mServiceHandler.sendMessage(msg); </div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**接着调用 onHandleIntent((Intent)msg.obj),这是一个抽象的方法,其实就是我们要重写实现的方法,我们可以在这个方法里面处理我们的工作.当任务完成时就会调用stopSelf(msg.arg1)这个方法来结束指定的工作.*/</span></div><div class="line">         <span class="meta">@Override</span> </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123; </div><div class="line">                        onHandleIntent((Intent)msg.obj); </div><div class="line">                        stopSelf(msg.arg1); </div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**服务结束后调用这个方法 mServiceLooper.quit()使looper停下来.*/</span></div><div class="line">        <span class="meta">@Override</span> </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123; </div><div class="line">                mServiceLooper.quit(); </div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从源码可以分析出:IntentService 实际上是Looper,Handler,Service 的集合体,他不仅有服务的功能，还有处理和循环消息的功能。</p>
<p>IntentService是一个基于消息的服务,每次启动该服务并不是马上处理你的工作,而是首先会创建对应的Looper,Handler并且在MessageQueue中添加的附带客户Intent的Message对象,当Looper发现有Message的时候接着得到Intent对象通过在onHandleIntent((Intent)msg.obj)中调用你的处理程序.处理完后即会停止自己的服务.意思是Intent的生命周期跟你的处理的任务是一致的.所以这个类用下载任务中非常好,下载任务结束后服务自身就会结束退出.</p>
<h3 id="3-进程内与服务通信"><a href="#3-进程内与服务通信" class="headerlink" title="3.进程内与服务通信"></a>3.进程内与服务通信</h3><p>进程内与服务通信实际上就是通过bindService的方式与服务绑定，获取到通信中介Binder实例，然后通过调用这个实例的方法，完成对服务的各种操作。我们上面也介绍了不少关于bindService的内容，下面我们就针对实际需求对代码做改动。首先是MyService，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Service;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.os.Binder;  </div><div class="line"><span class="keyword">import</span> android.os.IBinder;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyService"</span>;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;  </div><div class="line">        Log.i(TAG, <span class="string">"onBind called."</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyBinder();  </div><div class="line">    &#125;        </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 绑定对象 </div><div class="line">     * <span class="doctag">@author</span> user </div><div class="line">     * </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;  </div><div class="line">          </div><div class="line">        <span class="comment">/** </span></div><div class="line">         * 问候 </div><div class="line">         * <span class="doctag">@param</span> name </div><div class="line">         */  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">(String name)</span> </span>&#123;  </div><div class="line">            Log.i(TAG, <span class="string">"hello, "</span> + name);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们创建了一个MyBinder的内部类，定义了一个greet方法，在onBind方法中就将这个MyBinder的实例返回，只要调用者获取到这个实例，就可以像拿着游戏手柄一样对服务进行操作。我们来看一下调用者的代码吧，MainActivity代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.content.ComponentName;  </div><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.content.ServiceConnection;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.os.IBinder;  </div><div class="line"><span class="keyword">import</span> android.view.View;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 绑定对象实例 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> MyService.MyBinder binder;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.main);  </div><div class="line">    &#125;        </div><div class="line">    <span class="keyword">private</span> ServiceConnection conn = <span class="keyword">new</span> ServiceConnection() &#123;  </div><div class="line">          </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;  </div><div class="line">            binder = (MyService.MyBinder) service;  <span class="comment">//获取其实例  </span></div><div class="line">            binder.greet(<span class="string">"scott"</span>);                  <span class="comment">//调用其方法  </span></div><div class="line">        &#125;            </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;  </div><div class="line">        &#125;  </div><div class="line">    &#125;;       </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 绑定服务 </div><div class="line">     * <span class="doctag">@param</span> view </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        bindService(intent, conn, Context.BIND_AUTO_CREATE);  </div><div class="line">    &#125;        </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 解除绑定 </div><div class="line">     * <span class="doctag">@param</span> view </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unbind</span><span class="params">(View view)</span> </span>&#123;  </div><div class="line">        unbindService(conn);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中，我们是在绑定服务成功时将IBinder类型的service参数强转为MyService.MyBinder类型，获取绑定中介实例，然后调用其greet方法。<br>操作一下，看看效果如何。先点击绑定服务的按钮，MyService打印如下：</p>
<p><img src="/article_images/service-activity04.png" alt="alt"><br>需要注意的是，与服务绑定是一个异步的过程，也就是说，在这一刻我们绑定服务，下一刻我们去操作binder对象，也许它还为null，这就容易引起空指针异常，正确的做法是把这些操作放到绑定成功之后，确保万无一失。</p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/liuhe688/article/details/6874378" target="_blank" rel="external">1</a>，<a href="http://www.cnblogs.com/jisheng/archive/2011/12/13/2286262.html" target="_blank" rel="external">2</a>，<a href="http://www.android-doc.com/home/guide/components/services.html" target="_blank" rel="external">3</a>，<a href="http://blog.csdn.net/ryantang03/article/details/7770939" target="_blank" rel="external">4</a>，<a href="http://android.blog.51cto.com/268543/528166/" target="_blank" rel="external">IntentService</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中Activity的四种launchMode]]></title>
      <url>http://dalufan.com/2014/11/25/android-activity-launchMode/</url>
      <content type="html"><![CDATA[<p>launchMode在多个Activity跳转的过程中扮演着重要的角色，它可以决定是否生成新的Activity实例，是否重用已存在的Activity实例，是否和其他Activity实例公用一个task里。这里简单介绍一下task的概念，<code>task是一个具有栈结构的对象，一个task可以管理多个Activity，启动一个应用，也就创建一个与之对应的task</code>。</p>
<p>Activity launch mode 用于控制创建task和Activity实例。默认“standard“模式。Standard模式一次启动即会生成一个新的Activity实例并且不会创建新的task，被启动的Activity和启动的Activity在同一个栈中。当创建新的task时，intent中的内容有可能被恶意应用读取所以建议若无特别需求使用默认的standard模式即不配置launch mode属性。<code>launchMode能被Intent的flag覆盖</code>。</p>
<blockquote>
<p>三个Activity：A（standard,taskAffinity:com.aa）、B（singleTask,taskAffinity:com.bb）、C（singleTask,taskAffinity:com.bb），A启动B，B中启动C，C中启动A，A启动B，按下返回键，看到的是谁？答案是A。</p>
</blockquote>
<p>解析：<br>前两部步之后，会有两个栈，一个是com.aa(A)，一个是com.bb(B、C)。<br>第三步，会有两个栈，一个是com.aa(A)，一个是com.bb(B、C、A)。<br>第四步，CA出栈。<br>第五步，B出栈了。后台任务栈中的A出来了。</p>
<a id="more"></a> 
<p>Activity一共有以下四种launchMode：</p>
<ol>
<li><code>standard</code> Default. The system always creates a new instance of the activity in the target task and routes the intent to it.</li>
<li><code>singleTop</code> If an instance of the activity already exists at the top of the target task, the system routes the intent to that instance through a call to its <code>onNewIntent()</code> method, rather than creating a new instance of the activity.</li>
<li><code>singleTask</code> The system creates the activity at the root of a new task and routes the intent to it. However, if an instance of the activity already exists, the system routes the intent to existing instance through a call to its <code>onNewIntent()</code> method, rather than creating a new one.</li>
<li><code>singleInstance</code> Same as “singleTask”, except that the system doesn’t launch any other activities into the task holding the instance. The activity is always the single and only member of its task.</li>
</ol>
<p><code>补充：</code> 如果在一个singleTop或者singleInstance的ActivityA中通过startActivityForResult()来启动另一个ActivityB的时候，系统直接返回为Activity.RESULT_CANCELED而不是在等待返回，这是因为系统在Framework层中对这两种启动模式做了限制，因为开发者认为，不同的Task之间，默认是不能传递数据的，如果要传递，请使用Intent来绑定数据，一般应设置standard模式给ActivityA。在实际测试中，发现<code>singleTop</code>是能正常接收到的，也有网友这样反映过，具体原因未知。<a href="../../../../../2016/01/03/android-activity-onActivityResult/">参考链接</a></p>
<h3 id="1-standard"><a href="#1-standard" class="headerlink" title="1.standard"></a>1.standard</h3><p>standard模式是默认的启动模式，不用为<activity>配置android:launchMode属性即可，当然也可以指定值为standard。</activity></p>
<pre><code>&lt;activity android:name=&quot;FirstActivity&quot; android:launchMode=&quot;standard&quot;&gt;&lt;/activity&gt;
</code></pre><p>此时如果在FirstActivity中设置点击事件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.first);  </div><div class="line">        TextView textView = (TextView) findViewById(R.id.textView);  </div><div class="line">        textView.setText(<span class="keyword">this</span>.toString());  </div><div class="line">        Button button = (Button) findViewById(R.id.button);  </div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, FirstActivity.class);  </div><div class="line">                startActivity(intent);  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每次点击系统都会在task中生成一个新的FirstActivity实例，并且放于栈结构的顶部，当我们按下后退键时，才能看到原来的FirstActivity实例。<br>这就是standard启动模式，不管有没有已存在的实例，都生成新的实例。<code>谁启动了这个模式的Activity，那么这个Activity就会运行在启动它的那个Activity所在的栈中</code></p>
<h3 id="2-singleTop"><a href="#2-singleTop" class="headerlink" title="2.singleTop"></a>2.singleTop</h3><p>可以理解为 <code>single in top</code></p>
<p>我们在上面的基础上为<activity>指定属性android:launchMode=”singleTop”，系统就会按照singleTop启动模式处理跳转行为。<br>我们看到这个结果跟standard有所不同，三个序列号是相同的,每次点击使用的都是同一个FirstActivity实例；如果按一下后退键，程序立即退出，说明当前栈结构中只有一个Activity实例。</activity></p>
<p><img src="/article_images/launchmode-activity01.png" alt="alt"></p>
<p>正如上图所示，跳转时系统会先在栈结构中寻找是否有一个FirstActivity实例正位于栈顶，如果有则不再生成新的，而是直接使用。也许朋友们会有疑问，我只看到栈内只有一个Activity，如果是多个Activity怎么办，如果不是在栈顶会如何？我们接下来再通过一个示例来证实一下大家的疑问。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将之前的FirstActivity跳转代码改为</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity.class);  </div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<p>FirstActivity会跳转到SecondActivity，SecondActivity又会跳转到FirstActivity。</p>
<p><img src="/article_images/launchmode-activity02.png" alt="alt"></p>
<p>我们看到，两个FirstActivity的序列号是不同的，证明从SecondActivity跳转到FirstActivity时生成了新的FirstActivity实例。当从SecondActivity跳转到FirstActivity时，系统发现存在有FirstActivity实例,但<code>不是位于栈顶，于是重新生成一个实例</code>。<br>这就是singleTop启动模式，<code>如果这个模式的Activity位于栈顶，其不会被重建，但其onNewIntent方法会被调用，这里可以获取当前请求的参数。</code></p>
<h3 id="3-singleTask"><a href="#3-singleTask" class="headerlink" title="3.singleTask"></a>3.singleTask</h3><p>可以理解为 <code>single in task</code></p>
<p>在上面的基础上我们修改FirstActivity的属性android:launchMode=”singleTask”。</p>
<p><img src="/article_images/launchmode-activity03.png" alt="alt"><br>我们注意到，在上面的过程中，FirstActivity的序列号是不变的，SecondActivity的序列号却不是唯一的，说明从SecondActivity跳转到FirstActivity时，没有生成新的实例，但是从FirstActivity跳转到SecondActivity时生成了新的实例。singleTask模式的原理图如下图所示：</p>
<p><img src="/article_images/launchmode-activity04.png" alt="alt"><br>在图中的下半部分是SecondActivity跳转到FirstActivity后的栈结构变化的结果，我们注意到，SecondActivity消失了，没错，在这个跳转过程中系统发现有存在的FirstActivity实例，于是不再生成新的实例，而是<code>将FirstActivity之上的Activity实例统统出栈</code>，将FirstActivity变为栈顶对象，显示到幕前。也许朋友们有疑问，如果将SecondActivity也设置为singleTask模式，那么SecondActivity实例是不是可以唯一呢？在我们这个示例中是不可能的，因为每次从SecondActivity跳转到FirstActivity时，SecondActivity实例都被迫出栈，下次等FirstActivity跳转到SecondActivity时，找不到存在的SecondActivity实例，于是必须生成新的实例。但是如果我们有ThirdActivity，让SecondActivity和ThirdActivity互相跳转，那么SecondActivity实例就可以保证唯一。</p>
<p>这就是singleTask模式，如果发现有对应的Activity实例，则使此Activity实例之上的其他Activity实例统统出栈，使此Activity实例成为栈顶对象，显示到幕前，<code>其onNewIntent方法会被调用</code>。</p>
<h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>启动一个标记为“singleTask”的Activity A，如果A已经在后台的一个任务栈中，那么启动后会把<code>该Activity所在的栈都带到前端来</code>。该情况只能通过两个应用来模拟。在Demo中，我们并没有启动TwoActivity（启不启动都是相同的效果）。</p>
<p><img src="/article_images/launchmode-activity-task00.gif" alt="alt"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//Demo</div><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.dalu.launchdemo.MainActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.dalu.launchdemo.TwoActivity"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">            <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span> &gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"></div><div class="line">//Demo2</div><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.dalu.launchdemo2.MainActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.dalu.launchdemo2.OneActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>而在同一个应用中，首先确定OneActivity为singleInstance，而MainActivity和TwoActivity为“singleTask”、“standard”、“singleTop”都可以实现效果，其中的37、38是taskId。当然，如果是standard模式的话，TwoActivity会被实例化两次，但仍然会把它所在的task带到前台来。如果OneActivity在另一个进程里面的话，即<code>android:process=&quot;:other&quot;</code>，不设置<code>singleInstance</code>，他们会在同一个task中。</p>
<p><img src="/article_images/launchmode-activity-task01.gif" alt="alt"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">            <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span> &gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".OneActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">            <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span> &gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".TwoActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">            <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span> &gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="4-singleInstance"><a href="#4-singleInstance" class="headerlink" title="4.singleInstance"></a>4.singleInstance</h3><p>这种启动模式比较特殊，因为它会启用一个新的栈结构，将Acitvity放置于这个新的栈结构中，并保证不再有其他Activity实例进入。<br>我们修改FirstActivity的launchMode=”standard”，SecondActivity的launchMode=”singleInstance”，由于涉及到了多个栈结构，我们需要在每个Activity中显示当前栈结构的id，所以我们为每个Activity添加如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TextView taskIdView = (TextView) findViewById(R.id.taskIdView);  </div><div class="line">taskIdView.setText(<span class="string">"current task id: "</span> + <span class="keyword">this</span>.getTaskId());</div></pre></td></tr></table></figure>
<p><img src="/article_images/launchmode-activity05.png" alt="alt"><br>我们发现这两个Activity实例分别被放置在不同的栈结构中，关于singleInstance的原理图如下：</p>
<p><img src="/article_images/launchmode-activity06.png" alt="alt"><br>我们看到从FirstActivity跳转到SecondActivitylaunchmode-activity时，重新启用了一个新的栈结构，来放置SecondActivity实例，然后按下后退键，再次回到原始栈结构；</p>
<p>图中下半部分显示的在SecondActivity中再次跳转到FirstActivity，这个时候系统会在原始栈结构中生成一个FirstActivity实例，然后回退两次，注意，并没有退出，而是回到了SecondActivity，为什么呢？是因为从SecondActivity跳转到FirstActivity的时候，我们的起点变成了SecondActivity实例所在的栈结构，这样一来，我们需要“回归”到这个栈结构。(简单一点就是说，在当前栈点击了“返回”，那么就开始从当前栈退，直到当前栈退完所有activity，那么接着退最近活跃的那个栈，依次类推，直到所有的栈退完。或者可以按照各个栈内的活跃时间，把各个栈再放入一个栈中，这样就好理解了。)<br>如果我们修改FirstActivity的launchMode值为singleTop、singleTask、singleInstance中的任意一个，流程将会如图所示：</p>
<p><img src="/article_images/launchmode-activity07.png" alt="alt"><br>singleInstance启动模式可能是最复杂的一种模式，为了帮助大家理解，我举一个例子，假如我们有一个share应用，其中的ShareActivity是入口Activity，也是可供其他应用调用的Activity，我们把这个Activity的启动模式设置为singleInstance，然后在其他应用中调用。我们编辑ShareActivity的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".ShareActivity"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SINGLE_INSTANCE_SHARE"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后我们在其他应用中这样启动该Activity：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.SINGLE_INSTANCE_SHARE"</span>);  </div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<p>当我们打开ShareActivity后再按后退键回到原来界面时，ShareActivity做为一个独立的个体存在，如果这时我们打开share应用，无需创建新的ShareActivity实例即可看到结果，因为系统会自动查找，<code>存在则直接利用</code>。大家可以在ShareActivity中打印一下taskId，看看效果。关于这个过程，原理图如下：</p>
<p><img src="/article_images/launchmode-activity08.png" alt="alt"></p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/liuhe688/article/details/6754323" target="_blank" rel="external">1</a>,<a href="http://drops.wooyun.org/tips/3936" target="_blank" rel="external">2</a>,<a href="http://blog.sina.com.cn/s/blog_5da93c8f0101gzf5.html" target="_blank" rel="external">调用startActivityForResult，onActivityResult无响应的问题</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android声明和使用权限]]></title>
      <url>http://dalufan.com/2014/11/18/android-permission/</url>
      <content type="html"><![CDATA[<h3 id="自定义权限"><a href="#自定义权限" class="headerlink" title="自定义权限"></a>自定义权限</h3><p>我们设计的流程是在MainActivity中点击按钮，然后跳转到PhoneActivity中，我们会为PhoneActiivty定义相应的权限。</p>
<p>MainActivity.java如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.view.View;  </div><div class="line"><span class="keyword">import</span> android.widget.Button;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.main);  </div><div class="line">        Button btn = (Button) findViewById(R.id.btn);  </div><div class="line">        btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, PhoneActivity.class));  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>PhoneActivity.java如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.widget.TextView;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        TextView tv = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);  </div><div class="line">        tv.setText(<span class="string">"Yes! It works."</span>);  </div><div class="line">        setContentView(tv);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最重要的是androidManifest.xml文件，我们所有的权限声明配置都在此文件中完成：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">      <span class="attr">package</span>=<span class="string">"com.scott.phone"</span></div><div class="line">      <span class="attr">android:versionCode</span>=<span class="string">"1"</span></div><div class="line">      <span class="attr">android:versionName</span>=<span class="string">"1.0"</span>&gt;    </div><div class="line">    <span class="comment">&lt;!-- 声明一个权限  --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:protectionLevel</span>=<span class="string">"normal"</span> </span></div><div class="line">                <span class="attr">android:name</span>=<span class="string">"scott.permission.MY_CALL_PHONE"</span>/&gt;                </div><div class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:icon</span>=<span class="string">"@drawable/icon"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></div><div class="line">                  <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 为Activity应用已定义的权限 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".PhoneActivity"</span> </span></div><div class="line">                  <span class="attr">android:permission</span>=<span class="string">"scott.permission.MY_CALL_PHONE"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 注意这个action 在其他应用中可使用此action访问此Activity --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"scott.intent.action.MY_CALL"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 在同一应用中访问PhoneActivity也需要加上权限 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"scott.permission.MY_CALL_PHONE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>需要注意的是，在声明权限时需要一个<code>android:protectionLevel</code>的属性，它代表“风险级别”。必须是以下值之一：<br>normal、dangerous、signature、signatureOrSystem。</p>
<p><em>normal</em>表示权限是低风险的，不会对系统、用户或其他应用程序造成危害。</p>
<p><em>dangerous</em>表示权限是高风险的，系统将可能要求用户输入相关信息，才会授予此权限。</p>
<p><em>signature</em>告诉android，只有当应用程序所用数字签名与声明此权限的应用程序所有数字签名相同时，才能将权限授给它。</p>
<p><em>signatureOrSystem</em>告诉android，将权限授给具有相同数字签名的应用程序或android包类，这一级别适用于非常特殊的情况，比如多个供应商需要通过系统影像共享功能时。<br>另外一个是android:permissionGroup属性，表示一个权限组。可以将权限放在一个组中，但对于自定义权限，应该避免设置此属性。如果确实希望设置此属性，可以使用以下属性代替：android.permission-group.SYSTEM_TOOLS。</p>
<p>以上过程都是在一个内部完成的，现在假如我们的这个phone应用作为系统内置的应用，做为开发者，我们新建一个app，然后访问phone应用里的PhoneActivity。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.view.View;  </div><div class="line"><span class="keyword">import</span> android.widget.Button;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.main);  </div><div class="line">        Button btn = (Button) findViewById(R.id.btn);  </div><div class="line">        btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">"scott.intent.action.MY_CALL"</span>);  </div><div class="line">                startActivity(intent);  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们需要在androidManifest.xml文件中配置相应的权限：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span>&gt;</span>  </div><div class="line">...  </div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"scott.permission.MY_CALL_PHONE"</span>/&gt;</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点击按钮，就可以顺利地跳转到PhoneActivity了。</p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/liuhe688/article/details/6417983" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[View not attached to window manager]]></title>
      <url>http://dalufan.com/2014/11/14/android-view-IllegalArgumentException/</url>
      <content type="html"><![CDATA[<p>在关闭ProgressDialog出错内容如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalArgumentException: View not attached to window manager</div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>在代码中发现如下问题:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">     UIHelper.showProgressDialog(mContext,R.string.loading);</div><div class="line">     <span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">     UIHelper.dismissProgressDialog();</div><div class="line">     ToastUtil.showShortDefault(GuideActivity.<span class="keyword">this</span>, <span class="string">"登陆成功"</span>);</div><div class="line">     Intent i = <span class="keyword">new</span> Intent(mContext, HomeWorkActivity.class);</div><div class="line">     startActivity(i);</div><div class="line">     finish();</div><div class="line">     <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>创建ProgressDialog和关闭ProgressDialog用的上下文对象不是同一个</p>
<p>原因基本都是Dismiss对话框的时候，Activity已经不再存在。</p>
<p>常发生这类Exception的情形都是，有一个费时的线程操作，需要在显示一个Dialog，在任务开始的时候显示一个对话框，然后当任务完成了再Dismiss对话框，如果在此期间如果Activity因为某种原因被杀掉且又重新启动了，那么当Dialog调用Dismiss的时候WindowManager检查发现Dialog所属的Activity已经不存在了，所以会报java.lang.IllegalArgumentException: View not attached to window manager</p>
<p>其实此类Exception的一重要的原因是，Dialog的创建显示和取消都允许在非UI线程中进程。在android当中非UI线程是不允许操作UI相关的事情，比如添加移除View等，但是为会么允许创建显示和取消对话框呢？而且还有可能引发此Exception导致应用Crash。</p>
<p>要想避免此类Exception，就要正确的使用对话框，也要正确的使用线程。</p>
<p>正确的使用对话框</p>
<p>不要在非UI线程中使用对话框创建，显示和取消对话框。<br>那么对于异步操作显示对话框怎么办呢？Activity都有相应的操作对话框的回调比如onCreateDialog(),showDialog(),dimissDialog(),removeDialog()等等。这些因为都是Activity的方法，所以用起来更方便，也不用显示创建和操控Dialog对象，一切都由框架操控，相对来说比较安全。<br>另外就是一定要让对话框对象在Activity的可控制范围之内和生命周期之内，比如一定要是它的成员变量，并且在让对话框变量活跃在Activity的onCreate()和onDestroy()之间。</p>
<p>正确的使用线程</p>
<p>尽量少用单独线程，除非是真正的费时操作才用线程，线程也不要直接用Java式的匿名线程，除非是那种单纯的操作，操作完成后不需要做其他事情的。<br>尽可能多用android提供的类比如AsyncTask等。另外如果线程操作过程中还需要与主线程有交互，那么最好保存一个线程的对象，并且线程内部最有一定的控制，这样可以让Activity更好的操控线程。<br>如果说某些操作是特别费时的，且是经常性的操作，比如从网络获取数据，或是从后台读取文件，或是导入/导出，恢复/备份的事情，最好放到后台Service中去做，然后在StatusBar中给出相应进度。</p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/listening_music/article/details/7108024" target="_blank" rel="external">CSDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[httpclient使用总结]]></title>
      <url>http://dalufan.com/2014/11/12/httpclient-learn-conclusion/</url>
      <content type="html"><![CDATA[<ul>
<li>当HttpClient的实例不再需要时，可以使用连接管理器关闭 </li>
</ul>
<pre><code class="java">httpclient.getConnectionManager().shutdown();
</code></pre>
<ul>
<li>针对HTTPs的协议的HttpClient请求必须用户和密码</li>
</ul>
<pre><code class="java">httpclient.getCredentialsProvider()  
        .setCredentials(<span class="keyword">new</span> AuthScope(<span class="string">"localhost"</span>, <span class="number">443</span>),   
            <span class="keyword">new</span> UsernamePasswordCredentials(<span class="string">"username"</span>, <span class="string">"password"</span>));
</code></pre>
<a id="more"></a> 
<ul>
<li>如果不想获取HTTPClient返回的信息  </li>
</ul>
<pre><code class="java">httpclient.abort();
</code></pre>
<ul>
<li>httpclient传送文件的方式  </li>
</ul>
<pre><code class="java">HttpClient httpclient = <span class="keyword">new</span> DefaultHttpClient();  
    HttpPost httppost = <span class="keyword">new</span> HttpPost(<span class="string">"http://www.apache.org"</span>);  
    File file = <span class="keyword">new</span> File(args[<span class="number">0</span>]);  
    InputStreamEntity reqEntity = <span class="keyword">new</span> InputStreamEntity(  
            <span class="keyword">new</span> FileInputStream(file), -<span class="number">1</span>);  
    reqEntity.setContentType(<span class="string">"binary/octet-stream"</span>);  
    reqEntity.setChunked(<span class="keyword">true</span>);  
    <span class="comment">// It may be more appropriate to use FileEntity class in this particular   </span>
    <span class="comment">// instance but we are using a more generic InputStreamEntity to demonstrate  </span>
    <span class="comment">// the capability to stream out data from any arbitrary source  </span>
    <span class="comment">//   </span>
    <span class="comment">// FileEntity entity = new FileEntity(file, "binary/octet-stream");   </span>
    httppost.setEntity(reqEntity);  
    System.out.println(<span class="string">"executing request "</span> + httppost.getRequestLine());  
    HttpResponse response = httpclient.execute(httppost);
</code></pre>
<ul>
<li>获取Cookie的信息  </li>
</ul>
<pre><code class="java">HttpClient httpclient = <span class="keyword">new</span> DefaultHttpClient();  
    <span class="comment">// 创建一个本地Cookie存储的实例  </span>
    CookieStore cookieStore = <span class="keyword">new</span> BasicCookieStore();  
    <span class="comment">//创建一个本地上下文信息  </span>
    HttpContext localContext = <span class="keyword">new</span> BasicHttpContext();  
    <span class="comment">//在本地上下问中绑定一个本地存储  </span>
    localContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);  
    <span class="comment">//设置请求的路径  </span>
    HttpGet httpget = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.google.com/"</span>);   
    <span class="comment">//传递本地的http上下文给服务器  </span>
    HttpResponse response = httpclient.execute(httpget, localContext);  
    <span class="comment">//获取本地信息  </span>
    HttpEntity entity = response.getEntity();  
    System.out.println(response.getStatusLine());  
    <span class="keyword">if</span> (entity != <span class="keyword">null</span>) {  
        System.out.println(<span class="string">"Response content length: "</span> + entity.getContentLength());  
    }  
    <span class="comment">//获取cookie中的各种信息  </span>
    List&lt;Cookie&gt; cookies = cookieStore.getCookies();  
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.size(); i++) {  
        System.out.println(<span class="string">"Local cookie: "</span> + cookies.get(i));  
    }  
    <span class="comment">//获取消息头的信息  </span>
    Header[] headers = response.getAllHeaders();  
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;headers.length; i++) {  
        System.out.println(headers[i]);  
    }
</code></pre>
<ul>
<li>针对典型的SSL请求的处理  </li>
</ul>
<pre><code class="java">DefaultHttpClient httpclient = <span class="keyword">new</span> DefaultHttpClient();  
   <span class="comment">//获取默认的存储密钥类  </span>
   KeyStore trustStore  = KeyStore.getInstance(KeyStore.getDefaultType());   
   <span class="comment">//加载本地的密钥信息         </span>
   FileInputStream instream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"my.keystore"</span>));   
   <span class="keyword">try</span> {  
       trustStore.load(instream, <span class="string">"nopassword"</span>.toCharArray());  
   } <span class="keyword">finally</span> {  
       instream.close();  
   }  
   <span class="comment">//创建SSLSocketFactory，创建相关的Socket  </span>
   SSLSocketFactory socketFactory = <span class="keyword">new</span> SSLSocketFactory(trustStore);  
   <span class="comment">//设置协议的类型和密钥信息，以及断开信息  </span>
   Scheme sch = <span class="keyword">new</span> Scheme(<span class="string">"https"</span>, socketFactory, <span class="number">443</span>);  
   <span class="comment">//在连接管理器中注册中信息  </span>
   httpclient.getConnectionManager().getSchemeRegistry().register(sch);
</code></pre>
<ul>
<li>设置请求的参数的几种方式  </li>
</ul>
<ol>
<li>在请求的路径中以查询字符串格式传递参数  </li>
<li>在请求的实体中添加参数  </li>
</ol>
<pre><code class="java">List &lt;NameValuePair&gt; nvps = <span class="keyword">new</span> ArrayList &lt;NameValuePair&gt;();  
   nvps.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"IDToken1"</span>, <span class="string">"username"</span>));  
   nvps.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"IDToken2"</span>, <span class="string">"password"</span>));  
   httpost.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(nvps, HTTP.UTF_8));
</code></pre>
<ul>
<li>针对在HTTPClient采用压缩格式的文件的传输，必须采用拦截器进行特殊的处理  </li>
</ul>
<pre><code class="java">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientGZipContentCompression</span> </span>{  

    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{  
        DefaultHttpClient httpclient = <span class="keyword">new</span> DefaultHttpClient();  
        <span class="comment">//设置相关的压缩文件标识，在请求头的信息中  </span>
        httpclient.addRequestInterceptor(<span class="keyword">new</span> HttpRequestInterceptor() {  

            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(  
                    <span class="keyword">final</span> HttpRequest request,   
                    <span class="keyword">final</span> HttpContext context)</span> <span class="keyword">throws</span> HttpException, IOException </span>{  
                <span class="keyword">if</span> (!request.containsHeader(<span class="string">"Accept-Encoding"</span>)) {  
                    request.addHeader(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip"</span>);  
                }  
            }  

        });  
        <span class="comment">//设置相应相应的拦截器，用于处理接收到的拦截的压缩信息  </span>
        httpclient.addResponseInterceptor(<span class="keyword">new</span> HttpResponseInterceptor() {  

            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(  
                    <span class="keyword">final</span> HttpResponse response,   
                    <span class="keyword">final</span> HttpContext context)</span> <span class="keyword">throws</span> HttpException, IOException </span>{  
                HttpEntity entity = response.getEntity();  
                Header ceheader = entity.getContentEncoding();  
                <span class="keyword">if</span> (ceheader != <span class="keyword">null</span>) {  
                    HeaderElement[] codecs = ceheader.getElements();  
                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; codecs.length; i++) {  
                        <span class="keyword">if</span> (codecs[i].getName().equalsIgnoreCase(<span class="string">"gzip"</span>)) {  
                            response.setEntity(  
                                    <span class="keyword">new</span> GzipDecompressingEntity(response.getEntity()));   
                            <span class="keyword">return</span>;  
                        }  
                    }  
                }  
            }  

        });  

        HttpGet httpget = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.apache.org/"</span>);   

        <span class="comment">// Execute HTTP request  </span>
        System.out.println(<span class="string">"executing request "</span> + httpget.getURI());  
        HttpResponse response = httpclient.execute(httpget);  

        System.out.println(<span class="string">"----------------------------------------"</span>);  
        System.out.println(response.getStatusLine());  
        System.out.println(response.getLastHeader(<span class="string">"Content-Encoding"</span>));  
        System.out.println(response.getLastHeader(<span class="string">"Content-Length"</span>));  
        System.out.println(<span class="string">"----------------------------------------"</span>);  

        HttpEntity entity = response.getEntity();  

        <span class="keyword">if</span> (entity != <span class="keyword">null</span>) {  
            String content = EntityUtils.toString(entity);  
            System.out.println(content);  
            System.out.println(<span class="string">"----------------------------------------"</span>);  
            System.out.println(<span class="string">"Uncompressed size: "</span>+content.length());  
        }  
        <span class="comment">// When HttpClient instance is no longer needed,   </span>
        <span class="comment">// shut down the connection manager to ensure  </span>
        <span class="comment">// immediate deallocation of all system resources  </span>
        httpclient.getConnectionManager().shutdown();          
    }  
   <span class="comment">//压缩文件处理的实体包装类  </span>
    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GzipDecompressingEntity</span> <span class="keyword">extends</span> <span class="title">HttpEntityWrapper</span> </span>{  
        <span class="function"><span class="keyword">public</span> <span class="title">GzipDecompressingEntity</span><span class="params">(<span class="keyword">final</span> HttpEntity entity)</span> </span>{  
            <span class="keyword">super</span>(entity);  
        }  
        <span class="meta">@Override</span>  
        <span class="function"><span class="keyword">public</span> InputStream <span class="title">getContent</span><span class="params">()</span>  
            <span class="keyword">throws</span> IOException, IllegalStateException </span>{  
            <span class="comment">// the wrapped entity's getContent() decides about repeatability  </span>
            InputStream wrappedin = wrappedEntity.getContent();  
            <span class="keyword">return</span> <span class="keyword">new</span> GZIPInputStream(wrappedin);  
        }  
        <span class="meta">@Override</span>  
        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getContentLength</span><span class="params">()</span> </span>{  
            <span class="comment">// length of ungzipped content is not known  </span>
            <span class="keyword">return</span> -<span class="number">1</span>;  
        }  

    }   

}
</code></pre>
<ul>
<li>在代理中添加相关访问权限  </li>
</ul>
<pre><code class="java">DefaultHttpClient httpclient = <span class="keyword">new</span> DefaultHttpClient();  
    httpclient.getCredentialsProvider().setCredentials(  
            <span class="keyword">new</span> AuthScope(<span class="string">"localhost"</span>, <span class="number">8080</span>),   
            <span class="keyword">new</span> UsernamePasswordCredentials(<span class="string">"username"</span>, <span class="string">"password"</span>));  

    HttpHost targetHost = <span class="keyword">new</span> HttpHost(<span class="string">"www.verisign.com"</span>, <span class="number">443</span>, <span class="string">"https"</span>);   
    HttpHost proxy = <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">8080</span>);   

    httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);  

    HttpGet httpget = <span class="keyword">new</span> HttpGet(<span class="string">"/"</span>);  

    System.out.println(<span class="string">"executing request: "</span> + httpget.getRequestLine());  
    System.out.println(<span class="string">"via proxy: "</span> + proxy);  
    System.out.println(<span class="string">"to target: "</span> + targetHost);  

    HttpResponse response = httpclient.execute(targetHost, httpget);
</code></pre>
<ul>
<li>针对特定的相应中信息比较多那么可以采用相关的相应处理器处理  </li>
</ul>
<pre><code class="java">    ResponseHandler&lt;String&gt; responseHandler = <span class="keyword">new</span> BasicResponseHandler();  
        String responseBody = httpclient.execute(httpget, responseHandler);  
        实现类如下：  
        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicResponseHandler</span> <span class="keyword">implements</span> <span class="title">ResponseHandler</span>&lt;<span class="title">String</span>&gt;  

关于<span class="title">HttpClient</span>采用代理服务器的使用  
        // 创建两个<span class="title">host</span>对象，其中一个目标机器，和代理主机<span class="title">make</span> <span class="title">sure</span> <span class="title">to</span> <span class="title">use</span> <span class="title">a</span> <span class="title">proxy</span> <span class="title">that</span> <span class="title">supports</span> <span class="title">CONNECT</span>  
        <span class="title">HttpHost</span> <span class="title">target</span> </span>= <span class="keyword">new</span> HttpHost(<span class="string">"issues.apache.org"</span>, <span class="number">443</span>, <span class="string">"https"</span>);  
        HttpHost proxy = <span class="keyword">new</span> HttpHost(<span class="string">"127.0.0.1"</span>, <span class="number">8080</span>, <span class="string">"http"</span>);    
        <span class="comment">//设置相关的注册信息 general setup  </span>
        SchemeRegistry supportedSchemes = <span class="keyword">new</span> SchemeRegistry();  
        <span class="comment">// Register the "http" and "https" protocol schemes, they are  </span>
        <span class="comment">// required by the default operator to look up socket factories.  </span>
        supportedSchemes.register(<span class="keyword">new</span> Scheme(<span class="string">"http"</span>,   
                PlainSocketFactory.getSocketFactory(), <span class="number">80</span>));  
        supportedSchemes.register(<span class="keyword">new</span> Scheme(<span class="string">"https"</span>,   
                SSLSocketFactory.getSocketFactory(), <span class="number">443</span>));  
        <span class="comment">//设置相关的参数的信息  </span>
        HttpParams params = <span class="keyword">new</span> BasicHttpParams();  
        HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);  
        HttpProtocolParams.setContentCharset(params, <span class="string">"UTF-8"</span>);  
        HttpProtocolParams.setUseExpectContinue(params, <span class="keyword">true</span>);  
        <span class="comment">//客户端连接管理器  </span>
        ClientConnectionManager ccm = <span class="keyword">new</span> ThreadSafeClientConnManager(params,   
                supportedSchemes);  
        DefaultHttpClient httpclient = <span class="keyword">new</span> DefaultHttpClient(ccm, params);  
        <span class="comment">//设置请求采用代理的  </span>
        httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);   
        HttpGet req = <span class="keyword">new</span> HttpGet(<span class="string">"/"</span>);  
        <span class="comment">//执行请求并处理  </span>
        System.out.println(<span class="string">"executing request to "</span> + target + <span class="string">" via "</span> + proxy);  
        HttpResponse rsp = httpclient.execute(target, req);  
        HttpEntity entity = rsp.getEntity();
</code></pre>
<ul>
<li>针对多线程的Httpclient中采用的特殊的连接管理  </li>
</ul>
<pre><code class="java"><span class="comment">// Create and initialize HTTP parameters  </span>
    HttpParams params = <span class="keyword">new</span> BasicHttpParams();  
    ConnManagerParams.setMaxTotalConnections(params, <span class="number">100</span>);  
    HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);  

    <span class="comment">// Create and initialize scheme registry   </span>
    SchemeRegistry schemeRegistry = <span class="keyword">new</span> SchemeRegistry();  
    schemeRegistry.register(  
            <span class="keyword">new</span> Scheme(<span class="string">"http"</span>, PlainSocketFactory.getSocketFactory(), <span class="number">80</span>));  

    <span class="comment">// Create an HttpClient with the ThreadSafeClientConnManager.  </span>
    <span class="comment">// This connection manager must be used if more than one thread will  </span>
    <span class="comment">// be using the HttpClient.  </span>
    ClientConnectionManager cm = <span class="keyword">new</span> ThreadSafeClientConnManager(params, schemeRegistry);  
    HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient(cm, params);
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android录音时stop出错]]></title>
      <url>http://dalufan.com/2014/11/10/android-MediaRecorder-stop-error/</url>
      <content type="html"><![CDATA[<h3 id="录音代码"><a href="#录音代码" class="headerlink" title="录音代码"></a>录音代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">btn_start_record.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!Environment.getExternalStorageDirectory().exists()) &#123;</div><div class="line">                ToastUtil.showShortDefault(mContext, <span class="string">"没有发现存储卡"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                <span class="keyword">if</span> (couldPress) &#123;</div><div class="line">                    startVoiceT = System.currentTimeMillis() % <span class="number">10000</span>;</div><div class="line">                    voiceFilePath = FileUtils.APP_SD_PATH_VOICE</div><div class="line">                            + startVoiceT + <span class="string">".amr"</span>;</div><div class="line">                    start(voiceFilePath);</div><div class="line">                    btn_start_record.setText(getResources().getString(</div><div class="line">                            R.string.stop_record));</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    startVoiceT = -<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                <span class="keyword">if</span> (couldPress &amp;&amp; startVoiceT != -<span class="number">1</span>) &#123;</div><div class="line">                    mHandler.postDelayed(mSleepTask, <span class="number">200</span>);</div><div class="line">                    endVoiceT = System.currentTimeMillis() % <span class="number">10000</span>;</div><div class="line">                    endVoiceT = endVoiceT &lt;= startVoiceT ? endVoiceT + <span class="number">10000</span></div><div class="line">                            : endVoiceT;</div><div class="line">                    btn_start_record.setText(getResources().getString(</div><div class="line">                            R.string.press_record));</div><div class="line">                    <span class="keyword">if</span> ((endVoiceT - startVoiceT) / <span class="number">200</span> &lt; <span class="number">1</span>) &#123;</div><div class="line">                        record_popup.setVisibility(View.GONE);</div><div class="line">                        ToastUtil.showShortDefault(mContext, <span class="string">"录音时间太短"</span>);</div><div class="line">                        File file = <span class="keyword">new</span> File(voiceFilePath);</div><div class="line">                        <span class="keyword">if</span> (file.exists()) &#123;</div><div class="line">                            file.delete();</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                    record_popup.setVisibility(View.GONE);</div><div class="line">                    couldPress = <span class="keyword">false</span>;</div><div class="line">                    mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            couldPress = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;, <span class="number">300</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>出错内容</p>
<p><img src="/article_images/stop_err.png" alt="alt"></p>
<p>开始以为是权限不够,就检查了权限</p>
<pre><code>    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; &lt;!--写入sdcard--&gt;
&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt; &lt;!-- 读取sdcard--&gt;
&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;    &lt;!-- 在sdcard中创建/删除文件的权限 --&gt;
&lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt; &lt;!-- 录音权限 --&gt;
</code></pre><p>也检查了执行顺序<br><img src="/article_images/mediarecorder_follow.png" alt="alt"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   MediaRecorder recorder = <span class="keyword">new</span> MediaRecorder();</div><div class="line">recorder.setAudioSource(MediaRecorder.AudioSource.MIC);</div><div class="line">recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);</div><div class="line">recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);</div><div class="line">recorder.setOutputFile(PATH_NAME);</div><div class="line">recorder.prepare();</div><div class="line">recorder.start();   <span class="comment">// Recording is now started</span></div><div class="line">...</div><div class="line">recorder.stop();</div><div class="line">recorder.reset();   <span class="comment">// You can reuse the object by going back to setAudioSource() step</span></div><div class="line">recorder.release(); <span class="comment">// Now the object cannot be reused</span></div></pre></td></tr></table></figure>
<p>后来才发现录音保存文件的父路径未创建</p>
<p><a href="http://developer.android.com/reference/android/media/MediaRecorder.html" target="_blank" rel="external">官方录音API</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xutils中HttpUtils模块分析①]]></title>
      <url>http://dalufan.com/2014/11/08/android-xutils-http-learn/</url>
      <content type="html"><![CDATA[<p>不用框架时,http请求-<code>GET 方式</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先将参数放入List，再对参数进行URL编码</span></div><div class="line">List&lt;BasicNameValuePair&gt; params = <span class="keyword">new</span> LinkedList&lt;BasicNameValuePair&gt;();</div><div class="line">params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"param1"</span>, <span class="string">"中国"</span>));</div><div class="line">params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"param2"</span>, <span class="string">"value2"</span>));</div><div class="line"></div><div class="line"><span class="comment">//对参数编码</span></div><div class="line">String param = URLEncodedUtils.format(params, <span class="string">"UTF-8"</span>);</div><div class="line"></div><div class="line"><span class="comment">//baseUrl           </span></div><div class="line">String baseUrl = <span class="string">"http://ubs.free4lab.com/php/method.php"</span>;</div><div class="line"></div><div class="line"><span class="comment">//将URL与参数拼接</span></div><div class="line">HttpGet getMethod = <span class="keyword">new</span> HttpGet(baseUrl + <span class="string">"?"</span> + param);</div><div class="line">            </div><div class="line">HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient();</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    HttpResponse response = httpClient.execute(getMethod); <span class="comment">//发起GET请求</span></div><div class="line"></div><div class="line">    Log.i(TAG, <span class="string">"resCode = "</span> + response.getStatusLine().getStatusCode()); <span class="comment">//获取响应码</span></div><div class="line">    Log.i(TAG, <span class="string">"result = "</span> + EntityUtils.toString(response.getEntity(), <span class="string">"utf-8"</span>));<span class="comment">//获取服务器响应内容</span></div><div class="line">&#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>不用框架时,http请求-<code>POST 方式</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//和GET方式一样，先将参数放入List</span></div><div class="line">params = <span class="keyword">new</span> LinkedList&lt;BasicNameValuePair&gt;();</div><div class="line">params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"param1"</span>, <span class="string">"Post方法"</span>));</div><div class="line">params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"param2"</span>, <span class="string">"第二个参数"</span>));</div><div class="line">            </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    HttpPost postMethod = <span class="keyword">new</span> HttpPost(baseUrl);</div><div class="line">    postMethod.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(params, <span class="string">"utf-8"</span>)); <span class="comment">//将参数填入POST Entity中</span></div><div class="line">                </div><div class="line">    HttpResponse response = httpClient.execute(postMethod); <span class="comment">//执行POST方法</span></div><div class="line">    Log.i(TAG, <span class="string">"resCode = "</span> + response.getStatusLine().getStatusCode()); <span class="comment">//获取响应码</span></div><div class="line">    Log.i(TAG, <span class="string">"result = "</span> + EntityUtils.toString(response.getEntity(), <span class="string">"utf-8"</span>)); <span class="comment">//获取响应内容</span></div><div class="line">                </div><div class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个完整的工具类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpClient;</div><div class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;</div><div class="line"><span class="keyword">import</span> org.apache.commons.httpclient.methods.PostMethod;</div><div class="line"><span class="keyword">import</span> org.apache.commons.httpclient.methods.RequestEntity;</div><div class="line"><span class="keyword">import</span> org.apache.commons.httpclient.methods.StringRequestEntity;</div><div class="line"><span class="keyword">import</span> org.apache.commons.httpclient.params.HttpConnectionManagerParams;</div><div class="line"><span class="keyword">import</span> org.dom4j.Document;</div><div class="line"><span class="keyword">import</span> org.dom4j.DocumentHelper;</div><div class="line"><span class="keyword">import</span> org.dom4j.Element;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.dalu.init.InitProperties;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> HttpClient httpClient = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> Object lock = <span class="keyword">new</span> Object();</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取httpClient</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> HttpClient <span class="title">getHttpClient</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> httpClient;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">            <span class="keyword">if</span> (httpClient == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    initHttpClient();</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> httpClient;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * httpClient初始化</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHttpClient</span><span class="params">()</span> </span>&#123;</div><div class="line">        MultiThreadedHttpConnectionManager manager = <span class="keyword">new</span> MultiThreadedHttpConnectionManager();</div><div class="line">         </div><div class="line">        <span class="keyword">int</span> readTimeOut = InitProperties.HTTP_SO_TIME_OUT;</div><div class="line">        <span class="keyword">int</span> connTimeOut = InitProperties.HTTP_CONNECT_TIME_OUT;</div><div class="line">        <span class="keyword">int</span> maxConnPerHost = InitProperties.HTTP_MAX_CONN_PER_HOST;</div><div class="line">        <span class="keyword">int</span> maxTotalConns = InitProperties.HTTP_MAX_TOTAL_CONNS;</div><div class="line">        <span class="keyword">long</span> connManagerTimeOut = InitProperties.HTTP_CONN_MGR_TIME_OUT;</div><div class="line">         </div><div class="line">        <span class="comment">//参数设置</span></div><div class="line">        HttpConnectionManagerParams params = <span class="keyword">new</span> HttpConnectionManagerParams();</div><div class="line">        params.setConnectionTimeout(connTimeOut);</div><div class="line">        params.setSoTimeout(readTimeOut);</div><div class="line">        params.setDefaultMaxConnectionsPerHost(maxConnPerHost);</div><div class="line">        params.setMaxTotalConnections(maxTotalConns);</div><div class="line">         </div><div class="line">        manager.setParams(params);</div><div class="line">        httpClient = <span class="keyword">new</span> HttpClient(manager);</div><div class="line">         </div><div class="line">        httpClient.getParams().setConnectionManagerTimeout(connManagerTimeOut);</div><div class="line">    &#125;    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发送消息,获取响应消息体</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> reqXml</div><div class="line">     * <span class="doctag">@param</span> headMap</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Element <span class="title">postReq</span><span class="params">(String url,String reqXml,HashMap&lt;String, String&gt; headMap)</span></span>&#123;</div><div class="line">        PostMethod method = <span class="keyword">new</span> PostMethod(url);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//设置消息头</span></div><div class="line">            <span class="keyword">if</span>(headMap!=<span class="keyword">null</span>&amp;&amp;headMap.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry:headMap.entrySet())&#123;</div><div class="line">                    method.setRequestHeader(entry.getKey(), entry.getValue());</div><div class="line">                &#125;</div><div class="line">            &#125;            </div><div class="line">            <span class="comment">//设置消息体</span></div><div class="line">            RequestEntity requestEntity = <span class="keyword">new</span> StringRequestEntity(reqXml, <span class="string">"text/xml"</span>, <span class="string">"utf-8"</span>);</div><div class="line">            method.setRequestEntity(requestEntity);             </div><div class="line">            <span class="comment">//发消息</span></div><div class="line">            <span class="keyword">int</span> httpResult = getHttpClient().executeMethod(method);             </div><div class="line">            <span class="keyword">if</span>(httpResult==HttpStatus.SC_OK)&#123;</div><div class="line">                Element element = getElementAsStream(method.getResponseBodyAsStream());</div><div class="line">                <span class="keyword">return</span> element;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line">            method.releaseConnection();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取IO流中的消息体</div><div class="line">     * <span class="doctag">@param</span> stream</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Element <span class="title">getElementAsStream</span><span class="params">(InputStream stream)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(stream));</div><div class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">        String buffer = <span class="string">""</span>;</div><div class="line">        String reponse = <span class="string">""</span>;</div><div class="line">         </div><div class="line">        <span class="keyword">while</span>(<span class="keyword">null</span>!=(buffer=(in.readLine())))&#123;</div><div class="line">            stringBuffer.append(buffer).append(<span class="string">"\r\n"</span>);</div><div class="line">        &#125;         </div><div class="line">        reponse = stringBuffer.toString();        </div><div class="line">        Document doc = DocumentHelper.parseText(reponse);</div><div class="line">        Element element = doc.getRootElement();</div><div class="line">        <span class="keyword">return</span> element;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先看看分析的时序图，了解下基本的过程<br><img src="/article_images/xutils_httputils_road.png" alt="时序图"></p>
<p>一般用法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">HttpUtils http = <span class="keyword">new</span> HttpUtils() ;</div><div class="line">http.send(HttpRequest.HttpMethod.GET,</div><div class="line">    <span class="string">"http://www.lidroid.com"</span>,</div><div class="line">    <span class="keyword">new</span> RequestCallBack&lt;String&gt;()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoading</span><span class="params">(<span class="keyword">long</span> total, <span class="keyword">long</span> current, <span class="keyword">boolean</span> isUploading)</span> </span>&#123;</div><div class="line">            testTextView.setText(current + <span class="string">"/"</span> + total);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(ResponseInfo&lt;String&gt; responseInfo)</span> </span>&#123;</div><div class="line">            textView.setText(responseInfo.result);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(HttpException error, String msg)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>1.Activity创建HttpUtils对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HttpUtils http = <span class="keyword">new</span> HttpUtils()；</div></pre></td></tr></table></figure>
<p>查看HttpUtils类的构造函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HttpUtils</span><span class="params">(<span class="keyword">int</span> connTimeout, String userAgent)</span> </span>&#123;</div><div class="line">        HttpParams params = <span class="keyword">new</span> BasicHttpParams();</div><div class="line">        <span class="comment">/* 从连接池中取连接的超时时间 */</span></div><div class="line">        ConnManagerParams.setTimeout(params, connTimeout);</div><div class="line">        <span class="comment">/* 请求超时 */</span></div><div class="line">        HttpConnectionParams.setSoTimeout(params, connTimeout);</div><div class="line">        <span class="comment">/* 连接超时 */</span></div><div class="line">        HttpConnectionParams.setConnectionTimeout(params, connTimeout);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(userAgent)) &#123;</div><div class="line">            userAgent = OtherUtils.getUserAgent(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        HttpProtocolParams.setUserAgent(params, userAgent);</div><div class="line"></div><div class="line">        ConnManagerParams.setMaxConnectionsPerRoute(params, <span class="keyword">new</span> ConnPerRouteBean(<span class="number">10</span>));</div><div class="line">        ConnManagerParams.setMaxTotalConnections(params, <span class="number">10</span>);</div><div class="line">        <span class="comment">/* 不延时发送 */</span></div><div class="line">        HttpConnectionParams.setTcpNoDelay(params, <span class="keyword">true</span>);</div><div class="line">        HttpConnectionParams.setSocketBufferSize(params, <span class="number">1024</span> * <span class="number">8</span>);</div><div class="line">        HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);</div><div class="line"></div><div class="line">        SchemeRegistry schemeRegistry = <span class="keyword">new</span> SchemeRegistry();</div><div class="line">        schemeRegistry.register(<span class="keyword">new</span> Scheme(<span class="string">"http"</span>, PlainSocketFactory.getSocketFactory(), <span class="number">80</span>));</div><div class="line">        schemeRegistry.register(<span class="keyword">new</span> Scheme(<span class="string">"https"</span>, DefaultSSLSocketFactory.getSocketFactory(), <span class="number">443</span>));</div><div class="line"></div><div class="line">        httpClient = <span class="keyword">new</span> DefaultHttpClient(<span class="keyword">new</span> ThreadSafeClientConnManager(params, schemeRegistry), params);</div><div class="line"></div><div class="line">        httpClient.setHttpRequestRetryHandler(<span class="keyword">new</span> RetryHandler(DEFAULT_RETRY_TIMES));</div><div class="line">        <span class="comment">/*HttpRequestInterceptor就是Http请求拦截器。可用在客服端，在Http消息发出前，对HttpRequest  request做些处理。比如加头啊，也可用在服务器端，在Http到达后，正式处理前，对HttpRequest  request做些处理。*/</span></div><div class="line">        <span class="comment">//设置相关的压缩文件标识，在请求头的信息中  </span></div><div class="line">        httpClient.addRequestInterceptor(<span class="keyword">new</span> HttpRequestInterceptor() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(org.apache.http.HttpRequest httpRequest, HttpContext httpContext)</span> <span class="keyword">throws</span> org.apache.http.HttpException, IOException </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!httpRequest.containsHeader(HEADER_ACCEPT_ENCODING)) &#123;</div><div class="line">                    httpRequest.addHeader(HEADER_ACCEPT_ENCODING, ENCODING_GZIP);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//设置相应相应的拦截器，用于处理接收到的拦截的压缩信息  </span></div><div class="line">        httpClient.addResponseInterceptor(<span class="keyword">new</span> HttpResponseInterceptor() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(HttpResponse response, HttpContext httpContext)</span> <span class="keyword">throws</span> org.apache.http.HttpException, IOException </span>&#123;</div><div class="line">                <span class="keyword">final</span> HttpEntity entity = response.getEntity();</div><div class="line">                <span class="keyword">if</span> (entity == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">final</span> Header encoding = entity.getContentEncoding();</div><div class="line">                <span class="keyword">if</span> (encoding != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">for</span> (HeaderElement element : encoding.getElements()) &#123;</div><div class="line">                        <span class="keyword">if</span> (element.getName().equalsIgnoreCase(<span class="string">"gzip"</span>)) &#123;</div><div class="line">                            response.setEntity(<span class="keyword">new</span> GZipDecompressingEntity(response.getEntity()));</div><div class="line">                            <span class="keyword">return</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里主要是设置HttpParams参数，然后创建httpClient对象。<br>注意这个类<code>ThreadSafeClientConnManager</code>，它主要是为了使用线程安全的连接管理来创建HttpClient。</p>
<p>3.http.send()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;    <span class="keyword">public</span> &lt;T&gt; <span class="function">HttpHandler&lt;T&gt; <span class="title">send</span><span class="params">(HttpRequest.HttpMethod method, String url,</span></span></div><div class="line">                                   RequestCallBack&lt;T&gt; callBack) &#123;</div><div class="line">        <span class="keyword">return</span> send(method, url, <span class="keyword">null</span>, callBack);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">HttpHandler&lt;T&gt; <span class="title">send</span><span class="params">(HttpRequest.HttpMethod method, String url, RequestParams params,</span></span></div><div class="line">                                   RequestCallBack&lt;T&gt; callBack) &#123;</div><div class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url may not be null"</span>);</div><div class="line"></div><div class="line">        HttpRequest request = <span class="keyword">new</span> HttpRequest(method, url);</div><div class="line">        <span class="keyword">return</span> sendRequest(request, params, callBack);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">HttpHandler&lt;T&gt; <span class="title">sendRequest</span><span class="params">(HttpRequest request, RequestParams params, RequestCallBack&lt;T&gt; callBack)</span> </span>&#123;</div><div class="line"></div><div class="line">        HttpHandler&lt;T&gt; handler = <span class="keyword">new</span> HttpHandler&lt;T&gt;(httpClient, httpContext, responseTextCharset, callBack);</div><div class="line"></div><div class="line">        handler.setExpiry(currentRequestExpiry);</div><div class="line">        handler.setHttpRedirectHandler(httpRedirectHandler);</div><div class="line">        request.setRequestParams(params, handler);</div><div class="line"></div><div class="line">        handler.executeOnExecutor(executor, request);</div><div class="line">        <span class="keyword">return</span> handler;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>查看httpUtils的send函数，发现最后会调用sendRequest函数<br>在sendRequest里创建HttpHandler对象</p>
<p>4.HttpHandler</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HttpHandler&lt;T&gt; extends CompatibleAsyncTask&lt;Object, Object, Void&gt; implements RequestCallBackHandler</div></pre></td></tr></table></figure>
<p>参看httpHandler发现它继承CompatibleAsyncTask</p>
<p>5.CompatibleAsyncTask</p>
<p>查看CompatibleAsyncTask ，发现它是A compatible AsyncTask for android2.2.你懂得</p>
<p>6.handler.executeOnExecutor(executor, request)</p>
<p>在第3步里创建完httpHandler后，调用handler.executeOnExecutor(executor, request)，而通过第4步了解到httpHandler继承CompatiableAsyncTask, 就先去看看doInBackground里做了什么事情。</p>
<p>7.doInBackground(Object… params)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先处理传递进来的params</span></div><div class="line"><span class="keyword">this</span>.publishProgress(UPDATE_START);</div><div class="line">lastUpdateTime = SystemClock.uptimeMillis();</div><div class="line">ResponseInfo&lt;T&gt; responseInfo = sendRequest(request);</div><div class="line">    <span class="keyword">if</span> (responseInfo != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.publishProgress(UPDATE_SUCCESS, responseInfo);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>先处理传递进来的params，调用publishProgress更新下当前的状态，然后调用sendRequest</p>
<p>8.sendRequest(HttpRequestBase request)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ResponseInfo&lt;T&gt; <span class="title">sendRequest</span><span class="params">(HttpRequestBase request)</span> <span class="keyword">throws</span> HttpException </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        HttpRequestRetryHandler retryHandler = client.getHttpRequestRetryHandler();</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"></div><div class="line">                requestMethod = request.getMethod();</div><div class="line">                <span class="keyword">if</span> (HttpUtils.sHttpCache.isEnabled(requestMethod)) &#123;</div><div class="line">                    String result = HttpUtils.sHttpCache.get(requestUrl);</div><div class="line">                    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> ResponseInfo&lt;T&gt;(<span class="keyword">null</span>, (T) result, <span class="keyword">true</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line"></div><div class="line">                ResponseInfo&lt;T&gt; responseInfo = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (!isCancelled()) &#123;</div><div class="line">                    HttpResponse response = client.execute(request, context);</div><div class="line">                    responseInfo = handleResponse(response);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> responseInfo;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                exception = e;</div><div class="line">                retry = retryHandler.retryRequest(exception, ++retriedCount, context);</div><div class="line">            &#125; </div><div class="line">            <span class="keyword">if</span> (!retry) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(exception);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个方法仔细看看，<br>先获取下client.getHttpRequestRetryHandler()，获取retry的设置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">requestMethod = request.getMethod();</div><div class="line">            <span class="keyword">if</span> (HttpUtils.sHttpCache.isEnabled(requestMethod)) &#123;</div><div class="line">                String result = HttpUtils.sHttpCache.get(requestUrl);</div><div class="line">                <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> ResponseInfo&lt;T&gt;(<span class="keyword">null</span>, (T) result, <span class="keyword">true</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>如果使用了缓存则通过requestUrl去httpCache去获取，获取到了则创建ResponseInfo对象</p>
<p>如果没有缓存</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HttpResponse response = client.execute(request, context);</div><div class="line">                    responseInfo = handleResponse(response);</div></pre></td></tr></table></figure>
<p>调用httpClient执行http请求，获取到得结果交由handleResponse处理<br>如果之前的处理出现异常则</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">retry = retryHandler.retryRequest(exception, ++retriedCount, context);</div></pre></td></tr></table></figure>
<p>调用retry机制，直到有结果，或者超过retry的次数</p>
<p>9.handleResponse()</p>
<p>第8步的时候，如果client执行获取到结果则调用handleResponse(HttpResponse response)处理结果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function">ResponseInfo&lt;T&gt; <span class="title">handleResponse</span><span class="params">(HttpResponse response)</span> <span class="keyword">throws</span> HttpException, IOException </span>&#123;</div><div class="line"></div><div class="line">       StatusLine status = response.getStatusLine();</div><div class="line">       <span class="keyword">int</span> statusCode = status.getStatusCode();</div><div class="line">       <span class="keyword">if</span> (statusCode &lt; <span class="number">300</span>) &#123;</div><div class="line"> </div><div class="line">                   result = mStringDownloadHandler.handleEntity(entity, <span class="keyword">this</span>, charset);</div><div class="line">                   <span class="keyword">if</span> (HttpUtils.sHttpCache.isEnabled(requestMethod)) &#123;</div><div class="line">                       HttpUtils.sHttpCache.put(requestUrl, (String) result, expiry);</div><div class="line">                   &#125;                </div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">new</span> ResponseInfo&lt;T&gt;(response, (T) result, <span class="keyword">false</span>);</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">301</span> || statusCode == <span class="number">302</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (httpRedirectHandler == <span class="keyword">null</span>) &#123;</div><div class="line">               httpRedirectHandler = <span class="keyword">new</span> DefaultHttpRedirectHandler();</div><div class="line">           &#125;</div><div class="line">           HttpRequestBase request = httpRedirectHandler.getDirectRequest(response);</div><div class="line">           <span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">this</span>.sendRequest(request);</div><div class="line">           &#125;</div><div class="line">       &#125; </div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这个方法主要根据返回的statuscode处理，&lt;300将结果存在HttpCache里，301或者302则处理重定向</p>
<p>10.publishProgress(UPDATE_SUCCESS, responseInfo)</p>
<p>在获得ResponseInfo后，调用 publishProgress(UPDATE_SUCCESS, responseInfo)方法，最后会调用onProgressUpdate方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Object... values)</span> </span>&#123;</div><div class="line">            <span class="keyword">case</span> UPDATE_SUCCESS:</div><div class="line">                <span class="keyword">if</span> (values.length != <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">this</span>.state = State.SUCCESS;</div><div class="line">                callback.onSuccess((ResponseInfo&lt;T&gt;) values[<span class="number">1</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这onProgressUpdate里发现最终调用第2步传进来的callback</p>
<p>整个的调用过程基本上是这样。</p>
<ol>
<li>创建httputils时创建httpClient,调用send发送请求</li>
<li>调用send时，创建httpHandler，此类继承CompatibleAsyncTask</li>
<li>在httpHandler的doInBackground真正的处理http请求，此时会判断是否有缓存，获取结果后，通过回调处理结果</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android异常/错误集]]></title>
      <url>http://dalufan.com/2014/10/20/android-error/</url>
      <content type="html"><![CDATA[<p>3、</p>
<blockquote>
<p>在activity的onCreate方法中使用popupwindow出现以下错误：<br>android.view.WindowManager$BadTokenException: Unable to add window –<br>token null is not valid; is your activity running?</p>
</blockquote>
<p>解决方法：<br>应把<code>pop.showAtLocation(parent, Gravity.TOP,0, 0)</code>这一句移出oncreate方法，在控件渲染完毕后再使用。但是移出onCreate方法的话该移到哪里去呢？网友的方法大概是这几种：</p>
<p><strong>1、</strong>移到事件中（比如一个button的click事件中）;<br><strong>2、</strong>移到子线程中;另起一线程,在线程中不断循环，直到判断控件是否渲染完毕(如长宽大于0),不推荐。。。<br><strong>3、</strong>移到重写的控件(parent)中,在控件ondraw()完后生成pop。</p>
<p>ps：1、2绝对没问题，3没测试过。</p>
<p>后来在网上找到一个绝佳的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWindowFocusChanged</span><span class="params">(<span class="keyword">boolean</span> hasFocus)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onWindowFocusChanged(hasFocus);</div><div class="line">    <span class="keyword">if</span>(hasFocus)&#123;</div><div class="line">        showPopupWindow();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//但是该方法会在应用从后台切换回来时也会展示，我把加载放在了view的post当中，完美解决</span></div><div class="line"></div><div class="line">setContentView(R.layout.activity_main);</div><div class="line">view_alpha = findViewById(R.id.view_alpha);</div><div class="line">adPopupWindow = <span class="keyword">new</span> ADPopupWindow(view_alpha, <span class="keyword">this</span>, <span class="keyword">this</span>);</div><div class="line">view_alpha.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        adPopupWindow.show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>其中showPopupWindow(getApplicationContext())是我自己定义的专门显示popupwindow的一个函数。</p>
<p>当activity获得焦点之后，activity是加载完毕的了，这个方法的技巧性比较强，很难想到。 </p>
<a id="more"></a> 
<p>2、</p>
<blockquote>
<p>java.io.IOException: The same input jar [<em>*</em>\libs\javastruct-0.1.jar] is specified twice</p>
</blockquote>
<p>提示包制定了2次。。这个老的eclipse打包没问题的，不会提示这个错误。新的elicpse会提示这样的，问题可能有2种。</p>
<ol>
<li>第一种：proguard-project.txt这个文件里，加入了 -libraries <em>*</em>.jar ，删除掉即可。</li>
<li>第二种：工程，右键build path—-config build path—切换到 order and export页面。。看一下是不是勾选了，多余的jar包，取消勾选即可。。</li>
</ol>
<p><a href="http://blog.csdn.net/salmanit/article/details/40145693" target="_blank" rel="external">http://blog.csdn.net/salmanit/article/details/40145693</a></p>
<p>1、</p>
<blockquote>
<p>[2014-08-12 15:42:10 - Dex Loader] Unable to execute dex: Multiple dex files define<br>Lcom/jeremyfeinstein/slidingmenu/lib/CanvasTransformerBuilder$1;<br>[2014-08-12 15:42:10 - NewInterest] Conversion to Dalvik format failed: Unable to execute dex: Multiple dex        files<br>define Lcom/jeremyfeinstein/slidingmenu/lib/CanvasTransformerBuilder$1;</p>
</blockquote>
<p>这种类似的是应为重复引用包，系统无法解析重复的包。<br><a href="http://blog.csdn.net/mxlxiao7/article/details/8978930" target="_blank" rel="external">http://blog.csdn.net/mxlxiao7/article/details/8978930</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java中泛型Generics的说明]]></title>
      <url>http://dalufan.com/2014/09/30/java-Generics/</url>
      <content type="html"><![CDATA[<ul>
<li>所谓泛型，就是变量类型的参数化。</li>
</ul>
<p>　　泛型是JDK1.5中一个最重要的特征。通过引入泛型，我们将获得编译时类型的安全和运行时更小的抛出ClassCastException的可能。在JDK1.5中，你可以声明一个集合将接收/返回的对象的类型。使用泛型时如果不指明参数类型，即泛型类没有参数化，会提示警告，此时类型为Object。</p>
<a id="more"></a> 
<h3 id="为什么使用泛型"><a href="#为什么使用泛型" class="headerlink" title="为什么使用泛型"></a>为什么使用泛型</h3><p>　　使用泛型的典型例子，是在集合中的泛型使用。在使用泛型前，存入集合中的元素可以是任何类型的，当从集合中取出时，所有的元素都是Object类型，需要进行向下的强制类型转换，转换到特定的类型。比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List myIntList = <span class="keyword">new</span> LinkedList(); <span class="comment">// 1</span></div><div class="line">myIntList.add(<span class="keyword">new</span> Integer(<span class="number">0</span>)); <span class="comment">// 2</span></div><div class="line">Integer x = (Integer) myIntList.iterator().next(); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>　　第三行的这个强制类型转换可能会引起运行时的错误。</p>
<p><code>泛型的思想就是由程序员指定类型，这样集合就只能容纳该类型的元素。</code>使用泛型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; myIntList = <span class="keyword">new</span> LinkedList&lt;Integer&gt;(); <span class="comment">// 1'</span></div><div class="line">myIntList.add(<span class="keyword">new</span> Integer(<span class="number">0</span>)); <span class="comment">// 2'</span></div><div class="line">Integer x = myIntList.iterator().next(); <span class="comment">// 3'</span></div></pre></td></tr></table></figure>
<p>　　将第三行的强制类型转换变为了第一行的List类型说明，编译器会为我们检查类型的正确性。这样，代码的可读性和健壮性也会增强。</p>
<h3 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span> &lt;<span class="title">E</span>&gt; </span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E x)</span></span>;</div><div class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E2</span>&gt; </span></div><div class="line">&#123;</div><div class="line">    <span class="function">E2 <span class="title">next</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　尖括号中包含的是<code>形式类型参数</code>（formal type parameters），它们就如同一般的类型一样，可以在整个类的声明中被使用。当类被使用时，会使用具体的<code>实际类型参数</code>（actual type argument）代替。比如前面的例子中的List<integer>，那么所有的E将会被Integer类型所代替。</integer></p>
<p>　　<code>泛型类型参数只能被类或接口类型赋值，不能被原生数据类型赋值，原生数据类型需要使用对应的包装类。</code></p>
<p>　　形式类型参数的<strong>命名</strong>：尽量使用单个的大写字母（有时候多个泛型类型时会加上数字，比如T1，T2），比如许多容器集合使用E，代表element（元素），Map中用K代表键keys，V代表值。这个没有定论,一般按照周知来设置.</p>
<h3 id="限制泛型可用类型"><a href="#限制泛型可用类型" class="headerlink" title="限制泛型可用类型"></a>限制泛型可用类型</h3><p>　　在定义泛型类别时，预设可以使用任何的类型来实例化泛型类型中的类型。但是如果想限制使用泛型类别时，只能用某个特定类型或者是其子类型才能实例化该类型时，可以在定义类型时，使用extends关键字指定<code>这个类型必须是继承某个类</code>，或者<code>实现某个接口</code>，也可以是这个类或接口本身。比如下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListGenericFoo</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">List</span>&gt;</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> T[] fooArray;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> T[] getFooArray()</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> fooArray;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFooArray</span><span class="params">(T[] fooArray)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.fooArray = fooArray;</div><div class="line">    &#125;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        ListGenericFoo&lt;LinkedList&gt; foo1 = <span class="keyword">new</span> ListGenericFoo&lt;LinkedList&gt;();</div><div class="line">        ListGenericFoo&lt;ArrayList&gt; foo2 = <span class="keyword">new</span> ListGenericFoo&lt;ArrayList&gt;();</div><div class="line">        </div><div class="line">        <span class="comment">//Error: Bound mismatch</span></div><div class="line">        <span class="comment">//ListGenericFoo&lt;HashMap&gt; foo3 = new ListGenericFoo&lt;HashMap&gt;();</span></div><div class="line">        </div><div class="line">        LinkedList[] linkedLists = <span class="keyword">new</span> LinkedList[<span class="number">10</span>];</div><div class="line">        foo1.setFooArray(linkedLists);</div><div class="line">        </div><div class="line">        ArrayList[] arrayLists = <span class="keyword">new</span> ArrayList[<span class="number">10</span>];</div><div class="line">        foo2.setFooArray(arrayLists);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　类声明中：public class ListGenericFoo&lt;<code>T extends List</code>&gt;这样就规定了T必须是一个List继承体系中的类，即实现了List接口的类。<br><code>此处注意，虽然List是一个接口，但是关键字仍然是extends而不是implements</code>。<br>并且这个List也可以后加括号指明类型，如List<string>等。<br>当没有指定泛型继承的类型或接口时，默认使用T extends Object，所以默认情况下任何类型都可以作为参数传入。</string></p>
<p>　　当不使用泛型时，比如那些声明时带有<t>的集合类型，如果使用时没有指定类型，泛型类别为Object。不会报错，但是会有警告。</t></p>
<p>　　&lt;? extends SomeClass&gt;是一个限界通配符（bounded wildcard），？代表了一个未知的类型，并且它是SomeClass的子类，也可以是SomeClass本身。这里面SomeClass是统配符的上界（upper bound of the wildcard）。相应的也有限定下界的，使用关键字super。通配符所代表的其实是一组类型，但具体的类型是未知的。</p>
<h3 id="类型通配声明"><a href="#类型通配声明" class="headerlink" title="类型通配声明"></a>类型通配声明</h3><p>　　看下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GenericFoo&lt;Integer&gt; foo1 = <span class="keyword">null</span>;</div><div class="line">GenericFoo&lt;Boolean&gt; foo2 = <span class="keyword">null</span>;</div><div class="line"><span class="comment">//此时foo1只能接受GenericFoo&lt;Integer&gt;类型的实例，foo2只能接受GenericFoo&lt;Boolean&gt;类型的实例</span></div></pre></td></tr></table></figure>
<p>　　如果希望有一个变量foo可以指向下面所有的实例,即它可以不指定具体类型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//foo = new GenericFoo&lt;ArrayList&gt;();</span></div><div class="line"><span class="comment">//foo = new GenericFoo&lt;LinkedList&gt;();</span></div></pre></td></tr></table></figure>
<p>　　可以这样声明:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GenericFoo&lt;? extends List&gt; foo = <span class="keyword">null</span>;</div><div class="line">foo = <span class="keyword">new</span> GenericFoo&lt;ArrayList&gt;();</div><div class="line">foo = <span class="keyword">new</span> GenericFoo&lt;LinkedList&gt;();</div></pre></td></tr></table></figure>
<p>　　<code>注意这种形式不同于前面的限制泛型可用类型时提到的形式。</code></p>
<p>　　前面提到的形式是在声明泛型的类的时候限制了可以用的泛型类型，而现在这种形式是在使用的时候限制了引用的类型，使得引用指向继承了某一个类或接口的类型。</p>
<p>　　如果该应用指向其他类型，则会编译报错：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Error:Type mismatch</span></div><div class="line">foo = <span class="keyword">new</span> GenericFoo&lt;HashMap&gt;();</div></pre></td></tr></table></figure>
<p>　　也可以限制引用指向某个类或接口的继承层次之上的类或接口：比如：        </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引用指向继承层次之上</span></div><div class="line">GenericFoo&lt;? <span class="keyword">super</span> List&gt; ge= <span class="keyword">null</span>;</div><div class="line">ge = <span class="keyword">new</span> GenericFoo&lt;Object&gt;();</div></pre></td></tr></table></figure>
<p>　　使用&lt;?&gt;或是&lt;? extends SomeClass&gt;的声明方式，意味着您只能通过该名称来取得所参考的实例的信息，或者是移除某些信息，但不能增加或者改写它的信息。</p>
<p>　　因为只知道当中放置的是SomeClass的子类，但不确定是什么类的实例，编译器不让您加入信息，理由是，如果可以加入信息的话，那么您就得记得取回的是什么类型的实例，然后转换为原来的类型方可进行操作，这样就失去了使用泛型的意义。</p>
<p>　　另，GenericFoo&lt;? extends Object&gt;等价于GenericFoo&lt;?&gt;，但是它们与GenericFoo<object>不同，因为GenericFoo<object>限定了类型为Object。</object></object></p>
<hr>
<p>参考链接：<a href="http://www.cnblogs.com/mengdd/archive/2013/01/21/2869778.html" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android里面ThreadPoolExecutor的说明]]></title>
      <url>http://dalufan.com/2014/09/26/java-ThreadPoolExecutor/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//corePoolSize： 线程池维护线程的最少数量  </span></div><div class="line"><span class="comment">//maximumPoolSize：线程池维护线程的最大数量  </span></div><div class="line"><span class="comment">//keepAliveTime： 线程池维护线程所允许的空闲时间  </span></div><div class="line"><span class="comment">//unit： 线程池维护线程所允许的空闲时间的单位  </span></div><div class="line"><span class="comment">//workQueue： 线程池所使用的缓冲队列  </span></div><div class="line"><span class="comment">//handler： 线程池对拒绝任务的处理策略 </span></div><div class="line">ThreadPoolExecutor pool = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize,</div><div class="line">                                maximumPoolSize,</div><div class="line">                                keepAliveTime,</div><div class="line">                                unit,</div><div class="line">                                workQueue,</div><div class="line">                                handler);</div></pre></td></tr></table></figure>
<h3 id="参数介绍："><a href="#参数介绍：" class="headerlink" title="参数介绍："></a>参数介绍：</h3><ul>
<li>corePoolSize 核心线程数，指保留的线程池大小（建议使用的线程数）。 </li>
<li>maximumPoolSize 指的是线程池的最大大小。 </li>
<li>keepAliveTime 指的是空闲线程结束的超时时间（当一个线程不工作时，过keepAliveTime 长时间将停止该线程）。 </li>
<li>unit 是一个枚举，表示 keepAliveTime 的单位（有NANOSECONDS, MICROSECONDS, MILLISECONDS, SECONDS, MINUTES, HOURS, DAYS，7个可选值）。 </li>
<li>workQueue 表示存放任务的队列（存放需要被线程池执行的线程队列）一般java.util.concurrent.ArrayBlockingQueue 。 </li>
<li>handler 拒绝策略（添加任务失败后如何处理该任务）,有四个选择：</li>
</ul>
<p>ThreadPoolExecutor.AbortPolicy() 抛出java.util.concurrent.RejectedExecutionException异常<br>ThreadPoolExecutor.CallerRunsPolicy()重试添加当前的任务，他会自动重复调用运行该任务的execute本身<br>ThreadPoolExecutor.DiscardOldestPolicy()如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）。<br>ThreadPoolExecutor.DiscardPolicy()抛弃当前不能执行的任务 .</p>
<h3 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><p>1、线程池刚创建时，里面没有一个线程。任务队列(<code>任务仅仅是实现了Runnable接口的对象，并不是一个线程</code>)是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。</p>
<p>2、当调用 execute() 方法添加一个任务时，线程池会做如下判断：</p>
<pre><code>a. 如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务(即使线程池中有空闲线程)；
b. 如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列。
c. 如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建线程运行这个任务；
d. 如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常，告诉调用者“我不能再接受任务了”,那么通过 handler所指定的策略来处理此任务。
</code></pre><p>3、当一个线程完成任务时，它会从队列中取下一个任务来执行。</p>
<p>4、当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。</p>
<pre><code>也就是：处理任务的优先级为： 
核心线程corePoolSize&gt;任务队列workQueue&gt;最大线程maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。 

这个过程说明，并不是先加入任务就一定会先执行。假设队列大小为 4，corePoolSize为2，maximumPoolSize为6，那么当加入15个任务时，执行的顺序类似这样：首先执行任务 1、2，然后任务3~6被放入队列。这时候队列满了，任务7、8、9、10 会被马上执行，而任务 11~15 则会抛出异常。最终顺序是：1、2、7、8、9、10、3、4、5、6。当然这个过程是针对指定大小的ArrayBlockingQueue&lt;Runnable&gt;来说，如果是LinkedBlockingQueue&lt;Runnable&gt;，因为该队列无大小限制，所以不存在上述问题。
</code></pre><h3 id="排队有三种通用策略："><a href="#排队有三种通用策略：" class="headerlink" title="排队有三种通用策略："></a>排队有三种通用策略：</h3><p><strong>直接提交</strong><br>工作队列的默认选项是 <code>SynchronousQueue</code>，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。<code>直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务</code>。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p>
<p><strong>无界队列</strong><br>使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。这样，<code>创建的线程就不会超过 corePoolSize</code>。（因此，maximumPoolSize 的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p>
<p><strong>有界队列</strong><br>当使用有限的 maximumPoolSizes 时，有界队列（如 ArrayBlockingQueue）有助于防止资源耗尽，但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频繁阻塞（例如，如果它们是 I/O 边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。</p>
<p>一个 ExecutorService，它使用可能的几个池线程之一执行每个提交的任务，通常使用 Executors 工厂方法配置。</p>
<ol>
<li>线程池可以解决两个不同问题：由于减少了每个任务调用的开销，它们通常可以在执行大量异步任务时提供增强的性能，并且还可以提供绑定和管理资源（包括执行任务集时使用的线程）的方法。每个ThreadPoolExecutor还维护着一些基本的统计数据，如完成的任务数。</li>
<li>为了便于跨大量上下文使用，此类提供了很多可调整的参数和扩展钩子 (hook)。但是，强烈建议程序员使用较为方便的 Executors 工厂方法 Executors.newCachedThreadPool()（无界线程池，可以进行自动线程回收）、Executors.newFixedThreadPool(int)（固定大小线程池）和 Executors.newSingleThreadExecutor()（单个后台线程），它们均为大多数使用场景预定义了设置。否则，在手动配置和调整此类时，使用以下指导：</li>
<li>核心和最大池大小ThreadPoolExecutor将根据 corePoolSize（参见 getCorePoolSize()）和 maximumPoolSize（参见 getMaximumPoolSize()）设置的边界自动调整池大小。当新任务在方法 execute(java.lang.Runnable) 中提交时，如果运行的线程少于 corePoolSize，则创建新线程来处理请求，即使其他辅助线程是空闲的。如果运行的线程多于 corePoolSize 而少于 maximumPoolSize，则仅当队列满时才创建新线程。如果设置的 corePoolSize 和 maximumPoolSize 相同，则创建了固定大小的线程池。如果将 maximumPoolSize 设置为基本的无界值（如Integer.MAX_VALUE），则允许池适应任意数量的并发任务。在大多数情况下，核心和最大池大小仅基于构造来设置，不过也可以使用 setCorePoolSize(int) 和 setMaximumPoolSize(int) 进行动态更改。</li>
<li>按需构造默认情况下，即使核心线程最初只是在新任务到达时才创建和启动的，也可以使用方法 prestartCoreThread() 或 prestartAllCoreThreads() 对其进行动态重写。如果构造带有非空队列的池，则可能希望预先启动线程。</li>
<li>创建新线程使用 ThreadFactory 创建新线程。如果没有另外说明，则在同一个 ThreadGroup 中一律使用 Executors.defaultThreadFactory() 创建线程，并且这些线程具有相同的NORM_PRIORITY优先级和非守护进程状态。通过提供不同的 ThreadFactory，可以改变线程的名称、线程组、优先级、守护进程状态，等等。如果从newThread返回 null 时ThreadFactory未能创建线程，则执行程序将继续运行，但不能执行任何任务。</li>
<li>保持活动时间如果池中当前有多于 corePoolSize 的线程，则这些多出的线程在空闲时间超过 keepAliveTime 时将会终止（参见 getKeepAliveTime(java.util.concurrent.TimeUnit)）。这提供了当池处于非活动状态时减少资源消耗的方法。如果池后来变得更为活动，则可以创建新的线程。也可以使用方法 setKeepAliveTime(long, java.util.concurrent.TimeUnit) 动态地更改此参数。使用Long.MAX_VALUE TimeUnit.NANOSECONDS 的值在关闭前有效地从以前的终止状态禁用空闲线程。默认情况下，保持活动策略只在有多于 corePoolSizeThreads 的线程时应用。但是只要 keepAliveTime 值非 0， allowCoreThreadTimeOut(boolean) 方法也可将此超时策略应用于核心线程。</li>
<li>排队所有 BlockingQueue 都可用于传输和保持提交的任务。可以使用此队列与池大小进行交互：</li>
</ol>
<hr>
<p>参考链接：<a href="http://my.oschina.net/jielucky/blog/157250" target="_blank" rel="external">1</a>,<br><a href="http://dongxuan.iteye.com/blog/901689" target="_blank" rel="external">2</a>,<br><a href="http://blog.csdn.net/cutesource/article/details/6061229" target="_blank" rel="external">3</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java中volatile和static的区别 ]]></title>
      <url>http://dalufan.com/2014/09/24/java-volatile-static/</url>
      <content type="html"><![CDATA[<p><img src="/article_images/jvm-volatile.jpg" alt="alt"></p>
<p>在 java 垃圾回收整理一文中，描述了jvm运行时刻内存的分配。其中有一个内存区域是jvm虚拟机栈，每一个线程运行时都有一个线程栈。线程栈保存了线程运行时候变量值信息，当线程访问某一个对象时候值的时候，首先通过对象的引用找到对应在堆内存的变量的值，然后把堆内存<br>变量的具体值load到线程本地内存中，建立一个变量副本，之后线程就不再和对象在堆内存变量值有任何关系，而是直接修改副本变量的值，在修改完之后的某一个时刻（线程退出之前），自动把线程变量副本的值回写到对象在堆中变量。这样在堆中的对象的值就产生变化了。</p>
<a id="more"></a> 
<p>read and load 从主存复制变量到当前工作内存<br>use and assign 执行代码，改变共享变量值<br>store and write 用工作内存数据刷新主存相关内容</p>
<p>其中use and assign 可以多次出现</p>
<p>但是这一些操作并不是原子性，也就是 在read load之后，如果主内存count变量发生修改之后，线程工作内存中的值由于已经加载，不会产生对应的变化，所以计算出来的结果会和预期不一样.</p>
<ul>
<li><p>volatile, 声明这个字段易变（可能被多个线程使用），Java内存模型负责各个线程的工作区与主存区的该字段的值保持同步(最新的值)，即<code>一致性</code>,当要求使用volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据,而且读取的数据立刻被保存。</p>
</li>
<li><p>static, 声明这个字段是静态的（可能被多个实例共享），在主存区上该类的所有实例的该字段为同一个变量，即<code>唯一性</code>。</p>
</li>
</ul>
<p>volatile, 声明变量值的一致性；static,声明变量的唯一性。</p>
<p>此外，volatile同步机制不同于synchronized, 前者是内存同步，后者不仅包含内存同步（一致性），且保证线程互斥（互斥性）。<br>static 只是声明变量在主存上的唯一性，不能保证工作区与主存区变量值的一致性；除非变量的值是不可变的，即再加上final的修饰符，否则static声明的变量，不是线程安全的。</p>
<p>下面摘自Java语言规范(Java Language Specification)的官方解释：</p>
<p>1) If a field is declared static, there exists exactly one incarnation of the field, no matter how many instances (possibly zero) of the class may eventually be created. </p>
<p>2) A field may be declared volatile, in which case the Java Memory Model ensures that all threads see a consistent value for the variable。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> i=<span class="number">10</span>; <span class="keyword">int</span> a = i; ... <span class="comment">//其他代码，并未明确告诉编译器，对i进行过操作 int b = i;</span></div></pre></td></tr></table></figure>
<p>volatile 指出 i是随时可能发生变化的，每次使用它的时候必须从i的地址中读取，因而编译器生成的汇编代码会重新从i的地址读取数据放在b中。而优化做法是，由于编译器发现两次从i读数据的代码之间的代码没有对i进行过操作，它会自动把上次读的数据放在b中。而不是重新从i里面读。这样以来，如果i是一个寄存器变量或者表示一个端口数据就容易出错，所以说volatile可以保证对特殊地址的稳定访问。</p>
<p>其实Volatile是由于编译器优化所造成的一个Bug而引入的关键字。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">10</span>; </div><div class="line"><span class="keyword">int</span> b = a; </div><div class="line"><span class="keyword">int</span> c = a;</div></pre></td></tr></table></figure>
<p>理论上来讲每次使用a的时候都应该从a的地址来读取变量值，但是这存在一个效率问题，就是每次使用a都要去内存中取变量值，然后再通过系统总线传 到CPU处理，这样开销会很大。所以那些编译器优化者故作聪明，把a读进CPU的cache里，像上面的代码，假如a在赋值期间没有被改变，就直接从 CPU的cache里取a的副本来进行赋值。但是bug也显而易见，当a在赋给b之后，可能a已经被另一个线程改变而重新写回了内存，但这个线程并不知道，依旧按照原来的计划从CPU的cache里读a的副本进来赋值给c，结果不幸发生了。于是编译器的开发者为了补救这一bug，提供了一个Volatile让开发人员为他们的过失埋单，或者说提供给开发人员了一个选择效率的权利。当变量加上了Volatile时，编译器就老老实实的每次都从内存中读取这个变量值，否则就还按照优化的方案从cache里读。 </p>
<hr>
<p>参考链接：<a href="http://blog.sina.com.cn/s/blog_4e1e357d0101i486.html" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[线程池shutdown()方法和shutdownNow()区别]]></title>
      <url>http://dalufan.com/2014/09/21/java-shutdown/</url>
      <content type="html"><![CDATA[<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li>shutdown()  不允许添加新的任务，等池中所有的任务执行完毕之后再关闭线程池。</li>
<li>shutdownNow() 不允许添加新的任务。立刻关闭线程池。不管池中是否还存在正在运行的任务。关闭顺序是先尝试关闭当前正在运行的任务。然后返回待完成任务的清单。已经运行的任务则不返回。</li>
</ul>
<a id="more"></a> 
<p>一般创建线程池大小不会固定值。一般都是根据系统cpu、io、内存等等信息来计算出来的。一般情况下只要不”太大”或者”太小”就可以了。可以用Runtime.getRuntime().availableProcessors()来获取当前jvm中cpu数目然后乘以每个cpu处理任务数即可。</p>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p>1 public static boolean interrupted<br>测试当前线程是否已经中断。线程的中断状态由该方法清除。换句话说，如果连续两次调用该方法，则第二次调用将返回 false（在第一次调用已清除了其中断状态之后，且第二次调用检验完中断状态前，当前线程再次中断的情况除外）。</p>
<p>2 public boolean isInterrupted()<br>测试线程是否已经中断。线程的中断状态不受该方法的影响。</p>
<p>3 public void interrupt()<br>中断线程。</p>
<p>其中，interrupt方法是唯一能将中断状态设置为true的方法。静态方法interrupted会将当前线程的中断状态清除，但这个方法的命名极不直观，很容易造成误解，需要特别注意</p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/xieyuooo/article/details/8594713" target="_blank" rel="external">CSDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java 里面volatile的说明]]></title>
      <url>http://dalufan.com/2014/09/19/java-volatile/</url>
      <content type="html"><![CDATA[<p><strong>原子操作</strong> 所谓原子操作,就是”<code>不可中断的一个或一系列操作</code>“ , 在确认一个操作是原子的情况下，多线程环境里面，我们可以避免仅仅为保护这个操作 在外围加上性能昂贵的锁，甚至借助于原子操作，我们可以实现互斥锁。</p>
<h3 id="关于java中的原子性"><a href="#关于java中的原子性" class="headerlink" title="关于java中的原子性"></a>关于java中的原子性</h3><p>原子性可以应用于<code>除long和double之外</code>的所有基本类型之上的“简单操作”。对于读取和写入出long和double之外的基本类型变量这样的操作，可以保证它们会被当作不可分（原子）的操作来操作。</p>
<a id="more"></a> 
<p>当我们定义一个变量，假设就叫o吧，理论上讲，每次使用到o的时候，都应该从o的地址来读取这个变量，但是这存在一个效率问题，就是每次 使用o的时候都要从内存中去取值，然后通过系统总线传到CPU处理，这样开销会很大。所以编译器为了优化性能，把o放进CPU的Cache中，假如 o在赋值期间没有被改变，就直接从CPU的Cache里取o的副本来进行赋值。但是”bug”也显而易见，可能o已经被一个线程改变而重新写回了内存 ，但另一个线程并不知道，依旧按照原来的计划从CPU的Cache里读o的副本来取值，结果不幸发生了。 于是编译器的开发者为了补救这一”bug”，提供了一个volatile让开发人员为他们的过失埋单，或者说提供给开发人员了一个选择效率的权利。 当变量加上了volatile时，编译器就老老实实的每次都从内存中读取这个变量值，否则就还按照优化的方案从cache里读。volatile修饰的成员变量在每次被线程访问时，都强迫从共享内存中重读该成员变量的值。而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p>
<p>在两个或者更多的线程访问的成员变量上使用volatile较好，当要访问的变量已在synchronized代码块中，或者为常量时，不必使用。</p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>锁提供了两种主要特性：互斥（mutual exclusion） 和可见性（visibility）。互斥即一次只允许一个线程持有某个特定的锁，因此可使用该特性实现对共享数据的协调访问协议，这样，一次就只有一个线程能够使用该共享数据。可见性要更加复杂一些，它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的 —— 如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题。</p>
<p>您只能在有限的一些情形下使用 volatile 变量替代锁。要使 volatile 变量提供理想的线程安全，必须同时满足下面两个条件：</p>
<ul>
<li>对变量的写操作不依赖于当前值。</li>
<li>该变量没有包含在具有其他变量的不变式中。</li>
</ul>
<p>实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。</p>
<p>Java 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”。要始终牢记使用 volatile 的限制 —— <code>只有在状态真正独立于程序内其他内容时才能使用 volatile</code> —— 这条规则能够避免将这些模式扩展到不安全的用例。</p>
<h3 id="模式-1：状态标志"><a href="#模式-1：状态标志" class="headerlink" title="模式 #1：状态标志"></a>模式 #1：状态标志</h3><p>也许实现 volatile 变量的规范使用仅仅是使用一个布尔状态标志，用于指示发生了一个重要的一次性事件，例如完成初始化或请求停机。<br>很多应用程序包含了一种控制结构，形式为 “在还没有准备好停止程序时再执行一些工作”，如清单所示：</p>
<h4 id="清单-将-volatile-变量作为状态标志使用"><a href="#清单-将-volatile-变量作为状态标志使用" class="headerlink" title="清单:将 volatile 变量作为状态标志使用"></a>清单:将 volatile 变量作为状态标志使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> shutdownRequested;</div><div class="line">...</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123; shutdownRequested = <span class="keyword">true</span>; &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">while</span> (!shutdownRequested) &#123; </div><div class="line">        <span class="comment">// do stuff</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很可能会从循环外部调用 shutdown() 方法 —— 即在另一个线程中 —— 因此，需要执行某种同步来确保正确实现 shutdownRequested 变量的可见性。（可能会从 JMX 侦听程序、GUI 事件线程中的操作侦听程序、通过 RMI 、通过一个 Web 服务等调用）。然而，使用 synchronized 块编写循环要比使用清单 2 所示的 volatile 状态标志编写麻烦很多。由于 volatile 简化了编码，并且状态标志并不依赖于程序内任何其他状态，因此此处非常适合使用 volatile。<br>这种类型的状态标记的一个公共特性是：通常只有一种状态转换；shutdownRequested 标志从 false 转换为 true，然后程序停止。这种模式可以扩展到来回转换的状态标志，但是只有在转换周期不被察觉的情况下才能扩展（从 false 到 true，再转换到 false）。此外，还需要某些原子状态转换机制，例如原子变量。</p>
<h3 id="模式-2：一次性安全发布（one-time-safe-publication）"><a href="#模式-2：一次性安全发布（one-time-safe-publication）" class="headerlink" title="模式 #2：一次性安全发布（one-time safe publication）"></a>模式 #2：一次性安全发布（one-time safe publication）</h3><p>缺乏同步会导致无法实现可见性，这使得确定何时写入对象引用而不是原语值变得更加困难。在缺乏同步的情况下，可能会遇到某个对象引用的更新值（由另一个线程写入）和该对象状态的旧值同时存在。（这就是造成著名的双重检查锁定（double-checked-locking）问题的根源，其中对象引用在没有同步的情况下进行读操作，产生的问题是您可能会看到一个更新的引用，但是仍然会通过该引用看到不完全构造的对象）。<br>实现安全发布对象的一种技术就是将对象引用定义为 volatile 类型。清单展示了一个示例，其中后台线程在启动阶段从数据库加载一些数据。其他代码在能够利用这些数据时，在使用之前将检查这些数据是否曾经发布过。</p>
<h4 id="清单-将-volatile-变量用于一次性安全发布"><a href="#清单-将-volatile-变量用于一次性安全发布" class="headerlink" title="清单:将 volatile 变量用于一次性安全发布"></a>清单:将 volatile 变量用于一次性安全发布</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackgroundFloobleLoader</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> Flooble theFlooble;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initInBackground</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// do lots of stuff</span></div><div class="line">        theFlooble = <span class="keyword">new</span> Flooble();  <span class="comment">// this is the only write to theFlooble</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeOtherClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; </div><div class="line">            <span class="comment">// do some stuff...</span></div><div class="line">            <span class="comment">// use the Flooble, but only if it is ready</span></div><div class="line">            <span class="keyword">if</span> (floobleLoader.theFlooble != <span class="keyword">null</span>) </div><div class="line">                doSomething(floobleLoader.theFlooble);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果 theFlooble 引用不是 volatile 类型，doWork() 中的代码在解除对 theFlooble 的引用时，将会得到一个不完全构造的 Flooble。<br>该模式的一个必要条件是：被发布的对象必须是线程安全的，或者是有效的不可变对象（有效不可变意味着对象的状态在发布之后永远不会被修改）。volatile 类型的引用可以确保对象的发布形式的可见性，但是如果对象的状态在发布后将发生更改，那么就需要额外的同步。</p>
<h3 id="模式-3：独立观察（independent-observation）"><a href="#模式-3：独立观察（independent-observation）" class="headerlink" title="模式 #3：独立观察（independent observation）"></a>模式 #3：独立观察（independent observation）</h3><p>安全使用 volatile 的另一种简单模式是：定期 “发布” 观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。<br>使用该模式的另一种应用程序就是收集程序的统计信息。清单展示了身份验证机制如何记忆最近一次登录的用户的名字。将反复使用 lastUser 引用来发布值，以供程序的其他部分使用。</p>
<h4 id="清单-将-volatile-变量用于多个独立观察结果的发布"><a href="#清单-将-volatile-变量用于多个独立观察结果的发布" class="headerlink" title="清单:将 volatile 变量用于多个独立观察结果的发布"></a>清单:将 volatile 变量用于多个独立观察结果的发布</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> String lastUser;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">authenticate</span><span class="params">(String user, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> valid = passwordIsValid(user, password);</div><div class="line">        <span class="keyword">if</span> (valid) &#123;</div><div class="line">            User u = <span class="keyword">new</span> User();</div><div class="line">            activeUsers.add(u);</div><div class="line">            lastUser = user;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> valid;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该模式是前面模式的扩展；将某个值发布以在程序内的其他地方使用，但是与一次性事件的发布不同，这是一系列独立事件。这个模式要求被发布的值是有效不可变的 —— 即值的状态在发布后不会更改。使用该值的代码需要清楚该值可能随时发生变化。</p>
<h3 id="模式-4：“volatile-bean”-模式"><a href="#模式-4：“volatile-bean”-模式" class="headerlink" title="模式 #4：“volatile bean” 模式"></a>模式 #4：“volatile bean” 模式</h3><p>volatile bean 模式适用于将 JavaBeans 作为“荣誉结构”使用的框架。在 volatile bean 模式中，JavaBean 被用作一组具有 getter 和/或 setter 方法 的独立属性的容器。volatile bean 模式的基本原理是：很多框架为易变数据的持有者（例如 HttpSession）提供了容器，但是放入这些容器中的对象必须是线程安全的。<br>在 volatile bean 模式中，JavaBean 的所有数据成员都是 volatile 类型的，并且 getter 和 setter 方法必须非常普通 —— 除了获取或设置相应的属性外，不能包含任何逻辑。此外，对于对象引用的数据成员，引用的对象必须是有效不可变的。（这将禁止具有数组值的属性，因为当数组引用被声明为 volatile 时，只有引用而不是数组本身具有 volatile 语义）。对于任何 volatile 变量，不变式或约束都不能包含 JavaBean 属性。清单中的示例展示了遵守 volatile bean 模式的 JavaBean：</p>
<h4 id="清单-遵守-volatile-bean-模式的-Person-对象"><a href="#清单-遵守-volatile-bean-模式的-Person-对象" class="headerlink" title="清单:遵守 volatile bean 模式的 Person 对象"></a>清单:遵守 volatile bean 模式的 Person 对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@ThreadSafe</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String firstName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String lastName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> firstName; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> lastName; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123; </div><div class="line">        <span class="keyword">this</span>.firstName = firstName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123; </div><div class="line">        <span class="keyword">this</span>.lastName = lastName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; </div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="volatile-的高级模式"><a href="#volatile-的高级模式" class="headerlink" title="volatile 的高级模式"></a>volatile 的高级模式</h3><p>前面几节介绍的模式涵盖了大部分的基本用例，在这些模式中使用 volatile 非常有用并且简单。这一节将介绍一种更加高级的模式，在该模式中，volatile 将提供性能或可伸缩性优势。<br>volatile 应用的的高级模式非常脆弱。因此，必须对假设的条件仔细证明，并且这些模式被严格地封装了起来，因为即使非常小的更改也会损坏您的代码！同样，使用更高级的 volatile 用例的原因是它能够提升性能，确保在开始应用高级模式之前，真正确定需要实现这种性能获益。需要对这些模式进行权衡，放弃可读性或可维护性来换取可能的性能收益 —— 如果您不需要提升性能（或者不能够通过一个严格的测试程序证明您需要它），那么这很可能是一次糟糕的交易，因为您很可能会得不偿失，换来的东西要比放弃的东西价值更低。</p>
<h3 id="模式-5：开销较低的读－写锁策略"><a href="#模式-5：开销较低的读－写锁策略" class="headerlink" title="模式 #5：开销较低的读－写锁策略"></a>模式 #5：开销较低的读－写锁策略</h3><p>目前为止，您应该了解了 volatile 的功能还不足以实现计数器。因为 ++x 实际上是三种操作（读、添加、存储）的简单组合，如果多个线程凑巧试图同时对 volatile 计数器执行增量操作，那么它的更新值有可能会丢失。<br>然而，如果读操作远远超过写操作，您可以结合使用内部锁和 volatile 变量来减少公共代码路径的开销。清单中显示的线程安全的计数器使用 synchronized 确保增量操作是原子的，并使用 volatile 保证当前结果的可见性。如果更新不频繁的话，该方法可实现更好的性能，因为读路径的开销仅仅涉及 volatile 读操作，这通常要优于一个无竞争的锁获取的开销。</p>
<h4 id="清单-结合使用-volatile-和-synchronized-实现-“开销较低的读－写锁”"><a href="#清单-结合使用-volatile-和-synchronized-实现-“开销较低的读－写锁”" class="headerlink" title="清单:结合使用 volatile 和 synchronized 实现 “开销较低的读－写锁”"></a>清单:结合使用 volatile 和 synchronized 实现 “开销较低的读－写锁”</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   <span class="meta">@ThreadSafe</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesyCounter</span> </span>&#123;</div><div class="line">    <span class="comment">// Employs the cheap read-write lock trick</span></div><div class="line">    <span class="comment">// All mutative operations MUST be done with the 'this' lock held</span></div><div class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"this"</span>) <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> value; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之所以将这种技术称之为 “开销较低的读－写锁” 是因为您使用了不同的同步机制进行读写操作。因为本例中的写操作违反了使用 volatile 的第一个条件，因此不能使用 volatile 安全地实现计数器 —— 您必须使用锁。然而，您可以在读操作中使用 volatile 确保当前值的可见性，因此可以使用锁进行所有变化的操作，使用 volatile 进行只读操作。其中，锁一次只允许一个线程访问值，volatile 允许多个线程执行读操作，因此当使用 volatile 保证读代码路径时，要比使用锁执行全部代码路径获得更高的共享度 —— 就像读－写操作一样。然而，要随时牢记这种模式的弱点：如果超越了该模式的最基本应用，结合这两个竞争的同步机制将变得非常困难。</p>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>与锁相比，Volatile 变量是一种非常简单但同时又非常脆弱的同步机制，它在某些情况下将提供优于锁的性能和伸缩性。如果严格遵循 volatile 的使用条件 —— 即变量真正独立于其他变量和自己以前的值 —— 在某些情况下可以使用 volatile 代替 synchronized 来简化代码。然而，使用 volatile 的代码往往比使用锁的代码更加容易出错。本文介绍的模式涵盖了可以使用 volatile 代替 synchronized 的最常见的一些用例。遵循这些模式（注意使用时不要超过各自的限制）可以帮助您安全地实现大多数用例，使用 volatile 变量获得更佳性能。</p>
<hr>
<p>参考链接：<a href="http://www.ibm.com/developerworks/cn/java/j-jtp06197.html" target="_blank" rel="external">1</a>,<br><a href="http://www.cnblogs.com/aigongsi/archive/2012/04/01/2429166.html" target="_blank" rel="external">2</a>,<a href="http://blog.csdn.net/liuhe688/article/details/4924702" target="_blank" rel="external">3</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java 里面AtomicInteger的说明]]></title>
      <url>http://dalufan.com/2014/09/19/java-AtomicInteger/</url>
      <content type="html"><![CDATA[<p>AtomicInteger，一个提供原子操作的Integer的类。在Java语言中，++i和i++操作并不是线程安全的，在使用的时候，不可避免的会用到synchronized关键字。而AtomicInteger则通过一种线程安全的加减操作接口。</p>
<a id="more"></a> 
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xd.dalu.atomic;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * //获取当前的值</div><div class="line"> * public final int get()</div><div class="line"> * //取当前的值，并设置新的值</div><div class="line"> * public final int getAndSet(int newValue)</div><div class="line"> * //获取当前的值，并自增</div><div class="line"> * public final int getAndIncrement()</div><div class="line"> * //获取当前的值，并自减</div><div class="line"> * public final int getAndDecrement()</div><div class="line"> * //获取当前的值，并加上预期的值</div><div class="line"> * public final int getAndAdd(int delta)</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        AtomicInteger ai = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> i1 = ai.get();</div><div class="line">        v(i1);</div><div class="line">        <span class="comment">//Atomically sets to the given value and returns the old value</span></div><div class="line">        <span class="comment">//其返回的仍然是旧值</span></div><div class="line">        <span class="keyword">int</span> i2 = ai.getAndSet(<span class="number">5</span>);</div><div class="line">        v(i2);</div><div class="line">        <span class="keyword">int</span> i3 = ai.get();</div><div class="line">        v(i3);</div><div class="line">        <span class="keyword">int</span> i4 = ai.getAndIncrement();</div><div class="line">        v(i4);</div><div class="line">        v(ai.get());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"i : "</span> + i);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    i : 0</div><div class="line">    i : 0</div><div class="line">    i : 5</div><div class="line">    i : 5</div><div class="line">    i : 6</div><div class="line">     */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在java6以后我们不但接触到了Lock相关的锁，也接触到了很多更加乐观的原子修改操作，也就是在修改时我们只需要保证它的那个瞬间是安全的即可，经过相应的包装后可以再处理对象的并发修改，以及并发中的ABA问题，本文讲述Atomic系列的类的实现以及使用方法，其中包含：</p>
<p><strong>基本类</strong>：AtomicInteger、AtomicLong、AtomicBoolean；</p>
<p><strong>引用类型</strong>：AtomicReference、AtomicReference的ABA实例、AtomicStampedRerence、AtomicMarkableReference；</p>
<p><strong>数组类型</strong>：AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray</p>
<p><strong>属性原子修改器（Updater）</strong>：AtomicIntegerFieldUpdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater</p>
<p>在使用Atomic系列前，我们需要先知道一个东西就是Unsafe类，全名为：sun.misc.Unsafe，这个类包含了大量的对C代码的操作，包括很多直接内存分配以及原子操作的调用，而它之所以标记为非安全的，是告诉你这个里面大量的方法调用都会存在安全隐患，需要小心使用，否则会导致严重的后果，例如在通过unsafe分配内存的时候，如果自己指定某些区域可能会导致一些类似C++一样的指针越界到其他进程的问题，不过它的具体使用并不是本文的重点，本文重点是Atomic系列的内容大多会基于unsafe类中的以下几个本地方法来操作：</p>
<p><code>对象的引用进行对比后交换，交换成功返回true，交换失败返回false</code>，这个交换过程完全是原子的，在CPU上计算完结果后，都会对比内存的结果是否还是原先的值，若不是，则认为不能替换，因为变量是volatile类型所以最终写入的数据会被其他线程看到，所以一个线程修改成功后，其他线程就发现自己修改失败了。</p>
<p><strong>参数1</strong>：对象所在的类本身的对象（一般这里是对一个对象的属性做修改，才会出现并发，所以该对象所存在的类也是有一个对象的）</p>
<p><strong>参数2</strong>：这个属性在这个对象里面的相对偏移量位置，其实对比时是对比内存单元，所以需要属性的起始位置，而引用就是修改引用地址（根据OS、VM位数和参数配置决定宽度一般是4-8个字节），int就是修改相关的4个字节，而long就是修改相关的8个字节。</p>
<p>获取偏移量也是通过unsafe的一个方法：objectFieldOffset(Fieldfield)来获取属性在对象中的偏移量；静态变量需要通过：staticFieldOffset(Field field)获取，调用的总方法是：fieldOffset(Fieldfield)</p>
<p><strong>参数3</strong>：修改的引用的原始值，用于对比原来的引用和要修改的目标是否一致。</p>
<p><strong>参数4</strong>：修改的目标值，要将数据修改成什么。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapObject</span><span class="params">(Object paramObject1, <span class="keyword">long</span> paramLong, Object paramObject2, Object paramObject3)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object paramObject, <span class="keyword">long</span> paramLong, <span class="keyword">int</span> paramInt1, <span class="keyword">int</span> paramInt2)</span></span>;</div></pre></td></tr></table></figure>
<p>另一个例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xd.dalu.atomic;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 常见的方法列表</div><div class="line">     * </div><div class="line">     * <span class="doctag">@see</span> AtomicInteger#get() 直接返回值</div><div class="line">     * <span class="doctag">@see</span> AtomicInteger#getAndAdd(int) 增加指定的数据，返回变化前的数据</div><div class="line">     * <span class="doctag">@see</span> AtomicInteger#getAndDecrement() 减少1，返回减少前的数据</div><div class="line">     * <span class="doctag">@see</span> AtomicInteger#getAndIncrement() 增加1，返回增加前的数据</div><div class="line">     * <span class="doctag">@see</span> AtomicInteger#getAndSet(int) 设置指定的数据，返回设置前的数据</div><div class="line">     * </div><div class="line">     * <span class="doctag">@see</span> AtomicInteger#addAndGet(int) 增加指定的数据后返回增加后的数据</div><div class="line">     * <span class="doctag">@see</span> AtomicInteger#decrementAndGet() 减少1，返回减少后的值</div><div class="line">     * <span class="doctag">@see</span> AtomicInteger#incrementAndGet() 增加1，返回增加后的值</div><div class="line">     * <span class="doctag">@see</span> AtomicInteger#lazySet(int) 仅仅当get时才会set</div><div class="line">     * </div><div class="line">     * <span class="doctag">@see</span> AtomicInteger#compareAndSet(int, int) 尝试新增后对比，若增加成功则返回true否则返回false</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> AtomicInteger TEST_INTEGER = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">final</span> Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> num = i;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">1000</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">int</span> now = TEST_INTEGER.incrementAndGet();</div><div class="line">                    System.out.println(<span class="string">"我是线程："</span> + num + <span class="string">"，我得到值了，增加后的值为："</span> + now);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            threads[i].start();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//必须要加join 保证所有的线程都会执行</span></div><div class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</div><div class="line">            t.join();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"最终运行结果："</span> + TEST_INTEGER.get());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    我是线程：4，我得到值了，增加后的值为：6</div><div class="line">    我是线程：6，我得到值了，增加后的值为：11</div><div class="line">    我是线程：9，我得到值了，增加后的值为：10</div><div class="line">    我是线程：1，我得到值了，增加后的值为：3</div><div class="line">    我是线程：8，我得到值了，增加后的值为：9</div><div class="line">    我是线程：7，我得到值了，增加后的值为：8</div><div class="line">    我是线程：5，我得到值了，增加后的值为：7</div><div class="line">    我是线程：3，我得到值了，增加后的值为：5</div><div class="line">    我是线程：0，我得到值了，增加后的值为：2</div><div class="line">    我是线程：2，我得到值了，增加后的值为：4</div><div class="line">    最终运行结果：11</div><div class="line">     */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/xieyuooo/article/details/8594713" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java中string.format方法使用介绍]]></title>
      <url>http://dalufan.com/2014/09/07/java-string-format/</url>
      <content type="html"><![CDATA[<blockquote>
<p>format(String  format, Objece…  argues)</p>
</blockquote>
<p>函数相当于C语言中的printf函数，但是相对来说更灵活.和C中的printf函数差不多，在format的时候能够产生单纯的替换效果.用具体的值替换相应的转换符.转换符有如下一些：</p>
<p><img src="/article_images/java-string-format01.png" alt="alt"></p>
<a id="more"></a> 
<p>在format第一个参数中传入相应的转换符就能代表特定的信息，在第二个参数中传入具体的值完成相应的替换，相当于可以有一定的模版方式，然后在实际填充的时候用具体的值去填充即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">String str = <span class="keyword">null</span>;</div><div class="line">str = String.format(<span class="string">"Hi,%s"</span>, <span class="string">"飞龙"</span>); <span class="comment">// 格式化字符串</span></div><div class="line">System.out.println(str); <span class="comment">// 输出字符串变量str的内容</span></div><div class="line">System.out.printf(<span class="string">"字母a的大写是：%c %n"</span>, <span class="string">'A'</span>);</div><div class="line">System.out.printf(<span class="string">"3&gt;7的结果是：%b %n"</span>, <span class="number">3</span> &gt; <span class="number">7</span>);</div><div class="line">System.out.printf(<span class="string">"100的一半是：%d %n"</span>, <span class="number">100</span> / <span class="number">2</span>);</div><div class="line">System.out.printf(<span class="string">"100的16进制数是：%x %n"</span>, <span class="number">100</span>);</div><div class="line">System.out.printf(<span class="string">"100的8进制数是：%o %n"</span>, <span class="number">100</span>);</div><div class="line">System.out.printf(<span class="string">"50元的书打8.5折扣是：%f 元%n"</span>, <span class="number">50</span> * <span class="number">0.85</span>);</div><div class="line">System.out.printf(<span class="string">"上面价格的16进制数是：%a %n"</span>, <span class="number">50</span> * <span class="number">0.85</span>);</div><div class="line">System.out.printf(<span class="string">"上面价格的指数表示：%e %n"</span>, <span class="number">50</span> * <span class="number">0.85</span>);</div><div class="line">System.out.printf(<span class="string">"上面价格的指数和浮点数结果的长度较短的是：%g %n"</span>, <span class="number">50</span> * <span class="number">0.85</span>);</div><div class="line">System.out.printf(<span class="string">"上面的折扣是%d%% %n"</span>, <span class="number">85</span>);</div><div class="line">System.out.printf(<span class="string">"字母A的散列码是：%h %n"</span>, <span class="string">'A'</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line">Hi,飞龙</div><div class="line">字母a的大写是：A </div><div class="line">3&gt;7的结果是：false </div><div class="line">100的一半是：50 </div><div class="line">100的16进制数是：64 </div><div class="line">100的8进制数是：144 </div><div class="line">50元的书打8.5折扣是：42.500000 元</div><div class="line">上面价格的16进制数是：0x1.54p5 </div><div class="line">上面价格的指数表示：4.250000e+01 </div><div class="line">上面价格的指数和浮点数结果的长度较短的是：42.5000 </div><div class="line">上面的折扣是85% </div><div class="line">字母A的散列码是：41 </div><div class="line">*/</div></pre></td></tr></table></figure>
<p>format参数中可以包含不需要转化的字符串，这些字符串是你写什么，最终就输出什么。同时还包含一些特殊格式的内容，来指定将哪个对象来转换，以及转换成什么形式。这种特殊的格式通通以<code>%index$</code>开头，index从1开始取值(而不是0)，表示将第index个参数拿进来进行格式化。由于该函数可以对任意一个对象进行格式化，不同的对象适用的参数也不同，所以要区分对待.</p>
<h3 id="1-对整数进行格式化"><a href="#1-对整数进行格式化" class="headerlink" title="1.对整数进行格式化"></a>1.对整数进行格式化</h3><blockquote>
<p>形式：%[index$]<code>[标识]</code>[最小宽度]<code>转换方式</code></p>
</blockquote>
<p>格式化字符串由四个部分组成:</p>
<p>1.%[index$]—对index个参数进行格式化</p>
<p>2.[标识]—相应的格式化时候的配置信息,比如当小于最小宽度时候如何处理，标识包括： </p>
<pre><code>&apos;-&apos;    在最小宽度内左对齐（默认是右对齐），不可以与“用0填充”同时使用    
&apos;#&apos;    只适用于8进制和16进制，8进制时在结果前面增加一个0，16进制时在结果前面增加0x 
&apos;+&apos;    结果总是包括一个符号（一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制） 
&apos;  &apos;    正值前加空格，负值前加负号（一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制） 
&apos;0&apos;    结果将用零来填充 
&apos;,&apos;    只适用于10进制，每3位数字之间用“，”分隔 
&apos;(&apos;    若参数是负数，则结果中不添加负号而是用圆括号数字括起来（同‘+’具有同样的限制） 
</code></pre><p>4.[转换方式]—实际代表的是所传入的这个数字采用的是什么进制的表示.转换方式包含如下几类：</p>
<pre><code>d-十进制      o-八进制         x或X-十六进制           
</code></pre><p><img src="/article_images/java-string-format02.png" alt="alt"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    String str=<span class="keyword">null</span>;</div><div class="line">    <span class="comment">//$使用</span></div><div class="line">    str=String.format(<span class="string">"格式参数$的使用：%1$d,%2$s"</span>, <span class="number">99</span>,<span class="string">"abc"</span>);           </div><div class="line">    System.out.println(str);                     </div><div class="line">    <span class="comment">//+使用</span></div><div class="line">    System.out.printf(<span class="string">"显示正负数的符号：%+d与%d%n"</span>, <span class="number">99</span>,-<span class="number">99</span>);</div><div class="line">    <span class="comment">//补O使用</span></div><div class="line">    System.out.printf(<span class="string">"最牛的编号是：%03d%n"</span>, <span class="number">7</span>);</div><div class="line">    <span class="comment">//空格使用</span></div><div class="line">    System.out.printf(<span class="string">"Tab键的效果是：% 8d%n"</span>, <span class="number">7</span>);</div><div class="line">    <span class="comment">//.使用</span></div><div class="line">    System.out.printf(<span class="string">"整数分组的效果是：%,d%n"</span>, <span class="number">9989997</span>);</div><div class="line">    <span class="comment">//空格和小数点后面个数</span></div><div class="line">    System.out.printf(<span class="string">"一本书的价格是：% 50.5f元%n"</span>, <span class="number">49.8</span>);</div><div class="line">    <span class="comment">/*</span></div><div class="line">    格式参数$的使用：99,abc  </div><div class="line">    显示正负数的符号：+99与-99  </div><div class="line">    最牛的编号是：007  </div><div class="line">    Tab键的效果是：       7  </div><div class="line">    整数分组的效果是：9,989,997  </div><div class="line">    一本书的价格是：                                          49.80000元</div><div class="line">    */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="日期和时间字符串格式化"><a href="#日期和时间字符串格式化" class="headerlink" title="日期和时间字符串格式化"></a>日期和时间字符串格式化</h3><p>字符串格式中还有<code>%tx</code>转换符没有详细介绍，它是专门用来格式化日期和时间的。<code>%tx</code>转换符中的x代表另外的处理日期和时间格式的转换符，它们的组合能够将日期和时间格式化成多种格式。</p>
<h4 id="1．常见日期时间格式化"><a href="#1．常见日期时间格式化" class="headerlink" title="1．常见日期时间格式化"></a>1．常见日期时间格式化</h4><p>格式化日期与时间的转换符定义了各种格式化日期字符串的方式，其中最常用的日期和时间的组合格式如下：</p>
<p><img src="/article_images/java-string-format03.png" alt="alt"></p>
<pre><code>使用的时候用&quot;%t[c/F/D/r/T/R]&quot;这样的形式即可.
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Date date=<span class="keyword">new</span> Date();                                </div><div class="line">    <span class="comment">//c的使用</span></div><div class="line">    System.out.printf(<span class="string">"全部日期和时间信息：%tc%n"</span>,date);        </div><div class="line">    <span class="comment">//f的使用</span></div><div class="line">    System.out.printf(<span class="string">"年-月-日格式：%tF%n"</span>,date);</div><div class="line">    <span class="comment">//d的使用</span></div><div class="line">    System.out.printf(<span class="string">"月/日/年格式：%tD%n"</span>,date);</div><div class="line">    <span class="comment">//r的使用</span></div><div class="line">    System.out.printf(<span class="string">"HH:MM:SS PM格式（12时制）：%tr%n"</span>,date);</div><div class="line">    <span class="comment">//t的使用</span></div><div class="line">    System.out.printf(<span class="string">"HH:MM:SS格式（24时制）：%tT%n"</span>,date);</div><div class="line">    <span class="comment">//R的使用</span></div><div class="line">    System.out.printf(<span class="string">"HH:MM格式（24时制）：%tR"</span>,date);</div><div class="line">    <span class="comment">/*</span></div><div class="line">    全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012  </div><div class="line">    年-月-日格式：2012-09-10  </div><div class="line">    月/日/年格式：09/10/12  </div><div class="line">    HH:MM:SS PM格式（12时制）：10:43:36 上午  </div><div class="line">    HH:MM:SS格式（24时制）：10:43:36  </div><div class="line">    HH:MM格式（24时制）：10:43  </div><div class="line">    */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2．格式化日期字符串"><a href="#2．格式化日期字符串" class="headerlink" title="2．格式化日期字符串"></a>2．格式化日期字符串</h4><p>定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如表所示</p>
<p><img src="/article_images/java-string-format04.png" alt="alt"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">    Date date=<span class="keyword">new</span> Date();                                      </div><div class="line">    <span class="comment">//b的使用，月份简称  </span></div><div class="line">    String str=String.format(Locale.US,<span class="string">"英文月份简称：%tb"</span>,date);       </div><div class="line">    System.out.println(str);                                                                              </div><div class="line">    System.out.printf(<span class="string">"本地月份简称：%tb%n"</span>,date);  </div><div class="line">    <span class="comment">//B的使用，月份全称  </span></div><div class="line">    str=String.format(Locale.US,<span class="string">"英文月份全称：%tB"</span>,date);  </div><div class="line">    System.out.println(str);  </div><div class="line">    System.out.printf(<span class="string">"本地月份全称：%tB%n"</span>,date);  </div><div class="line">    <span class="comment">//a的使用，星期简称  </span></div><div class="line">    str=String.format(Locale.US,<span class="string">"英文星期的简称：%ta"</span>,date);  </div><div class="line">    System.out.println(str);  </div><div class="line">    <span class="comment">//A的使用，星期全称  </span></div><div class="line">    System.out.printf(<span class="string">"本地星期的简称：%tA%n"</span>,date);  </div><div class="line">    <span class="comment">//C的使用，年前两位  </span></div><div class="line">    System.out.printf(<span class="string">"年的前两位数字（不足两位前面补0）：%tC%n"</span>,date);  </div><div class="line">    <span class="comment">//y的使用，年后两位  </span></div><div class="line">    System.out.printf(<span class="string">"年的后两位数字（不足两位前面补0）：%ty%n"</span>,date);  </div><div class="line">    <span class="comment">//j的使用，一年的天数  </span></div><div class="line">    System.out.printf(<span class="string">"一年中的天数（即年的第几天）：%tj%n"</span>,date);  </div><div class="line">    <span class="comment">//m的使用，月份  </span></div><div class="line">    System.out.printf(<span class="string">"两位数字的月份（不足两位前面补0）：%tm%n"</span>,date);  </div><div class="line">    <span class="comment">//d的使用，日（二位，不够补零）  </span></div><div class="line">    System.out.printf(<span class="string">"两位数字的日（不足两位前面补0）：%td%n"</span>,date);  </div><div class="line">    <span class="comment">//e的使用，日（一位不补零）  </span></div><div class="line">    System.out.printf(<span class="string">"月份的日（前面不补0）：%te"</span>,date);</div><div class="line">    <span class="comment">/*</span></div><div class="line">    英文月份简称：Sep  </div><div class="line">    本地月份简称：九月  </div><div class="line">    英文月份全称：September  </div><div class="line">    本地月份全称：九月  </div><div class="line">    英文星期的简称：Mon  </div><div class="line">    本地星期的简称：星期一  </div><div class="line">    年的前两位数字（不足两位前面补0）：20  </div><div class="line">    年的后两位数字（不足两位前面补0）：12  </div><div class="line">    一年中的天数（即年的第几天）：254  </div><div class="line">    两位数字的月份（不足两位前面补0）：09  </div><div class="line">    两位数字的日（不足两位前面补0）：10  </div><div class="line">    月份的日（前面不补0）：10 </div><div class="line">    */  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3．格式化时间字符串"><a href="#3．格式化时间字符串" class="headerlink" title="3．格式化时间字符串"></a>3．格式化时间字符串</h4><p>和日期格式转换符相比，时间格式的转换符要更多、更精确。它可以将时间格式化成时、分、秒甚至时毫秒等单位。格式化时间字符串的转换符如表所示</p>
<p><img src="/article_images/java-string-format05.png" alt="alt"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">    Date date = <span class="keyword">new</span> Date();  </div><div class="line">    <span class="comment">//H的使用  </span></div><div class="line">    System.out.printf(<span class="string">"2位数字24时制的小时（不足2位前面补0）:%tH%n"</span>, date);  </div><div class="line">    <span class="comment">//I的使用  </span></div><div class="line">    System.out.printf(<span class="string">"2位数字12时制的小时（不足2位前面补0）:%tI%n"</span>, date);  </div><div class="line">    <span class="comment">//k的使用  </span></div><div class="line">    System.out.printf(<span class="string">"2位数字24时制的小时（前面不补0）:%tk%n"</span>, date);  </div><div class="line">    <span class="comment">//l的使用  </span></div><div class="line">    System.out.printf(<span class="string">"2位数字12时制的小时（前面不补0）:%tl%n"</span>, date);  </div><div class="line">    <span class="comment">//M的使用  </span></div><div class="line">    System.out.printf(<span class="string">"2位数字的分钟（不足2位前面补0）:%tM%n"</span>, date);  </div><div class="line">    <span class="comment">//S的使用  </span></div><div class="line">    System.out.printf(<span class="string">"2位数字的秒（不足2位前面补0）:%tS%n"</span>, date);  </div><div class="line">    <span class="comment">//L的使用  </span></div><div class="line">    System.out.printf(<span class="string">"3位数字的毫秒（不足3位前面补0）:%tL%n"</span>, date);  </div><div class="line">    <span class="comment">//N的使用  </span></div><div class="line">    System.out.printf(<span class="string">"9位数字的毫秒数（不足9位前面补0）:%tN%n"</span>, date);  </div><div class="line">    <span class="comment">//p的使用  </span></div><div class="line">    String str = String.format(Locale.US, <span class="string">"小写字母的上午或下午标记(英)：%tp"</span>, date);  </div><div class="line">    System.out.println(str);   </div><div class="line">    System.out.printf(<span class="string">"小写字母的上午或下午标记（中）：%tp%n"</span>, date);  </div><div class="line">    <span class="comment">//z的使用  </span></div><div class="line">    System.out.printf(<span class="string">"相对于GMT的RFC822时区的偏移量:%tz%n"</span>, date);  </div><div class="line">    <span class="comment">//Z的使用  </span></div><div class="line">    System.out.printf(<span class="string">"时区缩写字符串:%tZ%n"</span>, date);  </div><div class="line">    <span class="comment">//s的使用  </span></div><div class="line">    System.out.printf(<span class="string">"1970-1-1 00:00:00 到现在所经过的秒数：%ts%n"</span>, date);  </div><div class="line">    <span class="comment">//Q的使用  </span></div><div class="line">    System.out.printf(<span class="string">"1970-1-1 00:00:00 到现在所经过的毫秒数：%tQ%n"</span>, date);  </div><div class="line">    <span class="comment">/*</span></div><div class="line">    2位数字24时制的小时（不足2位前面补0）:11  </div><div class="line">    2位数字12时制的小时（不足2位前面补0）:11  </div><div class="line">    2位数字24时制的小时（前面不补0）:11  </div><div class="line">    2位数字12时制的小时（前面不补0）:11  </div><div class="line">    2位数字的分钟（不足2位前面补0）:03  </div><div class="line">    2位数字的秒（不足2位前面补0）:52  </div><div class="line">    3位数字的毫秒（不足3位前面补0）:773  </div><div class="line">    9位数字的毫秒数（不足9位前面补0）:773000000  </div><div class="line">    小写字母的上午或下午标记(英)：am  </div><div class="line">    小写字母的上午或下午标记（中）：上午  </div><div class="line">    相对于GMT的RFC822时区的偏移量:+0800  </div><div class="line">    时区缩写字符串:CST  </div><div class="line">    1970-1-1 00:00:00 到现在所经过的秒数：1347246232  </div><div class="line">    1970-1-1 00:00:00 到现在所经过的毫秒数：1347246232773  </div><div class="line">    */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="http://kgd1120.iteye.com/blog/1293633" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java 里面Serializable的说明]]></title>
      <url>http://dalufan.com/2014/09/06/java-Serializable/</url>
      <content type="html"><![CDATA[<h3 id="1、序列化是干什么的？"><a href="#1、序列化是干什么的？" class="headerlink" title="1、序列化是干什么的？"></a>1、序列化是干什么的？</h3><p>序列化。主要解决就是完成如何将JVM中的对象保存起来，当需要这个对象的时候，再把它读入内存。为了实现这个功能，便有这个序列化的方法。Serializable是一个对象序列化的接口，一个类只有实现了Serializable接口，它的对象才是可序列化的。因此如果要序列化某些类的对象，这些类就必须实现Serializable接口。而实际上，Serializable是一个空接口，没有什么具体内容，它的目的只是简单的标识一个类的对象可以被序列化。</p>
<a id="more"></a> 
<h3 id="2、什么情况下需要序列化"><a href="#2、什么情况下需要序列化" class="headerlink" title="2、什么情况下需要序列化"></a>2、什么情况下需要序列化</h3><pre><code>a）当你想把的内存中的对象状态保存到一个文件中或者数据库中时候；
b）当你想用套接字在网络上传送对象的时候；
c）当你想通过RMI传输对象的时候；
</code></pre><p>a)比如说你的内存不够用了，那计算机就要将内存里面的一部分对象暂时的保存到硬盘中，等到要用的时候再读入到内存中，硬盘的那部分存储空间就是所谓的虚拟内存。在比如过你要将某个特定的对象保存到文件中，我隔几天在把它拿出来用，那么这时候就要实现Serializable接口；</p>
<p>b)在进行java的Socket编程的时候，你有时候可能要传输某一类的对象，那么也就要实现Serializable接口；最常见的你传输一个字符串，它是JDK里面的类，也实现了Serializable接口，所以可以在网络上传输。</p>
<p>c)如果要通过远程的方法调用（RMI）去调用一个远程对象的方法，如在计算机A中调用另一台计算机B的对象的方法，那么你需要通过JNDI服务获取计算机B目标对象的引用，将对象从B传送到A，就需要实现序列化接口。</p>
<h3 id="3、当对一个对象实现序列化时，究竟发生了什么？"><a href="#3、当对一个对象实现序列化时，究竟发生了什么？" class="headerlink" title="3、当对一个对象实现序列化时，究竟发生了什么？"></a>3、当对一个对象实现序列化时，究竟发生了什么？</h3><p>在没有序列化前，每个保存在堆（Heap）中的对象都有相应的状态（state），即实例变量（instance ariable）比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Foo  myFoo = <span class="keyword">new</span> Foo();  </div><div class="line">myFoo .setWidth(<span class="number">37</span>);  </div><div class="line">myFoo.setHeight(<span class="number">70</span>);</div></pre></td></tr></table></figure>
<p>当通过下面的代码序列化之后，MyFoo对象中的width和Height实例变量的值（37，70）都被保存到foo.ser文件中，这样以后又可以把它从文件中读出来，重新在堆中创建原来的对象。当然保存时候不仅仅是保存对象的实例变量的值，JVM还要保存一些小量信息，比如类的类型等以便恢复原来的对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FileOutputStream fs = <span class="keyword">new</span> FileOutputStream(<span class="string">"foo.ser"</span>);  </div><div class="line">ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fs);  </div><div class="line">os.writeObject(myFoo);</div></pre></td></tr></table></figure>
<h3 id="4、实现序列化（保存到一个文件）的步骤"><a href="#4、实现序列化（保存到一个文件）的步骤" class="headerlink" title="4、实现序列化（保存到一个文件）的步骤"></a>4、实现序列化（保存到一个文件）的步骤</h3><ul>
<li>Make a FileOutputStream            </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FileOutputStream fs = <span class="keyword">new</span> FileOutputStream(<span class="string">"foo.ser"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>Make a ObjectOutputStream            </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ObjectOutputStream os =  <span class="keyword">new</span> ObjectOutputStream(fs);</div></pre></td></tr></table></figure>
<ul>
<li>write the object</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">os.writeObject(myObject1);  </div><div class="line">os.writeObject(myObject2);  </div><div class="line">os.writeObject(myObject3);</div></pre></td></tr></table></figure>
<ul>
<li>close the ObjectOutputStream</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">os.close();</div></pre></td></tr></table></figure>
<h3 id="5、举例说明"><a href="#5、举例说明" class="headerlink" title="5、举例说明"></a>5、举例说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">Box</span> <span class="keyword">implements</span> <span class="title">Serializable</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.width  = width;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> height)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.height = height;  </div><div class="line">    &#125;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        Box myBox = <span class="keyword">new</span> Box();  </div><div class="line">        myBox.setWidth(<span class="number">50</span>);  </div><div class="line">        myBox.setHeight(<span class="number">30</span>);  </div><div class="line">  </div><div class="line">        <span class="keyword">try</span>&#123;  </div><div class="line">            FileOutputStream fs = <span class="keyword">new</span> FileOutputStream(<span class="string">"foo.ser"</span>);  </div><div class="line">            ObjectOutputStream os =  <span class="keyword">new</span> ObjectOutputStream(fs);  </div><div class="line">            os.writeObject(myBox);  </div><div class="line">            os.close();  </div><div class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;  </div><div class="line">            ex.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6、相关注意事项"><a href="#6、相关注意事项" class="headerlink" title="6、相关注意事项"></a>6、相关注意事项</h3><pre><code>a）序列化时，只对对象的状态进行保存，而不管对象的方法；
b）当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口；
c）当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化；
d）并非所有的对象都可以序列化，,至于为什么不可以，有很多原因了,比如：
    1.安全方面的原因，比如一个对象拥有private，public等field，对于一个要传输的对象，比如写到文件，或者进行rmi传输  等等，在序列化进行传输的过程中，这个对象的private等域是不受保护的。
   2. 资源分配方面的原因，比如socket，thread类，如果可以序列化，进行传输或者保存，也无法对他们进行重新的资源分配，而且，也是没有必要这样实现。
</code></pre><hr>
<p>参考链接：<a href="http://xiebh.iteye.com/blog/121311" target="_blank" rel="external">ITEYE</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[eclipse中git解决冲突]]></title>
      <url>http://dalufan.com/2014/09/05/eclipse-git-merge/</url>
      <content type="html"><![CDATA[<p>1、工程-&gt;Team-&gt;同步：<br><img src="/article_images/eclipse-git-01.png" alt="alt"></p>
<p>2、从远程pull至本地，就会出现如下内容：<br><img src="/article_images/eclipse-git-02.png" alt="alt"></p>
<p>3、使用Merge Tool，执行第二项<br><img src="/article_images/eclipse-git-03.png" alt="alt"><br><img src="/article_images/eclipse-git-04.png" alt="alt"></p>
<a id="more"></a> 
<p>使用HEAD合并后的效果：<br><img src="/article_images/eclipse-git-05.png" alt="alt"></p>
<p>4、再手动修改<br><img src="/article_images/eclipse-git-06.png" alt="alt"></p>
<p>5、修改后的文件需要添加到git index中去：<br><img src="/article_images/eclipse-git-07.png" alt="alt"></p>
<p>6、冲突文件变为修改图标样式，再提交至本地，此时的提交便是merge合并：<br><img src="/article_images/eclipse-git-08.png" alt="alt"><br><img src="/article_images/eclipse-git-09.png" alt="alt"></p>
<p>7、此时需要pull的向下箭头和数量没了，注意图标的变化：<br><img src="/article_images/eclipse-git-10.png" alt="alt"></p>
<p>8、现在可以直接push到远程了：<br><img src="/article_images/eclipse-git-11.png" alt="alt"><br><img src="/article_images/eclipse-git-12.png" alt="alt"></p>
<p>此时configure-&gt;save and push一步步执行冲突就搞定了。</p>
<p>也可以<code>先merge，修改后直接commit</code></p>
<hr>
<p>参考链接：<a href="http://blog.csdn.net/rosten/article/details/17068285" target="_blank" rel="external">1</a><br>,<a href="http://blog.csdn.net/pandakong/article/details/7234974" target="_blank" rel="external">2</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java中枚举和常量定义的区别]]></title>
      <url>http://dalufan.com/2014/09/04/java-enum-final/</url>
      <content type="html"><![CDATA[<h3 id="一般定义常量"><a href="#一般定义常量" class="headerlink" title="一般定义常量"></a>一般定义常量</h3><p>我们通常利用public final static方法定义的代码如下，分别用1表示红灯，3表示绿灯，2表示黄灯。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</div><div class="line">        <span class="comment">/* 红灯 */</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> RED = <span class="number">1</span>;</div><div class="line">        <span class="comment">/* 绿灯 */</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> GREEN = <span class="number">3</span>;</div><div class="line">        <span class="comment">/* 黄灯 */</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> YELLOW = <span class="number">2</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<a id="more"></a> 
<h3 id="二、-枚举类型定义常量"><a href="#二、-枚举类型定义常量" class="headerlink" title="二、 枚举类型定义常量"></a>二、 枚举类型定义常量</h3><p>枚举类型的简单定义方法如下，我们似乎没办法定义每个枚举类型的值。比如我们定义红灯、绿灯和黄灯的代码可能如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Light &#123;</div><div class="line">        RED, GREEN, YELLOW;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们只能够表示出红灯、绿灯和黄灯，但是具体的值我们没办法表示出来。别急，既然枚举类型提供了构造函数，我们可以通过构造函数和覆写toString方法来实现。首先给Light枚举类型增加构造方法，然后每个枚举类型的值通过构造函数传入对应的参数，同时覆写toString方法，在该方法中返回从构造函数中传入的参数，改造后的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Light &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 利用构造函数传参</span></div><div class="line">    RED(<span class="number">1</span>), GREEN(<span class="number">3</span>), YELLOW(<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 定义私有变量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nCode;</div><div class="line"></div><div class="line">    <span class="comment">// 构造函数，枚举类型只能为私有</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Light</span><span class="params">(<span class="keyword">int</span> _nCode)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.nCode = _nCode;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> String.valueOf(<span class="keyword">this</span>.nCode);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     System.out.println(Light.RED) ;//1</div><div class="line">     */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、-完整示例代码"><a href="#三、-完整示例代码" class="headerlink" title="三、 完整示例代码"></a>三、 完整示例代码</h3><p>枚举类型的完整演示代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightTest</span> </span>&#123;</div><div class="line">    <span class="comment">// 1.定义枚举类型</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Light &#123;</div><div class="line">        <span class="comment">// 利用构造函数传参</span></div><div class="line">        RED(<span class="number">1</span>), GREEN(<span class="number">3</span>), YELLOW(<span class="number">2</span>);</div><div class="line">        <span class="comment">// 定义私有变量</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> nCode;</div><div class="line">        <span class="comment">// 构造函数，枚举类型只能为私有</span></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Light</span><span class="params">(<span class="keyword">int</span> _nCode)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.nCode = _nCode;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> String.valueOf(<span class="keyword">this</span>.nCode);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 1.遍历枚举类型</span></div><div class="line">        System.out.println(<span class="string">"演示枚举类型的遍历 ......"</span>);</div><div class="line">        testTraversalEnum();</div><div class="line">        <span class="comment">// 2.演示EnumMap对象的使用</span></div><div class="line">        System.out.println(<span class="string">"演示EnmuMap对象的使用和遍历....."</span>);</div><div class="line">        testEnumMap();</div><div class="line">        <span class="comment">// 3.演示EnmuSet的使用</span></div><div class="line">        System.out.println(<span class="string">"演示EnmuSet对象的使用和遍历....."</span>);</div><div class="line">        testEnumSet();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * </div><div class="line">     * 演示枚举类型的遍历</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testTraversalEnum</span><span class="params">()</span> </span>&#123;</div><div class="line">        Light[] allLight = Light.values();</div><div class="line">        <span class="keyword">for</span> (Light aLight : allLight) &#123;</div><div class="line">            System.out.println(<span class="string">"当前灯name："</span> + aLight.name());</div><div class="line">            System.out.println(<span class="string">"当前灯ordinal："</span> + aLight.ordinal());</div><div class="line">            System.out.println(<span class="string">"当前灯："</span> + aLight);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * </div><div class="line">     * 演示EnumMap的使用，EnumMap跟HashMap的使用差不多，只不过key要是枚举类型</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testEnumMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 1.演示定义EnumMap对象，EnumMap对象的构造函数需要参数传入,默认是key的类的类型</span></div><div class="line">        EnumMap&lt;Light, String&gt; currEnumMap = <span class="keyword">new</span> EnumMap&lt;Light, String&gt;(</div><div class="line">        Light.class);</div><div class="line">        currEnumMap.put(Light.RED, <span class="string">"红灯"</span>);</div><div class="line">        currEnumMap.put(Light.GREEN, <span class="string">"绿灯"</span>);</div><div class="line">        currEnumMap.put(Light.YELLOW, <span class="string">"黄灯"</span>);</div><div class="line">        <span class="comment">// 2.遍历对象</span></div><div class="line">        <span class="keyword">for</span> (Light aLight : Light.values()) &#123;</div><div class="line">            System.out.println(<span class="string">"[key="</span> + aLight.name() + <span class="string">",value="</span></div><div class="line">            + currEnumMap.get(aLight) + <span class="string">"]"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * </div><div class="line">     * 演示EnumSet如何使用，EnumSet是一个抽象类，获取一个类型的枚举类型内容&lt;BR/&gt;</div><div class="line">     * 可以使用allOf方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testEnumSet</span><span class="params">()</span> </span>&#123;</div><div class="line">        EnumSet&lt;Light&gt; currEnumSet = EnumSet.allOf(Light.class);</div><div class="line">        <span class="keyword">for</span> (Light aLightSetElement : currEnumSet) &#123;</div><div class="line">            System.out.println(<span class="string">"当前EnumSet中数据为："</span> + aLightSetElement);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    演示枚举类型的遍历 ......</div><div class="line">    当前灯name：RED</div><div class="line">    当前灯ordinal：0</div><div class="line">    当前灯：1</div><div class="line">    当前灯name：GREEN</div><div class="line">    当前灯ordinal：1</div><div class="line">    当前灯：3</div><div class="line">    当前灯name：YELLOW</div><div class="line">    当前灯ordinal：2</div><div class="line">    当前灯：2</div><div class="line">    演示EnmuMap对象的使用和遍历.....</div><div class="line">    [key=RED,value=红灯]</div><div class="line">    [key=GREEN,value=绿灯]</div><div class="line">    [key=YELLOW,value=黄灯]</div><div class="line">    演示EnmuSet对象的使用和遍历.....</div><div class="line">    当前EnumSet中数据为：1</div><div class="line">    当前EnumSet中数据为：3</div><div class="line">    当前EnumSet中数据为：2</div><div class="line">    */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、-通常定义常量方法和枚举定义常量方法区别"><a href="#四、-通常定义常量方法和枚举定义常量方法区别" class="headerlink" title="四、 通常定义常量方法和枚举定义常量方法区别"></a>四、 通常定义常量方法和枚举定义常量方法区别</h3><p>以下内容可能有些无聊，但绝对值得一窥</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ON = <span class="number">1</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OFF= <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有什么不好了，大家都这样用了很长时间了，没什么问题啊。</p>
<ol>
<li>首先，它不是类型安全的。你必须确保是int</li>
<li>其次，你还要确保它的范围是0和1</li>
<li>最后，很多时候你打印出来的时候，你只看到 1 和0 ，</li>
</ol>
<p>但其没有看到代码的人并不知道你的企图，抛弃你所有旧的public static final常量 </p>
<ol>
<li>可以创建一个enum类，把它看做一个普通的类。除了它不能继承其他类了。(java是单继承，它已经继承了Enum),</li>
<li>可以添加其他方法，覆盖它本身的方法</li>
<li>switch()参数可以使用enum了</li>
<li>values()方法是编译器插入到enum定义中的static方法，所以，当你将enum实例向上转型为父类Enum是，values()就不可访问了。解决办法：在Class中有一个getEnumConstants()方法，所以即便Enum接口中没有values()法，我们仍然可以通过Class对象取得所有的enum实例</li>
<li>无法从enum继承子类，如果需要扩展enum中的元素，在一个接口的内部，创建实现该接口的枚举，以此将元素进行分组。达到将枚举元素进行分组。</li>
<li>使用EnumSet代替标志。enum要求其成员都是唯一的，但是enum中不能删除添加元素。</li>
<li>EnumMap的key是enum，value是任何其他Object对象。</li>
<li>enum允许程序员为eunm实例编写方法。所以可以为每个enum实例赋予各自不同的行为。</li>
<li>使用enum的职责链(Chain of Responsibility) .这个关系到设计模式的职责链模式。以多种不同的方法来解决一个问题。然后将他们链接在一起。当一个请求到来时，遍历这个链，直到链中的某个解决方案能够处理该请求。</li>
<li>使用enum的状态机</li>
<li>使用enum多路分发</li>
</ol>
<hr>
<p>参考链接：<a href="http://www.cnblogs.com/happyPawpaw/archive/2013/04/09/3009553.html" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java中enum的用法详解]]></title>
      <url>http://dalufan.com/2014/09/03/java-enum/</url>
      <content type="html"><![CDATA[<h3 id="用法一：常量"><a href="#用法一：常量" class="headerlink" title="用法一：常量"></a>用法一：常量</h3><p>在JDK1.5 之前，我们定义常量都是： public static fianl…. 。现在好了，有了枚举，可以把相关的常量分组到一个枚举类型里，而且枚举提供了比常量更多的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">        System.out.println(Color.GREEN) ;<span class="comment">//GREEN</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">enum</span> Color &#123;  </div><div class="line">      RED, GREEN, BLANK, YELLOW  </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a> 
<h3 id="用法二：switch"><a href="#用法二：switch" class="headerlink" title="用法二：switch"></a>用法二：switch</h3><p>JDK1.6之前的switch语句只支持int,char,enum类型，使用枚举，能让我们的代码可读性更强。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Signal &#123;</div><div class="line">        GREEN, YELLOW, RED</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficLight</span> </span>&#123;</div><div class="line">        Signal color = Signal.RED;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (color) &#123;</div><div class="line">            <span class="keyword">case</span> RED:</div><div class="line">                color = Signal.GREEN;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> YELLOW:</div><div class="line">                color = Signal.RED;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> GREEN:</div><div class="line">                color = Signal.YELLOW;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="用法三：向枚举中添加新方法"><a href="#用法三：向枚举中添加新方法" class="headerlink" title="用法三：向枚举中添加新方法"></a>用法三：向枚举中添加新方法</h3><p>如果打算自定义自己的方法，那么必须在enum实例序列的最后<code>添加一个分号</code>。而且 Java 要求<code>必须先定义 enum 实例</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;</div><div class="line">    <span class="comment">//根据构造方法来定义的</span></div><div class="line">        RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);</div><div class="line">        <span class="comment">// 成员变量</span></div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index;</div><div class="line"></div><div class="line">        <span class="comment">// 构造方法</span></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">            <span class="keyword">this</span>.index = index;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 普通方法</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (Color c : Color.values()) &#123;</div><div class="line">                <span class="keyword">if</span> (c.getIndex() == index) &#123;</div><div class="line">                    <span class="keyword">return</span> c.name;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// get set 方法</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> name;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> index;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.index = index;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="用法四：覆盖枚举的方法"><a href="#用法四：覆盖枚举的方法" class="headerlink" title="用法四：覆盖枚举的方法"></a>用法四：覆盖枚举的方法</h3><p>下面给出一个toString()方法覆盖的例子。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;</div><div class="line">        RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);</div><div class="line">        <span class="comment">// 成员变量</span></div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index;</div><div class="line"></div><div class="line">        <span class="comment">// 构造方法</span></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">            <span class="keyword">this</span>.index = index;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 覆盖方法</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.index + <span class="string">"_"</span> + <span class="keyword">this</span>.name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(Color.RED.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="用法五：实现接口"><a href="#用法五：实现接口" class="headerlink" title="用法五：实现接口"></a>用法五：实现接口</h3><p>所有的枚举都继承自java.lang.Enum类。由于Java 不支持多继承，所以枚举对象不能再继承其他类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Behaviour</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</div><div class="line">        <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Color implements Behaviour &#123;</div><div class="line">        RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);</div><div class="line">        <span class="comment">// 成员变量</span></div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index;</div><div class="line"></div><div class="line">        <span class="comment">// 构造方法</span></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">            <span class="keyword">this</span>.index = index;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 接口方法</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 接口方法</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="keyword">this</span>.index + <span class="string">":"</span> + <span class="keyword">this</span>.name);</div><div class="line">        &#125;</div><div class="line">    &#125;   </div><div class="line">    <span class="comment">/*</span></div><div class="line">    System.out.println(Color.BLANK.getInfo()) ;//白色</div><div class="line">    */</div></pre></td></tr></table></figure>
<h3 id="用法六：使用接口组织枚举"><a href="#用法六：使用接口组织枚举" class="headerlink" title="用法六：使用接口组织枚举"></a>用法六：使用接口组织枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;</div><div class="line">    <span class="keyword">enum</span> Coffee implements Food &#123;</div><div class="line">        BLACK_COFFEE, DECAF_COFFEE, LATTE, CAPPUCCINO</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">enum</span> Dessert implements Food &#123;</div><div class="line">        FRUIT, CAKE, GELATO</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    System.out.println(Food.Coffee.CAPPUCCINO) ;//CAPPUCCINO</div><div class="line">    */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="用法七：关于枚举集合的使用"><a href="#用法七：关于枚举集合的使用" class="headerlink" title="用法七：关于枚举集合的使用"></a>用法七：关于枚举集合的使用</h3><p>java.util.EnumSet和java.util.EnumMap是两个枚举集合。EnumSet保证集合中的元素不重复;EnumMap中的 key是enum类型，而value则可以是任意类型。关于这个两个集合的使用就不在这里赘述，可以参考JDK文档</p>
<hr>
<p>参考链接：<a href="http://www.cnblogs.com/happyPawpaw/archive/2013/04/09/3009553.html" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git常用命令及思维导图]]></title>
      <url>http://dalufan.com/2014/05/17/git-api/</url>
      <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><img src="/article_images/git-order.jpg" alt="alt"></p>
<h4 id="一、git-clone"><a href="#一、git-clone" class="headerlink" title="一、git clone"></a>一、git clone</h4><pre><code>$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;
$ git clone https://github.com/jquery/jquery.git
</code></pre><p>如果&lt;本地目录名&gt; 没有给的话,会保存在当前目录</p>
<a id="more"></a> 
<h4 id="二、git-remote"><a href="#二、git-remote" class="headerlink" title="二、git remote"></a>二、git remote</h4><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。</p>
<p>不带选项的时候，git remote命令列出所有远程主机。</p>
<pre><code>$ git remote
origin
</code></pre><p>使用-v选项，可以参看远程主机的网址。</p>
<pre><code>$ git remote -v
origin  git@github.com:jquery/jquery.git (fetch)
origin  git@github.com:jquery/jquery.git (push)
</code></pre><p>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。<br>克隆版本库的时候，所使用的远程主机自动被Git命名为<code>origin</code>。如果想用其他的<code>主机名</code>，需要用git clone命令的-o选项指定。</p>
<pre><code>$ git clone -o jQuery https://github.com/jquery/jquery.git
$ git remote
jQuery
</code></pre><p>上面命令表示，克隆的时候，指定远程主机叫做jQuery。<br>git remote show命令加上主机名，可以查看该主机的详细信息。</p>
<pre><code>$ git remote show &lt;主机名&gt;
</code></pre><p>git remote add命令用于添加远程主机。</p>
<pre><code>$ git remote add &lt;主机名&gt; &lt;网址&gt;
</code></pre><p>git remote rm命令用于删除远程主机。</p>
<pre><code>$ git remote rm &lt;主机名&gt;
</code></pre><p>git remote rename命令用于远程主机的改名。</p>
<pre><code>$ git remote rename &lt;原主机名&gt; &lt;新主机名&gt;
</code></pre><h4 id="三、git-fetch"><a href="#三、git-fetch" class="headerlink" title="三、git fetch"></a>三、git fetch</h4><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</p>
<pre><code>$ git fetch &lt;远程主机名&gt;
</code></pre><p>上面命令将某个远程主机的更新，全部取回本地。<br>默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p>
<pre><code>$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;
//比如，取回origin主机的master分支。
$ git fetch origin master
</code></pre><p>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。<br>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。</p>
<pre><code>$ git branch -r
origin/master
$ git branch -a
* master
remotes/origin/master
</code></pre><p>上面命令表示，本地主机的当前分支是beta,远程分支是origin/master。<br>取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。</p>
<pre><code>$ git checkout -b newBrach origin/master
</code></pre><p>上面命令表示，在origin/master的基础上，创建一个新分支。<br>此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。</p>
<pre><code>$ git merge origin/master
# 或者
$ git rebase origin/master
</code></pre><p>上面命令表示在当前分支上，合并origin/master。</p>
<h4 id="四、git-pull"><a href="#四、git-pull" class="headerlink" title="四、git pull"></a>四、git pull</h4><p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>
<pre><code>$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;
</code></pre><p>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。</p>
<pre><code>$ git pull origin next:master
</code></pre><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>
<pre><code>$ git pull origin next
</code></pre><p>上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。</p>
<pre><code>$ git fetch origin
$ git merge origin/next
</code></pre><p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。<br>Git也允许手动建立追踪关系。</p>
<pre><code>git branch --set-upstream master origin/next
</code></pre><p>上面命令指定master分支追踪origin/next分支。<br>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p>
<pre><code>$ git pull origin
</code></pre><p>上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”（remote-tracking branch）进行合并。<br>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>
<pre><code>$ git pull
</code></pre><p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。<br>如果合并需要采用rebase模式，可以使用–rebase选项。</p>
<pre><code>$ git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;
</code></pre><h4 id="五、git-push"><a href="#五、git-push" class="headerlink" title="五、git push"></a>五、git push</h4><p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</p>
<pre><code>$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;
</code></pre><p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。<br>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>
<pre><code>$ git push origin master
</code></pre><p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。<br>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p>
<pre><code>$ git push origin :master
# 等同于
$ git push origin --delete master
</code></pre><p>上面命令表示删除origin主机的master分支。<br>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>
<pre><code>$ git push origin
</code></pre><p>上面命令表示，将当前分支推送到origin主机的对应分支。<br>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>
<pre><code>$ git push
</code></pre><p>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</p>
<pre><code>$ git push -u origin master
</code></pre><p>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。<br>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>
<pre><code>$ git config --global push.default matching
# 或者
$ git config --global push.default simple
</code></pre><p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。</p>
<pre><code>$ git push --all origin
</code></pre><p>上面命令表示，将所有本地分支都推送到origin主机。<br>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。</p>
<pre><code>$ git push --force origin 
</code></pre><p>上面命令使用–force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用–force选项。<br>最后，git push不会推送标签（tag），除非使用–tags选项。</p>
<pre><code>$ git push origin --tags
</code></pre><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="/article_images/git-api.png" alt="alt"></p>
<hr>
<p>参考链接：<a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java是传值还是传引用]]></title>
      <url>http://dalufan.com/2014/03/25/java-trans/</url>
      <content type="html"><![CDATA[<h3 id="结论写在前面"><a href="#结论写在前面" class="headerlink" title="结论写在前面"></a>结论写在前面</h3><p>一直都有点迷惑,现在弄清楚</p>
<ul>
<li><p>Java 应用程序中的变量可以为以下两种类型之一：引用类型或基本类型。当作为参数传递给一个方法时，处理这两种类型的方式是相同的。两种类型都是按值传递的；没有一种按引用传递。这是一个重要特性，正如随后的代码示例所示的那样。</p>
</li>
<li><p>在继续讨论之前，定义按值传递和按引用传递这两个术语是重要的。按值传递意味着当将一个参数传递给一个函数时，函数接收的是原始值的一个副本。因此，如果函数修改了该参数，仅改变副本，而原始值保持不变。按引用传递意味着当将一个参数传递给一个函数时，函数接收的是原始值的内存地址，而不是值的副本。因此，如果函数修改了该参数，调用代码中的原始值也随之改变。</p>
</li>
</ul>
<a id="more"></a> 
<p>① 对于基本类型变量(int、long、double、float、byte、boolean、char)，Java是传值的副本。(这里Java和C++相同)</p>
<p>② 对于一切对象型变量，Java都是传引用的副本。其实传引用副本的实质就是复制指向地址的指针，只不过Java不像C++中有显著的*和&amp;符号。(这里Java和C++不同，在C++中，当参数是引用类型时，传递的是真实引用而不是引用副本)</p>
<p>需要注意的是：String类型也是对象型变量，所以它必然是传引用副本。不要因为String在Java里面非常易于使用，而且不需要new，就被蒙蔽而把String当做基本变量类型。<code>只不过String是一个非可变类，每次操作都是新生成一个String对象，使得其传值还是传引用显得**没什么区别**</code>。</p>
<h4 id="1-原始类型就是传值"><a href="#1-原始类型就是传值" class="headerlink" title="1.原始类型就是传值"></a>1.原始类型就是传值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</div><div class="line">        <span class="keyword">int</span> i2 = i;</div><div class="line">        i2 = <span class="number">6</span>;</div><div class="line">        System.out.println(i);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    *5</div><div class="line">    */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-对象就是传引用"><a href="#2-对象就是传引用" class="headerlink" title="2.对象就是传引用"></a>2.对象就是传引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        StringBuffer s = <span class="keyword">new</span> StringBuffer(<span class="string">"good"</span>);</div><div class="line">        StringBuffer s2 = s;</div><div class="line">        s2.append(<span class="string">" afternoon"</span>);</div><div class="line">        System.out.println(s);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    *good afternoon</div><div class="line">    */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对基本类型而言，传值就是把自己复制一份传递，即使自己的副本变了，自己也不变。而对于对象类型而言，它传的引用副本(类似于C++中的指针)指向自己的地址，而不是自己实际值的副本。为什么要这么做呢？因为对象类型是放在堆里的，一方面，速度相对于基本类型比较慢，另一方面，对象类型本身比较大，如果采用重新复制对象值的办法，浪费内存且速度又慢。就像你要张三(张三相当于函数)打开仓库并检查库里面的货物(仓库相当于地址)，有必要新建一座仓库(并放入相同货物)给张三么? 没有必要，你只需要把钥匙(引用)复制一把寄给张三就可以了，张三会拿备用钥匙(引用副本，但是有时效性，函数结束，钥匙销毁)打开仓库。</p>
<h4 id="一个复杂的例子"><a href="#一个复杂的例子" class="headerlink" title="一个复杂的例子"></a>一个复杂的例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        StringBuffer s = <span class="keyword">new</span> StringBuffer(<span class="string">"good"</span>);</div><div class="line">        StringBuffer s2 = <span class="keyword">new</span> StringBuffer(<span class="string">"bad"</span>);</div><div class="line">        test(s, s2);</div><div class="line">        System.out.println(<span class="string">"-----------------"</span>);<span class="comment">// 9</span></div><div class="line">        System.out.println(s);<span class="comment">// 9</span></div><div class="line">        System.out.println(s2);<span class="comment">// 10</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(StringBuffer s, StringBuffer s2)</span> </span>&#123;</div><div class="line">        System.out.println(s);<span class="comment">// 1</span></div><div class="line">        System.out.println(s2);<span class="comment">// 2</span></div><div class="line">        s2 = s;<span class="comment">// 3</span></div><div class="line">        s = <span class="keyword">new</span> StringBuffer(<span class="string">"new"</span>);<span class="comment">// 4</span></div><div class="line">        System.out.println(s);<span class="comment">// 5</span></div><div class="line">        System.out.println(s2);<span class="comment">// 6</span></div><div class="line">        s.append(<span class="string">"hah"</span>);<span class="comment">// 7  这个s已经不是传递过来的s了</span></div><div class="line">        s2.append(<span class="string">"hah"</span>);<span class="comment">// 8 而s2此时指向的是传递过来的s</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    *good</div><div class="line">    *bad</div><div class="line">    *new</div><div class="line">    *good</div><div class="line">    *-----------------</div><div class="line">    *goodhah</div><div class="line">    *bad</div><div class="line">    */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>过程如下图:</p>
<p><img src="/article_images/java-trans.png" alt="alt"></p>
<h4 id="3-final的效果"><a href="#3-final的效果" class="headerlink" title="3.final的效果"></a>3.final的效果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        StringBuffer s = <span class="keyword">new</span> StringBuffer(<span class="string">"good"</span>);</div><div class="line">        StringBuffer s2 = <span class="keyword">new</span> StringBuffer(<span class="string">"bad"</span>);</div><div class="line">        System.out.println(<span class="string">"1-&gt;"</span>+s);</div><div class="line">        System.out.println(<span class="string">"2-&gt;"</span>+s2);</div><div class="line">        test(s, s2);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">2000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"-----------------"</span>);</div><div class="line">        System.out.println(<span class="string">"3-&gt;"</span>+s);</div><div class="line">        System.out.println(<span class="string">"4-&gt;"</span>+s2);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> StringBuffer s, <span class="keyword">final</span> StringBuffer s2)</span> </span>&#123;</div><div class="line">        Thread t = <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                s.append(<span class="string">"nice-&gt;s"</span>) ;</div><div class="line">                System.out.println(s);</div><div class="line">            &#125;&#125; ;</div><div class="line">        t.start();</div><div class="line">        s2.append(<span class="string">"nice-&gt;s2"</span>) ;</div><div class="line">        System.out.println(s2);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     1-&gt;good</div><div class="line">    2-&gt;bad</div><div class="line">    badnice-&gt;s2</div><div class="line">    goodnice-&gt;s</div><div class="line">    -----------------</div><div class="line">    3-&gt;goodnice-&gt;s</div><div class="line">    4-&gt;badnice-&gt;s2</div><div class="line">     */</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[详解COOKIE与SESSION的区别]]></title>
      <url>http://dalufan.com/2014/03/25/session-cookie/</url>
      <content type="html"><![CDATA[<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>具体来说cookie机制采用的是在客户端保持状态的方案。它是在用户端的会话状态的存贮机制，他需要用户打开客户端的cookie支持。cookie的作用就是为了解决HTTP协议无状态的缺陷所作的努力.</p>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>而session机制采用的是一种在客户端与服务器之间保持状态的解决方案。同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的。而session提供了方便管理全局变量的方式,session是针对每一个用户的，变量的值保存在服务器上，用一个sessionID来区分是哪个用户session变量,这个值是通过用户的浏览器在访问的时候返回给服务器，当客户禁用cookie时，这个值也可能设置为由get来返回给服务器。</p>
<a id="more"></a> 
<h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>当你访问一个使用session的站点，同时在自己机子上建立一个cookie，建立在服务器端的SESSION机制更安全些.因为它不会任意读取客户存储的信息。</p>
<p>正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie<br>从网络服务器观点看所有HTTP请求都独立于先前请求。就是说每一个HTTP响应完全依赖于相应请求中包含的信息<br>状态管理机制克服了HTTP的一些限制并允许网络客户端及服务器端维护请求间的关系。在这种关系维持的期间叫做会话(session)。<br>Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器。<br>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。</p>
<p>当程序需要为某个客户端的请求创建一个session的时候，服务器首先检查这个客户端的请求里是否已包含了一个session标识 - 称为 session id，如果已包含一个session id则说明以前已经为此客户端创建过session，服务器就按照session id把这个 session检索出来使用（如果检索不到，可能会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个 session id将被在本次响应中返回给客户端保存。</p>
<p>在谈论session机制的时候，常常听到这样一种误解“只要关闭浏览器，session就消失了”。其实可以想象一下会员卡的例子，除非顾客主动对店家提出销卡，否则店家绝对不会轻易删除顾客的资料。对session来说也是一样的，除非程序通知服务器删除一个session，否则服务器会一直保留，程序一般都是在用户做log off的时候发个指令去删除session。然而浏览器从来不会主动在关闭之前通知服务器它将要关闭，因此服务器根本不会有机会知道浏览器已经关闭，之所以会有这种错觉，是大部分session机制都使用会话cookie来保存session id，而关闭浏览器后这个 session id就消失了，再次连接服务器时也就无法找到原来的session。如果服务器设置的cookie被保存到硬盘上，或者使用某种手段改写浏览器发出的HTTP请求头，把原来的session id发送给服务器，则再次打开浏览器仍然能够找到原来的session。</p>
<p>恰恰是由于关闭浏览器不会导致session被删除，迫使服务器为seesion设置了一个失效时间，当距离客户端上一次使用session的时间超过这个失效时间时，服务器就可以认为客户端已经停止了活动，才会把session删除以节省存储空间。</p>
<p>大家都知道，http是无状态的协议，客户每次读取web页面时，服务器都打开新的会话，而且服务器也不会自动维护客户的上下文信息，那么要怎么才能实现网上商店中的购物车呢，session就是一种保存上下文信息的机制，它是针对每一个用户的，变量的值保存在服务器端，通过SessionID来区分不同的客户,session是以cookie或URL重写为基础的，默认使用cookie来实现，系统会创造一个名为JSESSIONID的输出cookie，我们叫做session cookie,以区别persistent cookies,也就是我们通常所说的cookie,注意session cookie是存储于浏览器内存中的，并不是写到硬盘上的，这也就是我们刚才看到的JSESSIONID，我们通常情是看不到JSESSIONID的，但是当我们把浏览器的cookie禁止后，web服务器会采用URL重写的方式传递Sessionid，我们就可以在地址栏看到sessionid=KWJHUG6JJM65HS2K6之类的字符串。</p>
<p>明白了原理，我们就可以很容易的分辨出persistent cookies和session cookie的区别了，网上那些关于两者安全性的讨论也就一目了然了，session cookie针对某一次会话而言，会话结束session cookie也就随着消失了，而persistent cookie只是存在于客户端硬盘上的一段文本（通常是加密的），而且可能会遭到cookie欺骗以及针对cookie的跨站脚本攻击，自然不如session cookie安全了。</p>
<p>通常session cookie是不能跨窗口使用的，当你新开了一个浏览器窗口进入相同页面时，系统会赋予你一个新的sessionid，这样我们信息共享的目的就达不到了，此时我们可以先把sessionid保存在persistent cookie中，然后在新窗口中读出来，就可以得到上一个窗口SessionID了，这样通过session cookie和persistent cookie的结合我们就实现了跨窗口的session tracking（会话跟踪）。<br>在一些web开发的书中，往往只是简单的把Session和cookie作为两种并列的http传送信息的方式，session cookies位于服务器端，persistent cookie位于客户端，可是session又是以cookie为基础的，明白的两者之间的联系和区别，我们就不难选择合适的技术来开发web service了。</p>
<hr>
<p>参考链接：<a href="http://blog.sina.com.cn/s/blog_59e16a4d0100q3yn.html" target="_blank" rel="external">1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[String和StringBuffer的区别]]></title>
      <url>http://dalufan.com/2014/02/16/string-stringbuffer/</url>
      <content type="html"><![CDATA[<p>1、 String既属于引用类型也属于基础数据类型，而且内容是静态的，在通常情况效率高些，但如果涉及到连接字符串的时候，对于String每次连接都要重新分配内存，因此StringBuffer好些</p>
<p>总之，对于静态处理，如：储存字符串，用String动态改变字符串内容则使用StringBuffer</p>
<a id="more"></a> 
<p>2、<br>说StringBuffer比String高是指在进行字符串相加操作的时候，尤其是大量拼接字符串的时候。<br>类似</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   String s = <span class="string">""</span>;</div><div class="line">StringBuffer b = <span class="keyword">new</span> StringBuffer();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">  s += i;</div><div class="line">  b.append(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的代码，b.append的效率远远比String相加快得多，这是因为append不需要每次都复制一次原来字符串的值。</p>
<p>如果你的需求不需要在多线程中共享使用，应该使用StringBuilder，这个线程不安全，但是更高效</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java反射Demo]]></title>
      <url>http://dalufan.com/2013/08/24/java-reflection/</url>
      <content type="html"><![CDATA[<h3 id="反射的概念"><a href="#反射的概念" class="headerlink" title="反射的概念"></a>反射的概念</h3><p>反射含义：可以获取正在运行的Java对象。</p>
<h3 id="Java反射的功能"><a href="#Java反射的功能" class="headerlink" title="Java反射的功能"></a>Java反射的功能</h3><ol>
<li>可以判断运行时对象所属的类</li>
<li>可以判断运行时对象所具有的成员变量和方法</li>
<li>通过反射甚至可以调用到private的方法</li>
<li>生成动态代理</li>
</ol>
<a id="more"></a> 
<h3 id="实现Java反射的类"><a href="#实现Java反射的类" class="headerlink" title="实现Java反射的类"></a>实现Java反射的类</h3><ol>
<li>Class：它表示正在运行的Java应用程序中的类和接口</li>
<li>Field：提供有关类或接口的属性信息，以及对它的动态访问权限</li>
<li>Constructor：提供关于类的单个构造方法的信息以及对它的访问权限</li>
<li>Method：提供关于类或接口中某个方法信息<br>　　<br>注意：Class类是Java反射中最重要的一个功能类，所有获取对象的信息(包括：方法/属性/构造方法/访问权限)都需要它来实现</li>
</ol>
<h3 id="编写Java反射程序的步骤："><a href="#编写Java反射程序的步骤：" class="headerlink" title="编写Java反射程序的步骤："></a>编写Java反射程序的步骤：</h3><p>1.必须首先获取一个类的Class对象，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class c1 = Test.class;</div><div class="line">Class c2 = Class.forName(“com.reflection.Test”);</div><div class="line">Class c3 = <span class="keyword">new</span> Test().getClass();</div></pre></td></tr></table></figure>
<p>2.然后分别调用Class对象中的方法来获取一个类的属性/方法/构造方法的结构</p>
<p>注意：如果要能够正常的获取类中方法/属性/构造方法，应该重点掌握如下的反射类</p>
<ul>
<li>Field</li>
<li>Constructor</li>
<li>Method</li>
</ul>
<p>Demo <em>TestReflection.java</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.dalu.reflect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflection</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] age;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestReflection</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestReflection</span><span class="params">(String u, String p)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = u;</div><div class="line">        <span class="keyword">this</span>.password = p;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPassWord</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</div><div class="line">        Class c1 = TestReflection.class;</div><div class="line">        Class c2 = Class.forName(<span class="string">"com.dalu.reflect.TestReflection"</span>);</div><div class="line">        <span class="comment">// 获取指定的包名</span></div><div class="line">        String package01 = c1.getPackage().getName();</div><div class="line">        String package02 = c2.getPackage().getName();</div><div class="line">        System.out.println(<span class="string">"package01 = "</span> + package01);</div><div class="line">        System.out.println(<span class="string">"package02 = "</span> + package02);</div><div class="line">        <span class="comment">// 获取类的修饰符</span></div><div class="line">        <span class="keyword">int</span> mod = c1.getModifiers();</div><div class="line">        String modifier = Modifier.toString(mod);</div><div class="line">        System.out.println(<span class="string">"modifier = "</span> + modifier);</div><div class="line">        <span class="comment">// 获取指定类的完全限定名</span></div><div class="line">        String className = c1.getName();</div><div class="line">        System.out.println(<span class="string">"className = "</span> + className);</div><div class="line">        <span class="comment">// 获取指定类的父类</span></div><div class="line">        Class superClazz = c1.getSuperclass();</div><div class="line">        String superClazzName = superClazz.getName();</div><div class="line">        System.out.println(<span class="string">"superClazzName = "</span> + superClazzName);</div><div class="line">        <span class="comment">// 获取实现的接口</span></div><div class="line">        Class[] interfaces = c1.getInterfaces();</div><div class="line">        <span class="keyword">for</span> (Class t : interfaces) &#123;</div><div class="line">            System.out.println(<span class="string">"interfacesName = "</span> + t.getName());</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 获取指定类的成员变量</span></div><div class="line">        Field[] fields = c1.getDeclaredFields();</div><div class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">            modifier = Modifier.toString(field.getModifiers()); <span class="comment">// 获取每个字段的访问修饰符</span></div><div class="line">            Class type = field.getType(); <span class="comment">// 获取字段的数据类型所对应的Class对象</span></div><div class="line">            String name = field.getName(); <span class="comment">// 获取字段名</span></div><div class="line">            <span class="keyword">if</span> (type.isArray()) &#123; <span class="comment">// 如果是数组类型则需要特别处理</span></div><div class="line">                String arrType = type.getComponentType().getName() + <span class="string">"[]"</span>;</div><div class="line">                System.out.println(<span class="string">""</span> + modifier + <span class="string">" "</span> + arrType + <span class="string">" "</span> + name</div><div class="line">                        + <span class="string">";"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">""</span> + modifier + <span class="string">" "</span> + type + <span class="string">" "</span> + name</div><div class="line">                        + <span class="string">";"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 获取类的构造方法</span></div><div class="line">        Constructor[] constructors = c1.getDeclaredConstructors();</div><div class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</div><div class="line">            String name = constructor.getName(); <span class="comment">// 构造方法名</span></div><div class="line">            modifier = Modifier.toString(constructor.getModifiers()); <span class="comment">// 获取访问修饰符</span></div><div class="line">            System.out.println(<span class="string">""</span> + modifier + <span class="string">" "</span> + name + <span class="string">"("</span>);</div><div class="line">            Class[] paramTypes = constructor.getParameterTypes(); <span class="comment">// 获取构造方法中的参数</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramTypes.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</div><div class="line">                    System.out.print(<span class="string">","</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (paramTypes[i].isArray()) &#123;</div><div class="line">                    System.out.println(paramTypes[i].getComponentType()</div><div class="line">                            .getName() + <span class="string">"[]"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    System.out.print(paramTypes[i].getName());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">");"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 获取成员方法</span></div><div class="line">        Method[] methods = c1.getDeclaredMethods();</div><div class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">            modifier = Modifier.toString(method.getModifiers());</div><div class="line">            Class returnType = method.getReturnType(); <span class="comment">// 获取方法的返回类型</span></div><div class="line">            <span class="keyword">if</span> (returnType.isArray()) &#123;</div><div class="line">                String arrType = returnType.getComponentType().getName() + <span class="string">"[]"</span>;</div><div class="line">                System.out.print(<span class="string">""</span> + modifier + <span class="string">" "</span> + arrType + <span class="string">" "</span></div><div class="line">                        + method.getName() + <span class="string">"("</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.print(<span class="string">""</span> + modifier + <span class="string">" "</span> + returnType.getName()</div><div class="line">                        + <span class="string">" "</span> + method.getName() + <span class="string">"("</span>);</div><div class="line">            &#125;</div><div class="line">            Class[] paramTypes = method.getParameterTypes();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramTypes.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</div><div class="line">                    System.out.print(<span class="string">","</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (paramTypes[i].isArray()) &#123;</div><div class="line">                    System.out.println(paramTypes[i].getComponentType()</div><div class="line">                            .getName() + <span class="string">"[]"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    System.out.print(paramTypes[i].getName());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">");"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> InstantiationException,</span></div><div class="line">            IllegalAccessException, SecurityException, NoSuchMethodException,</div><div class="line">            IllegalArgumentException, InvocationTargetException &#123;</div><div class="line">        <span class="comment">// 反射调用方法，可以通过Method类的invoke方法实现动态方法的调用</span></div><div class="line">        <span class="comment">// public Object invoke(Object obj, Object... args)</span></div><div class="line">        <span class="comment">// 第一个参数代表对象</span></div><div class="line">        <span class="comment">// 第二个参数代表执行方法上的参数</span></div><div class="line">        <span class="comment">// 若反射要调用类的某个私有方法，可以在这个私有方法对应的Mehtod对象上先调用setAccessible(true)</span></div><div class="line">        Class c1 = TestReflection.class;</div><div class="line">        TestReflection t1 = (TestReflection) c1.newInstance(); <span class="comment">// 利用反射来创建类的对象</span></div><div class="line">        System.out.println(<span class="string">"username == "</span> + t1.username);</div><div class="line">        System.out.println(<span class="string">"password == "</span> + t1.password);</div><div class="line">        Method method = c1.getDeclaredMethod(<span class="string">"setUserName"</span>, String.class);</div><div class="line">        method.invoke(t1, <span class="string">"Java反射的学习"</span>);</div><div class="line">        System.out.println(<span class="string">"username == "</span> + t1.username);</div><div class="line">        method = c1.getDeclaredMethod(<span class="string">"setPassWord"</span>, String.class);</div><div class="line">        method.setAccessible(<span class="keyword">true</span>);</div><div class="line">        method.invoke(t1, <span class="string">"反射执行某个Private修饰的方法"</span>);</div><div class="line">        System.out.println(<span class="string">"password == "</span> + t1.password);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException,</span></div><div class="line">            SecurityException, IllegalArgumentException,</div><div class="line">            InstantiationException, IllegalAccessException,</div><div class="line">            NoSuchMethodException, InvocationTargetException &#123;</div><div class="line">        test01();</div><div class="line">        System.out.println(<span class="string">"------------------------- "</span>);</div><div class="line">        test02();</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/***</span></div><div class="line">    package01 = com.dalu.reflect</div><div class="line">    package02 = com.dalu.reflect</div><div class="line">    modifier = public</div><div class="line">    className = com.dalu.reflect.TestReflection</div><div class="line">    superClazzName = java.lang.Object</div><div class="line">    private class java.lang.String username;</div><div class="line">    private class java.lang.String password;</div><div class="line">    private int[] age;</div><div class="line">    public com.dalu.reflect.TestReflection(</div><div class="line">    );</div><div class="line">    public com.dalu.reflect.TestReflection(</div><div class="line">    java.lang.String,java.lang.String);</div><div class="line">    public void setUserName(java.lang.String);</div><div class="line">    private void setPassWord(java.lang.String);</div><div class="line">    public static void test01();</div><div class="line">    public static void test02();</div><div class="line">    public static void main(java.lang.String[]</div><div class="line">    );</div><div class="line">    ------------------------- </div><div class="line">    username == null</div><div class="line">    password == null</div><div class="line">    username == Java反射的学习</div><div class="line">    password == 反射执行某个Private修饰的方法</div><div class="line"></div><div class="line">**/</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu命令学习记录]]></title>
      <url>http://dalufan.com/2013/05/17/ubuntu_order/</url>
      <content type="html"><![CDATA[<h3 id="1-tree"><a href="#1-tree" class="headerlink" title="1. tree"></a>1. tree</h3><pre><code>简介：树状显示目录结构          
eg. tree xxx  (xxx为目录名称)          
安装: sudo apt-get install tree           
</code></pre><a id="more"></a> 
<h3 id="2-pdf2htmlex"><a href="#2-pdf2htmlex" class="headerlink" title="2. pdf2htmlex"></a>2. pdf2htmlex</h3><pre><code>简介: PDF 转为 html    
</code></pre><p><a href="https://github.com/coolwanglu/pdf2htmlEX/wiki/QuickStart" target="_blank" rel="external">详情参见</a></p>
<h3 id="3-端口使用情况查看"><a href="#3-端口使用情况查看" class="headerlink" title="3.端口使用情况查看"></a>3.端口使用情况查看</h3><pre><code>简介： netstat -anp | grep 80
示例查看80端口的使用情况
netstat -anp | grep 80
</code></pre><h3 id="4-使得设置立即生效"><a href="#4-使得设置立即生效" class="headerlink" title="4.使得设置立即生效"></a>4.使得设置立即生效</h3><pre><code>简介： source file
示例 ~/.bashrc立即生效
source ~/.bashrc 或者
. ~/.bashrc
</code></pre><h3 id="5-数据流重定向"><a href="#5-数据流重定向" class="headerlink" title="5.数据流重定向"></a>5.数据流重定向</h3><pre><code>简介： 使原本输出到屏幕上的内容输入到文件或者从文件得到输入显示到屏幕上
    1. 标准输入(stdin) :代码为 0 ,使用 &lt; 或 &lt;&lt; ;
    2. 标准输出(stdout):代码为 1 ,使用 &gt; 或 &gt;&gt; ;
    3. 标准错误输出(stderr):代码为 2 ,使用 2&gt; 或 2&gt;&gt; ;
    • 1&gt; :是将正确的数据输出到指定的地方去
    • 2&gt; :是将错误的数据输出到指定的地方去
示例 输入到文件
    ls -l /home &gt; ~/rootfile
说明 如果rootfile不存在,则创建,否则清空内容再插入
    如要保留原rootfile的内容,则使用&gt;&gt;
    eg:ls -l /home &gt;&gt; ~/rootfile
示例 同时输出错误和正确信息
    find /home -name testing &gt; list_right 2&gt; list_error
    如果只想输出正确内容,而错误内容被丢弃,则如下:
    find /home -name testing &gt; list_right 2&gt; /dev/null
    /dev/null 是什么呢? 就有点像是一个『黑洞』的垃圾桶功能!当你输入的任何东西导向到这个虚拟的垃圾桶装置时, 『他就会凭空消失不见了~~』
    如果想把正确和错误的内容写入同一个文件时,应为:
    find /home -name testing &gt; list 2&gt;&amp;1
    而不是:find /home -name testing &gt; list 2&gt; list
示例 输入和输出
    cat &gt; catfile &lt; somefile
    会把somefile文件中的内容写入到catfile文件中
    &lt;&lt;的用法
    一般cat 的结束输入符号为ctrl + D
    现在可以这样来做 cat &gt; newfile &lt;&lt;eof
    此时可以在终端中向newfile写内容,当输入完成时,输入eof即可保存退出
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Text 2使用简介]]></title>
      <url>http://dalufan.com/2013/05/17/sublime-text-2/</url>
      <content type="html"><![CDATA[<h3 id="Ubuntu-install-sublime"><a href="#Ubuntu-install-sublime" class="headerlink" title="Ubuntu install sublime"></a>Ubuntu install sublime</h3><pre><code>sudo add-apt-repository ppa:webupd8team/sublime-text-2
sudo apt-get update
sudo apt-get install sublime-text
</code></pre><a id="more"></a> 
<h3 id="插件使用方法："><a href="#插件使用方法：" class="headerlink" title="插件使用方法："></a>插件使用方法：</h3><pre><code>Ctrl+Shift+P 调用命令面板，我们就会找到一些以“Package Control:”开头的命令，
我们常用到的有如下几个： 
Install Package (安装扩展)、
List Packages (列出全部扩展)、
Remove Package (移除扩展)、
Upgrade Package (升级扩展)  
</code></pre><h3 id="Sublime-Text2-快捷键汇总"><a href="#Sublime-Text2-快捷键汇总" class="headerlink" title="Sublime Text2 快捷键汇总"></a>Sublime Text2 快捷键汇总</h3><pre><code>Ctrl+D 选词 （反复按快捷键，即可继续向下同时选中下一个相同的文本进行同时编辑）
Ctrl+G 跳转到相应的行
Ctrl+J 合并行（已选择需要合并的多行时）
Ctrl+L 选择整行（按住-继续选择下行）
Ctrl+M 光标移动至括号内开始或结束的位置
Ctrl+T 词互换
Ctrl+U 软撤销
Ctrl+P 查找当前项目中的文件和快速搜索；输入 @ 查找文件主标题/函数；或者输入 : 跳转到文件某行；
Ctrl+R 快速列出/跳转到某个函数
Ctrl+K Backspace 从光标处删除至行首
Ctrl+KB 开启/关闭侧边栏
Ctrl+KK 从光标处删除至行尾
Ctrl+KT 折叠属性
Ctrl+KU 改为大写
Ctrl+KL 改为小写
Ctrl+K0 展开所有
Ctrl+Enter 插入行后（快速换行）
Ctrl+Tab 当前窗口中的标签页切换
Ctrl+Shift+A 选择光标位置父标签对儿
Ctrl+Shift+D 复制光标所在整行，插入在该行之前
ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找
Ctrl+Shift+K 删除整行
Ctrl+Shift+L 鼠标选中多行（按下快捷键），即可同时编辑这些行
Ctrl+Shift+M 选择括号内的内容（按住-继续选择父括号）
Ctrl+Shift+P 打开命令面板
Ctrl+Shift+/ 注释已选择内容
Ctrl+Shift+↑可以移动此行代码，与上行互换
Ctrl+Shift+↓可以移动此行代码，与下行互换
Ctrl+Shift+[ 折叠代码
Ctrl+Shift+] 展开代码
Ctrl+Shift+Enter 光标前插入行
Ctrl+PageDown 、Ctrl+PageUp 文件按开启的前后顺序切换
Ctrl+Z 撤销
Ctrl+Y 恢复撤销
Ctrl+F2 设置书签
Ctrl+/ 注释整行（如已选择内容，同“Ctrl+Shift+/”效果）
Ctrl+鼠标左键 可以同时选择要编辑的多处文本
Shift+鼠标右键（或使用鼠标中键）可以用鼠标进行竖向多行选择
Shift+F2 上一个书签
Shift+Tab 去除缩进
Alt+Shift+1~9（非小键盘）屏幕显示相等数字的小窗口
Alt+. 闭合当前标签
Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑
Tab 缩进 自动完成
F2 下一个书签
F9 行排序(按a-z)
F11 全屏模式
</code></pre>]]></content>
    </entry>
    
  
  
</search>
